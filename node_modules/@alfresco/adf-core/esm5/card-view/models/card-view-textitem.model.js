/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CardViewBaseItemModel } from './card-view-baseitem.model';
var CardViewTextItemModel = /** @class */ (function (_super) {
    tslib_1.__extends(CardViewTextItemModel, _super);
    function CardViewTextItemModel(cardViewTextItemProperties) {
        var _this = _super.call(this, cardViewTextItemProperties) || this;
        _this.type = 'text';
        _this.multiline = !!cardViewTextItemProperties.multiline;
        _this.pipes = cardViewTextItemProperties.pipes || [];
        return _this;
    }
    Object.defineProperty(CardViewTextItemModel.prototype, "displayValue", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.isEmpty()) {
                return this.default;
            }
            else {
                return this.applyPipes(this.value);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} displayValue
     * @return {?}
     */
    CardViewTextItemModel.prototype.applyPipes = /**
     * @private
     * @param {?} displayValue
     * @return {?}
     */
    function (displayValue) {
        if (this.pipes.length) {
            displayValue = this.pipes.reduce(function (accumulator, _a) {
                var pipe = _a.pipe, _b = _a.params, params = _b === void 0 ? [] : _b;
                return pipe.transform.apply(pipe, tslib_1.__spread([accumulator], params));
            }, displayValue);
        }
        return displayValue;
    };
    return CardViewTextItemModel;
}(CardViewBaseItemModel));
export { CardViewTextItemModel };
if (false) {
    /** @type {?} */
    CardViewTextItemModel.prototype.type;
    /** @type {?} */
    CardViewTextItemModel.prototype.multiline;
    /** @type {?} */
    CardViewTextItemModel.prototype.pipes;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LXRleHRpdGVtLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsiY2FyZC12aWV3L21vZGVscy9jYXJkLXZpZXctdGV4dGl0ZW0ubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBR25FO0lBQTJDLGlEQUFxQjtJQUs1RCwrQkFBWSwwQkFBc0Q7UUFBbEUsWUFDSSxrQkFBTSwwQkFBMEIsQ0FBQyxTQUdwQztRQVJELFVBQUksR0FBVyxNQUFNLENBQUM7UUFNbEIsS0FBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsMEJBQTBCLENBQUMsU0FBUyxDQUFFO1FBQ3pELEtBQUksQ0FBQyxLQUFLLEdBQUcsMEJBQTBCLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQzs7SUFDeEQsQ0FBQztJQUVELHNCQUFJLCtDQUFZOzs7O1FBQWhCO1lBQ0ksSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ2hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQzthQUN2QjtpQkFBTTtnQkFDSCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3RDO1FBQ0wsQ0FBQzs7O09BQUE7Ozs7OztJQUVPLDBDQUFVOzs7OztJQUFsQixVQUFtQixZQUFZO1FBQzNCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDbkIsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUMsV0FBVyxFQUFFLEVBQXFCO29CQUFuQixjQUFJLEVBQUUsY0FBVyxFQUFYLGdDQUFXO2dCQUM5RCxPQUFPLElBQUksQ0FBQyxTQUFTLE9BQWQsSUFBSSxvQkFBVyxXQUFXLEdBQUssTUFBTSxHQUFFO1lBQ2xELENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQztTQUNwQjtRQUVELE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUM7SUFDTCw0QkFBQztBQUFELENBQUMsQUE1QkQsQ0FBMkMscUJBQXFCLEdBNEIvRDs7OztJQTNCRyxxQ0FBc0I7O0lBQ3RCLDBDQUFvQjs7SUFDcEIsc0NBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ2FyZFZpZXdJdGVtIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jYXJkLXZpZXctaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRHluYW1pY0NvbXBvbmVudE1vZGVsIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZHluYW1pYy1jb21wb25lbnQtbWFwcGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2FyZFZpZXdCYXNlSXRlbU1vZGVsIH0gZnJvbSAnLi9jYXJkLXZpZXctYmFzZWl0ZW0ubW9kZWwnO1xuaW1wb3J0IHsgQ2FyZFZpZXdUZXh0SXRlbVBpcGVQcm9wZXJ0eSwgQ2FyZFZpZXdUZXh0SXRlbVByb3BlcnRpZXMgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NhcmQtdmlldy5pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNsYXNzIENhcmRWaWV3VGV4dEl0ZW1Nb2RlbCBleHRlbmRzIENhcmRWaWV3QmFzZUl0ZW1Nb2RlbCBpbXBsZW1lbnRzIENhcmRWaWV3SXRlbSwgRHluYW1pY0NvbXBvbmVudE1vZGVsIHtcbiAgICB0eXBlOiBzdHJpbmcgPSAndGV4dCc7XG4gICAgbXVsdGlsaW5lPzogYm9vbGVhbjtcbiAgICBwaXBlcz86IENhcmRWaWV3VGV4dEl0ZW1QaXBlUHJvcGVydHlbXTtcblxuICAgIGNvbnN0cnVjdG9yKGNhcmRWaWV3VGV4dEl0ZW1Qcm9wZXJ0aWVzOiBDYXJkVmlld1RleHRJdGVtUHJvcGVydGllcykge1xuICAgICAgICBzdXBlcihjYXJkVmlld1RleHRJdGVtUHJvcGVydGllcyk7XG4gICAgICAgIHRoaXMubXVsdGlsaW5lID0gISFjYXJkVmlld1RleHRJdGVtUHJvcGVydGllcy5tdWx0aWxpbmUgO1xuICAgICAgICB0aGlzLnBpcGVzID0gY2FyZFZpZXdUZXh0SXRlbVByb3BlcnRpZXMucGlwZXMgfHwgW107XG4gICAgfVxuXG4gICAgZ2V0IGRpc3BsYXlWYWx1ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlQaXBlcyh0aGlzLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXBwbHlQaXBlcyhkaXNwbGF5VmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMucGlwZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBkaXNwbGF5VmFsdWUgPSB0aGlzLnBpcGVzLnJlZHVjZSgoYWNjdW11bGF0b3IsIHsgcGlwZSwgcGFyYW1zID0gW10gfSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBwaXBlLnRyYW5zZm9ybShhY2N1bXVsYXRvciwgLi4ucGFyYW1zKTtcbiAgICAgICAgICAgIH0sIGRpc3BsYXlWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGlzcGxheVZhbHVlO1xuICAgIH1cbn1cbiJdfQ==
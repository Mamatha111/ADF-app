/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewChild } from '@angular/core';
import { CardViewTextItemModel } from '../../models/card-view-textitem.model';
import { CardViewUpdateService } from '../../services/card-view-update.service';
var CardViewTextItemComponent = /** @class */ (function () {
    function CardViewTextItemComponent(cardViewUpdateService) {
        this.cardViewUpdateService = cardViewUpdateService;
        this.editable = false;
        this.displayEmpty = true;
        this.inEdit = false;
    }
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.editedValue = this.property.value;
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.showProperty = /**
     * @return {?}
     */
    function () {
        return this.displayEmpty || !this.property.isEmpty();
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.isEditable = /**
     * @return {?}
     */
    function () {
        return this.editable && this.property.editable;
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.isClickable = /**
     * @return {?}
     */
    function () {
        return this.property.clickable;
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.hasIcon = /**
     * @return {?}
     */
    function () {
        return !!this.property.icon;
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.hasErrors = /**
     * @return {?}
     */
    function () {
        return this.errorMessages && this.errorMessages.length;
    };
    /**
     * @param {?} editStatus
     * @return {?}
     */
    CardViewTextItemComponent.prototype.setEditMode = /**
     * @param {?} editStatus
     * @return {?}
     */
    function (editStatus) {
        var _this = this;
        this.inEdit = editStatus;
        setTimeout(function () {
            if (_this.editorInput) {
                _this.editorInput.nativeElement.click();
            }
        }, 0);
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.editedValue = this.property.value;
        this.setEditMode(false);
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        if (this.property.isValid(this.editedValue)) {
            this.cardViewUpdateService.update(this.property, this.editedValue);
            this.property.value = this.editedValue;
            this.setEditMode(false);
        }
        else {
            this.errorMessages = this.property.getValidationErrors(this.editedValue);
        }
    };
    /**
     * @return {?}
     */
    CardViewTextItemComponent.prototype.clicked = /**
     * @return {?}
     */
    function () {
        this.cardViewUpdateService.clicked(this.property);
    };
    CardViewTextItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-card-view-textitem',
                    template: "<div [attr.data-automation-id]=\"'card-textitem-label-' + property.key\" class=\"adf-property-label\" *ngIf=\"showProperty() || isEditable()\">{{ property.label | translate }}</div>\n<div class=\"adf-property-value\">\n    <span *ngIf=\"!isEditable()\">\n        <span *ngIf=\"!isClickable(); else elseBlock\" [attr.data-automation-id]=\"'card-textitem-value-' + property.key\">\n            <span *ngIf=\"showProperty()\" class=\"adf-textitem-ellipsis\">{{ property.displayValue }}</span>\n        </span>\n        <ng-template #elseBlock>\n        <div class=\"adf-textitem-clickable\" (click)=\"clicked()\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n            <span class=\"adf-textitem-clickable-value\" [attr.data-automation-id]=\"'card-textitem-value-' + property.key\">\n                <span *ngIf=\"showProperty(); else elseEmptyValueBlock\">{{ property.displayValue }}</span>\n            </span>\n            <mat-icon *ngIf=\"hasIcon()\" fxFlex=\"0 0 auto\" [attr.data-automation-id]=\"'card-textitem-edit-icon-' + property.icon\" class=\"adf-textitem-icon\">{{ property.icon }}</mat-icon>\n        </div>\n        </ng-template>\n    </span>\n    <span *ngIf=\"isEditable()\">\n        <div *ngIf=\"!inEdit\" (click)=\"setEditMode(true)\" class=\"adf-textitem-readonly\" [attr.data-automation-id]=\"'card-textitem-edit-toggle-' + property.key\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n            <span [attr.data-automation-id]=\"'card-textitem-value-' + property.key\">\n                <span *ngIf=\"showProperty(); else elseEmptyValueBlock\">{{ property.displayValue }}</span>\n            </span>\n            <mat-icon fxFlex=\"0 0 auto\"\n                [attr.data-automation-id]=\"'card-textitem-edit-icon-' + property.key\"\n                [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                class=\"adf-textitem-icon\">create</mat-icon>\n        </div>\n        <div *ngIf=\"inEdit\" class=\"adf-textitem-editable\">\n            <div class=\"adf-textitem-editable-controls\">\n                <mat-form-field floatPlaceholder=\"never\" class=\"adf-input-container\">\n                    <input *ngIf=\"!property.multiline\" #editorInput\n                        matInput\n                        class=\"adf-input\"\n                        [placeholder]=\"property.default | translate\"\n                        [(ngModel)]=\"editedValue\"\n                        [attr.data-automation-id]=\"'card-textitem-editinput-' + property.key\">\n                    <textarea *ngIf=\"property.multiline\" #editorInput\n                        matInput\n                        matTextareaAutosize\n                        matAutosizeMaxRows=\"1\"\n                        matAutosizeMaxRows=\"5\"\n                        class=\"adf-textarea\"\n                        [placeholder]=\"property.default | translate\"\n                        [(ngModel)]=\"editedValue\"\n                        [attr.data-automation-id]=\"'card-textitem-edittextarea-' + property.key\"></textarea>\n                </mat-form-field>\n                <mat-icon\n                    class=\"adf-textitem-icon adf-update-icon\"\n                    (click)=\"update()\"\n                    [attr.title]=\"'CORE.METADATA.ACTIONS.SAVE' | translate\"\n                    [attr.data-automation-id]=\"'card-textitem-update-' + property.key\">done</mat-icon>\n                <mat-icon\n                    class=\"adf-textitem-icon adf-reset-icon\"\n                    (click)=\"reset()\"\n                    [attr.title]=\"'CORE.METADATA.ACTIONS.CANCEL' | translate\"\n                    [attr.data-automation-id]=\"'card-textitem-reset-' + property.key\">clear</mat-icon>\n            </div>\n            <mat-error  [attr.data-automation-id]=\"'card-textitem-error-' + property.key\" class=\"adf-textitem-editable-error\" *ngIf=\"hasErrors()\">\n                <ul>\n                    <li *ngFor=\"let errorMessage of errorMessages\">{{ errorMessage | translate }}</li>\n                </ul>\n            </mat-error>\n        </div>\n    </span>\n    <ng-template #elseEmptyValueBlock>\n        <span class=\"adf-textitem-default-value\">{{ property.default | translate }}</span>\n    </ng-template>\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CardViewTextItemComponent.ctorParameters = function () { return [
        { type: CardViewUpdateService }
    ]; };
    CardViewTextItemComponent.propDecorators = {
        property: [{ type: Input }],
        editable: [{ type: Input }],
        displayEmpty: [{ type: Input }],
        editorInput: [{ type: ViewChild, args: ['editorInput',] }]
    };
    return CardViewTextItemComponent;
}());
export { CardViewTextItemComponent };
if (false) {
    /** @type {?} */
    CardViewTextItemComponent.prototype.property;
    /** @type {?} */
    CardViewTextItemComponent.prototype.editable;
    /** @type {?} */
    CardViewTextItemComponent.prototype.displayEmpty;
    /**
     * @type {?}
     * @private
     */
    CardViewTextItemComponent.prototype.editorInput;
    /** @type {?} */
    CardViewTextItemComponent.prototype.inEdit;
    /** @type {?} */
    CardViewTextItemComponent.prototype.editedValue;
    /** @type {?} */
    CardViewTextItemComponent.prototype.errorMessages;
    /**
     * @type {?}
     * @private
     */
    CardViewTextItemComponent.prototype.cardViewUpdateService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LXRleHRpdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImNhcmQtdmlldy9jb21wb25lbnRzL2NhcmQtdmlldy10ZXh0aXRlbS9jYXJkLXZpZXctdGV4dGl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFhLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUM5RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUVoRjtJQXNCSSxtQ0FBb0IscUJBQTRDO1FBQTVDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFaaEUsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUcxQixpQkFBWSxHQUFZLElBQUksQ0FBQztRQUs3QixXQUFNLEdBQVksS0FBSyxDQUFDO0lBS3hCLENBQUM7Ozs7SUFFRCwrQ0FBVzs7O0lBQVg7UUFDSSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO0lBQzNDLENBQUM7Ozs7SUFFRCxnREFBWTs7O0lBQVo7UUFDSSxPQUFPLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3pELENBQUM7Ozs7SUFFRCw4Q0FBVTs7O0lBQVY7UUFDSSxPQUFPLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7SUFDbkQsQ0FBQzs7OztJQUVELCtDQUFXOzs7SUFBWDtRQUNJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7SUFDbkMsQ0FBQzs7OztJQUVELDJDQUFPOzs7SUFBUDtRQUNJLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQ2hDLENBQUM7Ozs7SUFFRCw2Q0FBUzs7O0lBQVQ7UUFDSSxPQUFPLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7SUFDM0QsQ0FBQzs7Ozs7SUFFRCwrQ0FBVzs7OztJQUFYLFVBQVksVUFBbUI7UUFBL0IsaUJBT0M7UUFORyxJQUFJLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQztRQUN6QixVQUFVLENBQUM7WUFDUCxJQUFJLEtBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ2xCLEtBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQzFDO1FBQ0wsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ1YsQ0FBQzs7OztJQUVELHlDQUFLOzs7SUFBTDtRQUNJLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDdkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQsMENBQU07OztJQUFOO1FBQ0ksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDekMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNuRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7YUFBTTtZQUNILElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDNUU7SUFDTCxDQUFDOzs7O0lBRUQsMkNBQU87OztJQUFQO1FBQ0ksSUFBSSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEQsQ0FBQzs7Z0JBM0VKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsd0JBQXdCO29CQUNsQyxpc0lBQWtEOztpQkFFckQ7Ozs7Z0JBTlEscUJBQXFCOzs7MkJBUXpCLEtBQUs7MkJBR0wsS0FBSzsrQkFHTCxLQUFLOzhCQUdMLFNBQVMsU0FBQyxhQUFhOztJQTZENUIsZ0NBQUM7Q0FBQSxBQTVFRCxJQTRFQztTQXZFWSx5QkFBeUI7OztJQUNsQyw2Q0FDZ0M7O0lBRWhDLDZDQUMwQjs7SUFFMUIsaURBQzZCOzs7OztJQUU3QixnREFDeUI7O0lBRXpCLDJDQUF3Qjs7SUFDeEIsZ0RBQW9COztJQUNwQixrREFBd0I7Ozs7O0lBRVosMERBQW9EIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhcmRWaWV3VGV4dEl0ZW1Nb2RlbCB9IGZyb20gJy4uLy4uL21vZGVscy9jYXJkLXZpZXctdGV4dGl0ZW0ubW9kZWwnO1xuaW1wb3J0IHsgQ2FyZFZpZXdVcGRhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2FyZC12aWV3LXVwZGF0ZS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtY2FyZC12aWV3LXRleHRpdGVtJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vY2FyZC12aWV3LXRleHRpdGVtLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9jYXJkLXZpZXctdGV4dGl0ZW0uY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBDYXJkVmlld1RleHRJdGVtQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBASW5wdXQoKVxuICAgIHByb3BlcnR5OiBDYXJkVmlld1RleHRJdGVtTW9kZWw7XG5cbiAgICBASW5wdXQoKVxuICAgIGVkaXRhYmxlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIGRpc3BsYXlFbXB0eTogYm9vbGVhbiA9IHRydWU7XG5cbiAgICBAVmlld0NoaWxkKCdlZGl0b3JJbnB1dCcpXG4gICAgcHJpdmF0ZSBlZGl0b3JJbnB1dDogYW55O1xuXG4gICAgaW5FZGl0OiBib29sZWFuID0gZmFsc2U7XG4gICAgZWRpdGVkVmFsdWU6IHN0cmluZztcbiAgICBlcnJvck1lc3NhZ2VzOiBzdHJpbmdbXTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY2FyZFZpZXdVcGRhdGVTZXJ2aWNlOiBDYXJkVmlld1VwZGF0ZVNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lZGl0ZWRWYWx1ZSA9IHRoaXMucHJvcGVydHkudmFsdWU7XG4gICAgfVxuXG4gICAgc2hvd1Byb3BlcnR5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNwbGF5RW1wdHkgfHwgIXRoaXMucHJvcGVydHkuaXNFbXB0eSgpO1xuICAgIH1cblxuICAgIGlzRWRpdGFibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRhYmxlICYmIHRoaXMucHJvcGVydHkuZWRpdGFibGU7XG4gICAgfVxuXG4gICAgaXNDbGlja2FibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BlcnR5LmNsaWNrYWJsZTtcbiAgICB9XG5cbiAgICBoYXNJY29uKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLnByb3BlcnR5Lmljb247XG4gICAgfVxuXG4gICAgaGFzRXJyb3JzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yTWVzc2FnZXMgJiYgdGhpcy5lcnJvck1lc3NhZ2VzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBzZXRFZGl0TW9kZShlZGl0U3RhdHVzOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaW5FZGl0ID0gZWRpdFN0YXR1cztcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5lZGl0b3JJbnB1dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9ySW5wdXQubmF0aXZlRWxlbWVudC5jbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAwKTtcbiAgICB9XG5cbiAgICByZXNldCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lZGl0ZWRWYWx1ZSA9IHRoaXMucHJvcGVydHkudmFsdWU7XG4gICAgICAgIHRoaXMuc2V0RWRpdE1vZGUoZmFsc2UpO1xuICAgIH1cblxuICAgIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcGVydHkuaXNWYWxpZCh0aGlzLmVkaXRlZFZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5jYXJkVmlld1VwZGF0ZVNlcnZpY2UudXBkYXRlKHRoaXMucHJvcGVydHksIHRoaXMuZWRpdGVkVmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0eS52YWx1ZSA9IHRoaXMuZWRpdGVkVmFsdWU7XG4gICAgICAgICAgICB0aGlzLnNldEVkaXRNb2RlKGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlcyA9IHRoaXMucHJvcGVydHkuZ2V0VmFsaWRhdGlvbkVycm9ycyh0aGlzLmVkaXRlZFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsaWNrZWQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2FyZFZpZXdVcGRhdGVTZXJ2aWNlLmNsaWNrZWQodGhpcy5wcm9wZXJ0eSk7XG4gICAgfVxufVxuIl19
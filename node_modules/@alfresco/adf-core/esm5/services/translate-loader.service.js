/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, forkJoin, throwError, of } from 'rxjs';
import { ComponentTranslationModel } from '../models/component.model';
import { ObjectUtils } from '../utils/object-utils';
import { map, catchError, retry } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var TranslateLoaderService = /** @class */ (function () {
    function TranslateLoaderService(http) {
        this.http = http;
        this.prefix = 'i18n';
        this.suffix = '.json';
        this.providers = [];
        this.queue = [];
        this.defaultLang = 'en';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    TranslateLoaderService.prototype.setDefaultLang = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.defaultLang = value || 'en';
    };
    /**
     * @param {?} name
     * @param {?} path
     * @return {?}
     */
    TranslateLoaderService.prototype.registerProvider = /**
     * @param {?} name
     * @param {?} path
     * @return {?}
     */
    function (name, path) {
        /** @type {?} */
        var registered = this.providers.find(function (provider) { return provider.name === name; });
        if (registered) {
            registered.path = path;
        }
        else {
            this.providers.push(new ComponentTranslationModel({ name: name, path: path }));
        }
    };
    /**
     * @param {?} name
     * @return {?}
     */
    TranslateLoaderService.prototype.providerRegistered = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.providers.find(function (x) { return x.name === name; }) ? true : false;
    };
    /**
     * @param {?} lang
     * @param {?} component
     * @param {?=} fallbackUrl
     * @return {?}
     */
    TranslateLoaderService.prototype.fetchLanguageFile = /**
     * @param {?} lang
     * @param {?} component
     * @param {?=} fallbackUrl
     * @return {?}
     */
    function (lang, component, fallbackUrl) {
        var _this = this;
        /** @type {?} */
        var translationUrl = fallbackUrl || component.path + "/" + this.prefix + "/" + lang + this.suffix + "?v=" + Date.now();
        return this.http.get(translationUrl).pipe(map(function (res) {
            component.json[lang] = res;
        }), retry(3), catchError(function () {
            if (!fallbackUrl && lang.includes('-')) {
                var _a = tslib_1.__read(lang.split('-'), 1), langId = _a[0];
                if (langId && langId !== _this.defaultLang) {
                    /** @type {?} */
                    var url = component.path + "/" + _this.prefix + "/" + langId + _this.suffix + "?v=" + Date.now();
                    return _this.fetchLanguageFile(lang, component, url);
                }
            }
            return throwError("Failed to load " + translationUrl);
        }));
    };
    /**
     * @param {?} lang
     * @return {?}
     */
    TranslateLoaderService.prototype.getComponentToFetch = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        var _this = this;
        /** @type {?} */
        var observableBatch = [];
        if (!this.queue[lang]) {
            this.queue[lang] = [];
        }
        this.providers.forEach(function (component) {
            if (!_this.isComponentInQueue(lang, component.name)) {
                _this.queue[lang].push(component.name);
                observableBatch.push(_this.fetchLanguageFile(lang, component));
            }
        });
        return observableBatch;
    };
    /**
     * @param {?} lang
     * @return {?}
     */
    TranslateLoaderService.prototype.init = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        if (this.queue[lang] === undefined) {
            this.queue[lang] = [];
        }
    };
    /**
     * @param {?} lang
     * @param {?} name
     * @return {?}
     */
    TranslateLoaderService.prototype.isComponentInQueue = /**
     * @param {?} lang
     * @param {?} name
     * @return {?}
     */
    function (lang, name) {
        return (this.queue[lang] || []).find(function (x) { return x === name; }) ? true : false;
    };
    /**
     * @param {?} lang
     * @return {?}
     */
    TranslateLoaderService.prototype.getFullTranslationJSON = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        /** @type {?} */
        var result = {};
        this.providers
            .slice(0)
            .sort(function (a, b) {
            if (a.name === 'app') {
                return 1;
            }
            if (b.name === 'app') {
                return -1;
            }
            return a.name.localeCompare(b.name);
        })
            .forEach(function (model) {
            if (model.json && model.json[lang]) {
                result = ObjectUtils.merge(result, model.json[lang]);
            }
        });
        return result;
    };
    /**
     * @param {?} lang
     * @return {?}
     */
    TranslateLoaderService.prototype.getTranslation = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        var _this = this;
        /** @type {?} */
        var hasFailures = false;
        /** @type {?} */
        var batch = tslib_1.__spread(this.getComponentToFetch(lang).map(function (observable) {
            return observable.pipe(catchError(function (error) {
                console.warn(error);
                hasFailures = true;
                return of(error);
            }));
        }));
        return new Observable(function (observer) {
            if (batch.length > 0) {
                forkJoin(batch).subscribe(function () {
                    /** @type {?} */
                    var fullTranslation = _this.getFullTranslationJSON(lang);
                    if (fullTranslation) {
                        observer.next(fullTranslation);
                    }
                    if (hasFailures) {
                        observer.error('Failed to load some resources');
                    }
                    else {
                        observer.complete();
                    }
                }, function (err) {
                    observer.error('Failed to load some resources');
                });
            }
            else {
                /** @type {?} */
                var fullTranslation = _this.getFullTranslationJSON(lang);
                if (fullTranslation) {
                    observer.next(fullTranslation);
                    observer.complete();
                }
            }
        });
    };
    TranslateLoaderService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TranslateLoaderService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ TranslateLoaderService.ngInjectableDef = i0.defineInjectable({ factory: function TranslateLoaderService_Factory() { return new TranslateLoaderService(i0.inject(i1.HttpClient)); }, token: TranslateLoaderService, providedIn: "root" });
    return TranslateLoaderService;
}());
export { TranslateLoaderService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TranslateLoaderService.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    TranslateLoaderService.prototype.suffix;
    /**
     * @type {?}
     * @private
     */
    TranslateLoaderService.prototype.providers;
    /**
     * @type {?}
     * @private
     */
    TranslateLoaderService.prototype.queue;
    /**
     * @type {?}
     * @private
     */
    TranslateLoaderService.prototype.defaultLang;
    /**
     * @type {?}
     * @private
     */
    TranslateLoaderService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,
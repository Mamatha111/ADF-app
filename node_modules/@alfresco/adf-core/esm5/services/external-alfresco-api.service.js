/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { AlfrescoApiCompatibility } from '@alfresco/js-api';
import * as i0 from "@angular/core";
/* tslint:disable:adf-file-name */
var ExternalAlfrescoApiService = /** @class */ (function () {
    function ExternalAlfrescoApiService() {
    }
    /**
     * @return {?}
     */
    ExternalAlfrescoApiService.prototype.getInstance = /**
     * @return {?}
     */
    function () {
        return this.alfrescoApi;
    };
    Object.defineProperty(ExternalAlfrescoApiService.prototype, "contentApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getInstance().content;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExternalAlfrescoApiService.prototype, "nodesApi", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getInstance().nodes;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} ecmHost
     * @param {?} contextRoot
     * @return {?}
     */
    ExternalAlfrescoApiService.prototype.init = /**
     * @param {?} ecmHost
     * @param {?} contextRoot
     * @return {?}
     */
    function (ecmHost, contextRoot) {
        /** @type {?} */
        var domainPrefix = this.createPrefixFromHost(ecmHost);
        /** @type {?} */
        var config = {
            provider: 'ECM',
            hostEcm: ecmHost,
            authType: 'BASIC',
            contextRoot: contextRoot,
            domainPrefix: domainPrefix
        };
        this.initAlfrescoApi(config);
    };
    /**
     * @protected
     * @param {?} config
     * @return {?}
     */
    ExternalAlfrescoApiService.prototype.initAlfrescoApi = /**
     * @protected
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (this.alfrescoApi) {
            this.alfrescoApi.configureJsApi(config);
        }
        else {
            this.alfrescoApi = new AlfrescoApiCompatibility(config);
        }
    };
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    ExternalAlfrescoApiService.prototype.createPrefixFromHost = /**
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var match = url.match(/:\/\/(www[0-9]?\.)?(.[^/:]+)/i);
        /** @type {?} */
        var result = null;
        if (match != null && match.length > 2 && typeof match[2] === 'string' && match[2].length > 0) {
            result = match[2];
        }
        return result;
    };
    ExternalAlfrescoApiService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ ExternalAlfrescoApiService.ngInjectableDef = i0.defineInjectable({ factory: function ExternalAlfrescoApiService_Factory() { return new ExternalAlfrescoApiService(); }, token: ExternalAlfrescoApiService, providedIn: "root" });
    return ExternalAlfrescoApiService;
}());
export { ExternalAlfrescoApiService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ExternalAlfrescoApiService.prototype.alfrescoApi;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZXJuYWwtYWxmcmVzY28tYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9leHRlcm5hbC1hbGZyZXNjby1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFDSCx3QkFBd0IsRUFHM0IsTUFBTSxrQkFBa0IsQ0FBQzs7O0FBRzFCO0lBQUE7S0FpREM7Ozs7SUExQ0csZ0RBQVc7OztJQUFYO1FBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzVCLENBQUM7SUFFRCxzQkFBSSxrREFBVTs7OztRQUFkO1lBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDO1FBQ3RDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksZ0RBQVE7Ozs7UUFBWjtZQUNJLE9BQU8sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNwQyxDQUFDOzs7T0FBQTs7Ozs7O0lBRUQseUNBQUk7Ozs7O0lBQUosVUFBSyxPQUFlLEVBQUUsV0FBbUI7O1lBRWpDLFlBQVksR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDOztZQUUvQyxNQUFNLEdBQUc7WUFDWCxRQUFRLEVBQUUsS0FBSztZQUNmLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxPQUFPO1lBQ2pCLFdBQVcsRUFBRSxXQUFXO1lBQ3hCLFlBQVksY0FBQTtTQUNmO1FBQ0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7Ozs7SUFFUyxvREFBZTs7Ozs7SUFBekIsVUFBMEIsTUFBTTtRQUM1QixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDM0M7YUFBTTtZQUNILElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMzRDtJQUNMLENBQUM7Ozs7OztJQUVPLHlEQUFvQjs7Ozs7SUFBNUIsVUFBNkIsR0FBVzs7WUFDaEMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsK0JBQStCLENBQUM7O1lBQ2xELE1BQU0sR0FBRyxJQUFJO1FBQ2pCLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDMUYsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyQjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7O2dCQWhESixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7cUNBM0JEO0NBMEVDLEFBakRELElBaURDO1NBOUNZLDBCQUEwQjs7Ozs7O0lBRW5DLGlEQUFnRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgQWxmcmVzY29BcGlDb21wYXRpYmlsaXR5LFxuICAgIENvbnRlbnRBcGksXG4gICAgQ29yZVxufSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbi8qIHRzbGludDpkaXNhYmxlOmFkZi1maWxlLW5hbWUgKi9cblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBFeHRlcm5hbEFsZnJlc2NvQXBpU2VydmljZSB7XG5cbiAgICBwcm90ZWN0ZWQgYWxmcmVzY29BcGk6IEFsZnJlc2NvQXBpQ29tcGF0aWJpbGl0eTtcblxuICAgIGdldEluc3RhbmNlKCk6IEFsZnJlc2NvQXBpQ29tcGF0aWJpbGl0eSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsZnJlc2NvQXBpO1xuICAgIH1cblxuICAgIGdldCBjb250ZW50QXBpKCk6IENvbnRlbnRBcGkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRJbnN0YW5jZSgpLmNvbnRlbnQ7XG4gICAgfVxuXG4gICAgZ2V0IG5vZGVzQXBpKCk6IENvcmUuTm9kZXNBcGkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRJbnN0YW5jZSgpLm5vZGVzO1xuICAgIH1cblxuICAgIGluaXQoZWNtSG9zdDogc3RyaW5nLCBjb250ZXh0Um9vdDogc3RyaW5nKSB7XG5cbiAgICAgICAgbGV0IGRvbWFpblByZWZpeCA9IHRoaXMuY3JlYXRlUHJlZml4RnJvbUhvc3QoZWNtSG9zdCk7XG5cbiAgICAgICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICAgICAgcHJvdmlkZXI6ICdFQ00nLFxuICAgICAgICAgICAgaG9zdEVjbTogZWNtSG9zdCxcbiAgICAgICAgICAgIGF1dGhUeXBlOiAnQkFTSUMnLFxuICAgICAgICAgICAgY29udGV4dFJvb3Q6IGNvbnRleHRSb290LFxuICAgICAgICAgICAgZG9tYWluUHJlZml4XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaW5pdEFsZnJlc2NvQXBpKGNvbmZpZyk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGluaXRBbGZyZXNjb0FwaShjb25maWcpIHtcbiAgICAgICAgaWYgKHRoaXMuYWxmcmVzY29BcGkpIHtcbiAgICAgICAgICAgIHRoaXMuYWxmcmVzY29BcGkuY29uZmlndXJlSnNBcGkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWxmcmVzY29BcGkgPSBuZXcgQWxmcmVzY29BcGlDb21wYXRpYmlsaXR5KGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVByZWZpeEZyb21Ib3N0KHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IG1hdGNoID0gdXJsLm1hdGNoKC86XFwvXFwvKHd3d1swLTldP1xcLik/KC5bXi86XSspL2kpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgaWYgKG1hdGNoICE9IG51bGwgJiYgbWF0Y2gubGVuZ3RoID4gMiAmJiB0eXBlb2YgbWF0Y2hbMl0gPT09ICdzdHJpbmcnICYmIG1hdGNoWzJdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG1hdGNoWzJdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuIl19
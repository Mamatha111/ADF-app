/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Subject, from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { AuthenticationService } from './authentication.service';
import { LogService } from './log.service';
import { catchError } from 'rxjs/operators';
import { PermissionsEnum } from '../models/permissions.enum';
import { AllowableOperationsEnum } from '../models/allowable-operations.enum';
import * as i0 from "@angular/core";
import * as i1 from "./authentication.service";
import * as i2 from "./alfresco-api.service";
import * as i3 from "./log.service";
import * as i4 from "@angular/platform-browser";
var ContentService = /** @class */ (function () {
    function ContentService(authService, apiService, logService, sanitizer) {
        this.authService = authService;
        this.apiService = apiService;
        this.logService = logService;
        this.sanitizer = sanitizer;
        this.folderCreated = new Subject();
        this.folderCreate = new Subject();
        this.folderEdit = new Subject();
        this.saveData = (function () {
            /** @type {?} */
            var a = document.createElement('a');
            document.body.appendChild(a);
            a.style.display = 'none';
            return function (fileData, format, fileName) {
                /** @type {?} */
                var blob = null;
                if (format === 'blob' || format === 'data') {
                    blob = new Blob([fileData], { type: 'octet/stream' });
                }
                if (format === 'object' || format === 'json') {
                    /** @type {?} */
                    var json = JSON.stringify(fileData);
                    blob = new Blob([json], { type: 'octet/stream' });
                }
                if (blob) {
                    if (typeof window.navigator !== 'undefined' && window.navigator.msSaveOrOpenBlob) {
                        navigator.msSaveOrOpenBlob(blob, fileName);
                    }
                    else {
                        /** @type {?} */
                        var url = window.URL.createObjectURL(blob);
                        a.href = url;
                        a.download = fileName;
                        a.click();
                        window.URL.revokeObjectURL(url);
                    }
                }
            };
        }());
    }
    /**
     * Invokes content download for a Blob with a file name.
     * @param blob Content to download.
     * @param fileName Name of the resulting file.
     */
    /**
     * Invokes content download for a Blob with a file name.
     * @param {?} blob Content to download.
     * @param {?} fileName Name of the resulting file.
     * @return {?}
     */
    ContentService.prototype.downloadBlob = /**
     * Invokes content download for a Blob with a file name.
     * @param {?} blob Content to download.
     * @param {?} fileName Name of the resulting file.
     * @return {?}
     */
    function (blob, fileName) {
        this.saveData(blob, 'blob', fileName);
    };
    /**
     * Invokes content download for a data array with a file name.
     * @param data Data to download.
     * @param fileName Name of the resulting file.
     */
    /**
     * Invokes content download for a data array with a file name.
     * @param {?} data Data to download.
     * @param {?} fileName Name of the resulting file.
     * @return {?}
     */
    ContentService.prototype.downloadData = /**
     * Invokes content download for a data array with a file name.
     * @param {?} data Data to download.
     * @param {?} fileName Name of the resulting file.
     * @return {?}
     */
    function (data, fileName) {
        this.saveData(data, 'data', fileName);
    };
    /**
     * Invokes content download for a JSON object with a file name.
     * @param json JSON object to download.
     * @param fileName Name of the resulting file.
     */
    /**
     * Invokes content download for a JSON object with a file name.
     * @param {?} json JSON object to download.
     * @param {?} fileName Name of the resulting file.
     * @return {?}
     */
    ContentService.prototype.downloadJSON = /**
     * Invokes content download for a JSON object with a file name.
     * @param {?} json JSON object to download.
     * @param {?} fileName Name of the resulting file.
     * @return {?}
     */
    function (json, fileName) {
        this.saveData(json, 'json', fileName);
    };
    /**
     * Creates a trusted object URL from the Blob.
     * WARNING: calling this method with untrusted user data exposes your application to XSS security risks!
     * @param  blob Data to wrap into object URL
     * @returns URL string
     */
    /**
     * Creates a trusted object URL from the Blob.
     * WARNING: calling this method with untrusted user data exposes your application to XSS security risks!
     * @param {?} blob Data to wrap into object URL
     * @return {?} URL string
     */
    ContentService.prototype.createTrustedUrl = /**
     * Creates a trusted object URL from the Blob.
     * WARNING: calling this method with untrusted user data exposes your application to XSS security risks!
     * @param {?} blob Data to wrap into object URL
     * @return {?} URL string
     */
    function (blob) {
        /** @type {?} */
        var url = window.URL.createObjectURL(blob);
        return (/** @type {?} */ (this.sanitizer.bypassSecurityTrustUrl(url)));
    };
    Object.defineProperty(ContentService.prototype, "contentApi", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.apiService.getInstance().content;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Gets a thumbnail URL for the given document node.
     * @param node Node to get URL for.
     * @param attachment Toggles whether to retrieve content as an attachment for download
     * @param ticket Custom ticket to use for authentication
     * @returns URL string
     */
    /**
     * Gets a thumbnail URL for the given document node.
     * @param {?} node Node to get URL for.
     * @param {?=} attachment Toggles whether to retrieve content as an attachment for download
     * @param {?=} ticket Custom ticket to use for authentication
     * @return {?} URL string
     */
    ContentService.prototype.getDocumentThumbnailUrl = /**
     * Gets a thumbnail URL for the given document node.
     * @param {?} node Node to get URL for.
     * @param {?=} attachment Toggles whether to retrieve content as an attachment for download
     * @param {?=} ticket Custom ticket to use for authentication
     * @return {?} URL string
     */
    function (node, attachment, ticket) {
        if (node && node.entry) {
            node = node.entry.id;
        }
        return this.contentApi.getDocumentThumbnailUrl(node, attachment, ticket);
    };
    /**
     * Gets a content URL for the given node.
     * @param node Node to get URL for.
     * @param attachment Toggles whether to retrieve content as an attachment for download
     * @param ticket Custom ticket to use for authentication
     * @returns URL string
     */
    /**
     * Gets a content URL for the given node.
     * @param {?} node Node to get URL for.
     * @param {?=} attachment Toggles whether to retrieve content as an attachment for download
     * @param {?=} ticket Custom ticket to use for authentication
     * @return {?} URL string
     */
    ContentService.prototype.getContentUrl = /**
     * Gets a content URL for the given node.
     * @param {?} node Node to get URL for.
     * @param {?=} attachment Toggles whether to retrieve content as an attachment for download
     * @param {?=} ticket Custom ticket to use for authentication
     * @return {?} URL string
     */
    function (node, attachment, ticket) {
        if (node && node.entry) {
            node = node.entry.id;
        }
        return this.contentApi.getContentUrl(node, attachment, ticket);
    };
    /**
     * Gets content for the given node.
     * @param nodeId ID of the target node
     * @returns Content data
     */
    /**
     * Gets content for the given node.
     * @param {?} nodeId ID of the target node
     * @return {?} Content data
     */
    ContentService.prototype.getNodeContent = /**
     * Gets content for the given node.
     * @param {?} nodeId ID of the target node
     * @return {?} Content data
     */
    function (nodeId) {
        var _this = this;
        return from(this.apiService.getInstance().core.nodesApi.getFileContent(nodeId))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets a Node via its node ID.
     * @param nodeId ID of the target node
     * @param opts Options supported by JS-API
     * @returns Details of the folder
     */
    /**
     * Gets a Node via its node ID.
     * @param {?} nodeId ID of the target node
     * @param {?=} opts Options supported by JS-API
     * @return {?} Details of the folder
     */
    ContentService.prototype.getNode = /**
     * Gets a Node via its node ID.
     * @param {?} nodeId ID of the target node
     * @param {?=} opts Options supported by JS-API
     * @return {?} Details of the folder
     */
    function (nodeId, opts) {
        return from(this.apiService.getInstance().nodes.getNode(nodeId, opts));
    };
    /**
     * Checks if the user has permission on that node
     * @param node Node to check permissions
     * @param permission
     * @returns True if the user has the required permissions, false otherwise
     */
    /**
     * Checks if the user has permission on that node
     * @param {?} node Node to check permissions
     * @param {?} permission
     * @return {?} True if the user has the required permissions, false otherwise
     */
    ContentService.prototype.hasPermissions = /**
     * Checks if the user has permission on that node
     * @param {?} node Node to check permissions
     * @param {?} permission
     * @return {?} True if the user has the required permissions, false otherwise
     */
    function (node, permission) {
        /** @type {?} */
        var hasPermissions = false;
        if (node && node.permissions && node.permissions.locallySet) {
            if (permission && permission.startsWith('!')) {
                hasPermissions = node.permissions.locallySet.find(function (currentPermission) { return currentPermission.name === permission.replace('!', ''); }) ? false : true;
            }
            else {
                hasPermissions = node.permissions.locallySet.find(function (currentPermission) { return currentPermission.name === permission; }) ? true : false;
            }
        }
        else {
            if (permission === PermissionsEnum.CONSUMER) {
                hasPermissions = true;
            }
            else if (permission === PermissionsEnum.NOT_CONSUMER) {
                hasPermissions = false;
            }
            else if (permission && permission.startsWith('!')) {
                hasPermissions = true;
            }
        }
        return hasPermissions;
    };
    /**
     * Checks if the user has permissions on that node
     * @param node Node to check allowableOperations
     * @param permission Create, delete, update, updatePermissions, !create, !delete, !update, !updatePermissions
     * @returns True if the user has the required permissions, false otherwise
     */
    /**
     * Checks if the user has permissions on that node
     * @param {?} node Node to check allowableOperations
     * @param {?} allowableOperation
     * @return {?} True if the user has the required permissions, false otherwise
     */
    ContentService.prototype.hasAllowableOperations = /**
     * Checks if the user has permissions on that node
     * @param {?} node Node to check allowableOperations
     * @param {?} allowableOperation
     * @return {?} True if the user has the required permissions, false otherwise
     */
    function (node, allowableOperation) {
        /** @type {?} */
        var hasAllowableOperations = false;
        if (node && node.allowableOperations) {
            if (allowableOperation && allowableOperation.startsWith('!')) {
                hasAllowableOperations = node.allowableOperations.find(function (currentOperation) { return currentOperation === allowableOperation.replace('!', ''); }) ? false : true;
            }
            else {
                hasAllowableOperations = node.allowableOperations.find(function (currentOperation) { return currentOperation === allowableOperation; }) ? true : false;
            }
        }
        else {
            if (allowableOperation && allowableOperation.startsWith('!')) {
                hasAllowableOperations = true;
            }
        }
        if (allowableOperation === AllowableOperationsEnum.COPY) {
            hasAllowableOperations = true;
        }
        if (allowableOperation === AllowableOperationsEnum.LOCK) {
            hasAllowableOperations = node.isFile;
            if (node.isLocked && node.allowableOperations) {
                hasAllowableOperations = !!~node.allowableOperations.indexOf('updatePermissions');
            }
        }
        return hasAllowableOperations;
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    ContentService.prototype.handleError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    };
    ContentService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ContentService.ctorParameters = function () { return [
        { type: AuthenticationService },
        { type: AlfrescoApiService },
        { type: LogService },
        { type: DomSanitizer }
    ]; };
    /** @nocollapse */ ContentService.ngInjectableDef = i0.defineInjectable({ factory: function ContentService_Factory() { return new ContentService(i0.inject(i1.AuthenticationService), i0.inject(i2.AlfrescoApiService), i0.inject(i3.LogService), i0.inject(i4.DomSanitizer)); }, token: ContentService, providedIn: "root" });
    return ContentService;
}());
export { ContentService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ContentService.prototype.saveData;
    /** @type {?} */
    ContentService.prototype.folderCreated;
    /** @type {?} */
    ContentService.prototype.folderCreate;
    /** @type {?} */
    ContentService.prototype.folderEdit;
    /** @type {?} */
    ContentService.prototype.authService;
    /** @type {?} */
    ContentService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    ContentService.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    ContentService.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { AlfrescoApiService } from './alfresco-api.service';
import { LogService } from './log.service';
import { catchError, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "./log.service";
var PeopleProcessService = /** @class */ (function () {
    function PeopleProcessService(alfrescoJsApi, logService) {
        this.alfrescoJsApi = alfrescoJsApi;
        this.logService = logService;
    }
    /**
     * Gets information about users across all tasks.
     * @param taskId ID of the task
     * @param searchWord Filter text to search for
     * @returns Array of user information objects
     */
    /**
     * Gets information about users across all tasks.
     * @param {?=} taskId ID of the task
     * @param {?=} searchWord Filter text to search for
     * @return {?} Array of user information objects
     */
    PeopleProcessService.prototype.getWorkflowUsers = /**
     * Gets information about users across all tasks.
     * @param {?=} taskId ID of the task
     * @param {?=} searchWord Filter text to search for
     * @return {?} Array of user information objects
     */
    function (taskId, searchWord) {
        var _this = this;
        /** @type {?} */
        var option = { excludeTaskId: taskId, filter: searchWord };
        return from(this.getWorkflowUserApi(option))
            .pipe(map(function (response) { return (/** @type {?} */ (response.data)) || []; }), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets the profile picture URL for the specified user.
     * @param user The target user
     * @returns Profile picture URL
     */
    /**
     * Gets the profile picture URL for the specified user.
     * @param {?} user The target user
     * @return {?} Profile picture URL
     */
    PeopleProcessService.prototype.getUserImage = /**
     * Gets the profile picture URL for the specified user.
     * @param {?} user The target user
     * @return {?} Profile picture URL
     */
    function (user) {
        return this.getUserProfileImageApi(user.id);
    };
    /**
     * Sets a user to be involved with a task.
     * @param taskId ID of the target task
     * @param idToInvolve ID of the user to involve
     * @returns Empty response when the update completes
     */
    /**
     * Sets a user to be involved with a task.
     * @param {?} taskId ID of the target task
     * @param {?} idToInvolve ID of the user to involve
     * @return {?} Empty response when the update completes
     */
    PeopleProcessService.prototype.involveUserWithTask = /**
     * Sets a user to be involved with a task.
     * @param {?} taskId ID of the target task
     * @param {?} idToInvolve ID of the user to involve
     * @return {?} Empty response when the update completes
     */
    function (taskId, idToInvolve) {
        var _this = this;
        /** @type {?} */
        var node = { userId: idToInvolve };
        return from(this.involveUserToTaskApi(taskId, node))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Removes a user who is currently involved with a task.
     * @param taskId ID of the target task
     * @param idToRemove ID of the user to remove
     * @returns Empty response when the update completes
     */
    /**
     * Removes a user who is currently involved with a task.
     * @param {?} taskId ID of the target task
     * @param {?} idToRemove ID of the user to remove
     * @return {?} Empty response when the update completes
     */
    PeopleProcessService.prototype.removeInvolvedUser = /**
     * Removes a user who is currently involved with a task.
     * @param {?} taskId ID of the target task
     * @param {?} idToRemove ID of the user to remove
     * @return {?} Empty response when the update completes
     */
    function (taskId, idToRemove) {
        var _this = this;
        /** @type {?} */
        var node = { userId: idToRemove };
        return from(this.removeInvolvedUserFromTaskApi(taskId, node))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    PeopleProcessService.prototype.getWorkflowUserApi = /**
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return this.alfrescoJsApi.getInstance().activiti.usersWorkflowApi.getUsers(options);
    };
    /**
     * @private
     * @param {?} taskId
     * @param {?} node
     * @return {?}
     */
    PeopleProcessService.prototype.involveUserToTaskApi = /**
     * @private
     * @param {?} taskId
     * @param {?} node
     * @return {?}
     */
    function (taskId, node) {
        return this.alfrescoJsApi.getInstance().activiti.taskActionsApi.involveUser(taskId, node);
    };
    /**
     * @private
     * @param {?} taskId
     * @param {?} node
     * @return {?}
     */
    PeopleProcessService.prototype.removeInvolvedUserFromTaskApi = /**
     * @private
     * @param {?} taskId
     * @param {?} node
     * @return {?}
     */
    function (taskId, node) {
        return this.alfrescoJsApi.getInstance().activiti.taskActionsApi.removeInvolvedUser(taskId, node);
    };
    /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    PeopleProcessService.prototype.getUserProfileImageApi = /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    function (userId) {
        return this.alfrescoJsApi.getInstance().activiti.userApi.getUserProfilePictureUrl(userId);
    };
    /**
     * Throw the error
     * @param error
     */
    /**
     * Throw the error
     * @private
     * @param {?} error
     * @return {?}
     */
    PeopleProcessService.prototype.handleError = /**
     * Throw the error
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    };
    PeopleProcessService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PeopleProcessService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    /** @nocollapse */ PeopleProcessService.ngInjectableDef = i0.defineInjectable({ factory: function PeopleProcessService_Factory() { return new PeopleProcessService(i0.inject(i1.AlfrescoApiService), i0.inject(i2.LogService)); }, token: PeopleProcessService, providedIn: "root" });
    return PeopleProcessService;
}());
export { PeopleProcessService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PeopleProcessService.prototype.alfrescoJsApi;
    /**
     * @type {?}
     * @private
     */
    PeopleProcessService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,
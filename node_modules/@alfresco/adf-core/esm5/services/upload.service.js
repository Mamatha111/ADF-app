/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Minimatch } from 'minimatch-browser';
import { Subject } from 'rxjs';
import { AppConfigService } from '../app-config/app-config.service';
import { FileUploadCompleteEvent, FileUploadDeleteEvent, FileUploadErrorEvent, FileUploadEvent } from '../events/file.event';
import { FileUploadStatus } from '../models/file.model';
import { AlfrescoApiService } from './alfresco-api.service';
import * as i0 from "@angular/core";
import * as i1 from "./alfresco-api.service";
import * as i2 from "../app-config/app-config.service";
var UploadService = /** @class */ (function () {
    function UploadService(apiService, appConfigService) {
        this.apiService = apiService;
        this.appConfigService = appConfigService;
        this.cache = {};
        this.totalComplete = 0;
        this.totalAborted = 0;
        this.totalError = 0;
        this.excludedFileList = [];
        this.matchingOptions = null;
        this.activeTask = null;
        this.queue = [];
        this.queueChanged = new Subject();
        this.fileUpload = new Subject();
        this.fileUploadStarting = new Subject();
        this.fileUploadCancelled = new Subject();
        this.fileUploadProgress = new Subject();
        this.fileUploadAborted = new Subject();
        this.fileUploadError = new Subject();
        this.fileUploadComplete = new Subject();
        this.fileUploadDeleted = new Subject();
        this.fileDeleted = new Subject();
    }
    /**
     * Checks whether the service is uploading a file.
     * @returns True if a file is uploading, false otherwise
     */
    /**
     * Checks whether the service is uploading a file.
     * @return {?} True if a file is uploading, false otherwise
     */
    UploadService.prototype.isUploading = /**
     * Checks whether the service is uploading a file.
     * @return {?} True if a file is uploading, false otherwise
     */
    function () {
        return this.activeTask ? true : false;
    };
    /**
     * Gets the file Queue
     * @returns Array of files that form the queue
     */
    /**
     * Gets the file Queue
     * @return {?} Array of files that form the queue
     */
    UploadService.prototype.getQueue = /**
     * Gets the file Queue
     * @return {?} Array of files that form the queue
     */
    function () {
        return this.queue;
    };
    /**
     * Adds files to the uploading queue to be uploaded
     * @param files One or more separate parameters or an array of files to queue
     * @returns Array of files that were not blocked from upload by the ignore list
     */
    /**
     * Adds files to the uploading queue to be uploaded
     * @param {...?} files One or more separate parameters or an array of files to queue
     * @return {?} Array of files that were not blocked from upload by the ignore list
     */
    UploadService.prototype.addToQueue = /**
     * Adds files to the uploading queue to be uploaded
     * @param {...?} files One or more separate parameters or an array of files to queue
     * @return {?} Array of files that were not blocked from upload by the ignore list
     */
    function () {
        var _this = this;
        var files = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            files[_i] = arguments[_i];
        }
        /** @type {?} */
        var allowedFiles = files.filter(function (currentFile) { return _this.filterElement(currentFile); });
        this.queue = this.queue.concat(allowedFiles);
        this.queueChanged.next(this.queue);
        return allowedFiles;
    };
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    UploadService.prototype.filterElement = /**
     * @private
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var _this = this;
        /** @type {?} */
        var isAllowed = true;
        this.excludedFileList = (/** @type {?} */ (this.appConfigService.get('files.excluded')));
        if (this.excludedFileList) {
            this.matchingOptions = this.appConfigService.get('files.match-options');
            isAllowed = this.excludedFileList.filter(function (pattern) {
                /** @type {?} */
                var minimatch = new Minimatch(pattern, _this.matchingOptions);
                return minimatch.match(file.name);
            }).length === 0;
        }
        return isAllowed;
    };
    /**
     * Finds all the files in the queue that are not yet uploaded and uploads them into the directory folder.
     * @param emitter Emitter to invoke on file status change
     */
    /**
     * Finds all the files in the queue that are not yet uploaded and uploads them into the directory folder.
     * @param {?=} emitter Emitter to invoke on file status change
     * @return {?}
     */
    UploadService.prototype.uploadFilesInTheQueue = /**
     * Finds all the files in the queue that are not yet uploaded and uploads them into the directory folder.
     * @param {?=} emitter Emitter to invoke on file status change
     * @return {?}
     */
    function (emitter) {
        var _this = this;
        if (!this.activeTask) {
            /** @type {?} */
            var file = this.queue.find(function (currentFile) { return currentFile.status === FileUploadStatus.Pending; });
            if (file) {
                this.onUploadStarting(file);
                /** @type {?} */
                var promise = this.beginUpload(file, emitter);
                this.activeTask = promise;
                this.cache[file.id] = promise;
                /** @type {?} */
                var next_1 = function () {
                    _this.activeTask = null;
                    setTimeout(function () { return _this.uploadFilesInTheQueue(emitter); }, 100);
                };
                promise.next = next_1;
                promise.then(function () { return next_1(); }, function () { return next_1(); });
            }
        }
    };
    /**
     * Cancels uploading of files.
     * @param files One or more separate parameters or an array of files specifying uploads to cancel
     */
    /**
     * Cancels uploading of files.
     * @param {...?} files One or more separate parameters or an array of files specifying uploads to cancel
     * @return {?}
     */
    UploadService.prototype.cancelUpload = /**
     * Cancels uploading of files.
     * @param {...?} files One or more separate parameters or an array of files specifying uploads to cancel
     * @return {?}
     */
    function () {
        var _this = this;
        var files = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            files[_i] = arguments[_i];
        }
        files.forEach(function (file) {
            /** @type {?} */
            var promise = _this.cache[file.id];
            if (promise) {
                promise.abort();
                delete _this.cache[file.id];
            }
            else {
                /** @type {?} */
                var performAction = _this.getAction(file);
                performAction();
            }
        });
    };
    /** Clears the upload queue */
    /**
     * Clears the upload queue
     * @return {?}
     */
    UploadService.prototype.clearQueue = /**
     * Clears the upload queue
     * @return {?}
     */
    function () {
        this.queue = [];
        this.totalComplete = 0;
        this.totalAborted = 0;
        this.totalError = 0;
    };
    /**
     * Gets an upload promise for a file.
     * @param file The target file
     * @returns Promise that is resolved if the upload is successful or error otherwise
     */
    /**
     * Gets an upload promise for a file.
     * @param {?} file The target file
     * @return {?} Promise that is resolved if the upload is successful or error otherwise
     */
    UploadService.prototype.getUploadPromise = /**
     * Gets an upload promise for a file.
     * @param {?} file The target file
     * @return {?} Promise that is resolved if the upload is successful or error otherwise
     */
    function (file) {
        /** @type {?} */
        var opts = {
            renditions: 'doclib',
            include: ['allowableOperations']
        };
        if (file.options.newVersion === true) {
            opts.overwrite = true;
            opts.majorVersion = file.options.majorVersion;
            opts.comment = file.options.comment;
            opts.name = file.name;
        }
        else {
            opts.autoRename = true;
        }
        if (file.options.nodeType) {
            opts.nodeType = file.options.nodeType;
        }
        if (file.id) {
            return this.apiService.getInstance().node.updateNodeContent(file.id, file.file, opts);
        }
        else {
            return this.apiService.getInstance().upload.uploadFile(file.file, file.options.path, file.options.parentId, file.options, opts);
        }
    };
    /**
     * @private
     * @param {?} file
     * @param {?} emitter
     * @return {?}
     */
    UploadService.prototype.beginUpload = /**
     * @private
     * @param {?} file
     * @param {?} emitter
     * @return {?}
     */
    function (file, emitter) {
        var _this = this;
        /** @type {?} */
        var promise = this.getUploadPromise(file);
        promise.on('progress', function (progress) {
            _this.onUploadProgress(file, progress);
        })
            .on('abort', function () {
            _this.onUploadAborted(file);
            if (emitter) {
                emitter.emit({ value: 'File aborted' });
            }
        })
            .on('error', function (err) {
            _this.onUploadError(file, err);
            if (emitter) {
                emitter.emit({ value: 'Error file uploaded' });
            }
        })
            .on('success', function (data) {
            _this.onUploadComplete(file, data);
            if (emitter) {
                emitter.emit({ value: data });
            }
        })
            .catch(function (err) {
        });
        return promise;
    };
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    UploadService.prototype.onUploadStarting = /**
     * @private
     * @param {?} file
     * @return {?}
     */
    function (file) {
        if (file) {
            file.status = FileUploadStatus.Starting;
            /** @type {?} */
            var event_1 = new FileUploadEvent(file, FileUploadStatus.Starting);
            this.fileUpload.next(event_1);
            this.fileUploadStarting.next(event_1);
        }
    };
    /**
     * @private
     * @param {?} file
     * @param {?} progress
     * @return {?}
     */
    UploadService.prototype.onUploadProgress = /**
     * @private
     * @param {?} file
     * @param {?} progress
     * @return {?}
     */
    function (file, progress) {
        if (file) {
            file.progress = progress;
            file.status = FileUploadStatus.Progress;
            /** @type {?} */
            var event_2 = new FileUploadEvent(file, FileUploadStatus.Progress);
            this.fileUpload.next(event_2);
            this.fileUploadProgress.next(event_2);
        }
    };
    /**
     * @private
     * @param {?} file
     * @param {?} error
     * @return {?}
     */
    UploadService.prototype.onUploadError = /**
     * @private
     * @param {?} file
     * @param {?} error
     * @return {?}
     */
    function (file, error) {
        if (file) {
            file.errorCode = (error || {}).status;
            file.status = FileUploadStatus.Error;
            this.totalError++;
            /** @type {?} */
            var promise = this.cache[file.id];
            if (promise) {
                delete this.cache[file.id];
            }
            /** @type {?} */
            var event_3 = new FileUploadErrorEvent(file, error, this.totalError);
            this.fileUpload.next(event_3);
            this.fileUploadError.next(event_3);
        }
    };
    /**
     * @private
     * @param {?} file
     * @param {?} data
     * @return {?}
     */
    UploadService.prototype.onUploadComplete = /**
     * @private
     * @param {?} file
     * @param {?} data
     * @return {?}
     */
    function (file, data) {
        if (file) {
            file.status = FileUploadStatus.Complete;
            file.data = data;
            this.totalComplete++;
            /** @type {?} */
            var promise = this.cache[file.id];
            if (promise) {
                delete this.cache[file.id];
            }
            /** @type {?} */
            var event_4 = new FileUploadCompleteEvent(file, this.totalComplete, data, this.totalAborted);
            this.fileUpload.next(event_4);
            this.fileUploadComplete.next(event_4);
        }
    };
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    UploadService.prototype.onUploadAborted = /**
     * @private
     * @param {?} file
     * @return {?}
     */
    function (file) {
        if (file) {
            file.status = FileUploadStatus.Aborted;
            this.totalAborted++;
            /** @type {?} */
            var promise = this.cache[file.id];
            if (promise) {
                delete this.cache[file.id];
            }
            /** @type {?} */
            var event_5 = new FileUploadEvent(file, FileUploadStatus.Aborted);
            this.fileUpload.next(event_5);
            this.fileUploadAborted.next(event_5);
            promise.next();
        }
    };
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    UploadService.prototype.onUploadCancelled = /**
     * @private
     * @param {?} file
     * @return {?}
     */
    function (file) {
        if (file) {
            file.status = FileUploadStatus.Cancelled;
            /** @type {?} */
            var event_6 = new FileUploadEvent(file, FileUploadStatus.Cancelled);
            this.fileUpload.next(event_6);
            this.fileUploadCancelled.next(event_6);
        }
    };
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    UploadService.prototype.onUploadDeleted = /**
     * @private
     * @param {?} file
     * @return {?}
     */
    function (file) {
        if (file) {
            file.status = FileUploadStatus.Deleted;
            this.totalComplete--;
            /** @type {?} */
            var event_7 = new FileUploadDeleteEvent(file, this.totalComplete);
            this.fileUpload.next(event_7);
            this.fileUploadDeleted.next(event_7);
        }
    };
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    UploadService.prototype.getAction = /**
     * @private
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var _this = this;
        var _a;
        /** @type {?} */
        var actions = (_a = {},
            _a[FileUploadStatus.Pending] = function () { return _this.onUploadCancelled(file); },
            _a[FileUploadStatus.Deleted] = function () { return _this.onUploadDeleted(file); },
            _a[FileUploadStatus.Error] = function () { return _this.onUploadError(file, null); },
            _a);
        return actions[file.status];
    };
    UploadService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    UploadService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: AppConfigService }
    ]; };
    /** @nocollapse */ UploadService.ngInjectableDef = i0.defineInjectable({ factory: function UploadService_Factory() { return new UploadService(i0.inject(i1.AlfrescoApiService), i0.inject(i2.AppConfigService)); }, token: UploadService, providedIn: "root" });
    return UploadService;
}());
export { UploadService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.totalComplete;
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.totalAborted;
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.totalError;
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.excludedFileList;
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.matchingOptions;
    /** @type {?} */
    UploadService.prototype.activeTask;
    /** @type {?} */
    UploadService.prototype.queue;
    /** @type {?} */
    UploadService.prototype.queueChanged;
    /** @type {?} */
    UploadService.prototype.fileUpload;
    /** @type {?} */
    UploadService.prototype.fileUploadStarting;
    /** @type {?} */
    UploadService.prototype.fileUploadCancelled;
    /** @type {?} */
    UploadService.prototype.fileUploadProgress;
    /** @type {?} */
    UploadService.prototype.fileUploadAborted;
    /** @type {?} */
    UploadService.prototype.fileUploadError;
    /** @type {?} */
    UploadService.prototype.fileUploadComplete;
    /** @type {?} */
    UploadService.prototype.fileUploadDeleted;
    /** @type {?} */
    UploadService.prototype.fileDeleted;
    /**
     * @type {?}
     * @protected
     */
    UploadService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    UploadService.prototype.appConfigService;
}
//# sourceMappingURL=data:application/json;base64,
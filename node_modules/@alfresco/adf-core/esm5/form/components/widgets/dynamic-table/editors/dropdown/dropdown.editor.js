/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { LogService } from '../../../../../../services/log.service';
import { Component, Input } from '@angular/core';
import { FormService } from './../../../../../services/form.service';
import { DynamicTableModel } from './../../dynamic-table.widget.model';
var DropdownEditorComponent = /** @class */ (function () {
    function DropdownEditorComponent(formService, logService) {
        this.formService = formService;
        this.logService = logService;
        this.value = null;
        this.options = [];
    }
    /**
     * @return {?}
     */
    DropdownEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var field = this.table.field;
        if (field) {
            if (this.column.optionType === 'rest') {
                if (this.table.form && this.table.form.taskId) {
                    this.getValuesByTaskId(field);
                }
                else {
                    this.getValuesByProcessDefinitionId(field);
                }
            }
            else {
                this.options = this.column.options || [];
                this.value = this.table.getCellValue(this.row, this.column);
            }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    DropdownEditorComponent.prototype.getValuesByTaskId = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var _this = this;
        this.formService
            .getRestFieldValuesColumn(field.form.taskId, field.id, this.column.id)
            .subscribe(function (dynamicTableColumnOption) {
            _this.column.options = dynamicTableColumnOption || [];
            _this.options = _this.column.options;
            _this.value = _this.table.getCellValue(_this.row, _this.column);
        }, function (err) { return _this.handleError(err); });
    };
    /**
     * @param {?} field
     * @return {?}
     */
    DropdownEditorComponent.prototype.getValuesByProcessDefinitionId = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var _this = this;
        this.formService
            .getRestFieldValuesColumnByProcessId(field.form.processDefinitionId, field.id, this.column.id)
            .subscribe(function (dynamicTableColumnOption) {
            _this.column.options = dynamicTableColumnOption || [];
            _this.options = _this.column.options;
            _this.value = _this.table.getCellValue(_this.row, _this.column);
        }, function (err) { return _this.handleError(err); });
    };
    /**
     * @param {?} row
     * @param {?} column
     * @param {?} event
     * @return {?}
     */
    DropdownEditorComponent.prototype.onValueChanged = /**
     * @param {?} row
     * @param {?} column
     * @param {?} event
     * @return {?}
     */
    function (row, column, event) {
        /** @type {?} */
        var value = ((/** @type {?} */ (event))).value;
        value = column.options.find(function (opt) { return opt.name === value; });
        row.value[column.id] = value;
    };
    /**
     * @param {?} error
     * @return {?}
     */
    DropdownEditorComponent.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
    };
    DropdownEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-dropdown-editor',
                    template: "<div class=\"dropdown-editor\">\n    <label [attr.for]=\"column.id\">{{column.name}}</label>\n    <mat-form-field>\n        <mat-select\n            floatPlaceholder=\"never\"\n            class=\"adf-dropdown-editor-select\"\n            [id]=\"column.id\"\n            [(ngModel)]=\"value\"\n            [required]=\"column.required\"\n            [disabled]=\"!column.editable\"\n            (selectionChange)=\"onValueChanged(row, column, $event)\">\n            <mat-option></mat-option>\n            <mat-option *ngFor=\"let opt of options\" [value]=\"opt.name\" [id]=\"opt.id\">{{opt.name}}</mat-option>\n        </mat-select>\n    </mat-form-field>\n</div>\n",
                    styles: [".adf-dropdown-editor-select{width:100%}"]
                }] }
    ];
    /** @nocollapse */
    DropdownEditorComponent.ctorParameters = function () { return [
        { type: FormService },
        { type: LogService }
    ]; };
    DropdownEditorComponent.propDecorators = {
        table: [{ type: Input }],
        row: [{ type: Input }],
        column: [{ type: Input }]
    };
    return DropdownEditorComponent;
}());
export { DropdownEditorComponent };
if (false) {
    /** @type {?} */
    DropdownEditorComponent.prototype.value;
    /** @type {?} */
    DropdownEditorComponent.prototype.options;
    /** @type {?} */
    DropdownEditorComponent.prototype.table;
    /** @type {?} */
    DropdownEditorComponent.prototype.row;
    /** @type {?} */
    DropdownEditorComponent.prototype.column;
    /** @type {?} */
    DropdownEditorComponent.prototype.formService;
    /**
     * @type {?}
     * @private
     */
    DropdownEditorComponent.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import moment from 'moment-es6';
import { ValidateDynamicTableRowEvent } from '../../../events/validate-dynamic-table-row.event';
import { FormWidgetModel } from './../core/form-widget.model';
import { DateCellValidator } from './date-cell-validator-model';
import { DynamicRowValidationSummary } from './dynamic-row-validation-summary.model';
import { NumberCellValidator } from './number-cell-validator.model';
import { RequiredCellValidator } from './required-cell-validator.model';
var DynamicTableModel = /** @class */ (function (_super) {
    tslib_1.__extends(DynamicTableModel, _super);
    function DynamicTableModel(field, formService) {
        var _this = _super.call(this, field.form, field.json) || this;
        _this.formService = formService;
        _this.columns = [];
        _this.visibleColumns = [];
        _this.rows = [];
        _this._validators = [];
        _this.field = field;
        if (field.json) {
            /** @type {?} */
            var columns = _this.getColumns(field);
            if (columns) {
                _this.columns = columns;
                _this.visibleColumns = _this.columns.filter(function (col) { return col.visible; });
            }
            if (field.json.value) {
                _this.rows = field.json.value.map(function (obj) { return (/** @type {?} */ ({ selected: false, value: obj })); });
            }
        }
        _this._validators = [
            new RequiredCellValidator(),
            new DateCellValidator(),
            new NumberCellValidator()
        ];
        return _this;
    }
    Object.defineProperty(DynamicTableModel.prototype, "selectedRow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedRow;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this._selectedRow && this._selectedRow === value) {
                this._selectedRow.selected = false;
                this._selectedRow = null;
                return;
            }
            this.rows.forEach(function (row) { return row.selected = false; });
            this._selectedRow = value;
            if (value) {
                this._selectedRow.selected = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    DynamicTableModel.prototype.getColumns = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field && field.json) {
            /** @type {?} */
            var definitions = field.json.columnDefinitions;
            if (!definitions && field.json.params && field.json.params.field) {
                definitions = field.json.params.field.columnDefinitions;
            }
            if (definitions) {
                return definitions.map(function (obj) { return (/** @type {?} */ (obj)); });
            }
        }
        return null;
    };
    /**
     * @return {?}
     */
    DynamicTableModel.prototype.flushValue = /**
     * @return {?}
     */
    function () {
        if (this.field) {
            this.field.value = this.rows.map(function (r) { return r.value; });
            this.field.updateForm();
        }
    };
    /**
     * @param {?} row
     * @param {?} offset
     * @return {?}
     */
    DynamicTableModel.prototype.moveRow = /**
     * @param {?} row
     * @param {?} offset
     * @return {?}
     */
    function (row, offset) {
        /** @type {?} */
        var oldIndex = this.rows.indexOf(row);
        if (oldIndex > -1) {
            /** @type {?} */
            var newIndex = (oldIndex + offset);
            if (newIndex < 0) {
                newIndex = 0;
            }
            else if (newIndex >= this.rows.length) {
                newIndex = this.rows.length;
            }
            /** @type {?} */
            var arr = this.rows.slice();
            arr.splice(oldIndex, 1);
            arr.splice(newIndex, 0, row);
            this.rows = arr;
            this.flushValue();
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    DynamicTableModel.prototype.deleteRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        if (row) {
            if (this.selectedRow === row) {
                this.selectedRow = null;
            }
            /** @type {?} */
            var idx = this.rows.indexOf(row);
            if (idx > -1) {
                this.rows.splice(idx, 1);
                this.flushValue();
            }
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    DynamicTableModel.prototype.addRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        if (row) {
            this.rows.push(row);
            // this.selectedRow = row;
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    DynamicTableModel.prototype.validateRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        var e_1, _a, e_2, _b;
        /** @type {?} */
        var summary = new DynamicRowValidationSummary({
            isValid: true,
            message: null
        });
        /** @type {?} */
        var event = new ValidateDynamicTableRowEvent(this.form, this.field, row, summary);
        this.formService.validateDynamicTableRow.next(event);
        if (event.defaultPrevented || !summary.isValid) {
            return summary;
        }
        if (row) {
            try {
                for (var _c = tslib_1.__values(this.columns), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var col = _d.value;
                    try {
                        for (var _e = tslib_1.__values(this._validators), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var validator = _f.value;
                            if (!validator.validate(row, col, summary)) {
                                return summary;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return summary;
    };
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    DynamicTableModel.prototype.getCellValue = /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (row, column) {
        /** @type {?} */
        var rowValue = row.value[column.id];
        if (column.type === 'Dropdown') {
            if (rowValue) {
                return rowValue.name;
            }
        }
        if (column.type === 'Boolean') {
            return rowValue ? true : false;
        }
        if (column.type === 'Date') {
            if (rowValue) {
                return moment(rowValue.split('T')[0], 'YYYY-MM-DD').format('DD-MM-YYYY');
            }
        }
        return rowValue || '';
    };
    /**
     * @param {?} column
     * @return {?}
     */
    DynamicTableModel.prototype.getDisplayText = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        /** @type {?} */
        var columnName = column.name;
        if (column.type === 'Amount') {
            /** @type {?} */
            var currency = column.amountCurrency || '$';
            columnName = column.name + " (" + currency + ")";
        }
        return columnName;
    };
    return DynamicTableModel;
}(FormWidgetModel));
export { DynamicTableModel };
if (false) {
    /** @type {?} */
    DynamicTableModel.prototype.field;
    /** @type {?} */
    DynamicTableModel.prototype.columns;
    /** @type {?} */
    DynamicTableModel.prototype.visibleColumns;
    /** @type {?} */
    DynamicTableModel.prototype.rows;
    /**
     * @type {?}
     * @private
     */
    DynamicTableModel.prototype._selectedRow;
    /**
     * @type {?}
     * @private
     */
    DynamicTableModel.prototype._validators;
    /**
     * @type {?}
     * @private
     */
    DynamicTableModel.prototype.formService;
}
//# sourceMappingURL=data:application/json;base64,
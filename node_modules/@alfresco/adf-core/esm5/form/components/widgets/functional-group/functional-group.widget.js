/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { ENTER, ESCAPE } from '@angular/cdk/keycodes';
import { Component, ElementRef, ViewEncapsulation } from '@angular/core';
import { FormService } from '../../../services/form.service';
import { baseHost, WidgetComponent } from './../widget.component';
var FunctionalGroupWidgetComponent = /** @class */ (function (_super) {
    tslib_1.__extends(FunctionalGroupWidgetComponent, _super);
    function FunctionalGroupWidgetComponent(formService, elementRef) {
        var _this = _super.call(this, formService) || this;
        _this.formService = formService;
        _this.elementRef = elementRef;
        _this.groups = [];
        _this.minTermLength = 1;
        return _this;
    }
    /**
     * @return {?}
     */
    FunctionalGroupWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.field) {
            /** @type {?} */
            var group = this.field.value;
            if (group) {
                this.value = group.name;
            }
            /** @type {?} */
            var params = this.field.params;
            if (params && params['restrictWithGroup']) {
                /** @type {?} */
                var restrictWithGroup = (/** @type {?} */ (params['restrictWithGroup']));
                this.groupId = restrictWithGroup.id;
            }
            // Load auto-completion for previously saved value
            if (this.value) {
                this.formService
                    .getWorkflowGroups(this.value, this.groupId)
                    .subscribe(function (groupModel) { return _this.groups = groupModel || []; });
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FunctionalGroupWidgetComponent.prototype.onKeyUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (this.value && this.value.length >= this.minTermLength && this.oldValue !== this.value) {
            if (event.keyCode !== ESCAPE && event.keyCode !== ENTER) {
                this.oldValue = this.value;
                this.formService.getWorkflowGroups(this.value, this.groupId)
                    .subscribe(function (group) {
                    _this.groups = group || [];
                });
            }
        }
    };
    /**
     * @return {?}
     */
    FunctionalGroupWidgetComponent.prototype.flushValue = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var option = this.groups.find(function (item) { return item.name.toLocaleLowerCase() === _this.value.toLocaleLowerCase(); });
        if (option) {
            this.field.value = option;
            this.value = option.name;
        }
        else {
            this.field.value = null;
            this.value = null;
        }
        this.field.updateForm();
    };
    /**
     * @param {?} item
     * @param {?} event
     * @return {?}
     */
    FunctionalGroupWidgetComponent.prototype.onItemClick = /**
     * @param {?} item
     * @param {?} event
     * @return {?}
     */
    function (item, event) {
        if (item) {
            this.field.value = item;
            this.value = item.name;
        }
        if (event) {
            event.preventDefault();
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    FunctionalGroupWidgetComponent.prototype.onItemSelect = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item) {
            this.field.value = item;
            this.value = item.name;
        }
    };
    FunctionalGroupWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'functional-group-widget',
                    template: "<div class=\"adf-group-widget {{field.className}}\"\n     [class.is-dirty]=\"value\"\n     [class.adf-invalid]=\"!field.isValid\" [class.adf-readonly]=\"field.readOnly\" id=\"functional-group-div\">\n    <mat-form-field>\n        <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name}}<span *ngIf=\"isRequired()\">*</span></label>\n        <input matInput\n               class=\"adf-input\"\n               type=\"text\"\n               [id]=\"field.id\"\n               [(ngModel)]=\"value\"\n               (keyup)=\"onKeyUp($event)\"\n               [disabled]=\"field.readOnly\"\n               placeholder=\"{{field.placeholder}}\"\n               [matAutocomplete]=\"auto\">\n        <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"onItemSelect($event.option.value)\">\n            <mat-option *ngFor=\"let item of groups\"\n                       [id]=\"field.id +'-'+item.id\"\n                       (click)=\"onItemClick(item, $event)\"  [value]=\"item\">\n                <span>{{item.name}}</span>\n            </mat-option>\n        </mat-autocomplete>\n\n    </mat-form-field>\n    <error-widget [error]=\"field.validationSummary\"></error-widget>\n    <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n</div>\n",
                    host: baseHost,
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-group-widget{width:100%}"]
                }] }
    ];
    /** @nocollapse */
    FunctionalGroupWidgetComponent.ctorParameters = function () { return [
        { type: FormService },
        { type: ElementRef }
    ]; };
    return FunctionalGroupWidgetComponent;
}(WidgetComponent));
export { FunctionalGroupWidgetComponent };
if (false) {
    /** @type {?} */
    FunctionalGroupWidgetComponent.prototype.value;
    /** @type {?} */
    FunctionalGroupWidgetComponent.prototype.oldValue;
    /** @type {?} */
    FunctionalGroupWidgetComponent.prototype.groups;
    /** @type {?} */
    FunctionalGroupWidgetComponent.prototype.minTermLength;
    /** @type {?} */
    FunctionalGroupWidgetComponent.prototype.groupId;
    /** @type {?} */
    FunctionalGroupWidgetComponent.prototype.formService;
    /** @type {?} */
    FunctionalGroupWidgetComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,
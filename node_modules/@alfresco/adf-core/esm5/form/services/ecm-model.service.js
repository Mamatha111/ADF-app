/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { LogService } from '../../services/log.service';
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { Injectable } from '@angular/core';
import { Observable, from } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../services/alfresco-api.service";
import * as i2 from "../../services/log.service";
var EcmModelService = /** @class */ (function () {
    function EcmModelService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    /**
     * @param {?} formName
     * @param {?} form
     * @return {?}
     */
    EcmModelService.prototype.createEcmTypeForActivitiForm = /**
     * @param {?} formName
     * @param {?} form
     * @return {?}
     */
    function (formName, form) {
        var _this = this;
        return new Observable(function (observer) {
            _this.searchActivitiEcmModel().subscribe(function (model) {
                if (!model) {
                    _this.createActivitiEcmModel(formName, form).subscribe(function (typeForm) {
                        observer.next(typeForm);
                        observer.complete();
                    });
                }
                else {
                    _this.saveFomType(formName, form).subscribe(function (typeForm) {
                        observer.next(typeForm);
                        observer.complete();
                    });
                }
            }, function (err) { return _this.handleError(err); });
        });
    };
    /**
     * @return {?}
     */
    EcmModelService.prototype.searchActivitiEcmModel = /**
     * @return {?}
     */
    function () {
        return this.getEcmModels().pipe(map(function (ecmModels) {
            return ecmModels.list.entries.find(function (model) { return model.entry.name === EcmModelService.MODEL_NAME; });
        }));
    };
    /**
     * @param {?} formName
     * @param {?} form
     * @return {?}
     */
    EcmModelService.prototype.createActivitiEcmModel = /**
     * @param {?} formName
     * @param {?} form
     * @return {?}
     */
    function (formName, form) {
        var _this = this;
        return new Observable(function (observer) {
            _this.createEcmModel(EcmModelService.MODEL_NAME, EcmModelService.MODEL_NAMESPACE).subscribe(function (model) {
                _this.logService.info('model created', model);
                _this.activeEcmModel(EcmModelService.MODEL_NAME).subscribe(function (modelActive) {
                    _this.logService.info('model active', modelActive);
                    _this.createEcmTypeWithProperties(formName, form).subscribe(function (typeCreated) {
                        observer.next(typeCreated);
                        observer.complete();
                    });
                }, function (err) { return _this.handleError(err); });
            }, function (err) { return _this.handleError(err); });
        });
    };
    /**
     * @param {?} formName
     * @param {?} form
     * @return {?}
     */
    EcmModelService.prototype.saveFomType = /**
     * @param {?} formName
     * @param {?} form
     * @return {?}
     */
    function (formName, form) {
        var _this = this;
        return new Observable(function (observer) {
            _this.searchEcmType(formName, EcmModelService.MODEL_NAME).subscribe(function (ecmType) {
                _this.logService.info('custom types', ecmType);
                if (!ecmType) {
                    _this.createEcmTypeWithProperties(formName, form).subscribe(function (typeCreated) {
                        observer.next(typeCreated);
                        observer.complete();
                    });
                }
                else {
                    observer.next(ecmType);
                    observer.complete();
                }
            }, function (err) { return _this.handleError(err); });
        });
    };
    /**
     * @param {?} formName
     * @param {?} form
     * @return {?}
     */
    EcmModelService.prototype.createEcmTypeWithProperties = /**
     * @param {?} formName
     * @param {?} form
     * @return {?}
     */
    function (formName, form) {
        var _this = this;
        return new Observable(function (observer) {
            _this.createEcmType(formName, EcmModelService.MODEL_NAME, EcmModelService.TYPE_MODEL).subscribe(function (typeCreated) {
                _this.logService.info('type Created', typeCreated);
                _this.addPropertyToAType(EcmModelService.MODEL_NAME, formName, form).subscribe(function (propertyAdded) {
                    _this.logService.info('property Added', propertyAdded);
                    observer.next(typeCreated);
                    observer.complete();
                }, function (err) { return _this.handleError(err); });
            }, function (err) { return _this.handleError(err); });
        });
    };
    /**
     * @param {?} typeName
     * @param {?} modelName
     * @return {?}
     */
    EcmModelService.prototype.searchEcmType = /**
     * @param {?} typeName
     * @param {?} modelName
     * @return {?}
     */
    function (typeName, modelName) {
        return this.getEcmType(modelName).pipe(map(function (customTypes) {
            return customTypes.list.entries.find(function (type) { return type.entry.prefixedName === typeName || type.entry.title === typeName; });
        }));
    };
    /**
     * @param {?} modelName
     * @return {?}
     */
    EcmModelService.prototype.activeEcmModel = /**
     * @param {?} modelName
     * @return {?}
     */
    function (modelName) {
        var _this = this;
        return from(this.apiService.getInstance().core.customModelApi.activateCustomModel(modelName))
            .pipe(map(this.toJson), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * @param {?} modelName
     * @param {?} nameSpace
     * @return {?}
     */
    EcmModelService.prototype.createEcmModel = /**
     * @param {?} modelName
     * @param {?} nameSpace
     * @return {?}
     */
    function (modelName, nameSpace) {
        var _this = this;
        return from(this.apiService.getInstance().core.customModelApi.createCustomModel('DRAFT', '', modelName, modelName, nameSpace))
            .pipe(map(this.toJson), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * @return {?}
     */
    EcmModelService.prototype.getEcmModels = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return from(this.apiService.getInstance().core.customModelApi.getAllCustomModel())
            .pipe(map(this.toJson), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * @param {?} modelName
     * @return {?}
     */
    EcmModelService.prototype.getEcmType = /**
     * @param {?} modelName
     * @return {?}
     */
    function (modelName) {
        var _this = this;
        return from(this.apiService.getInstance().core.customModelApi.getAllCustomType(modelName))
            .pipe(map(this.toJson), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * @param {?} typeName
     * @param {?} modelName
     * @param {?} parentType
     * @return {?}
     */
    EcmModelService.prototype.createEcmType = /**
     * @param {?} typeName
     * @param {?} modelName
     * @param {?} parentType
     * @return {?}
     */
    function (typeName, modelName, parentType) {
        var _this = this;
        /** @type {?} */
        var name = this.cleanNameType(typeName);
        return from(this.apiService.getInstance().core.customModelApi.createCustomType(modelName, name, parentType, typeName, ''))
            .pipe(map(this.toJson), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * @param {?} modelName
     * @param {?} typeName
     * @param {?} formFields
     * @return {?}
     */
    EcmModelService.prototype.addPropertyToAType = /**
     * @param {?} modelName
     * @param {?} typeName
     * @param {?} formFields
     * @return {?}
     */
    function (modelName, typeName, formFields) {
        var _this = this;
        /** @type {?} */
        var name = this.cleanNameType(typeName);
        /** @type {?} */
        var properties = [];
        if (formFields && formFields.values) {
            for (var key in formFields.values) {
                if (key) {
                    properties.push({
                        name: key,
                        title: key,
                        description: key,
                        dataType: 'd:text',
                        multiValued: false,
                        mandatory: false,
                        mandatoryEnforced: false
                    });
                }
            }
        }
        return from(this.apiService.getInstance().core.customModelApi.addPropertyToType(modelName, name, properties))
            .pipe(map(this.toJson), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * @param {?} name
     * @return {?}
     */
    EcmModelService.prototype.cleanNameType = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        /** @type {?} */
        var cleanName = name;
        if (name.indexOf(':') !== -1) {
            cleanName = name.split(':')[1];
        }
        return cleanName.replace(/[^a-zA-Z ]/g, '');
    };
    /**
     * @param {?} res
     * @return {?}
     */
    EcmModelService.prototype.toJson = /**
     * @param {?} res
     * @return {?}
     */
    function (res) {
        if (res) {
            return res || {};
        }
        return {};
    };
    /**
     * @param {?} err
     * @return {?}
     */
    EcmModelService.prototype.handleError = /**
     * @param {?} err
     * @return {?}
     */
    function (err) {
        this.logService.error(err);
    };
    EcmModelService.MODEL_NAMESPACE = 'activitiForms';
    EcmModelService.MODEL_NAME = 'activitiFormsModel';
    EcmModelService.TYPE_MODEL = 'cm:folder';
    EcmModelService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    EcmModelService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    /** @nocollapse */ EcmModelService.ngInjectableDef = i0.defineInjectable({ factory: function EcmModelService_Factory() { return new EcmModelService(i0.inject(i1.AlfrescoApiService), i0.inject(i2.LogService)); }, token: EcmModelService, providedIn: "root" });
    return EcmModelService;
}());
export { EcmModelService };
if (false) {
    /** @type {?} */
    EcmModelService.MODEL_NAMESPACE;
    /** @type {?} */
    EcmModelService.MODEL_NAME;
    /** @type {?} */
    EcmModelService.TYPE_MODEL;
    /**
     * @type {?}
     * @private
     */
    EcmModelService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    EcmModelService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,
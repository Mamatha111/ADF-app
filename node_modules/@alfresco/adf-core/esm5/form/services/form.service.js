/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { Injectable } from '@angular/core';
import { Observable, Subject, from, of, throwError } from 'rxjs';
import { FormDefinitionModel } from '../models/form-definition.model';
import { FormModel, FormOutcomeModel } from './../components/widgets/core/index';
import { EcmModelService } from './ecm-model.service';
import { map, catchError, switchMap, combineAll, defaultIfEmpty } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./ecm-model.service";
import * as i2 from "../../services/alfresco-api.service";
import * as i3 from "../../services/log.service";
var FormService = /** @class */ (function () {
    function FormService(ecmModelService, apiService, logService) {
        this.ecmModelService = ecmModelService;
        this.apiService = apiService;
        this.logService = logService;
        this.formLoaded = new Subject();
        this.formDataRefreshed = new Subject();
        this.formFieldValueChanged = new Subject();
        this.formEvents = new Subject();
        this.taskCompleted = new Subject();
        this.taskCompletedError = new Subject();
        this.taskSaved = new Subject();
        this.taskSavedError = new Subject();
        this.formContentClicked = new Subject();
        this.validateForm = new Subject();
        this.validateFormField = new Subject();
        this.validateDynamicTableRow = new Subject();
        this.executeOutcome = new Subject();
    }
    Object.defineProperty(FormService.prototype, "taskApi", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.apiService.getInstance().activiti.taskApi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormService.prototype, "modelsApi", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.apiService.getInstance().activiti.modelsApi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormService.prototype, "editorApi", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.apiService.getInstance().activiti.editorApi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormService.prototype, "processApi", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.apiService.getInstance().activiti.processApi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormService.prototype, "processInstanceVariablesApi", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.apiService.getInstance().activiti.processInstanceVariablesApi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormService.prototype, "usersWorkflowApi", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.apiService.getInstance().activiti.usersWorkflowApi;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormService.prototype, "groupsApi", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.apiService.getInstance().activiti.groupsApi;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Parses JSON data to create a corresponding Form model.
     * @param json JSON to create the form
     * @param data Values for the form fields
     * @param readOnly Should the form fields be read-only?
     * @returns Form model created from input data
     */
    /**
     * Parses JSON data to create a corresponding Form model.
     * @param {?} json JSON to create the form
     * @param {?=} data Values for the form fields
     * @param {?=} readOnly Should the form fields be read-only?
     * @return {?} Form model created from input data
     */
    FormService.prototype.parseForm = /**
     * Parses JSON data to create a corresponding Form model.
     * @param {?} json JSON to create the form
     * @param {?=} data Values for the form fields
     * @param {?=} readOnly Should the form fields be read-only?
     * @return {?} Form model created from input data
     */
    function (json, data, readOnly) {
        if (readOnly === void 0) { readOnly = false; }
        if (json) {
            /** @type {?} */
            var form = new FormModel(json, data, readOnly, this);
            if (!json.fields) {
                form.outcomes = [
                    new FormOutcomeModel(form, {
                        id: '$custom',
                        name: FormOutcomeModel.SAVE_ACTION,
                        isSystem: true
                    })
                ];
            }
            return form;
        }
        return null;
    };
    /**
     * Creates a Form with a field for each metadata property.
     * @param formName Name of the new form
     * @returns The new form
     */
    /**
     * Creates a Form with a field for each metadata property.
     * @param {?} formName Name of the new form
     * @return {?} The new form
     */
    FormService.prototype.createFormFromANode = /**
     * Creates a Form with a field for each metadata property.
     * @param {?} formName Name of the new form
     * @return {?} The new form
     */
    function (formName) {
        var _this = this;
        return new Observable(function (observer) {
            _this.createForm(formName).subscribe(function (form) {
                _this.ecmModelService.searchEcmType(formName, EcmModelService.MODEL_NAME).subscribe(function (customType) {
                    /** @type {?} */
                    var formDefinitionModel = new FormDefinitionModel(form.id, form.name, form.lastUpdatedByFullName, form.lastUpdated, customType.entry.properties);
                    from(_this.editorApi.saveForm(form.id, formDefinitionModel)).subscribe(function (formData) {
                        observer.next(formData);
                        observer.complete();
                    }, function (err) { return _this.handleError(err); });
                }, function (err) { return _this.handleError(err); });
            }, function (err) { return _this.handleError(err); });
        });
    };
    /**
     * Create a Form.
     * @param formName Name of the new form
     * @returns The new form
     */
    /**
     * Create a Form.
     * @param {?} formName Name of the new form
     * @return {?} The new form
     */
    FormService.prototype.createForm = /**
     * Create a Form.
     * @param {?} formName Name of the new form
     * @return {?} The new form
     */
    function (formName) {
        /** @type {?} */
        var dataModel = {
            name: formName,
            description: '',
            modelType: 2,
            stencilSet: 0
        };
        return from(this.modelsApi.createModel(dataModel));
    };
    /**
     * Saves a form.
     * @param formId ID of the form to save
     * @param formModel Model data for the form
     * @returns Data for the saved form
     */
    /**
     * Saves a form.
     * @param {?} formId ID of the form to save
     * @param {?} formModel Model data for the form
     * @return {?} Data for the saved form
     */
    FormService.prototype.saveForm = /**
     * Saves a form.
     * @param {?} formId ID of the form to save
     * @param {?} formModel Model data for the form
     * @return {?} Data for the saved form
     */
    function (formId, formModel) {
        return from(this.editorApi.saveForm(formId, formModel));
    };
    /**
     * Searches for a form by name.
     * @param name The form name to search for
     * @returns Form model(s) matching the search name
     */
    /**
     * Searches for a form by name.
     * @param {?} name The form name to search for
     * @return {?} Form model(s) matching the search name
     */
    FormService.prototype.searchFrom = /**
     * Searches for a form by name.
     * @param {?} name The form name to search for
     * @return {?} Form model(s) matching the search name
     */
    function (name) {
        var _this = this;
        /** @type {?} */
        var opts = {
            'modelType': 2
        };
        return from(this.modelsApi.getModels(opts))
            .pipe(map(function (forms) {
            return forms.data.find(function (formData) { return formData.name === name; });
        }), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets all the forms.
     * @returns List of form models
     */
    /**
     * Gets all the forms.
     * @return {?} List of form models
     */
    FormService.prototype.getForms = /**
     * Gets all the forms.
     * @return {?} List of form models
     */
    function () {
        var _this = this;
        /** @type {?} */
        var opts = {
            'modelType': 2
        };
        return from(this.modelsApi.getModels(opts))
            .pipe(map(this.toJsonArray), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets process definitions.
     * @returns List of process definitions
     */
    /**
     * Gets process definitions.
     * @return {?} List of process definitions
     */
    FormService.prototype.getProcessDefinitions = /**
     * Gets process definitions.
     * @return {?} List of process definitions
     */
    function () {
        var _this = this;
        return from(this.processApi.getProcessDefinitions({}))
            .pipe(map(this.toJsonArray), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets instance variables for a process.
     * @param processInstanceId ID of the target process
     * @returns List of instance variable information
     */
    /**
     * Gets instance variables for a process.
     * @param {?} processInstanceId ID of the target process
     * @return {?} List of instance variable information
     */
    FormService.prototype.getProcessVariablesById = /**
     * Gets instance variables for a process.
     * @param {?} processInstanceId ID of the target process
     * @return {?} List of instance variable information
     */
    function (processInstanceId) {
        var _this = this;
        return from(this.processInstanceVariablesApi.getProcessInstanceVariables(processInstanceId))
            .pipe(map(this.toJson), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets all the tasks.
     * @returns List of tasks
     */
    /**
     * Gets all the tasks.
     * @return {?} List of tasks
     */
    FormService.prototype.getTasks = /**
     * Gets all the tasks.
     * @return {?} List of tasks
     */
    function () {
        var _this = this;
        return from(this.taskApi.listTasks({}))
            .pipe(map(this.toJsonArray), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets a task.
     * @param taskId Task Id
     * @returns Task info
     */
    /**
     * Gets a task.
     * @param {?} taskId Task Id
     * @return {?} Task info
     */
    FormService.prototype.getTask = /**
     * Gets a task.
     * @param {?} taskId Task Id
     * @return {?} Task info
     */
    function (taskId) {
        var _this = this;
        return from(this.taskApi.getTask(taskId))
            .pipe(map(this.toJson), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Saves a task form.
     * @param taskId Task Id
     * @param formValues Form Values
     * @returns Null response when the operation is complete
     */
    /**
     * Saves a task form.
     * @param {?} taskId Task Id
     * @param {?} formValues Form Values
     * @return {?} Null response when the operation is complete
     */
    FormService.prototype.saveTaskForm = /**
     * Saves a task form.
     * @param {?} taskId Task Id
     * @param {?} formValues Form Values
     * @return {?} Null response when the operation is complete
     */
    function (taskId, formValues) {
        var _this = this;
        /** @type {?} */
        var saveFormRepresentation = (/** @type {?} */ ({ values: formValues }));
        return from(this.taskApi.saveTaskForm(taskId, saveFormRepresentation))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Completes a Task Form.
     * @param taskId Task Id
     * @param formValues Form Values
     * @param outcome Form Outcome
     * @returns Null response when the operation is complete
     */
    /**
     * Completes a Task Form.
     * @param {?} taskId Task Id
     * @param {?} formValues Form Values
     * @param {?=} outcome Form Outcome
     * @return {?} Null response when the operation is complete
     */
    FormService.prototype.completeTaskForm = /**
     * Completes a Task Form.
     * @param {?} taskId Task Id
     * @param {?} formValues Form Values
     * @param {?=} outcome Form Outcome
     * @return {?} Null response when the operation is complete
     */
    function (taskId, formValues, outcome) {
        var _this = this;
        /** @type {?} */
        var completeFormRepresentation = (/** @type {?} */ ({ values: formValues }));
        if (outcome) {
            completeFormRepresentation.outcome = outcome;
        }
        return from(this.taskApi.completeTaskForm(taskId, completeFormRepresentation))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets a form related to a task.
     * @param taskId ID of the target task
     * @returns Form definition
     */
    /**
     * Gets a form related to a task.
     * @param {?} taskId ID of the target task
     * @return {?} Form definition
     */
    FormService.prototype.getTaskForm = /**
     * Gets a form related to a task.
     * @param {?} taskId ID of the target task
     * @return {?} Form definition
     */
    function (taskId) {
        var _this = this;
        return from(this.taskApi.getTaskForm(taskId))
            .pipe(map(this.toJson), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets a form definition.
     * @param formId ID of the target form
     * @returns Form definition
     */
    /**
     * Gets a form definition.
     * @param {?} formId ID of the target form
     * @return {?} Form definition
     */
    FormService.prototype.getFormDefinitionById = /**
     * Gets a form definition.
     * @param {?} formId ID of the target form
     * @return {?} Form definition
     */
    function (formId) {
        var _this = this;
        return from(this.editorApi.getForm(formId))
            .pipe(map(this.toJson), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets the form definition with a given name.
     * @param name The form name
     * @returns Form definition
     */
    /**
     * Gets the form definition with a given name.
     * @param {?} name The form name
     * @return {?} Form definition
     */
    FormService.prototype.getFormDefinitionByName = /**
     * Gets the form definition with a given name.
     * @param {?} name The form name
     * @return {?} Form definition
     */
    function (name) {
        var _this = this;
        /** @type {?} */
        var opts = {
            'filter': 'myReusableForms',
            'filterText': name,
            'modelType': 2
        };
        return from(this.modelsApi.getModels(opts))
            .pipe(map(this.getFormId), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets the start form instance for a given process.
     * @param processId Process definition ID
     * @returns Form definition
     */
    /**
     * Gets the start form instance for a given process.
     * @param {?} processId Process definition ID
     * @return {?} Form definition
     */
    FormService.prototype.getStartFormInstance = /**
     * Gets the start form instance for a given process.
     * @param {?} processId Process definition ID
     * @return {?} Form definition
     */
    function (processId) {
        var _this = this;
        return from(this.processApi.getProcessInstanceStartForm(processId))
            .pipe(map(this.toJson), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets a process instance.
     * @param processId ID of the process to get
     * @returns Process instance
     */
    /**
     * Gets a process instance.
     * @param {?} processId ID of the process to get
     * @return {?} Process instance
     */
    FormService.prototype.getProcessInstance = /**
     * Gets a process instance.
     * @param {?} processId ID of the process to get
     * @return {?} Process instance
     */
    function (processId) {
        var _this = this;
        return from(this.processApi.getProcessInstance(processId))
            .pipe(map(this.toJson), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets the start form definition for a given process.
     * @param processId Process definition ID
     * @returns Form definition
     */
    /**
     * Gets the start form definition for a given process.
     * @param {?} processId Process definition ID
     * @return {?} Form definition
     */
    FormService.prototype.getStartFormDefinition = /**
     * Gets the start form definition for a given process.
     * @param {?} processId Process definition ID
     * @return {?} Form definition
     */
    function (processId) {
        var _this = this;
        return from(this.processApi.getProcessDefinitionStartForm(processId))
            .pipe(map(this.toJson), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets values of fields populated by a REST backend.
     * @param taskId Task identifier
     * @param field Field identifier
     * @returns Field values
     */
    /**
     * Gets values of fields populated by a REST backend.
     * @param {?} taskId Task identifier
     * @param {?} field Field identifier
     * @return {?} Field values
     */
    FormService.prototype.getRestFieldValues = /**
     * Gets values of fields populated by a REST backend.
     * @param {?} taskId Task identifier
     * @param {?} field Field identifier
     * @return {?} Field values
     */
    function (taskId, field) {
        var _this = this;
        return from(this.taskApi.getRestFieldValues(taskId, field))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets values of fields populated by a REST backend using a process ID.
     * @param processDefinitionId Process identifier
     * @param field Field identifier
     * @returns Field values
     */
    /**
     * Gets values of fields populated by a REST backend using a process ID.
     * @param {?} processDefinitionId Process identifier
     * @param {?} field Field identifier
     * @return {?} Field values
     */
    FormService.prototype.getRestFieldValuesByProcessId = /**
     * Gets values of fields populated by a REST backend using a process ID.
     * @param {?} processDefinitionId Process identifier
     * @param {?} field Field identifier
     * @return {?} Field values
     */
    function (processDefinitionId, field) {
        var _this = this;
        return from(this.processApi.getRestFieldValues(processDefinitionId, field))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets column values of fields populated by a REST backend using a process ID.
     * @param processDefinitionId Process identifier
     * @param field Field identifier
     * @param column Column identifier
     * @returns Field values
     */
    /**
     * Gets column values of fields populated by a REST backend using a process ID.
     * @param {?} processDefinitionId Process identifier
     * @param {?} field Field identifier
     * @param {?=} column Column identifier
     * @return {?} Field values
     */
    FormService.prototype.getRestFieldValuesColumnByProcessId = /**
     * Gets column values of fields populated by a REST backend using a process ID.
     * @param {?} processDefinitionId Process identifier
     * @param {?} field Field identifier
     * @param {?=} column Column identifier
     * @return {?} Field values
     */
    function (processDefinitionId, field, column) {
        var _this = this;
        return from(this.processApi.getRestTableFieldValues(processDefinitionId, field, column))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets column values of fields populated by a REST backend.
     * @param taskId Task identifier
     * @param field Field identifier
     * @param column Column identifier
     * @returns Field values
     */
    /**
     * Gets column values of fields populated by a REST backend.
     * @param {?} taskId Task identifier
     * @param {?} field Field identifier
     * @param {?=} column Column identifier
     * @return {?} Field values
     */
    FormService.prototype.getRestFieldValuesColumn = /**
     * Gets column values of fields populated by a REST backend.
     * @param {?} taskId Task identifier
     * @param {?} field Field identifier
     * @param {?=} column Column identifier
     * @return {?} Field values
     */
    function (taskId, field, column) {
        var _this = this;
        return from(this.taskApi.getRestFieldValuesColumn(taskId, field, column))
            .pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Returns a URL for the profile picture of a user.
     * @param userId ID of the target user
     * @returns URL string
     */
    /**
     * Returns a URL for the profile picture of a user.
     * @param {?} userId ID of the target user
     * @return {?} URL string
     */
    FormService.prototype.getUserProfileImageApi = /**
     * Returns a URL for the profile picture of a user.
     * @param {?} userId ID of the target user
     * @return {?} URL string
     */
    function (userId) {
        return this.apiService.getInstance().activiti.userApi.getUserProfilePictureUrl(userId);
    };
    /**
     * Gets a list of workflow users.
     * @param filter Filter to select specific users
     * @param groupId Group ID for the search
     * @returns Array of users
     */
    /**
     * Gets a list of workflow users.
     * @param {?} filter Filter to select specific users
     * @param {?=} groupId Group ID for the search
     * @return {?} Array of users
     */
    FormService.prototype.getWorkflowUsers = /**
     * Gets a list of workflow users.
     * @param {?} filter Filter to select specific users
     * @param {?=} groupId Group ID for the search
     * @return {?} Array of users
     */
    function (filter, groupId) {
        var _this = this;
        /** @type {?} */
        var option = { filter: filter };
        if (groupId) {
            option.groupId = groupId;
        }
        return from(this.usersWorkflowApi.getUsers(option))
            .pipe(switchMap(function (response) { return (/** @type {?} */ (response.data)) || []; }), map(function (user) {
            user.userImage = _this.getUserProfileImageApi(user.id);
            return of(user);
        }), combineAll(), defaultIfEmpty([]), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets a list of groups in a workflow.
     * @param filter Filter to select specific groups
     * @param groupId Group ID for the search
     * @returns Array of groups
     */
    /**
     * Gets a list of groups in a workflow.
     * @param {?} filter Filter to select specific groups
     * @param {?=} groupId Group ID for the search
     * @return {?} Array of groups
     */
    FormService.prototype.getWorkflowGroups = /**
     * Gets a list of groups in a workflow.
     * @param {?} filter Filter to select specific groups
     * @param {?=} groupId Group ID for the search
     * @return {?} Array of groups
     */
    function (filter, groupId) {
        var _this = this;
        /** @type {?} */
        var option = { filter: filter };
        if (groupId) {
            option.groupId = groupId;
        }
        return from(this.groupsApi.getGroups(option))
            .pipe(map(function (response) { return (/** @type {?} */ (response.data)) || []; }), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets the ID of a form.
     * @param form Object representing a form
     * @returns ID string
     */
    /**
     * Gets the ID of a form.
     * @param {?} form Object representing a form
     * @return {?} ID string
     */
    FormService.prototype.getFormId = /**
     * Gets the ID of a form.
     * @param {?} form Object representing a form
     * @return {?} ID string
     */
    function (form) {
        /** @type {?} */
        var result = null;
        if (form && form.data && form.data.length > 0) {
            result = form.data[0].id;
        }
        return result;
    };
    /**
     * Creates a JSON representation of form data.
     * @param res Object representing form data
     * @returns JSON data
     */
    /**
     * Creates a JSON representation of form data.
     * @param {?} res Object representing form data
     * @return {?} JSON data
     */
    FormService.prototype.toJson = /**
     * Creates a JSON representation of form data.
     * @param {?} res Object representing form data
     * @return {?} JSON data
     */
    function (res) {
        if (res) {
            return res || {};
        }
        return {};
    };
    /**
     * Creates a JSON array representation of form data.
     * @param res Object representing form data
     * @returns JSON data
     */
    /**
     * Creates a JSON array representation of form data.
     * @param {?} res Object representing form data
     * @return {?} JSON data
     */
    FormService.prototype.toJsonArray = /**
     * Creates a JSON array representation of form data.
     * @param {?} res Object representing form data
     * @return {?} JSON data
     */
    function (res) {
        if (res) {
            return res.data || [];
        }
        return [];
    };
    /**
     * Reports an error message.
     * @param error Data object with optional `message` and `status` fields for the error
     * @returns Error message
     */
    /**
     * Reports an error message.
     * @param {?} error Data object with optional `message` and `status` fields for the error
     * @return {?} Error message
     */
    FormService.prototype.handleError = /**
     * Reports an error message.
     * @param {?} error Data object with optional `message` and `status` fields for the error
     * @return {?} Error message
     */
    function (error) {
        /** @type {?} */
        var errMsg = FormService.UNKNOWN_ERROR_MESSAGE;
        if (error) {
            errMsg = (error.message) ? error.message :
                error.status ? error.status + " - " + error.statusText : FormService.GENERIC_ERROR_MESSAGE;
        }
        this.logService.error(errMsg);
        return throwError(errMsg);
    };
    FormService.UNKNOWN_ERROR_MESSAGE = 'Unknown error';
    FormService.GENERIC_ERROR_MESSAGE = 'Server error';
    FormService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FormService.ctorParameters = function () { return [
        { type: EcmModelService },
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    /** @nocollapse */ FormService.ngInjectableDef = i0.defineInjectable({ factory: function FormService_Factory() { return new FormService(i0.inject(i1.EcmModelService), i0.inject(i2.AlfrescoApiService), i0.inject(i3.LogService)); }, token: FormService, providedIn: "root" });
    return FormService;
}());
export { FormService };
if (false) {
    /** @type {?} */
    FormService.UNKNOWN_ERROR_MESSAGE;
    /** @type {?} */
    FormService.GENERIC_ERROR_MESSAGE;
    /** @type {?} */
    FormService.prototype.formLoaded;
    /** @type {?} */
    FormService.prototype.formDataRefreshed;
    /** @type {?} */
    FormService.prototype.formFieldValueChanged;
    /** @type {?} */
    FormService.prototype.formEvents;
    /** @type {?} */
    FormService.prototype.taskCompleted;
    /** @type {?} */
    FormService.prototype.taskCompletedError;
    /** @type {?} */
    FormService.prototype.taskSaved;
    /** @type {?} */
    FormService.prototype.taskSavedError;
    /** @type {?} */
    FormService.prototype.formContentClicked;
    /** @type {?} */
    FormService.prototype.validateForm;
    /** @type {?} */
    FormService.prototype.validateFormField;
    /** @type {?} */
    FormService.prototype.validateDynamicTableRow;
    /** @type {?} */
    FormService.prototype.executeOutcome;
    /**
     * @type {?}
     * @private
     */
    FormService.prototype.ecmModelService;
    /**
     * @type {?}
     * @private
     */
    FormService.prototype.apiService;
    /**
     * @type {?}
     * @protected
     */
    FormService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,
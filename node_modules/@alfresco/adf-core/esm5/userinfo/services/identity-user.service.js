/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { from, of } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { IdentityUserModel } from '../models/identity-user.model';
import { JwtHelperService } from '../../services/jwt-helper.service';
import { AppConfigService } from '../../app-config/app-config.service';
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import * as i0 from "@angular/core";
import * as i1 from "../../services/jwt-helper.service";
import * as i2 from "../../services/alfresco-api.service";
import * as i3 from "../../app-config/app-config.service";
var IdentityUserService = /** @class */ (function () {
    function IdentityUserService(helper, apiService, appConfigService) {
        this.helper = helper;
        this.apiService = apiService;
        this.appConfigService = appConfigService;
    }
    /**
     * Gets the name and other basic details of the current user.
     * @returns The user's details
     */
    /**
     * Gets the name and other basic details of the current user.
     * @return {?} The user's details
     */
    IdentityUserService.prototype.getCurrentUserInfo = /**
     * Gets the name and other basic details of the current user.
     * @return {?} The user's details
     */
    function () {
        /** @type {?} */
        var familyName = this.getValueFromToken(IdentityUserService.FAMILY_NAME);
        /** @type {?} */
        var givenName = this.getValueFromToken(IdentityUserService.GIVEN_NAME);
        /** @type {?} */
        var email = this.getValueFromToken(IdentityUserService.USER_EMAIL);
        /** @type {?} */
        var username = this.getValueFromToken(IdentityUserService.USER_PREFERRED_USERNAME);
        /** @type {?} */
        var user = { firstName: givenName, lastName: familyName, email: email, username: username };
        return new IdentityUserModel(user);
    };
    /**
     * Gets a named value from the user access token.
     * @param key Key name of the field to retrieve
     * @returns Value from the token
     */
    /**
     * Gets a named value from the user access token.
     * @template T
     * @param {?} key Key name of the field to retrieve
     * @return {?} Value from the token
     */
    IdentityUserService.prototype.getValueFromToken = /**
     * Gets a named value from the user access token.
     * @template T
     * @param {?} key Key name of the field to retrieve
     * @return {?} Value from the token
     */
    function (key) {
        /** @type {?} */
        var value;
        /** @type {?} */
        var token = localStorage.getItem(IdentityUserService.USER_ACCESS_TOKEN);
        if (token) {
            /** @type {?} */
            var tokenPayload = this.helper.decodeToken(token);
            value = tokenPayload[key];
        }
        return (/** @type {?} */ (value));
    };
    /**
     * Find users based on search input.
     * @param search Search query string
     * @returns List of users
     */
    /**
     * Find users based on search input.
     * @param {?} search Search query string
     * @return {?} List of users
     */
    IdentityUserService.prototype.findUsersByName = /**
     * Find users based on search input.
     * @param {?} search Search query string
     * @return {?} List of users
     */
    function (search) {
        if (search === '') {
            return of([]);
        }
        /** @type {?} */
        var url = this.buildUserUrl();
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = { search: search };
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return (from(this.apiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null)));
    };
    /**
     * Get client roles of a user for a particular client.
     * @param userId ID of the target user
     * @param clientId ID of the client app
     * @returns List of client roles
     */
    /**
     * Get client roles of a user for a particular client.
     * @param {?} userId ID of the target user
     * @param {?} clientId ID of the client app
     * @return {?} List of client roles
     */
    IdentityUserService.prototype.getClientRoles = /**
     * Get client roles of a user for a particular client.
     * @param {?} userId ID of the target user
     * @param {?} clientId ID of the client app
     * @return {?} List of client roles
     */
    function (userId, clientId) {
        /** @type {?} */
        var url = this.buildUserClientRoleMapping(userId, clientId);
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.apiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null));
    };
    /**
     * Checks whether user has access to a client app.
     * @param userId ID of the target user
     * @param clientId ID of the client app
     * @returns True if the user has access, false otherwise
     */
    /**
     * Checks whether user has access to a client app.
     * @param {?} userId ID of the target user
     * @param {?} clientId ID of the client app
     * @return {?} True if the user has access, false otherwise
     */
    IdentityUserService.prototype.checkUserHasClientApp = /**
     * Checks whether user has access to a client app.
     * @param {?} userId ID of the target user
     * @param {?} clientId ID of the client app
     * @return {?} True if the user has access, false otherwise
     */
    function (userId, clientId) {
        return this.getClientRoles(userId, clientId).pipe(map(function (clientRoles) {
            if (clientRoles.length > 0) {
                return true;
            }
            return false;
        }));
    };
    /**
     * Checks whether a user has any of the client app roles.
     * @param userId ID of the target user
     * @param clientId ID of the client app
     * @param roleNames List of role names to check for
     * @returns True if the user has one or more of the roles, false otherwise
     */
    /**
     * Checks whether a user has any of the client app roles.
     * @param {?} userId ID of the target user
     * @param {?} clientId ID of the client app
     * @param {?} roleNames List of role names to check for
     * @return {?} True if the user has one or more of the roles, false otherwise
     */
    IdentityUserService.prototype.checkUserHasAnyClientAppRole = /**
     * Checks whether a user has any of the client app roles.
     * @param {?} userId ID of the target user
     * @param {?} clientId ID of the client app
     * @param {?} roleNames List of role names to check for
     * @return {?} True if the user has one or more of the roles, false otherwise
     */
    function (userId, clientId, roleNames) {
        return this.getClientRoles(userId, clientId).pipe(map(function (clientRoles) {
            /** @type {?} */
            var hasRole = false;
            if (clientRoles.length > 0) {
                roleNames.forEach(function (roleName) {
                    /** @type {?} */
                    var role = clientRoles.find(function (availableRole) {
                        return availableRole.name === roleName;
                    });
                    if (role) {
                        hasRole = true;
                        return;
                    }
                });
            }
            return hasRole;
        }));
    };
    /**
     * Gets the client ID for an application.
     * @param applicationName Name of the application
     * @returns Client ID string
     */
    /**
     * Gets the client ID for an application.
     * @param {?} applicationName Name of the application
     * @return {?} Client ID string
     */
    IdentityUserService.prototype.getClientIdByApplicationName = /**
     * Gets the client ID for an application.
     * @param {?} applicationName Name of the application
     * @return {?} Client ID string
     */
    function (applicationName) {
        /** @type {?} */
        var url = this.buildGetClientsUrl();
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = { clientId: applicationName };
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.apiService.getInstance()
            .oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null)).pipe(map(function (response) {
            /** @type {?} */
            var clientId = response && response.length > 0 ? response[0].id : '';
            return clientId;
        }));
    };
    /**
     * Checks if a user has access to an application.
     * @param userId ID of the user
     * @param applicationName Name of the application
     * @returns True if the user has access, false otherwise
     */
    /**
     * Checks if a user has access to an application.
     * @param {?} userId ID of the user
     * @param {?} applicationName Name of the application
     * @return {?} True if the user has access, false otherwise
     */
    IdentityUserService.prototype.checkUserHasApplicationAccess = /**
     * Checks if a user has access to an application.
     * @param {?} userId ID of the user
     * @param {?} applicationName Name of the application
     * @return {?} True if the user has access, false otherwise
     */
    function (userId, applicationName) {
        var _this = this;
        return this.getClientIdByApplicationName(applicationName).pipe(switchMap(function (clientId) {
            return _this.checkUserHasClientApp(userId, clientId);
        }));
    };
    /**
     * Checks if a user has any application role.
     * @param userId ID of the target user
     * @param applicationName Name of the application
     * @param roleNames List of role names to check for
     * @returns True if the user has one or more of the roles, false otherwise
     */
    /**
     * Checks if a user has any application role.
     * @param {?} userId ID of the target user
     * @param {?} applicationName Name of the application
     * @param {?} roleNames List of role names to check for
     * @return {?} True if the user has one or more of the roles, false otherwise
     */
    IdentityUserService.prototype.checkUserHasAnyApplicationRole = /**
     * Checks if a user has any application role.
     * @param {?} userId ID of the target user
     * @param {?} applicationName Name of the application
     * @param {?} roleNames List of role names to check for
     * @return {?} True if the user has one or more of the roles, false otherwise
     */
    function (userId, applicationName, roleNames) {
        var _this = this;
        return this.getClientIdByApplicationName(applicationName).pipe(switchMap(function (clientId) {
            return _this.checkUserHasAnyClientAppRole(userId, clientId, roleNames);
        }));
    };
    /**
     * Gets details for all users.
     * @returns Array of user info objects
     */
    /**
     * Gets details for all users.
     * @return {?} Array of user info objects
     */
    IdentityUserService.prototype.getUsers = /**
     * Gets details for all users.
     * @return {?} Array of user info objects
     */
    function () {
        /** @type {?} */
        var url = this.buildUserUrl();
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var authNames = [];
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.apiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, null, null)).pipe(map(function (response) {
            return response;
        }));
    };
    /**
     * Gets a list of roles for a user.
     * @param userId ID of the user
     * @returns Array of role info objects
     */
    /**
     * Gets a list of roles for a user.
     * @param {?} userId ID of the user
     * @return {?} Array of role info objects
     */
    IdentityUserService.prototype.getUserRoles = /**
     * Gets a list of roles for a user.
     * @param {?} userId ID of the user
     * @return {?} Array of role info objects
     */
    function (userId) {
        /** @type {?} */
        var url = this.buildRolesUrl(userId);
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.apiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null)).pipe(map(function (response) {
            return response;
        }));
    };
    /**
     * Gets an array of users (including the current user) who have any of the roles in the supplied list.
     * @param roleNames List of role names to look for
     * @returns Array of user info objects
     */
    /**
     * Gets an array of users (including the current user) who have any of the roles in the supplied list.
     * @param {?} roleNames List of role names to look for
     * @return {?} Array of user info objects
     */
    IdentityUserService.prototype.getUsersByRolesWithCurrentUser = /**
     * Gets an array of users (including the current user) who have any of the roles in the supplied list.
     * @param {?} roleNames List of role names to look for
     * @return {?} Array of user info objects
     */
    function (roleNames) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filteredUsers, users, i, hasAnyRole;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filteredUsers = [];
                        if (!(roleNames && roleNames.length > 0)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.getUsers().toPromise()];
                    case 1:
                        users = _a.sent();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < users.length)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.userHasAnyRole(users[i].id, roleNames)];
                    case 3:
                        hasAnyRole = _a.sent();
                        if (hasAnyRole) {
                            filteredUsers.push(users[i]);
                        }
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, filteredUsers];
                }
            });
        });
    };
    /**
     * Gets an array of users (not including the current user) who have any of the roles in the supplied list.
     * @param roleNames List of role names to look for
     * @returns Array of user info objects
     */
    /**
     * Gets an array of users (not including the current user) who have any of the roles in the supplied list.
     * @param {?} roleNames List of role names to look for
     * @return {?} Array of user info objects
     */
    IdentityUserService.prototype.getUsersByRolesWithoutCurrentUser = /**
     * Gets an array of users (not including the current user) who have any of the roles in the supplied list.
     * @param {?} roleNames List of role names to look for
     * @return {?} Array of user info objects
     */
    function (roleNames) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filteredUsers, currentUser_1, users, i, hasAnyRole;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filteredUsers = [];
                        if (!(roleNames && roleNames.length > 0)) return [3 /*break*/, 5];
                        currentUser_1 = this.getCurrentUserInfo();
                        return [4 /*yield*/, this.getUsers().toPromise()];
                    case 1:
                        users = _a.sent();
                        users = users.filter(function (user) { return user.username !== currentUser_1.username; });
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < users.length)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.userHasAnyRole(users[i].id, roleNames)];
                    case 3:
                        hasAnyRole = _a.sent();
                        if (hasAnyRole) {
                            filteredUsers.push(users[i]);
                        }
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, filteredUsers];
                }
            });
        });
    };
    /**
     * @private
     * @param {?} userId
     * @param {?} roleNames
     * @return {?}
     */
    IdentityUserService.prototype.userHasAnyRole = /**
     * @private
     * @param {?} userId
     * @param {?} roleNames
     * @return {?}
     */
    function (userId, roleNames) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var userRoles, hasAnyRole;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUserRoles(userId).toPromise()];
                    case 1:
                        userRoles = _a.sent();
                        hasAnyRole = roleNames.some(function (roleName) {
                            /** @type {?} */
                            var filteredRoles = userRoles.filter(function (userRole) {
                                return userRole.name.toLocaleLowerCase() === roleName.toLocaleLowerCase();
                            });
                            return filteredRoles.length > 0;
                        });
                        return [2 /*return*/, hasAnyRole];
                }
            });
        });
    };
    /**
     * Checks if a user has one of the roles from a list.
     * @param userId ID of the target user
     * @param roleNames Array of roles to check for
     * @returns True if the user has one of the roles, false otherwise
     */
    /**
     * Checks if a user has one of the roles from a list.
     * @param {?} userId ID of the target user
     * @param {?} roleNames Array of roles to check for
     * @return {?} True if the user has one of the roles, false otherwise
     */
    IdentityUserService.prototype.checkUserHasRole = /**
     * Checks if a user has one of the roles from a list.
     * @param {?} userId ID of the target user
     * @param {?} roleNames Array of roles to check for
     * @return {?} True if the user has one of the roles, false otherwise
     */
    function (userId, roleNames) {
        return this.getUserRoles(userId).pipe(map(function (userRoles) {
            /** @type {?} */
            var hasRole = false;
            if (userRoles && userRoles.length > 0) {
                roleNames.forEach(function (roleName) {
                    /** @type {?} */
                    var role = userRoles.find(function (userRole) {
                        return roleName === userRole.name;
                    });
                    if (role) {
                        hasRole = true;
                        return;
                    }
                });
            }
            return hasRole;
        }));
    };
    /**
     * @private
     * @return {?}
     */
    IdentityUserService.prototype.buildUserUrl = /**
     * @private
     * @return {?}
     */
    function () {
        return this.appConfigService.get('identityHost') + "/users";
    };
    /**
     * @private
     * @param {?} userId
     * @param {?} clientId
     * @return {?}
     */
    IdentityUserService.prototype.buildUserClientRoleMapping = /**
     * @private
     * @param {?} userId
     * @param {?} clientId
     * @return {?}
     */
    function (userId, clientId) {
        return this.appConfigService.get('identityHost') + "/users/" + userId + "/role-mappings/clients/" + clientId;
    };
    /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    IdentityUserService.prototype.buildRolesUrl = /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    function (userId) {
        return this.appConfigService.get('identityHost') + "/users/" + userId + "/role-mappings/realm/composite";
    };
    /**
     * @private
     * @return {?}
     */
    IdentityUserService.prototype.buildGetClientsUrl = /**
     * @private
     * @return {?}
     */
    function () {
        return this.appConfigService.get('identityHost') + "/clients";
    };
    IdentityUserService.USER_NAME = 'name';
    IdentityUserService.FAMILY_NAME = 'family_name';
    IdentityUserService.GIVEN_NAME = 'given_name';
    IdentityUserService.USER_EMAIL = 'email';
    IdentityUserService.USER_ACCESS_TOKEN = 'access_token';
    IdentityUserService.USER_PREFERRED_USERNAME = 'preferred_username';
    IdentityUserService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    IdentityUserService.ctorParameters = function () { return [
        { type: JwtHelperService },
        { type: AlfrescoApiService },
        { type: AppConfigService }
    ]; };
    /** @nocollapse */ IdentityUserService.ngInjectableDef = i0.defineInjectable({ factory: function IdentityUserService_Factory() { return new IdentityUserService(i0.inject(i1.JwtHelperService), i0.inject(i2.AlfrescoApiService), i0.inject(i3.AppConfigService)); }, token: IdentityUserService, providedIn: "root" });
    return IdentityUserService;
}());
export { IdentityUserService };
if (false) {
    /** @type {?} */
    IdentityUserService.USER_NAME;
    /** @type {?} */
    IdentityUserService.FAMILY_NAME;
    /** @type {?} */
    IdentityUserService.GIVEN_NAME;
    /** @type {?} */
    IdentityUserService.USER_EMAIL;
    /** @type {?} */
    IdentityUserService.USER_ACCESS_TOKEN;
    /** @type {?} */
    IdentityUserService.USER_PREFERRED_USERNAME;
    /**
     * @type {?}
     * @private
     */
    IdentityUserService.prototype.helper;
    /**
     * @type {?}
     * @private
     */
    IdentityUserService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    IdentityUserService.prototype.appConfigService;
}
//# sourceMappingURL=data:application/json;base64,
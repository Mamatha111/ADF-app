/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
/* tslint:disable:rxjs-no-subject-value */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { UserPreferencesService, UserPreferenceValues } from '../services/user-preferences.service';
import { Pagination } from '@alfresco/js-api';
var InfinitePaginationComponent = /** @class */ (function () {
    function InfinitePaginationComponent(cdr, userPreferencesService) {
        this.cdr = cdr;
        this.userPreferencesService = userPreferencesService;
        /**
         * Is a new page loading?
         */
        this.isLoading = false;
        /**
         * Emitted when the "Load More" button is clicked.
         */
        this.loadMore = new EventEmitter();
        this.pagination = InfinitePaginationComponent.DEFAULT_PAGINATION;
        this.requestPaginationModel = {
            skipCount: 0,
            merge: true
        };
    }
    Object.defineProperty(InfinitePaginationComponent.prototype, "target", {
        get: /**
         * @return {?}
         */
        function () {
            return this._target;
        },
        /** Component that provides custom pagination support. */
        set: /**
         * Component that provides custom pagination support.
         * @param {?} target
         * @return {?}
         */
        function (target) {
            var _this = this;
            if (target) {
                this._target = target;
                this.paginationSubscription = target.pagination.subscribe(function (pagination) {
                    _this.isLoading = false;
                    _this.pagination = pagination;
                    if (!_this.pagination.hasMoreItems) {
                        _this.pagination.hasMoreItems = false;
                    }
                    _this.cdr.detectChanges();
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InfinitePaginationComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.userPreferencesService.select(UserPreferenceValues.PaginationSize).subscribe(function (pageSize) {
            _this.pageSize = _this.pageSize || pageSize;
            _this.requestPaginationModel.maxItems = _this.pageSize;
        });
    };
    /**
     * @return {?}
     */
    InfinitePaginationComponent.prototype.onLoadMore = /**
     * @return {?}
     */
    function () {
        this.requestPaginationModel.skipCount = 0;
        this.requestPaginationModel.merge = false;
        this.requestPaginationModel.maxItems += this.pageSize;
        this.loadMore.next(this.requestPaginationModel);
        if (this._target) {
            this.isLoading = true;
            this._target.updatePagination((/** @type {?} */ (this.requestPaginationModel)));
        }
    };
    /**
     * @return {?}
     */
    InfinitePaginationComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.pagination.skipCount = 0;
        this.pagination.maxItems = this.pageSize;
        if (this._target) {
            this._target.updatePagination(this.pagination);
        }
    };
    /**
     * @return {?}
     */
    InfinitePaginationComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.paginationSubscription) {
            this.paginationSubscription.unsubscribe();
        }
    };
    InfinitePaginationComponent.DEFAULT_PAGINATION = new Pagination({
        skipCount: 0,
        maxItems: 25,
        totalItems: 0
    });
    InfinitePaginationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-infinite-pagination',
                    host: { 'class': 'infinite-adf-pagination' },
                    template: "<div *ngIf=\"pagination?.hasMoreItems || isLoading\" class=\"adf-infinite-pagination\">\n\n    <button mat-button\n        *ngIf=\"!isLoading\"\n        class=\"adf-infinite-pagination-load-more\"\n        (click)=\"onLoadMore()\"\n        data-automation-id=\"adf-infinite-pagination-button\">\n            <ng-content></ng-content>\n    </button>\n\n    <mat-progress-bar *ngIf=\"isLoading\"\n        mode=\"indeterminate\"\n        class=\"adf-infinite-pagination-spinner\"\n        data-automation-id=\"adf-infinite-pagination-spinner\"></mat-progress-bar>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-infinite-pagination{display:flex;justify-content:space-around;min-height:56px}.adf-infinite-pagination-load-more{margin-bottom:10px;margin-top:10px}"]
                }] }
    ];
    /** @nocollapse */
    InfinitePaginationComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: UserPreferencesService }
    ]; };
    InfinitePaginationComponent.propDecorators = {
        target: [{ type: Input }],
        pageSize: [{ type: Input }],
        isLoading: [{ type: Input, args: ['loading',] }],
        loadMore: [{ type: Output }]
    };
    return InfinitePaginationComponent;
}());
export { InfinitePaginationComponent };
if (false) {
    /** @type {?} */
    InfinitePaginationComponent.DEFAULT_PAGINATION;
    /** @type {?} */
    InfinitePaginationComponent.prototype._target;
    /**
     * Number of items that are added with each "load more" event.
     * @type {?}
     */
    InfinitePaginationComponent.prototype.pageSize;
    /**
     * Is a new page loading?
     * @type {?}
     */
    InfinitePaginationComponent.prototype.isLoading;
    /**
     * Emitted when the "Load More" button is clicked.
     * @type {?}
     */
    InfinitePaginationComponent.prototype.loadMore;
    /** @type {?} */
    InfinitePaginationComponent.prototype.pagination;
    /** @type {?} */
    InfinitePaginationComponent.prototype.requestPaginationModel;
    /**
     * @type {?}
     * @private
     */
    InfinitePaginationComponent.prototype.paginationSubscription;
    /**
     * @type {?}
     * @private
     */
    InfinitePaginationComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    InfinitePaginationComponent.prototype.userPreferencesService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5maW5pdGUtcGFnaW5hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJwYWdpbmF0aW9uL2luZmluaXRlLXBhZ2luYXRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkEsT0FBTyxFQUNILHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQ25FLEtBQUssRUFBVSxNQUFNLEVBQWEsaUJBQWlCLEVBQ3RELE1BQU0sZUFBZSxDQUFDO0FBT3ZCLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3BHLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUU5QztJQTZESSxxQ0FBb0IsR0FBc0IsRUFBVSxzQkFBOEM7UUFBOUUsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFBVSwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCOzs7O1FBZmxHLGNBQVMsR0FBWSxLQUFLLENBQUM7Ozs7UUFJM0IsYUFBUSxHQUF5QyxJQUFJLFlBQVksRUFBMEIsQ0FBQztRQUU1RixlQUFVLEdBQW9CLDJCQUEyQixDQUFDLGtCQUFrQixDQUFDO1FBRTdFLDJCQUFzQixHQUEyQjtZQUM3QyxTQUFTLEVBQUUsQ0FBQztZQUNaLEtBQUssRUFBRSxJQUFJO1NBQ2QsQ0FBQztJQUtGLENBQUM7SUEzQ0Qsc0JBQ0ksK0NBQU07Ozs7UUFnQlY7WUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDeEIsQ0FBQztRQXBCRCx5REFBeUQ7Ozs7OztRQUN6RCxVQUNXLE1BQTBCO1lBRHJDLGlCQWVDO1lBYkcsSUFBSSxNQUFNLEVBQUU7Z0JBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxNQUFNLENB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LGlEQUE2RTs7SUFFN0UsNkRBR0U7Ozs7O0lBRUYsNkRBQTZDOzs7OztJQUVqQywwQ0FBOEI7Ozs7O0lBQUUsNkRBQXNEIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6bm8taW5wdXQtcmVuYW1lICAqL1xuLyogdHNsaW50OmRpc2FibGU6cnhqcy1uby1zdWJqZWN0LXZhbHVlICovXG5cbmltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEV2ZW50RW1pdHRlcixcbiAgICBJbnB1dCwgT25Jbml0LCBPdXRwdXQsIE9uRGVzdHJveSwgVmlld0VuY2Fwc3VsYXRpb25cbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBhZ2luYXRlZENvbXBvbmVudCB9IGZyb20gJy4vcGFnaW5hdGVkLWNvbXBvbmVudC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQYWdpbmF0aW9uQ29tcG9uZW50SW50ZXJmYWNlIH0gZnJvbSAnLi9wYWdpbmF0aW9uLWNvbXBvbmVudC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUGFnaW5hdGlvbk1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL3BhZ2luYXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgUmVxdWVzdFBhZ2luYXRpb25Nb2RlbCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0LXBhZ2luYXRpb24ubW9kZWwnO1xuaW1wb3J0IHsgVXNlclByZWZlcmVuY2VzU2VydmljZSwgVXNlclByZWZlcmVuY2VWYWx1ZXMgfSBmcm9tICcuLi9zZXJ2aWNlcy91c2VyLXByZWZlcmVuY2VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGFnaW5hdGlvbiB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1pbmZpbml0ZS1wYWdpbmF0aW9uJyxcbiAgICBob3N0OiB7ICdjbGFzcyc6ICdpbmZpbml0ZS1hZGYtcGFnaW5hdGlvbicgfSxcbiAgICB0ZW1wbGF0ZVVybDogJy4vaW5maW5pdGUtcGFnaW5hdGlvbi5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vaW5maW5pdGUtcGFnaW5hdGlvbi5jb21wb25lbnQuc2NzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgSW5maW5pdGVQYWdpbmF0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIFBhZ2luYXRpb25Db21wb25lbnRJbnRlcmZhY2Uge1xuXG4gICAgc3RhdGljIERFRkFVTFRfUEFHSU5BVElPTjogUGFnaW5hdGlvbiA9IG5ldyBQYWdpbmF0aW9uKHtcbiAgICAgICAgc2tpcENvdW50OiAwLFxuICAgICAgICBtYXhJdGVtczogMjUsXG4gICAgICAgIHRvdGFsSXRlbXM6IDBcbiAgICB9KTtcblxuICAgIF90YXJnZXQ6IFBhZ2luYXRlZENvbXBvbmVudDtcblxuICAgIC8qKiBDb21wb25lbnQgdGhhdCBwcm92aWRlcyBjdXN0b20gcGFnaW5hdGlvbiBzdXBwb3J0LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IHRhcmdldCh0YXJnZXQ6IFBhZ2luYXRlZENvbXBvbmVudCkge1xuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLnBhZ2luYXRpb25TdWJzY3JpcHRpb24gPSB0YXJnZXQucGFnaW5hdGlvbi5zdWJzY3JpYmUoKHBhZ2luYXRpb246IFBhZ2luYXRpb25Nb2RlbCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5wYWdpbmF0aW9uID0gcGFnaW5hdGlvbjtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5wYWdpbmF0aW9uLmhhc01vcmVJdGVtcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2luYXRpb24uaGFzTW9yZUl0ZW1zID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgdGFyZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKiBOdW1iZXIgb2YgaXRlbXMgdGhhdCBhcmUgYWRkZWQgd2l0aCBlYWNoIFwibG9hZCBtb3JlXCIgZXZlbnQuICovXG4gICAgQElucHV0KClcbiAgICBwYWdlU2l6ZTogbnVtYmVyO1xuXG4gICAgLyoqIElzIGEgbmV3IHBhZ2UgbG9hZGluZz8gKi9cbiAgICBASW5wdXQoJ2xvYWRpbmcnKVxuICAgIGlzTG9hZGluZzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgXCJMb2FkIE1vcmVcIiBidXR0b24gaXMgY2xpY2tlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBsb2FkTW9yZTogRXZlbnRFbWl0dGVyPFJlcXVlc3RQYWdpbmF0aW9uTW9kZWw+ID0gbmV3IEV2ZW50RW1pdHRlcjxSZXF1ZXN0UGFnaW5hdGlvbk1vZGVsPigpO1xuXG4gICAgcGFnaW5hdGlvbjogUGFnaW5hdGlvbk1vZGVsID0gSW5maW5pdGVQYWdpbmF0aW9uQ29tcG9uZW50LkRFRkFVTFRfUEFHSU5BVElPTjtcblxuICAgIHJlcXVlc3RQYWdpbmF0aW9uTW9kZWw6IFJlcXVlc3RQYWdpbmF0aW9uTW9kZWwgPSB7XG4gICAgICAgIHNraXBDb3VudDogMCxcbiAgICAgICAgbWVyZ2U6IHRydWVcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBwYWdpbmF0aW9uU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgdXNlclByZWZlcmVuY2VzU2VydmljZTogVXNlclByZWZlcmVuY2VzU2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnVzZXJQcmVmZXJlbmNlc1NlcnZpY2Uuc2VsZWN0KFVzZXJQcmVmZXJlbmNlVmFsdWVzLlBhZ2luYXRpb25TaXplKS5zdWJzY3JpYmUoKHBhZ2VTaXplOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGFnZVNpemUgPSB0aGlzLnBhZ2VTaXplIHx8IHBhZ2VTaXplO1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0UGFnaW5hdGlvbk1vZGVsLm1heEl0ZW1zID0gdGhpcy5wYWdlU2l6ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25Mb2FkTW9yZSgpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0UGFnaW5hdGlvbk1vZGVsLnNraXBDb3VudCA9IDA7XG4gICAgICAgIHRoaXMucmVxdWVzdFBhZ2luYXRpb25Nb2RlbC5tZXJnZSA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMucmVxdWVzdFBhZ2luYXRpb25Nb2RlbC5tYXhJdGVtcyArPSB0aGlzLnBhZ2VTaXplO1xuXG4gICAgICAgIHRoaXMubG9hZE1vcmUubmV4dCh0aGlzLnJlcXVlc3RQYWdpbmF0aW9uTW9kZWwpO1xuXG4gICAgICAgIGlmICh0aGlzLl90YXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldC51cGRhdGVQYWdpbmF0aW9uKDxSZXF1ZXN0UGFnaW5hdGlvbk1vZGVsPiB0aGlzLnJlcXVlc3RQYWdpbmF0aW9uTW9kZWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMucGFnaW5hdGlvbi5za2lwQ291bnQgPSAwO1xuICAgICAgICB0aGlzLnBhZ2luYXRpb24ubWF4SXRlbXMgPSB0aGlzLnBhZ2VTaXplO1xuXG4gICAgICAgIGlmICh0aGlzLl90YXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldC51cGRhdGVQYWdpbmF0aW9uKHRoaXMucGFnaW5hdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFnaW5hdGlvblN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5wYWdpbmF0aW9uU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=
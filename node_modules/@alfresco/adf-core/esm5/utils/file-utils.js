/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @record
 */
export function FileInfo() { }
if (false) {
    /** @type {?|undefined} */
    FileInfo.prototype.entry;
    /** @type {?|undefined} */
    FileInfo.prototype.file;
    /** @type {?|undefined} */
    FileInfo.prototype.relativeFolder;
}
var FileUtils = /** @class */ (function () {
    function FileUtils() {
    }
    /**
     * @param {?} folder
     * @return {?}
     */
    FileUtils.flatten = /**
     * @param {?} folder
     * @return {?}
     */
    function (folder) {
        /** @type {?} */
        var reader = folder.createReader();
        /** @type {?} */
        var files = [];
        return new Promise(function (resolve) {
            /** @type {?} */
            var iterations = [];
            (function traverse() {
                reader.readEntries(function (entries) {
                    if (!entries.length) {
                        Promise.all(iterations).then(function () { return resolve(files); });
                    }
                    else {
                        iterations.push(Promise.all(entries.map(function (entry) {
                            if (entry.isFile) {
                                return new Promise(function (resolveFile) {
                                    entry.file(function (file) {
                                        files.push({
                                            entry: entry,
                                            file: file,
                                            relativeFolder: entry.fullPath.replace(/\/[^\/]*$/, '')
                                        });
                                        resolveFile();
                                    });
                                });
                            }
                            else {
                                return FileUtils.flatten(entry).then(function (result) {
                                    files.push.apply(files, tslib_1.__spread(result));
                                });
                            }
                        })));
                        // Try calling traverse() again for the same dir, according to spec
                        traverse();
                    }
                });
            })();
        });
    };
    /**
     * @param {?} fileList
     * @return {?}
     */
    FileUtils.toFileArray = /**
     * @param {?} fileList
     * @return {?}
     */
    function (fileList) {
        /** @type {?} */
        var result = [];
        if (fileList && fileList.length > 0) {
            for (var i = 0; i < fileList.length; i++) {
                result.push(fileList[i]);
            }
        }
        return result;
    };
    return FileUtils;
}());
export { FileUtils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbInV0aWxzL2ZpbGUtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLDhCQUlDOzs7SUFIRyx5QkFBWTs7SUFDWix3QkFBWTs7SUFDWixrQ0FBd0I7O0FBRzVCO0lBQUE7SUFpREEsQ0FBQzs7Ozs7SUEvQ1UsaUJBQU87Ozs7SUFBZCxVQUFlLE1BQVc7O1lBQ2xCLE1BQU0sR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFOztZQUM5QixLQUFLLEdBQWUsRUFBRTtRQUMxQixPQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTzs7Z0JBQ25CLFVBQVUsR0FBRyxFQUFFO1lBQ25CLENBQUMsU0FBUyxRQUFRO2dCQUNkLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBQyxPQUFPO29CQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTt3QkFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBTSxPQUFBLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBZCxDQUFjLENBQUMsQ0FBQztxQkFDdEQ7eUJBQU07d0JBQ0gsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBQyxLQUFLOzRCQUMxQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7Z0NBQ2QsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFDLFdBQVc7b0NBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFVO3dDQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDOzRDQUNQLEtBQUssRUFBRSxLQUFLOzRDQUNaLElBQUksRUFBRSxJQUFJOzRDQUNWLGNBQWMsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO3lDQUMxRCxDQUFDLENBQUM7d0NBQ0gsV0FBVyxFQUFFLENBQUM7b0NBQ2xCLENBQUMsQ0FBQyxDQUFDO2dDQUNQLENBQUMsQ0FBQyxDQUFDOzZCQUNOO2lDQUFNO2dDQUNILE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxNQUFNO29DQUN4QyxLQUFLLENBQUMsSUFBSSxPQUFWLEtBQUssbUJBQVMsTUFBTSxHQUFFO2dDQUMxQixDQUFDLENBQUMsQ0FBQzs2QkFDTjt3QkFDTCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ0wsbUVBQW1FO3dCQUNuRSxRQUFRLEVBQUUsQ0FBQztxQkFDZDtnQkFDTCxDQUFDLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDVCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Ozs7O0lBRU0scUJBQVc7Ozs7SUFBbEIsVUFBbUIsUUFBa0I7O1lBQzdCLE1BQU0sR0FBRyxFQUFFO1FBRWYsSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDakMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDNUI7U0FDSjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxnQkFBQztBQUFELENBQUMsQUFqREQsSUFpREMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVJbmZvIHtcbiAgICBlbnRyeT86IGFueTtcbiAgICBmaWxlPzogRmlsZTtcbiAgICByZWxhdGl2ZUZvbGRlcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEZpbGVVdGlscyB7XG5cbiAgICBzdGF0aWMgZmxhdHRlbihmb2xkZXI6IGFueSk6IFByb21pc2U8RmlsZUluZm9bXT4ge1xuICAgICAgICBsZXQgcmVhZGVyID0gZm9sZGVyLmNyZWF0ZVJlYWRlcigpO1xuICAgICAgICBsZXQgZmlsZXM6IEZpbGVJbmZvW10gPSBbXTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBsZXQgaXRlcmF0aW9ucyA9IFtdO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIHRyYXZlcnNlKCkge1xuICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkRW50cmllcygoZW50cmllcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWVudHJpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChpdGVyYXRpb25zKS50aGVuKCgpID0+IHJlc29sdmUoZmlsZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdGlvbnMucHVzaChQcm9taXNlLmFsbChlbnRyaWVzLm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkuaXNGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZUZpbGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LmZpbGUoZnVuY3Rpb24gKGZpbGU6IEZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnk6IGVudHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlOiBmaWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZUZvbGRlcjogZW50cnkuZnVsbFBhdGgucmVwbGFjZSgvXFwvW15cXC9dKiQvLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlRmlsZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGaWxlVXRpbHMuZmxhdHRlbihlbnRyeSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlcy5wdXNoKC4uLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUcnkgY2FsbGluZyB0cmF2ZXJzZSgpIGFnYWluIGZvciB0aGUgc2FtZSBkaXIsIGFjY29yZGluZyB0byBzcGVjXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdG9GaWxlQXJyYXkoZmlsZUxpc3Q6IEZpbGVMaXN0KTogRmlsZVtdIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuXG4gICAgICAgIGlmIChmaWxlTGlzdCAmJiBmaWxlTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZmlsZUxpc3RbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4iXX0=
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
import { Directive, ElementRef, HostListener, Input, NgZone, Renderer2 } from '@angular/core';
import { FileUtils } from '../utils/file-utils';
var UploadDirective = /** @class */ (function () {
    function UploadDirective(el, renderer, ngZone) {
        this.el = el;
        this.renderer = renderer;
        this.ngZone = ngZone;
        /**
         * Enables/disables uploading.
         */
        this.enabled = true;
        /**
         * Upload mode. Can be "drop" (receives dropped files) or "click"
         * (clicking opens a file dialog). Both modes can be active at once.
         */
        this.mode = ['drop']; // click|drop
        this.isDragging = false;
        this.cssClassName = 'adf-upload__dragging';
        this.element = el.nativeElement;
    }
    /**
     * @return {?}
     */
    UploadDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isClickMode() && this.renderer) {
            /** @type {?} */
            var inputUpload = this.renderer.createElement('input');
            this.upload = this.el.nativeElement.parentElement.appendChild(inputUpload);
            this.upload.type = 'file';
            this.upload.style.display = 'none';
            this.upload.addEventListener('change', function (event) { return _this.onSelectFiles(event); });
            if (this.multiple) {
                this.upload.setAttribute('multiple', '');
            }
            if (this.accept) {
                this.upload.setAttribute('accept', this.accept);
            }
            if (this.directory) {
                this.upload.setAttribute('webkitdirectory', '');
            }
        }
        if (this.isDropMode()) {
            this.ngZone.runOutsideAngular(function () {
                _this.element.addEventListener('dragenter', _this.onDragEnter.bind(_this));
                _this.element.addEventListener('dragover', _this.onDragOver.bind(_this));
                _this.element.addEventListener('dragleave', _this.onDragLeave.bind(_this));
                _this.element.addEventListener('drop', _this.onDrop.bind(_this));
            });
        }
    };
    /**
     * @return {?}
     */
    UploadDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.element.removeEventListener('dragenter', this.onDragEnter);
        this.element.removeEventListener('dragover', this.onDragOver);
        this.element.removeEventListener('dragleave', this.onDragLeave);
        this.element.removeEventListener('drop', this.onDrop);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    UploadDirective.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isClickMode() && this.upload) {
            event.preventDefault();
            this.upload.click();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    UploadDirective.prototype.onDragEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isDropMode()) {
            this.element.classList.add(this.cssClassName);
            this.isDragging = true;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    UploadDirective.prototype.onDragOver = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        if (this.isDropMode()) {
            this.element.classList.add(this.cssClassName);
            this.isDragging = true;
        }
        return false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    UploadDirective.prototype.onDragLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isDropMode()) {
            this.element.classList.remove(this.cssClassName);
            this.isDragging = false;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    UploadDirective.prototype.onDrop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (this.isDropMode()) {
            event.stopPropagation();
            event.preventDefault();
            this.element.classList.remove(this.cssClassName);
            this.isDragging = false;
            /** @type {?} */
            var dataTransfer = this.getDataTransfer(event);
            if (dataTransfer) {
                this.getFilesDropped(dataTransfer).then(function (files) {
                    _this.onUploadFiles(files);
                });
            }
        }
        return false;
    };
    /**
     * @param {?} files
     * @return {?}
     */
    UploadDirective.prototype.onUploadFiles = /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        if (this.enabled && files.length > 0) {
            /** @type {?} */
            var customEvent = new CustomEvent('upload-files', {
                detail: {
                    sender: this,
                    data: this.data,
                    files: files
                },
                bubbles: true
            });
            this.el.nativeElement.dispatchEvent(customEvent);
        }
    };
    /**
     * @protected
     * @param {?} mode
     * @return {?}
     */
    UploadDirective.prototype.hasMode = /**
     * @protected
     * @param {?} mode
     * @return {?}
     */
    function (mode) {
        return this.enabled && mode && this.mode && this.mode.indexOf(mode) > -1;
    };
    /**
     * @protected
     * @return {?}
     */
    UploadDirective.prototype.isDropMode = /**
     * @protected
     * @return {?}
     */
    function () {
        return this.hasMode('drop');
    };
    /**
     * @protected
     * @return {?}
     */
    UploadDirective.prototype.isClickMode = /**
     * @protected
     * @return {?}
     */
    function () {
        return this.hasMode('click');
    };
    /**
     * @param {?} event
     * @return {?}
     */
    UploadDirective.prototype.getDataTransfer = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event && event.dataTransfer) {
            return event.dataTransfer;
        }
        if (event && event.originalEvent && event.originalEvent.dataTransfer) {
            return event.originalEvent.dataTransfer;
        }
        return null;
    };
    /**
     * Extract files from the DataTransfer object used to hold the data that is being dragged during a drag and drop operation.
     * @param dataTransfer DataTransfer object
     */
    /**
     * Extract files from the DataTransfer object used to hold the data that is being dragged during a drag and drop operation.
     * @param {?} dataTransfer DataTransfer object
     * @return {?}
     */
    UploadDirective.prototype.getFilesDropped = /**
     * Extract files from the DataTransfer object used to hold the data that is being dragged during a drag and drop operation.
     * @param {?} dataTransfer DataTransfer object
     * @return {?}
     */
    function (dataTransfer) {
        return new Promise(function (resolve) {
            /** @type {?} */
            var iterations = [];
            if (dataTransfer) {
                /** @type {?} */
                var items = dataTransfer.items;
                if (items) {
                    var _loop_1 = function (i) {
                        if (typeof items[i].webkitGetAsEntry !== 'undefined') {
                            /** @type {?} */
                            var item_1 = items[i].webkitGetAsEntry();
                            if (item_1) {
                                if (item_1.isFile) {
                                    iterations.push(Promise.resolve((/** @type {?} */ ({
                                        entry: item_1,
                                        file: items[i].getAsFile(),
                                        relativeFolder: '/'
                                    }))));
                                }
                                else if (item_1.isDirectory) {
                                    iterations.push(new Promise(function (resolveFolder) {
                                        FileUtils.flatten(item_1).then(function (files) { return resolveFolder(files); });
                                    }));
                                }
                            }
                        }
                        else {
                            iterations.push(Promise.resolve((/** @type {?} */ ({
                                entry: null,
                                file: items[i].getAsFile(),
                                relativeFolder: '/'
                            }))));
                        }
                    };
                    for (var i = 0; i < items.length; i++) {
                        _loop_1(i);
                    }
                }
                else {
                    // safari or FF
                    /** @type {?} */
                    var files = FileUtils
                        .toFileArray(dataTransfer.files)
                        .map(function (file) { return (/** @type {?} */ ({
                        entry: null,
                        file: file,
                        relativeFolder: '/'
                    })); });
                    iterations.push(Promise.resolve(files));
                }
            }
            Promise.all(iterations).then(function (result) {
                resolve(result.reduce(function (a, b) { return a.concat(b); }, []));
            });
        });
    };
    /**
     * Invoked when user selects files or folders by means of File Dialog
     * @param event DOM event
     */
    /**
     * Invoked when user selects files or folders by means of File Dialog
     * @param {?} event DOM event
     * @return {?}
     */
    UploadDirective.prototype.onSelectFiles = /**
     * Invoked when user selects files or folders by means of File Dialog
     * @param {?} event DOM event
     * @return {?}
     */
    function (event) {
        if (this.isClickMode()) {
            /** @type {?} */
            var input = ((/** @type {?} */ (event.currentTarget)));
            /** @type {?} */
            var files = FileUtils.toFileArray(input.files);
            this.onUploadFiles(files.map(function (file) { return (/** @type {?} */ ({
                entry: null,
                file: file,
                relativeFolder: '/'
            })); }));
            event.target.value = '';
        }
    };
    UploadDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-upload]'
                },] }
    ];
    /** @nocollapse */
    UploadDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone }
    ]; };
    UploadDirective.propDecorators = {
        enabled: [{ type: Input, args: ['adf-upload',] }],
        data: [{ type: Input, args: ['adf-upload-data',] }],
        mode: [{ type: Input }],
        multiple: [{ type: Input }],
        accept: [{ type: Input }],
        directory: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return UploadDirective;
}());
export { UploadDirective };
if (false) {
    /**
     * Enables/disables uploading.
     * @type {?}
     */
    UploadDirective.prototype.enabled;
    /**
     * Data to upload.
     * @type {?}
     */
    UploadDirective.prototype.data;
    /**
     * Upload mode. Can be "drop" (receives dropped files) or "click"
     * (clicking opens a file dialog). Both modes can be active at once.
     * @type {?}
     */
    UploadDirective.prototype.mode;
    /**
     * Toggles multiple file uploads.
     * @type {?}
     */
    UploadDirective.prototype.multiple;
    /**
     * (Click mode only) MIME type filter for files to accept.
     * @type {?}
     */
    UploadDirective.prototype.accept;
    /**
     * (Click mode only) Toggles uploading of directories.
     * @type {?}
     */
    UploadDirective.prototype.directory;
    /** @type {?} */
    UploadDirective.prototype.isDragging;
    /**
     * @type {?}
     * @private
     */
    UploadDirective.prototype.cssClassName;
    /**
     * @type {?}
     * @private
     */
    UploadDirective.prototype.upload;
    /**
     * @type {?}
     * @private
     */
    UploadDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    UploadDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    UploadDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    UploadDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { LogService } from '../services/log.service';
import { DownloadZipService } from '../services/download-zip.service';
var DownloadZipDialogComponent = /** @class */ (function () {
    function DownloadZipDialogComponent(dialogRef, data, logService, downloadZipService) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.logService = logService;
        this.downloadZipService = downloadZipService;
        // flag for async threads
        this.cancelled = false;
    }
    /**
     * @return {?}
     */
    DownloadZipDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.data && this.data.nodeIds && this.data.nodeIds.length > 0) {
            if (!this.cancelled) {
                this.downloadZip(this.data.nodeIds);
            }
            else {
                this.logService.log('Cancelled');
            }
        }
    };
    /**
     * @return {?}
     */
    DownloadZipDialogComponent.prototype.cancelDownload = /**
     * @return {?}
     */
    function () {
        this.cancelled = true;
        this.downloadZipService.cancelDownload(this.downloadId);
        this.dialogRef.close(false);
    };
    /**
     * @param {?} nodeIds
     * @return {?}
     */
    DownloadZipDialogComponent.prototype.downloadZip = /**
     * @param {?} nodeIds
     * @return {?}
     */
    function (nodeIds) {
        var _this = this;
        if (nodeIds && nodeIds.length > 0) {
            this.downloadZipService.createDownload({ nodeIds: nodeIds }).subscribe(function (data) {
                if (data && data.entry && data.entry.id) {
                    /** @type {?} */
                    var url_1 = _this.downloadZipService.getContentUrl(data.entry.id, true);
                    _this.downloadZipService.getNode(data.entry.id).subscribe(function (downloadNode) {
                        _this.logService.log(downloadNode);
                        /** @type {?} */
                        var fileName = downloadNode.entry.name;
                        _this.downloadId = data.entry.id;
                        _this.waitAndDownload(data.entry.id, url_1, fileName);
                    });
                }
            });
        }
    };
    /**
     * @param {?} downloadId
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    DownloadZipDialogComponent.prototype.waitAndDownload = /**
     * @param {?} downloadId
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    function (downloadId, url, fileName) {
        var _this = this;
        if (this.cancelled) {
            return;
        }
        this.downloadZipService.getDownload(downloadId).subscribe(function (downloadEntry) {
            if (downloadEntry.entry) {
                if (downloadEntry.entry.status === 'DONE') {
                    _this.download(url, fileName);
                }
                else {
                    setTimeout(function () {
                        _this.waitAndDownload(downloadId, url, fileName);
                    }, 1000);
                }
            }
        });
    };
    /**
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    DownloadZipDialogComponent.prototype.download = /**
     * @param {?} url
     * @param {?} fileName
     * @return {?}
     */
    function (url, fileName) {
        if (url && fileName) {
            /** @type {?} */
            var link = document.createElement('a');
            link.style.display = 'none';
            link.download = fileName;
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        this.dialogRef.close(true);
    };
    DownloadZipDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-download-zip-dialog',
                    template: "<h1 matDialogTitle>{{ 'CORE.DIALOG.DOWNLOAD_ZIP.TITLE' | translate }}</h1>\n<div mat-dialog-content>\n    <mat-progress-bar color=\"primary\" mode=\"indeterminate\"></mat-progress-bar>\n</div>\n<div mat-dialog-actions>\n    <span class=\"adf-spacer\"></span>\n    <button mat-button color=\"primary\" id=\"cancel-button\" (click)=\"cancelDownload()\">\n        {{ 'CORE.DIALOG.DOWNLOAD_ZIP.ACTIONS.CANCEL' | translate }}\n    </button>\n</div>\n",
                    host: { 'class': 'adf-download-zip-dialog' },
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-spacer{flex:1 1 auto}.adf-download-zip-dialog .mat-dialog-actions .mat-button-wrapper{text-transform:uppercase}"]
                }] }
    ];
    /** @nocollapse */
    DownloadZipDialogComponent.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
        { type: LogService },
        { type: DownloadZipService }
    ]; };
    return DownloadZipDialogComponent;
}());
export { DownloadZipDialogComponent };
if (false) {
    /** @type {?} */
    DownloadZipDialogComponent.prototype.cancelled;
    /** @type {?} */
    DownloadZipDialogComponent.prototype.downloadId;
    /**
     * @type {?}
     * @private
     */
    DownloadZipDialogComponent.prototype.dialogRef;
    /** @type {?} */
    DownloadZipDialogComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    DownloadZipDialogComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    DownloadZipDialogComponent.prototype.downloadZipService;
}
//# sourceMappingURL=data:application/json;base64,
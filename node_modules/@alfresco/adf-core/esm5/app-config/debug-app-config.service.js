/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { StorageService } from '../services/storage.service';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
var DebugAppConfigService = /** @class */ (function (_super) {
    tslib_1.__extends(DebugAppConfigService, _super);
    function DebugAppConfigService(storage, http) {
        var _this = _super.call(this, http) || this;
        _this.storage = storage;
        return _this;
    }
    /** @override */
    /**
     * @override
     * @template T
     * @param {?} key
     * @param {?=} defaultValue
     * @return {?}
     */
    DebugAppConfigService.prototype.get = /**
     * @override
     * @template T
     * @param {?} key
     * @param {?=} defaultValue
     * @return {?}
     */
    function (key, defaultValue) {
        if (key === AppConfigValues.OAUTHCONFIG) {
            return (/** @type {?} */ ((JSON.parse(this.storage.getItem(key)) || _super.prototype.get.call(this, key, defaultValue))));
        }
        else {
            return (/** @type {?} */ (((/** @type {?} */ (this.storage.getItem(key))) || _super.prototype.get.call(this, key, defaultValue))));
        }
    };
    DebugAppConfigService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DebugAppConfigService.ctorParameters = function () { return [
        { type: StorageService },
        { type: HttpClient }
    ]; };
    return DebugAppConfigService;
}(AppConfigService));
export { DebugAppConfigService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DebugAppConfigService.prototype.storage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWctYXBwLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsiYXBwLWNvbmZpZy9kZWJ1Zy1hcHAtY29uZmlnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFckY7SUFDMkMsaURBQWdCO0lBQ3ZELCtCQUFvQixPQUF1QixFQUFFLElBQWdCO1FBQTdELFlBQ0ksa0JBQU0sSUFBSSxDQUFDLFNBQ2Q7UUFGbUIsYUFBTyxHQUFQLE9BQU8sQ0FBZ0I7O0lBRTNDLENBQUM7SUFFRCxnQkFBZ0I7Ozs7Ozs7O0lBQ2hCLG1DQUFHOzs7Ozs7O0lBQUgsVUFBTyxHQUFXLEVBQUUsWUFBZ0I7UUFDaEMsSUFBSSxHQUFHLEtBQUssZUFBZSxDQUFDLFdBQVcsRUFBRTtZQUNyQyxPQUFPLG1CQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLGlCQUFNLEdBQUcsWUFBSSxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUMsRUFBQSxDQUFDO1NBQ3pGO2FBQU07WUFDSCxPQUFPLG1CQUFJLENBQUMsbUJBQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUEsSUFBSSxpQkFBTSxHQUFHLFlBQUksR0FBRyxFQUFFLFlBQVksQ0FBQyxDQUFDLEVBQUEsQ0FBQztTQUNuRjtJQUNMLENBQUM7O2dCQWJKLFVBQVU7Ozs7Z0JBSEYsY0FBYztnQkFEZCxVQUFVOztJQWtCbkIsNEJBQUM7Q0FBQSxBQWRELENBQzJDLGdCQUFnQixHQWExRDtTQWJZLHFCQUFxQjs7Ozs7O0lBQ2xCLHdDQUErQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3N0b3JhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBBcHBDb25maWdTZXJ2aWNlLCBBcHBDb25maWdWYWx1ZXMgfSBmcm9tICcuLi9hcHAtY29uZmlnL2FwcC1jb25maWcuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEZWJ1Z0FwcENvbmZpZ1NlcnZpY2UgZXh0ZW5kcyBBcHBDb25maWdTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0b3JhZ2U6IFN0b3JhZ2VTZXJ2aWNlLCBodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgICAgIHN1cGVyKGh0dHApO1xuICAgIH1cblxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBnZXQ8VD4oa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZT86IFQpOiBUIHtcbiAgICAgICAgaWYgKGtleSA9PT0gQXBwQ29uZmlnVmFsdWVzLk9BVVRIQ09ORklHKSB7XG4gICAgICAgICAgICByZXR1cm4gPFQ+IChKU09OLnBhcnNlKHRoaXMuc3RvcmFnZS5nZXRJdGVtKGtleSkpIHx8IHN1cGVyLmdldDxUPihrZXksIGRlZmF1bHRWYWx1ZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDxUPiAoPGFueT4gdGhpcy5zdG9yYWdlLmdldEl0ZW0oa2V5KSB8fCBzdXBlci5nZXQ8VD4oa2V5LCBkZWZhdWx0VmFsdWUpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==
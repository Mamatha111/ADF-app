/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ObjectDataRow } from './object-datarow.model';
import { ObjectDataColumn } from './object-datacolumn.model';
import { DataSorting } from './data-sorting.model';
import { Subject } from 'rxjs';
// Simple implementation of the DataTableAdapter interface.
export class ObjectDataTableAdapter {
    /**
     * @param {?} data
     * @return {?}
     */
    static generateSchema(data) {
        /** @type {?} */
        let schema = [];
        if (data && data.length) {
            /** @type {?} */
            let rowToExaminate = data[0];
            if (typeof rowToExaminate === 'object') {
                for (let key in rowToExaminate) {
                    if (rowToExaminate.hasOwnProperty(key)) {
                        schema.push({
                            type: 'text',
                            key: key,
                            title: key,
                            sortable: false
                        });
                    }
                }
            }
        }
        return schema;
    }
    /**
     * @param {?=} data
     * @param {?=} schema
     */
    constructor(data = [], schema = []) {
        this._rows = [];
        this._columns = [];
        if (data && data.length > 0) {
            this._rows = data.map((item) => {
                return new ObjectDataRow(item);
            });
        }
        if (schema && schema.length > 0) {
            this._columns = schema.map((item) => {
                return new ObjectDataColumn(item);
            });
            // Sort by first sortable or just first column
            /** @type {?} */
            let sortable = this._columns.filter((column) => column.sortable);
            if (sortable.length > 0) {
                this.sort(sortable[0].key, 'asc');
            }
        }
        this.rowsChanged = new Subject();
    }
    /**
     * @return {?}
     */
    getRows() {
        return this._rows;
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    setRows(rows) {
        this._rows = rows || [];
        this.sort();
        this.rowsChanged.next(this._rows);
    }
    /**
     * @return {?}
     */
    getColumns() {
        return this._columns;
    }
    /**
     * @param {?} columns
     * @return {?}
     */
    setColumns(columns) {
        this._columns = columns || [];
    }
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    getValue(row, col) {
        if (!row) {
            throw new Error('Row not found');
        }
        if (!col) {
            throw new Error('Column not found');
        }
        /** @type {?} */
        let value = row.getValue(col.key);
        if (col.type === 'icon') {
            /** @type {?} */
            const icon = row.getValue(col.key);
            return icon;
        }
        return value;
    }
    /**
     * @return {?}
     */
    getSorting() {
        return this._sorting;
    }
    /**
     * @param {?} sorting
     * @return {?}
     */
    setSorting(sorting) {
        this._sorting = sorting;
        if (sorting && sorting.key) {
            this._rows.sort((a, b) => {
                /** @type {?} */
                let left = a.getValue(sorting.key);
                if (left) {
                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();
                }
                else {
                    left = '';
                }
                /** @type {?} */
                let right = b.getValue(sorting.key);
                if (right) {
                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();
                }
                else {
                    right = '';
                }
                return sorting.direction === 'asc'
                    ? left.localeCompare(right)
                    : right.localeCompare(left);
            });
        }
    }
    /**
     * @param {?=} key
     * @param {?=} direction
     * @return {?}
     */
    sort(key, direction) {
        /** @type {?} */
        let sorting = this._sorting || new DataSorting();
        if (key) {
            sorting.key = key;
            sorting.direction = direction || 'asc';
        }
        this.setSorting(sorting);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ObjectDataTableAdapter.prototype._sorting;
    /**
     * @type {?}
     * @private
     */
    ObjectDataTableAdapter.prototype._rows;
    /**
     * @type {?}
     * @private
     */
    ObjectDataTableAdapter.prototype._columns;
    /** @type {?} */
    ObjectDataTableAdapter.prototype.selectedRow;
    /** @type {?} */
    ObjectDataTableAdapter.prototype.rowsChanged;
}
//# sourceMappingURL=data:application/json;base64,
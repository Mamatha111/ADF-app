/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { UserPreferencesService, UserPreferenceValues } from './user-preferences.service';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "./user-preferences.service";
/** @type {?} */
export const TRANSLATION_PROVIDER = new InjectionToken('Injection token for translation providers.');
/**
 * @record
 */
export function TranslationProvider() { }
if (false) {
    /** @type {?} */
    TranslationProvider.prototype.name;
    /** @type {?} */
    TranslationProvider.prototype.source;
}
export class TranslationService {
    /**
     * @param {?} translate
     * @param {?} userPreferencesService
     * @param {?} providers
     */
    constructor(translate, userPreferencesService, providers) {
        this.translate = translate;
        this.customLoader = (/** @type {?} */ (this.translate.currentLoader));
        this.defaultLang = 'en';
        translate.setDefaultLang(this.defaultLang);
        this.customLoader.setDefaultLang(this.defaultLang);
        if (providers && providers.length > 0) {
            for (let provider of providers) {
                this.addTranslationFolder(provider.name, provider.source);
            }
        }
        userPreferencesService.select(UserPreferenceValues.Locale).subscribe((locale) => {
            if (locale) {
                this.userLang = locale;
                this.use(this.userLang);
            }
        });
    }
    /**
     * Adds a new folder of translation source files.
     * @param {?=} name Name for the translation provider
     * @param {?=} path Path to the folder
     * @return {?}
     */
    addTranslationFolder(name = '', path = '') {
        if (!this.customLoader.providerRegistered(name)) {
            this.customLoader.registerProvider(name, path);
            if (this.userLang) {
                this.loadTranslation(this.userLang, this.defaultLang);
            }
            else {
                this.loadTranslation(this.defaultLang);
            }
        }
    }
    /**
     * Loads a translation file.
     * @param {?} lang Language code for the language to load
     * @param {?=} fallback Language code to fall back to if the first one was unavailable
     * @return {?}
     */
    loadTranslation(lang, fallback) {
        this.translate.getTranslation(lang).subscribe(() => {
            this.translate.use(lang);
            this.onTranslationChanged(lang);
        }, () => {
            if (fallback && fallback !== lang) {
                this.loadTranslation(fallback);
            }
        });
    }
    /**
     * Triggers a notification callback when the translation language changes.
     * @param {?} lang The new language code
     * @return {?}
     */
    onTranslationChanged(lang) {
        this.translate.onTranslationChange.next({
            lang: lang,
            translations: this.customLoader.getFullTranslationJSON(lang)
        });
    }
    /**
     * Sets the target language for translations.
     * @param {?} lang Code name for the language
     * @return {?} Translations available for the language
     */
    use(lang) {
        this.customLoader.init(lang);
        return this.translate.use(lang);
    }
    /**
     * Gets the translation for the supplied key.
     * @param {?} key Key to translate
     * @param {?=} interpolateParams String(s) to be interpolated into the main message
     * @return {?} Translated text
     */
    get(key, interpolateParams) {
        return this.translate.get(key, interpolateParams);
    }
    /**
     * Directly returns the translation for the supplied key.
     * @param {?} key Key to translate
     * @param {?=} interpolateParams String(s) to be interpolated into the main message
     * @return {?} Translated text
     */
    instant(key, interpolateParams) {
        return key ? this.translate.instant(key, interpolateParams) : '';
    }
}
TranslationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TranslationService.ctorParameters = () => [
    { type: TranslateService },
    { type: UserPreferencesService },
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [TRANSLATION_PROVIDER,] }] }
];
/** @nocollapse */ TranslationService.ngInjectableDef = i0.defineInjectable({ factory: function TranslationService_Factory() { return new TranslationService(i0.inject(i1.TranslateService), i0.inject(i2.UserPreferencesService), i0.inject(TRANSLATION_PROVIDER, 8)); }, token: TranslationService, providedIn: "root" });
if (false) {
    /** @type {?} */
    TranslationService.prototype.defaultLang;
    /** @type {?} */
    TranslationService.prototype.userLang;
    /** @type {?} */
    TranslationService.prototype.customLoader;
    /** @type {?} */
    TranslationService.prototype.translate;
}
//# sourceMappingURL=data:application/json;base64,
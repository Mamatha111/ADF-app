/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ContentChild, TemplateRef, HostListener, ElementRef, ViewEncapsulation } from '@angular/core';
export class PdfThumbListComponent {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        this.virtualHeight = 0;
        this.translateY = 0;
        this.renderItems = [];
        this.width = 91;
        this.currentHeight = 0;
        this.items = [];
        this.margin = 15;
        this.itemHeight = 114 + this.margin;
        this.calculateItems = this.calculateItems.bind(this);
        this.onPageChange = this.onPageChange.bind(this);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.calculateItems();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /* cspell:disable-next-line */
        this.pdfViewer.eventBus.on('pagechange', this.onPageChange);
        this.element.nativeElement.addEventListener('scroll', this.calculateItems, true);
        this.setHeight(this.pdfViewer.currentPageNumber);
        this.items = this.getPages();
        this.calculateItems();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout(() => this.scrollInto(this.pdfViewer.currentPageNumber), 0);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.element.nativeElement.removeEventListener('scroll', this.calculateItems, true);
        /* cspell:disable-next-line */
        this.pdfViewer.eventBus.off('pagechange', this.onPageChange);
    }
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    trackByFn(index, item) {
        return item.id;
    }
    /**
     * @param {?} pageNum
     * @return {?}
     */
    isSelected(pageNum) {
        return this.pdfViewer.currentPageNumber === pageNum;
    }
    /**
     * @param {?} pageNum
     * @return {?}
     */
    goTo(pageNum) {
        this.pdfViewer.currentPageNumber = pageNum;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    scrollInto(item) {
        if (this.items.length) {
            /** @type {?} */
            const index = this.items.findIndex((element) => element.id === item);
            if (index < 0 || index >= this.items.length) {
                return;
            }
            this.element.nativeElement.scrollTop = index * this.itemHeight;
            this.calculateItems();
        }
    }
    /**
     * @return {?}
     */
    getPages() {
        return this.pdfViewer._pages.map((page) => ({
            id: page.id,
            getWidth: () => { return this.width; },
            getHeight: () => { return this.currentHeight; },
            getPage: () => this.pdfViewer.pdfDocument.getPage(page.id)
        }));
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    setHeight(id) {
        /** @type {?} */
        const height = this.pdfViewer.pdfDocument.getPage(id).then((page) => this.calculateHeight(page));
        return height;
    }
    /**
     * @private
     * @param {?} page
     * @return {?}
     */
    calculateHeight(page) {
        /** @type {?} */
        const viewport = page.getViewport(1);
        /** @type {?} */
        const pageRatio = viewport.width / viewport.height;
        /** @type {?} */
        const height = Math.floor(this.width / pageRatio);
        this.currentHeight = height;
        this.itemHeight = height + this.margin;
    }
    /**
     * @private
     * @return {?}
     */
    calculateItems() {
        const { element, viewPort, itemsInView } = this.getContainerSetup();
        /** @type {?} */
        const indexByScrollTop = element.scrollTop / viewPort * this.items.length / itemsInView;
        /** @type {?} */
        const start = Math.floor(indexByScrollTop);
        /** @type {?} */
        const end = Math.ceil(indexByScrollTop) + (itemsInView);
        this.translateY = this.itemHeight * Math.ceil(start);
        this.virtualHeight = this.itemHeight * this.items.length - this.translateY;
        this.renderItems = this.items.slice(start, end);
    }
    /**
     * @private
     * @return {?}
     */
    getContainerSetup() {
        /** @type {?} */
        const element = this.element.nativeElement;
        /** @type {?} */
        const elementRec = element.getBoundingClientRect();
        /** @type {?} */
        const itemsInView = Math.ceil(elementRec.height / this.itemHeight);
        /** @type {?} */
        const viewPort = (this.itemHeight * this.items.length) / itemsInView;
        return {
            element,
            viewPort,
            itemsInView
        };
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onPageChange(event) {
        /** @type {?} */
        const index = this.renderItems.findIndex((element) => element.id === event.pageNumber);
        if (index < 0) {
            this.scrollInto(event.pageNumber);
        }
        if (index >= this.renderItems.length - 1) {
            this.element.nativeElement.scrollTop += this.itemHeight;
        }
    }
}
PdfThumbListComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-pdf-thumbnails',
                template: "<div class=\"adf-pdf-thumbnails__content\"\n    data-automation-id='adf-thumbnails-content'\n    [style.height.px]=\"virtualHeight\"\n    [style.transform]=\"'translate(-50%, ' + translateY + 'px)'\">\n    <adf-pdf-thumb *ngFor=\"let page of renderItems; trackBy: trackByFn\"\n        class=\"adf-pdf-thumbnails__thumb\"\n        [ngClass]=\"{'adf-pdf-thumbnails__thumb--selected' : isSelected(page.id)}\"\n        [page]=\"page\"\n        (click)=\"goTo(page.id)\">\n    </adf-pdf-thumb>\n</div>\n",
                host: { 'class': 'adf-pdf-thumbnails' },
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
PdfThumbListComponent.ctorParameters = () => [
    { type: ElementRef }
];
PdfThumbListComponent.propDecorators = {
    pdfViewer: [{ type: Input }],
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    PdfThumbListComponent.prototype.pdfViewer;
    /** @type {?} */
    PdfThumbListComponent.prototype.virtualHeight;
    /** @type {?} */
    PdfThumbListComponent.prototype.translateY;
    /** @type {?} */
    PdfThumbListComponent.prototype.renderItems;
    /** @type {?} */
    PdfThumbListComponent.prototype.width;
    /** @type {?} */
    PdfThumbListComponent.prototype.currentHeight;
    /**
     * @type {?}
     * @private
     */
    PdfThumbListComponent.prototype.items;
    /**
     * @type {?}
     * @private
     */
    PdfThumbListComponent.prototype.margin;
    /**
     * @type {?}
     * @private
     */
    PdfThumbListComponent.prototype.itemHeight;
    /** @type {?} */
    PdfThumbListComponent.prototype.template;
    /**
     * @type {?}
     * @private
     */
    PdfThumbListComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ChangeDetectionStrategy, Input, ViewEncapsulation } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { TranslationService } from '../../services/translation.service';
export class ErrorContentComponent {
    /**
     * @param {?} route
     * @param {?} router
     * @param {?} translateService
     */
    constructor(route, router, translateService) {
        this.route = route;
        this.router = router;
        this.translateService = translateService;
        /**
         * Target URL for the secondary button.
         */
        this.secondaryButtonUrl = 'report-issue';
        /**
         * Target URL for the return button.
         */
        this.returnButtonUrl = '/';
        /**
         * Error code associated with this error.
         */
        this.errorCode = 'UNKNOWN';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.route) {
            this.route.params.forEach((params) => {
                if (params['id']) {
                    this.errorCode = params['id'];
                }
            });
        }
    }
    /**
     * @return {?}
     */
    getTranslations() {
        this.hasSecondButton = this.translateService.instant('ERROR_CONTENT.' + this.errorCode + '.SECONDARY_BUTTON.TEXT') ? true : false;
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.getTranslations();
    }
    /**
     * @return {?}
     */
    onSecondButton() {
        this.router.navigate(['/' + this.secondaryButtonUrl]);
    }
    /**
     * @return {?}
     */
    onReturnButton() {
        this.router.navigate(['/' + this.returnButtonUrl]);
    }
}
ErrorContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-error-content',
                template: "<div class=\"adf-error-content\">\n    <p class=\"adf-error-content-code\">\n        {{ errorCode }}\n    </p>\n    <div class=\"adf-error-content-shadow\"></div>\n    <p class=\"adf-error-content-title\">\n        {{ 'ERROR_CONTENT.' + errorCode + '.TITLE' | translate }}\n    </p>\n    <p class=\"adf-error-content-description\">\n        {{ 'ERROR_CONTENT.' + errorCode + '.DESCRIPTION' | translate }}\n    </p>\n    <div class=\"adf-error-content-buttons\">\n        <a a id=\"adf-secondary-button\" mat-raised-button color=\"primary\"\n            *ngIf=\"hasSecondButton\" (click)=\"onSecondButton()\"\n            class=\"adf-error-content-description-link\">\n            {{ 'ERROR_CONTENT.' + errorCode + '.SECONDARY_BUTTON.TEXT' | translate | uppercase }}\n        </a>\n        <a id=\"adf-return-button\" mat-raised-button color=\"primary\" (click)=\"onReturnButton()\">\n            {{ 'ERROR_CONTENT.' + this.errorCode + '.RETURN_BUTTON.TEXT' | translate | uppercase }}\n        </a>\n    </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-error-content' },
                styles: [""]
            }] }
];
/** @nocollapse */
ErrorContentComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router },
    { type: TranslationService }
];
ErrorContentComponent.propDecorators = {
    secondaryButtonUrl: [{ type: Input }],
    returnButtonUrl: [{ type: Input }],
    errorCode: [{ type: Input }]
};
if (false) {
    /**
     * Target URL for the secondary button.
     * @type {?}
     */
    ErrorContentComponent.prototype.secondaryButtonUrl;
    /**
     * Target URL for the return button.
     * @type {?}
     */
    ErrorContentComponent.prototype.returnButtonUrl;
    /**
     * Error code associated with this error.
     * @type {?}
     */
    ErrorContentComponent.prototype.errorCode;
    /** @type {?} */
    ErrorContentComponent.prototype.hasSecondButton;
    /**
     * @type {?}
     * @private
     */
    ErrorContentComponent.prototype.route;
    /**
     * @type {?}
     * @private
     */
    ErrorContentComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    ErrorContentComponent.prototype.translateService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItY29udGVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJ0ZW1wbGF0ZXMvZXJyb3ItY29udGVudC9lcnJvci1jb250ZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQ0gsU0FBUyxFQUNULHVCQUF1QixFQUN2QixLQUFLLEVBQ0wsaUJBQWlCLEVBR3BCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBVSxjQUFjLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFVeEUsTUFBTSxPQUFPLHFCQUFxQjs7Ozs7O0lBZ0I5QixZQUFvQixLQUFxQixFQUNyQixNQUFjLEVBQ2QsZ0JBQW9DO1FBRnBDLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBQ3JCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQW9COzs7O1FBZHhELHVCQUFrQixHQUFXLGNBQWMsQ0FBQzs7OztRQUk1QyxvQkFBZSxHQUFXLEdBQUcsQ0FBQzs7OztRQUk5QixjQUFTLEdBQVcsU0FBUyxDQUFDO0lBTzlCLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ0osSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUU7Z0JBQ3pDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUNkLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNqQztZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDTCxDQUFDOzs7O0lBRUQsZUFBZTtRQUNYLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FDaEQsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNyRixDQUFDOzs7O0lBRUQscUJBQXFCO1FBQ2pCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7O0lBRUQsY0FBYztRQUNWLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7OztJQUVELGNBQWM7UUFDVixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDOzs7WUF0REosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLHVnQ0FBNkM7Z0JBRTdDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2dCQUMvQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtnQkFDckMsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLG1CQUFtQixFQUFFOzthQUN2Qzs7OztZQVZnQixjQUFjO1lBQUUsTUFBTTtZQUM5QixrQkFBa0I7OztpQ0FhdEIsS0FBSzs4QkFJTCxLQUFLO3dCQUlMLEtBQUs7Ozs7Ozs7SUFSTixtREFDNEM7Ozs7O0lBRzVDLGdEQUM4Qjs7Ozs7SUFHOUIsMENBQzhCOztJQUU5QixnREFBeUI7Ozs7O0lBRWIsc0NBQTZCOzs7OztJQUM3Qix1Q0FBc0I7Ozs7O0lBQ3RCLGlEQUE0QyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gICAgQ29tcG9uZW50LFxuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIElucHV0LFxuICAgIFZpZXdFbmNhcHN1bGF0aW9uLFxuICAgIE9uSW5pdCxcbiAgICBBZnRlckNvbnRlbnRDaGVja2VkXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGFyYW1zLCBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFRyYW5zbGF0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3RyYW5zbGF0aW9uLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1lcnJvci1jb250ZW50JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZXJyb3ItY29udGVudC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vZXJyb3ItY29udGVudC5jb21wb25lbnQuc2NzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgaG9zdDogeyBjbGFzczogJ2FkZi1lcnJvci1jb250ZW50JyB9XG59KVxuZXhwb3J0IGNsYXNzIEVycm9yQ29udGVudENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50Q2hlY2tlZCB7XG5cbiAgICAvKiogVGFyZ2V0IFVSTCBmb3IgdGhlIHNlY29uZGFyeSBidXR0b24uICovXG4gICAgQElucHV0KClcbiAgICBzZWNvbmRhcnlCdXR0b25Vcmw6IHN0cmluZyA9ICdyZXBvcnQtaXNzdWUnO1xuXG4gICAgLyoqIFRhcmdldCBVUkwgZm9yIHRoZSByZXR1cm4gYnV0dG9uLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgcmV0dXJuQnV0dG9uVXJsOiBzdHJpbmcgPSAnLyc7XG5cbiAgICAvKiogRXJyb3IgY29kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBlcnJvci4gKi9cbiAgICBASW5wdXQoKVxuICAgIGVycm9yQ29kZTogc3RyaW5nID0gJ1VOS05PV04nO1xuXG4gICAgaGFzU2Vjb25kQnV0dG9uOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICAgICAgICAgICAgICBwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0aW9uU2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBpZiAodGhpcy5yb3V0ZSkge1xuICAgICAgICAgICAgdGhpcy5yb3V0ZS5wYXJhbXMuZm9yRWFjaCgocGFyYW1zOiBQYXJhbXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zWydpZCddKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JDb2RlID0gcGFyYW1zWydpZCddO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0VHJhbnNsYXRpb25zKCkge1xuICAgICAgICB0aGlzLmhhc1NlY29uZEJ1dHRvbiA9IHRoaXMudHJhbnNsYXRlU2VydmljZS5pbnN0YW50KFxuICAgICAgICAgICAgJ0VSUk9SX0NPTlRFTlQuJyArIHRoaXMuZXJyb3JDb2RlICsgJy5TRUNPTkRBUllfQlVUVE9OLlRFWFQnKSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKSB7XG4gICAgICAgIHRoaXMuZ2V0VHJhbnNsYXRpb25zKCk7XG4gICAgfVxuXG4gICAgb25TZWNvbmRCdXR0b24oKSB7XG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnLycgKyB0aGlzLnNlY29uZGFyeUJ1dHRvblVybF0pO1xuICAgIH1cblxuICAgIG9uUmV0dXJuQnV0dG9uKCkge1xuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy8nICsgdGhpcy5yZXR1cm5CdXR0b25VcmxdKTtcbiAgICB9XG59XG4iXX0=
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { Injectable } from '@angular/core';
import { Observable, Subject, from, of, throwError } from 'rxjs';
import { FormDefinitionModel } from '../models/form-definition.model';
import { FormModel, FormOutcomeModel } from './../components/widgets/core/index';
import { EcmModelService } from './ecm-model.service';
import { map, catchError, switchMap, combineAll, defaultIfEmpty } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./ecm-model.service";
import * as i2 from "../../services/alfresco-api.service";
import * as i3 from "../../services/log.service";
export class FormService {
    /**
     * @param {?} ecmModelService
     * @param {?} apiService
     * @param {?} logService
     */
    constructor(ecmModelService, apiService, logService) {
        this.ecmModelService = ecmModelService;
        this.apiService = apiService;
        this.logService = logService;
        this.formLoaded = new Subject();
        this.formDataRefreshed = new Subject();
        this.formFieldValueChanged = new Subject();
        this.formEvents = new Subject();
        this.taskCompleted = new Subject();
        this.taskCompletedError = new Subject();
        this.taskSaved = new Subject();
        this.taskSavedError = new Subject();
        this.formContentClicked = new Subject();
        this.validateForm = new Subject();
        this.validateFormField = new Subject();
        this.validateDynamicTableRow = new Subject();
        this.executeOutcome = new Subject();
    }
    /**
     * @private
     * @return {?}
     */
    get taskApi() {
        return this.apiService.getInstance().activiti.taskApi;
    }
    /**
     * @private
     * @return {?}
     */
    get modelsApi() {
        return this.apiService.getInstance().activiti.modelsApi;
    }
    /**
     * @private
     * @return {?}
     */
    get editorApi() {
        return this.apiService.getInstance().activiti.editorApi;
    }
    /**
     * @private
     * @return {?}
     */
    get processApi() {
        return this.apiService.getInstance().activiti.processApi;
    }
    /**
     * @private
     * @return {?}
     */
    get processInstanceVariablesApi() {
        return this.apiService.getInstance().activiti.processInstanceVariablesApi;
    }
    /**
     * @private
     * @return {?}
     */
    get usersWorkflowApi() {
        return this.apiService.getInstance().activiti.usersWorkflowApi;
    }
    /**
     * @private
     * @return {?}
     */
    get groupsApi() {
        return this.apiService.getInstance().activiti.groupsApi;
    }
    /**
     * Parses JSON data to create a corresponding Form model.
     * @param {?} json JSON to create the form
     * @param {?=} data Values for the form fields
     * @param {?=} readOnly Should the form fields be read-only?
     * @return {?} Form model created from input data
     */
    parseForm(json, data, readOnly = false) {
        if (json) {
            /** @type {?} */
            let form = new FormModel(json, data, readOnly, this);
            if (!json.fields) {
                form.outcomes = [
                    new FormOutcomeModel(form, {
                        id: '$custom',
                        name: FormOutcomeModel.SAVE_ACTION,
                        isSystem: true
                    })
                ];
            }
            return form;
        }
        return null;
    }
    /**
     * Creates a Form with a field for each metadata property.
     * @param {?} formName Name of the new form
     * @return {?} The new form
     */
    createFormFromANode(formName) {
        return new Observable((observer) => {
            this.createForm(formName).subscribe((form) => {
                this.ecmModelService.searchEcmType(formName, EcmModelService.MODEL_NAME).subscribe((customType) => {
                    /** @type {?} */
                    let formDefinitionModel = new FormDefinitionModel(form.id, form.name, form.lastUpdatedByFullName, form.lastUpdated, customType.entry.properties);
                    from(this.editorApi.saveForm(form.id, formDefinitionModel)).subscribe((formData) => {
                        observer.next(formData);
                        observer.complete();
                    }, (err) => this.handleError(err));
                }, (err) => this.handleError(err));
            }, (err) => this.handleError(err));
        });
    }
    /**
     * Create a Form.
     * @param {?} formName Name of the new form
     * @return {?} The new form
     */
    createForm(formName) {
        /** @type {?} */
        let dataModel = {
            name: formName,
            description: '',
            modelType: 2,
            stencilSet: 0
        };
        return from(this.modelsApi.createModel(dataModel));
    }
    /**
     * Saves a form.
     * @param {?} formId ID of the form to save
     * @param {?} formModel Model data for the form
     * @return {?} Data for the saved form
     */
    saveForm(formId, formModel) {
        return from(this.editorApi.saveForm(formId, formModel));
    }
    /**
     * Searches for a form by name.
     * @param {?} name The form name to search for
     * @return {?} Form model(s) matching the search name
     */
    searchFrom(name) {
        /** @type {?} */
        let opts = {
            'modelType': 2
        };
        return from(this.modelsApi.getModels(opts))
            .pipe(map(function (forms) {
            return forms.data.find((formData) => formData.name === name);
        }), catchError((err) => this.handleError(err)));
    }
    /**
     * Gets all the forms.
     * @return {?} List of form models
     */
    getForms() {
        /** @type {?} */
        let opts = {
            'modelType': 2
        };
        return from(this.modelsApi.getModels(opts))
            .pipe(map(this.toJsonArray), catchError((err) => this.handleError(err)));
    }
    /**
     * Gets process definitions.
     * @return {?} List of process definitions
     */
    getProcessDefinitions() {
        return from(this.processApi.getProcessDefinitions({}))
            .pipe(map(this.toJsonArray), catchError((err) => this.handleError(err)));
    }
    /**
     * Gets instance variables for a process.
     * @param {?} processInstanceId ID of the target process
     * @return {?} List of instance variable information
     */
    getProcessVariablesById(processInstanceId) {
        return from(this.processInstanceVariablesApi.getProcessInstanceVariables(processInstanceId))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    /**
     * Gets all the tasks.
     * @return {?} List of tasks
     */
    getTasks() {
        return from(this.taskApi.listTasks({}))
            .pipe(map(this.toJsonArray), catchError((err) => this.handleError(err)));
    }
    /**
     * Gets a task.
     * @param {?} taskId Task Id
     * @return {?} Task info
     */
    getTask(taskId) {
        return from(this.taskApi.getTask(taskId))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    /**
     * Saves a task form.
     * @param {?} taskId Task Id
     * @param {?} formValues Form Values
     * @return {?} Null response when the operation is complete
     */
    saveTaskForm(taskId, formValues) {
        /** @type {?} */
        let saveFormRepresentation = (/** @type {?} */ ({ values: formValues }));
        return from(this.taskApi.saveTaskForm(taskId, saveFormRepresentation))
            .pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Completes a Task Form.
     * @param {?} taskId Task Id
     * @param {?} formValues Form Values
     * @param {?=} outcome Form Outcome
     * @return {?} Null response when the operation is complete
     */
    completeTaskForm(taskId, formValues, outcome) {
        /** @type {?} */
        let completeFormRepresentation = (/** @type {?} */ ({ values: formValues }));
        if (outcome) {
            completeFormRepresentation.outcome = outcome;
        }
        return from(this.taskApi.completeTaskForm(taskId, completeFormRepresentation))
            .pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Gets a form related to a task.
     * @param {?} taskId ID of the target task
     * @return {?} Form definition
     */
    getTaskForm(taskId) {
        return from(this.taskApi.getTaskForm(taskId))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    /**
     * Gets a form definition.
     * @param {?} formId ID of the target form
     * @return {?} Form definition
     */
    getFormDefinitionById(formId) {
        return from(this.editorApi.getForm(formId))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    /**
     * Gets the form definition with a given name.
     * @param {?} name The form name
     * @return {?} Form definition
     */
    getFormDefinitionByName(name) {
        /** @type {?} */
        let opts = {
            'filter': 'myReusableForms',
            'filterText': name,
            'modelType': 2
        };
        return from(this.modelsApi.getModels(opts))
            .pipe(map(this.getFormId), catchError((err) => this.handleError(err)));
    }
    /**
     * Gets the start form instance for a given process.
     * @param {?} processId Process definition ID
     * @return {?} Form definition
     */
    getStartFormInstance(processId) {
        return from(this.processApi.getProcessInstanceStartForm(processId))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    /**
     * Gets a process instance.
     * @param {?} processId ID of the process to get
     * @return {?} Process instance
     */
    getProcessInstance(processId) {
        return from(this.processApi.getProcessInstance(processId))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    /**
     * Gets the start form definition for a given process.
     * @param {?} processId Process definition ID
     * @return {?} Form definition
     */
    getStartFormDefinition(processId) {
        return from(this.processApi.getProcessDefinitionStartForm(processId))
            .pipe(map(this.toJson), catchError((err) => this.handleError(err)));
    }
    /**
     * Gets values of fields populated by a REST backend.
     * @param {?} taskId Task identifier
     * @param {?} field Field identifier
     * @return {?} Field values
     */
    getRestFieldValues(taskId, field) {
        return from(this.taskApi.getRestFieldValues(taskId, field))
            .pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Gets values of fields populated by a REST backend using a process ID.
     * @param {?} processDefinitionId Process identifier
     * @param {?} field Field identifier
     * @return {?} Field values
     */
    getRestFieldValuesByProcessId(processDefinitionId, field) {
        return from(this.processApi.getRestFieldValues(processDefinitionId, field))
            .pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Gets column values of fields populated by a REST backend using a process ID.
     * @param {?} processDefinitionId Process identifier
     * @param {?} field Field identifier
     * @param {?=} column Column identifier
     * @return {?} Field values
     */
    getRestFieldValuesColumnByProcessId(processDefinitionId, field, column) {
        return from(this.processApi.getRestTableFieldValues(processDefinitionId, field, column))
            .pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Gets column values of fields populated by a REST backend.
     * @param {?} taskId Task identifier
     * @param {?} field Field identifier
     * @param {?=} column Column identifier
     * @return {?} Field values
     */
    getRestFieldValuesColumn(taskId, field, column) {
        return from(this.taskApi.getRestFieldValuesColumn(taskId, field, column))
            .pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Returns a URL for the profile picture of a user.
     * @param {?} userId ID of the target user
     * @return {?} URL string
     */
    getUserProfileImageApi(userId) {
        return this.apiService.getInstance().activiti.userApi.getUserProfilePictureUrl(userId);
    }
    /**
     * Gets a list of workflow users.
     * @param {?} filter Filter to select specific users
     * @param {?=} groupId Group ID for the search
     * @return {?} Array of users
     */
    getWorkflowUsers(filter, groupId) {
        /** @type {?} */
        let option = { filter: filter };
        if (groupId) {
            option.groupId = groupId;
        }
        return from(this.usersWorkflowApi.getUsers(option))
            .pipe(switchMap((response) => (/** @type {?} */ (response.data)) || []), map((user) => {
            user.userImage = this.getUserProfileImageApi(user.id);
            return of(user);
        }), combineAll(), defaultIfEmpty([]), catchError((err) => this.handleError(err)));
    }
    /**
     * Gets a list of groups in a workflow.
     * @param {?} filter Filter to select specific groups
     * @param {?=} groupId Group ID for the search
     * @return {?} Array of groups
     */
    getWorkflowGroups(filter, groupId) {
        /** @type {?} */
        let option = { filter: filter };
        if (groupId) {
            option.groupId = groupId;
        }
        return from(this.groupsApi.getGroups(option))
            .pipe(map((response) => (/** @type {?} */ (response.data)) || []), catchError((err) => this.handleError(err)));
    }
    /**
     * Gets the ID of a form.
     * @param {?} form Object representing a form
     * @return {?} ID string
     */
    getFormId(form) {
        /** @type {?} */
        let result = null;
        if (form && form.data && form.data.length > 0) {
            result = form.data[0].id;
        }
        return result;
    }
    /**
     * Creates a JSON representation of form data.
     * @param {?} res Object representing form data
     * @return {?} JSON data
     */
    toJson(res) {
        if (res) {
            return res || {};
        }
        return {};
    }
    /**
     * Creates a JSON array representation of form data.
     * @param {?} res Object representing form data
     * @return {?} JSON data
     */
    toJsonArray(res) {
        if (res) {
            return res.data || [];
        }
        return [];
    }
    /**
     * Reports an error message.
     * @param {?} error Data object with optional `message` and `status` fields for the error
     * @return {?} Error message
     */
    handleError(error) {
        /** @type {?} */
        let errMsg = FormService.UNKNOWN_ERROR_MESSAGE;
        if (error) {
            errMsg = (error.message) ? error.message :
                error.status ? `${error.status} - ${error.statusText}` : FormService.GENERIC_ERROR_MESSAGE;
        }
        this.logService.error(errMsg);
        return throwError(errMsg);
    }
}
FormService.UNKNOWN_ERROR_MESSAGE = 'Unknown error';
FormService.GENERIC_ERROR_MESSAGE = 'Server error';
FormService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FormService.ctorParameters = () => [
    { type: EcmModelService },
    { type: AlfrescoApiService },
    { type: LogService }
];
/** @nocollapse */ FormService.ngInjectableDef = i0.defineInjectable({ factory: function FormService_Factory() { return new FormService(i0.inject(i1.EcmModelService), i0.inject(i2.AlfrescoApiService), i0.inject(i3.LogService)); }, token: FormService, providedIn: "root" });
if (false) {
    /** @type {?} */
    FormService.UNKNOWN_ERROR_MESSAGE;
    /** @type {?} */
    FormService.GENERIC_ERROR_MESSAGE;
    /** @type {?} */
    FormService.prototype.formLoaded;
    /** @type {?} */
    FormService.prototype.formDataRefreshed;
    /** @type {?} */
    FormService.prototype.formFieldValueChanged;
    /** @type {?} */
    FormService.prototype.formEvents;
    /** @type {?} */
    FormService.prototype.taskCompleted;
    /** @type {?} */
    FormService.prototype.taskCompletedError;
    /** @type {?} */
    FormService.prototype.taskSaved;
    /** @type {?} */
    FormService.prototype.taskSavedError;
    /** @type {?} */
    FormService.prototype.formContentClicked;
    /** @type {?} */
    FormService.prototype.validateForm;
    /** @type {?} */
    FormService.prototype.validateFormField;
    /** @type {?} */
    FormService.prototype.validateDynamicTableRow;
    /** @type {?} */
    FormService.prototype.executeOutcome;
    /**
     * @type {?}
     * @private
     */
    FormService.prototype.ecmModelService;
    /**
     * @type {?}
     * @private
     */
    FormService.prototype.apiService;
    /**
     * @type {?}
     * @protected
     */
    FormService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FormErrorEvent, FormEvent } from './../events/index';
import { EcmModelService } from './../services/ecm-model.service';
import { FormService } from './../services/form.service';
import { NodeService } from './../services/node.service';
import { FormModel, FormOutcomeEvent, FormOutcomeModel } from './widgets/core/index';
import { of } from 'rxjs';
import { WidgetVisibilityService } from './../services/widget-visibility.service';
import { switchMap } from 'rxjs/operators';
export class FormComponent {
    /**
     * @param {?} formService
     * @param {?} visibilityService
     * @param {?} ecmModelService
     * @param {?} nodeService
     */
    constructor(formService, visibilityService, ecmModelService, nodeService) {
        this.formService = formService;
        this.visibilityService = visibilityService;
        this.ecmModelService = ecmModelService;
        this.nodeService = nodeService;
        /**
         * Toggle saving of form metadata.
         */
        this.saveMetadata = false;
        /**
         * Toggle rendering of the form title.
         */
        this.showTitle = true;
        /**
         * Toggle rendering of the `Complete` outcome button.
         */
        this.showCompleteButton = true;
        /**
         * If true then the `Complete` outcome button is shown but it will be disabled.
         */
        this.disableCompleteButton = false;
        /**
         * If true then the `Start Process` outcome button is shown but it will be disabled.
         */
        this.disableStartProcessButton = false;
        /**
         * Toggle rendering of the `Save` outcome button.
         */
        this.showSaveButton = true;
        /**
         * Toggle debug options.
         */
        this.showDebugButton = false;
        /**
         * Toggle readonly state of the form. Forces all form widgets to render as readonly if enabled.
         */
        this.readOnly = false;
        /**
         * Toggle rendering of the `Refresh` button.
         */
        this.showRefreshButton = true;
        /**
         * Toggle rendering of the validation icon next to the form title.
         */
        this.showValidationIcon = true;
        /**
         * Contains a list of form field validator instances.
         */
        this.fieldValidators = [];
        /**
         * Emitted when the form is submitted with the `Save` or custom outcomes.
         */
        this.formSaved = new EventEmitter();
        /**
         * Emitted when the form is submitted with the `Complete` outcome.
         */
        this.formCompleted = new EventEmitter();
        /**
         * Emitted when form content is clicked.
         */
        this.formContentClicked = new EventEmitter();
        /**
         * Emitted when the form is loaded or reloaded.
         */
        this.formLoaded = new EventEmitter();
        /**
         * Emitted when form values are refreshed due to a data property change.
         */
        this.formDataRefreshed = new EventEmitter();
        /**
         * Emitted when the supplied form values have a validation error.
         */
        this.formError = new EventEmitter();
        /**
         * Emitted when any outcome is executed. Default behaviour can be prevented
         * via `event.preventDefault()`.
         */
        this.executeOutcome = new EventEmitter();
        /**
         * Emitted when any error occurs.
         */
        this.error = new EventEmitter();
        this.debugMode = false;
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    hasForm() {
        return this.form ? true : false;
    }
    /**
     * @return {?}
     */
    isTitleEnabled() {
        if (this.showTitle) {
            if (this.form && this.form.taskName) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} outcomeName
     * @return {?}
     */
    getColorForOutcome(outcomeName) {
        return outcomeName === FormComponent.COMPLETE_OUTCOME_NAME ? FormComponent.COMPLETE_BUTTON_COLOR : '';
    }
    /**
     * @param {?} outcome
     * @return {?}
     */
    isOutcomeButtonEnabled(outcome) {
        if (this.form.readOnly) {
            return false;
        }
        if (outcome) {
            // Make 'Save' button always available
            if (outcome.name === FormOutcomeModel.SAVE_ACTION) {
                return true;
            }
            if (outcome.name === FormOutcomeModel.COMPLETE_ACTION) {
                return this.disableCompleteButton ? false : this.form.isValid;
            }
            if (outcome.name === FormOutcomeModel.START_PROCESS_ACTION) {
                return this.disableStartProcessButton ? false : this.form.isValid;
            }
            return this.form.isValid;
        }
        return false;
    }
    /**
     * @param {?} outcome
     * @param {?} isFormReadOnly
     * @return {?}
     */
    isOutcomeButtonVisible(outcome, isFormReadOnly) {
        if (outcome && outcome.name) {
            if (outcome.name === FormOutcomeModel.COMPLETE_ACTION) {
                return this.showCompleteButton;
            }
            if (isFormReadOnly) {
                return outcome.isSelected;
            }
            if (outcome.name === FormOutcomeModel.SAVE_ACTION) {
                return this.showSaveButton;
            }
            if (outcome.name === FormOutcomeModel.START_PROCESS_ACTION) {
                return false;
            }
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscriptions.push(this.formService.formContentClicked.subscribe((content) => {
            this.formContentClicked.emit(content);
        }), this.formService.validateForm.subscribe((validateFormEvent) => {
            if (validateFormEvent.errorsField.length > 0) {
                this.formError.next(validateFormEvent.errorsField);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach(subscription => subscription.unsubscribe());
        this.subscriptions = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        let taskId = changes['taskId'];
        if (taskId && taskId.currentValue) {
            this.getFormByTaskId(taskId.currentValue);
            return;
        }
        /** @type {?} */
        let formId = changes['formId'];
        if (formId && formId.currentValue) {
            this.getFormDefinitionByFormId(formId.currentValue);
            return;
        }
        /** @type {?} */
        let formName = changes['formName'];
        if (formName && formName.currentValue) {
            this.getFormDefinitionByFormName(formName.currentValue);
            return;
        }
        /** @type {?} */
        let nodeId = changes['nodeId'];
        if (nodeId && nodeId.currentValue) {
            this.loadFormForEcmNode(nodeId.currentValue);
            return;
        }
        /** @type {?} */
        let data = changes['data'];
        if (data && data.currentValue) {
            this.refreshFormData();
            return;
        }
    }
    /**
     * Invoked when user clicks outcome button.
     * @param {?} outcome Form outcome model
     * @return {?}
     */
    onOutcomeClicked(outcome) {
        if (!this.readOnly && outcome && this.form) {
            if (!this.onExecuteOutcome(outcome)) {
                return false;
            }
            if (outcome.isSystem) {
                if (outcome.id === FormComponent.SAVE_OUTCOME_ID) {
                    this.saveTaskForm();
                    return true;
                }
                if (outcome.id === FormComponent.COMPLETE_OUTCOME_ID) {
                    this.completeTaskForm();
                    return true;
                }
                if (outcome.id === FormComponent.START_PROCESS_OUTCOME_ID) {
                    this.completeTaskForm();
                    return true;
                }
                if (outcome.id === FormComponent.CUSTOM_OUTCOME_ID) {
                    this.onTaskSaved(this.form);
                    this.storeFormAsMetadata();
                    return true;
                }
            }
            else {
                // Note: Activiti is using NAME field rather than ID for outcomes
                if (outcome.name) {
                    this.onTaskSaved(this.form);
                    this.completeTaskForm(outcome.name);
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Invoked when user clicks form refresh button.
     * @return {?}
     */
    onRefreshClicked() {
        this.loadForm();
    }
    /**
     * @return {?}
     */
    loadForm() {
        if (this.taskId) {
            this.getFormByTaskId(this.taskId);
            return;
        }
        if (this.formId) {
            this.getFormDefinitionByFormId(this.formId);
            return;
        }
        if (this.formName) {
            this.getFormDefinitionByFormName(this.formName);
            return;
        }
    }
    /**
     * @param {?} taskId
     * @return {?}
     */
    findProcessVariablesByTaskId(taskId) {
        return this.formService.getTask(taskId).pipe(switchMap((task) => {
            if (this.isAProcessTask(task)) {
                return this.visibilityService.getTaskProcessVariable(taskId);
            }
            else {
                return of({});
            }
        }));
    }
    /**
     * @param {?} taskRepresentation
     * @return {?}
     */
    isAProcessTask(taskRepresentation) {
        return taskRepresentation.processDefinitionId && taskRepresentation.processDefinitionDeploymentId !== 'null';
    }
    /**
     * @param {?} taskId
     * @return {?}
     */
    getFormByTaskId(taskId) {
        return new Promise((resolve, reject) => {
            this.findProcessVariablesByTaskId(taskId).subscribe((processVariables) => {
                this.formService
                    .getTaskForm(taskId)
                    .subscribe(form => {
                    /** @type {?} */
                    const parsedForm = this.parseForm(form);
                    this.visibilityService.refreshVisibility(parsedForm);
                    parsedForm.validateForm();
                    this.form = parsedForm;
                    this.onFormLoaded(this.form);
                    resolve(this.form);
                }, error => {
                    this.handleError(error);
                    // reject(error);
                    resolve(null);
                });
            });
        });
    }
    /**
     * @param {?} formId
     * @return {?}
     */
    getFormDefinitionByFormId(formId) {
        this.formService
            .getFormDefinitionById(formId)
            .subscribe(form => {
            this.formName = form.name;
            this.form = this.parseForm(form);
            this.visibilityService.refreshVisibility(this.form);
            this.form.validateForm();
            this.onFormLoaded(this.form);
        }, (error) => {
            this.handleError(error);
        });
    }
    /**
     * @param {?} formName
     * @return {?}
     */
    getFormDefinitionByFormName(formName) {
        this.formService
            .getFormDefinitionByName(formName)
            .subscribe(id => {
            this.formService.getFormDefinitionById(id).subscribe(form => {
                this.form = this.parseForm(form);
                this.visibilityService.refreshVisibility(this.form);
                this.form.validateForm();
                this.onFormLoaded(this.form);
            }, (error) => {
                this.handleError(error);
            });
        }, (error) => {
            this.handleError(error);
        });
    }
    /**
     * @return {?}
     */
    saveTaskForm() {
        if (this.form && this.form.taskId) {
            this.formService
                .saveTaskForm(this.form.taskId, this.form.values)
                .subscribe(() => {
                this.onTaskSaved(this.form);
                this.storeFormAsMetadata();
            }, error => this.onTaskSavedError(this.form, error));
        }
    }
    /**
     * @param {?=} outcome
     * @return {?}
     */
    completeTaskForm(outcome) {
        if (this.form && this.form.taskId) {
            this.formService
                .completeTaskForm(this.form.taskId, this.form.values, outcome)
                .subscribe(() => {
                this.onTaskCompleted(this.form);
                this.storeFormAsMetadata();
            }, error => this.onTaskCompletedError(this.form, error));
        }
    }
    /**
     * @param {?} err
     * @return {?}
     */
    handleError(err) {
        this.error.emit(err);
    }
    /**
     * @param {?} json
     * @return {?}
     */
    parseForm(json) {
        if (json) {
            /** @type {?} */
            let form = new FormModel(json, this.data, this.readOnly, this.formService);
            if (!json.fields) {
                form.outcomes = this.getFormDefinitionOutcomes(form);
            }
            if (this.fieldValidators && this.fieldValidators.length > 0) {
                form.fieldValidators = this.fieldValidators;
            }
            return form;
        }
        return null;
    }
    /**
     * Get custom set of outcomes for a Form Definition.
     * @param {?} form Form definition model.
     * @return {?}
     */
    getFormDefinitionOutcomes(form) {
        return [
            new FormOutcomeModel(form, { id: '$custom', name: FormOutcomeModel.SAVE_ACTION, isSystem: true })
        ];
    }
    /**
     * @param {?} field
     * @return {?}
     */
    checkVisibility(field) {
        if (field && field.form) {
            this.visibilityService.refreshVisibility(field.form);
        }
    }
    /**
     * @private
     * @return {?}
     */
    refreshFormData() {
        this.form = this.parseForm(this.form.json);
        this.onFormLoaded(this.form);
        this.onFormDataRefreshed(this.form);
    }
    /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    loadFormForEcmNode(nodeId) {
        this.nodeService.getNodeMetadata(nodeId).subscribe(data => {
            this.data = data.metadata;
            this.loadFormFromActiviti(data.nodeType);
        }, this.handleError);
    }
    /**
     * @param {?} nodeType
     * @return {?}
     */
    loadFormFromActiviti(nodeType) {
        this.formService.searchFrom(nodeType).subscribe(form => {
            if (!form) {
                this.formService.createFormFromANode(nodeType).subscribe(formMetadata => {
                    this.loadFormFromFormId(formMetadata.id);
                });
            }
            else {
                this.loadFormFromFormId(form.id);
            }
        }, (error) => {
            this.handleError(error);
        });
    }
    /**
     * @private
     * @param {?} formId
     * @return {?}
     */
    loadFormFromFormId(formId) {
        this.formId = formId;
        this.loadForm();
    }
    /**
     * @private
     * @return {?}
     */
    storeFormAsMetadata() {
        if (this.saveMetadata) {
            this.ecmModelService.createEcmTypeForActivitiForm(this.formName, this.form).subscribe(type => {
                this.nodeService.createNodeMetadata(type.nodeType || type.entry.prefixedName, EcmModelService.MODEL_NAMESPACE, this.form.values, this.path, this.nameNode);
            }, (error) => {
                this.handleError(error);
            });
        }
    }
    /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    onFormLoaded(form) {
        this.formLoaded.emit(form);
        this.formService.formLoaded.next(new FormEvent(form));
    }
    /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    onFormDataRefreshed(form) {
        this.formDataRefreshed.emit(form);
        this.formService.formDataRefreshed.next(new FormEvent(form));
    }
    /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    onTaskSaved(form) {
        this.formSaved.emit(form);
        this.formService.taskSaved.next(new FormEvent(form));
    }
    /**
     * @protected
     * @param {?} form
     * @param {?} error
     * @return {?}
     */
    onTaskSavedError(form, error) {
        this.handleError(error);
        this.formService.taskSavedError.next(new FormErrorEvent(form, error));
    }
    /**
     * @protected
     * @param {?} form
     * @return {?}
     */
    onTaskCompleted(form) {
        this.formCompleted.emit(form);
        this.formService.taskCompleted.next(new FormEvent(form));
    }
    /**
     * @protected
     * @param {?} form
     * @param {?} error
     * @return {?}
     */
    onTaskCompletedError(form, error) {
        this.handleError(error);
        this.formService.taskCompletedError.next(new FormErrorEvent(form, error));
    }
    /**
     * @protected
     * @param {?} outcome
     * @return {?}
     */
    onExecuteOutcome(outcome) {
        /** @type {?} */
        let args = new FormOutcomeEvent(outcome);
        this.formService.executeOutcome.next(args);
        if (args.defaultPrevented) {
            return false;
        }
        this.executeOutcome.emit(args);
        if (args.defaultPrevented) {
            return false;
        }
        return true;
    }
}
FormComponent.SAVE_OUTCOME_ID = '$save';
FormComponent.COMPLETE_OUTCOME_ID = '$complete';
FormComponent.START_PROCESS_OUTCOME_ID = '$startProcess';
FormComponent.CUSTOM_OUTCOME_ID = '$custom';
FormComponent.COMPLETE_BUTTON_COLOR = 'primary';
FormComponent.COMPLETE_OUTCOME_NAME = 'COMPLETE';
FormComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-form',
                template: "<div *ngIf=\"!hasForm()\">\n    <ng-content select=\"[empty-form]\">\n    </ng-content>\n</div>\n\n<div *ngIf=\"hasForm()\" class=\"{{form.className}} adf-form-container\" [ngClass]=\"{'adf-readonly-form': readOnly }\">\n    <mat-card>\n        <mat-card-header>\n            <mat-card-title>\n                <h4>\n                    <div *ngIf=\"showValidationIcon\" class=\"adf-form-validation-button\">\n                        <i id=\"adf-valid-form-icon\" class=\"material-icons\" *ngIf=\"form.isValid; else no_valid_form\">check_circle</i>\n                        <ng-template #no_valid_form>\n                            <i id=\"adf-invalid-form-icon\" class=\"material-icons adf-invalid-color\">error</i>\n                        </ng-template>\n                    </div>\n                    <div *ngIf=\"showRefreshButton\" class=\"adf-form-reload-button\">\n                        <button mat-icon-button (click)=\"onRefreshClicked()\">\n                            <mat-icon>refresh</mat-icon>\n                        </button>\n                    </div>\n                    <span *ngIf=\"isTitleEnabled()\" class=\"adf-form-title\">{{form.taskName}}</span>\n\n                </h4>\n            </mat-card-title>\n        </mat-card-header>\n        <mat-card-content>\n            <div *ngIf=\"form.hasTabs()\">\n                <tabs-widget [tabs]=\"form.tabs\"></tabs-widget>\n            </div>\n\n            <div *ngIf=\"!form.hasTabs() && form.hasFields()\">\n                <div *ngFor=\"let field of form.fields\">\n                    <adf-form-field [field]=\"field.field\"></adf-form-field>\n                </div>\n            </div>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"form.hasOutcomes()\" class=\"adf-form-mat-card-actions\">\n            <!--[class.mdl-button--colored]=\"!outcome.isSystem\"-->\n            <button [id]=\"'adf-form-'+ outcome.name  | formatSpace\" *ngFor=\"let outcome of form.outcomes\"\n                    [color]=\"getColorForOutcome(outcome.name)\"\n                    mat-button\n                    [disabled]=\"!isOutcomeButtonEnabled(outcome)\"\n                    [class.adf-form-hide-button]=\"!isOutcomeButtonVisible(outcome, form.readOnly)\"\n                    (click)=\"onOutcomeClicked(outcome)\">\n                {{outcome.name | translate | uppercase }}\n            </button>\n        </mat-card-actions>\n    </mat-card>\n</div>\n<!--\nFor debugging and data visualisation purposes,\nwill be removed during future revisions\n-->\n<div *ngIf=\"showDebugButton\" class=\"adf-form-debug-container\">\n    <mat-slide-toggle [(ngModel)]=\"debugMode\">Debug mode</mat-slide-toggle>\n    <div *ngIf=\"debugMode && hasForm()\">\n        <h4>Values</h4>\n        <pre>{{form.values | json}}</pre>\n\n        <h4>Form</h4>\n        <pre>{{form.json | json}}</pre>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
FormComponent.ctorParameters = () => [
    { type: FormService },
    { type: WidgetVisibilityService },
    { type: EcmModelService },
    { type: NodeService }
];
FormComponent.propDecorators = {
    form: [{ type: Input }],
    taskId: [{ type: Input }],
    nodeId: [{ type: Input }],
    formId: [{ type: Input }],
    formName: [{ type: Input }],
    saveMetadata: [{ type: Input }],
    data: [{ type: Input }],
    path: [{ type: Input }],
    nameNode: [{ type: Input }],
    showTitle: [{ type: Input }],
    showCompleteButton: [{ type: Input }],
    disableCompleteButton: [{ type: Input }],
    disableStartProcessButton: [{ type: Input }],
    showSaveButton: [{ type: Input }],
    showDebugButton: [{ type: Input }],
    readOnly: [{ type: Input }],
    showRefreshButton: [{ type: Input }],
    showValidationIcon: [{ type: Input }],
    fieldValidators: [{ type: Input }],
    formSaved: [{ type: Output }],
    formCompleted: [{ type: Output }],
    formContentClicked: [{ type: Output }],
    formLoaded: [{ type: Output }],
    formDataRefreshed: [{ type: Output }],
    formError: [{ type: Output }],
    executeOutcome: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FormComponent.SAVE_OUTCOME_ID;
    /** @type {?} */
    FormComponent.COMPLETE_OUTCOME_ID;
    /** @type {?} */
    FormComponent.START_PROCESS_OUTCOME_ID;
    /** @type {?} */
    FormComponent.CUSTOM_OUTCOME_ID;
    /** @type {?} */
    FormComponent.COMPLETE_BUTTON_COLOR;
    /** @type {?} */
    FormComponent.COMPLETE_OUTCOME_NAME;
    /**
     * Underlying form model instance.
     * @type {?}
     */
    FormComponent.prototype.form;
    /**
     * Task id to fetch corresponding form and values.
     * @type {?}
     */
    FormComponent.prototype.taskId;
    /**
     * Content Services node ID for the form metadata.
     * @type {?}
     */
    FormComponent.prototype.nodeId;
    /**
     * The id of the form definition to load and display with custom values.
     * @type {?}
     */
    FormComponent.prototype.formId;
    /**
     * Name of the form definition to load and display with custom values.
     * @type {?}
     */
    FormComponent.prototype.formName;
    /**
     * Toggle saving of form metadata.
     * @type {?}
     */
    FormComponent.prototype.saveMetadata;
    /**
     * Custom form values map to be used with the rendered form.
     * @type {?}
     */
    FormComponent.prototype.data;
    /**
     * Path of the folder where the metadata will be stored.
     * @type {?}
     */
    FormComponent.prototype.path;
    /**
     * Name to assign to the new node where the metadata are stored.
     * @type {?}
     */
    FormComponent.prototype.nameNode;
    /**
     * Toggle rendering of the form title.
     * @type {?}
     */
    FormComponent.prototype.showTitle;
    /**
     * Toggle rendering of the `Complete` outcome button.
     * @type {?}
     */
    FormComponent.prototype.showCompleteButton;
    /**
     * If true then the `Complete` outcome button is shown but it will be disabled.
     * @type {?}
     */
    FormComponent.prototype.disableCompleteButton;
    /**
     * If true then the `Start Process` outcome button is shown but it will be disabled.
     * @type {?}
     */
    FormComponent.prototype.disableStartProcessButton;
    /**
     * Toggle rendering of the `Save` outcome button.
     * @type {?}
     */
    FormComponent.prototype.showSaveButton;
    /**
     * Toggle debug options.
     * @type {?}
     */
    FormComponent.prototype.showDebugButton;
    /**
     * Toggle readonly state of the form. Forces all form widgets to render as readonly if enabled.
     * @type {?}
     */
    FormComponent.prototype.readOnly;
    /**
     * Toggle rendering of the `Refresh` button.
     * @type {?}
     */
    FormComponent.prototype.showRefreshButton;
    /**
     * Toggle rendering of the validation icon next to the form title.
     * @type {?}
     */
    FormComponent.prototype.showValidationIcon;
    /**
     * Contains a list of form field validator instances.
     * @type {?}
     */
    FormComponent.prototype.fieldValidators;
    /**
     * Emitted when the form is submitted with the `Save` or custom outcomes.
     * @type {?}
     */
    FormComponent.prototype.formSaved;
    /**
     * Emitted when the form is submitted with the `Complete` outcome.
     * @type {?}
     */
    FormComponent.prototype.formCompleted;
    /**
     * Emitted when form content is clicked.
     * @type {?}
     */
    FormComponent.prototype.formContentClicked;
    /**
     * Emitted when the form is loaded or reloaded.
     * @type {?}
     */
    FormComponent.prototype.formLoaded;
    /**
     * Emitted when form values are refreshed due to a data property change.
     * @type {?}
     */
    FormComponent.prototype.formDataRefreshed;
    /**
     * Emitted when the supplied form values have a validation error.
     * @type {?}
     */
    FormComponent.prototype.formError;
    /**
     * Emitted when any outcome is executed. Default behaviour can be prevented
     * via `event.preventDefault()`.
     * @type {?}
     */
    FormComponent.prototype.executeOutcome;
    /**
     * Emitted when any error occurs.
     * @type {?}
     */
    FormComponent.prototype.error;
    /** @type {?} */
    FormComponent.prototype.debugMode;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.formService;
    /**
     * @type {?}
     * @protected
     */
    FormComponent.prototype.visibilityService;
    /**
     * @type {?}
     * @private
     */
    FormComponent.prototype.ecmModelService;
    /**
     * @type {?}
     * @private
     */
    FormComponent.prototype.nodeService;
}
//# sourceMappingURL=data:application/json;base64,
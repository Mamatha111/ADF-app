/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { FormFieldEvent } from './../../../events/form-field.event';
import { ValidateFormFieldEvent } from './../../../events/validate-form-field.event';
import { ValidateFormEvent } from './../../../events/validate-form.event';
import { ContainerModel } from './container.model';
import { FormFieldTypes } from './form-field-types';
import { FormFieldModel } from './form-field.model';
import { FormOutcomeModel } from './form-outcome.model';
import { TabModel } from './tab.model';
import { FORM_FIELD_VALIDATORS } from './form-field-validator';
export class FormModel {
    /**
     * @param {?=} json
     * @param {?=} formValues
     * @param {?=} readOnly
     * @param {?=} formService
     */
    constructor(json, formValues, readOnly = false, formService) {
        this.formService = formService;
        this.taskName = FormModel.UNSET_TASK_NAME;
        this._isValid = true;
        this.readOnly = false;
        this.tabs = [];
        /**
         * Stores root containers
         */
        this.fields = [];
        this.outcomes = [];
        this.customFieldTemplates = {};
        this.fieldValidators = [...FORM_FIELD_VALIDATORS];
        this.values = {};
        this.readOnly = readOnly;
        if (json) {
            this.json = json;
            this.id = json.id;
            this.name = json.name;
            this.taskId = json.taskId;
            this.taskName = json.taskName || json.name || FormModel.UNSET_TASK_NAME;
            this.processDefinitionId = json.processDefinitionId;
            this.customFieldTemplates = json.customFieldTemplates || {};
            this.selectedOutcome = json.selectedOutcome || {};
            this.className = json.className || '';
            /** @type {?} */
            let tabCache = {};
            this.processVariables = json.processVariables;
            this.tabs = (json.tabs || []).map((t) => {
                /** @type {?} */
                let model = new TabModel(this, t);
                tabCache[model.id] = model;
                return model;
            });
            this.fields = this.parseRootFields(json);
            if (formValues) {
                this.loadData(formValues);
            }
            for (let i = 0; i < this.fields.length; i++) {
                /** @type {?} */
                let field = this.fields[i];
                if (field.tab) {
                    /** @type {?} */
                    let tab = tabCache[field.tab];
                    if (tab) {
                        tab.fields.push(field);
                    }
                }
            }
            if (json.fields) {
                /** @type {?} */
                let saveOutcome = new FormOutcomeModel(this, {
                    id: FormModel.SAVE_OUTCOME,
                    name: 'SAVE',
                    isSystem: true
                });
                /** @type {?} */
                let completeOutcome = new FormOutcomeModel(this, {
                    id: FormModel.COMPLETE_OUTCOME,
                    name: 'COMPLETE',
                    isSystem: true
                });
                /** @type {?} */
                let startProcessOutcome = new FormOutcomeModel(this, {
                    id: FormModel.START_PROCESS_OUTCOME,
                    name: 'START PROCESS',
                    isSystem: true
                });
                /** @type {?} */
                let customOutcomes = (json.outcomes || []).map((obj) => new FormOutcomeModel(this, obj));
                this.outcomes = [saveOutcome].concat(customOutcomes.length > 0 ? customOutcomes : [completeOutcome, startProcessOutcome]);
            }
        }
        this.validateForm();
    }
    /**
     * @return {?}
     */
    get isValid() {
        return this._isValid;
    }
    /**
     * @return {?}
     */
    hasTabs() {
        return this.tabs && this.tabs.length > 0;
    }
    /**
     * @return {?}
     */
    hasFields() {
        return this.fields && this.fields.length > 0;
    }
    /**
     * @return {?}
     */
    hasOutcomes() {
        return this.outcomes && this.outcomes.length > 0;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    onFormFieldChanged(field) {
        this.validateField(field);
        if (this.formService) {
            this.formService.formFieldValueChanged.next(new FormFieldEvent(this, field));
        }
    }
    /**
     * @param {?} fieldId
     * @return {?}
     */
    getFieldById(fieldId) {
        return this.getFormFields().find((field) => field.id === fieldId);
    }
    // TODO: consider evaluating and caching once the form is loaded
    /**
     * @return {?}
     */
    getFormFields() {
        /** @type {?} */
        let formFieldModel = [];
        for (let i = 0; i < this.fields.length; i++) {
            /** @type {?} */
            let field = this.fields[i];
            if (field instanceof ContainerModel) {
                /** @type {?} */
                let container = (/** @type {?} */ (field));
                formFieldModel.push(container.field);
                container.field.columns.forEach((column) => {
                    formFieldModel.push(...column.fields);
                });
            }
        }
        return formFieldModel;
    }
    /**
     * @return {?}
     */
    markAsInvalid() {
        this._isValid = false;
    }
    /**
     * Validates entire form and all form fields.
     *
     * \@memberof FormModel
     * @return {?}
     */
    validateForm() {
        /** @type {?} */
        const validateFormEvent = new ValidateFormEvent(this);
        /** @type {?} */
        let errorsField = [];
        /** @type {?} */
        let fields = this.getFormFields();
        for (let i = 0; i < fields.length; i++) {
            if (!fields[i].validate()) {
                errorsField.push(fields[i]);
            }
        }
        this._isValid = errorsField.length > 0 ? false : true;
        if (this.formService) {
            validateFormEvent.isValid = this._isValid;
            validateFormEvent.errorsField = errorsField;
            this.formService.validateForm.next(validateFormEvent);
        }
    }
    /**
     * Validates a specific form field, triggers form validation.
     *
     * \@memberof FormModel
     * @param {?} field Form field to validate.
     * @return {?}
     */
    validateField(field) {
        if (!field) {
            return;
        }
        /** @type {?} */
        const validateFieldEvent = new ValidateFormFieldEvent(this, field);
        if (this.formService) {
            this.formService.validateFormField.next(validateFieldEvent);
        }
        if (!validateFieldEvent.isValid) {
            this._isValid = false;
            return;
        }
        if (validateFieldEvent.defaultPrevented) {
            return;
        }
        if (!field.validate()) {
            this._isValid = false;
        }
        this.validateForm();
    }
    // Activiti supports 3 types of root fields: container|group|dynamic-table
    /**
     * @private
     * @param {?} json
     * @return {?}
     */
    parseRootFields(json) {
        /** @type {?} */
        let fields = [];
        if (json.fields) {
            fields = json.fields;
        }
        else if (json.formDefinition && json.formDefinition.fields) {
            fields = json.formDefinition.fields;
        }
        /** @type {?} */
        let formWidgetModel = [];
        for (let field of fields) {
            if (field.type === FormFieldTypes.DISPLAY_VALUE) {
                // workaround for dynamic table on a completed/readonly form
                if (field.params) {
                    /** @type {?} */
                    let originalField = field.params['field'];
                    if (originalField.type === FormFieldTypes.DYNAMIC_TABLE) {
                        formWidgetModel.push(new ContainerModel(new FormFieldModel(this, field)));
                    }
                }
            }
            else {
                formWidgetModel.push(new ContainerModel(new FormFieldModel(this, field)));
            }
        }
        return formWidgetModel;
    }
    // Loads external data and overrides field values
    // Typically used when form definition and form data coming from different sources
    /**
     * @private
     * @param {?} formValues
     * @return {?}
     */
    loadData(formValues) {
        for (let field of this.getFormFields()) {
            if (formValues[field.id]) {
                field.json.value = formValues[field.id];
                field.value = field.parseValue(field.json);
            }
        }
    }
}
FormModel.UNSET_TASK_NAME = 'Nameless task';
FormModel.SAVE_OUTCOME = '$save';
FormModel.COMPLETE_OUTCOME = '$complete';
FormModel.START_PROCESS_OUTCOME = '$startProcess';
if (false) {
    /** @type {?} */
    FormModel.UNSET_TASK_NAME;
    /** @type {?} */
    FormModel.SAVE_OUTCOME;
    /** @type {?} */
    FormModel.COMPLETE_OUTCOME;
    /** @type {?} */
    FormModel.START_PROCESS_OUTCOME;
    /** @type {?} */
    FormModel.prototype.id;
    /** @type {?} */
    FormModel.prototype.name;
    /** @type {?} */
    FormModel.prototype.taskId;
    /** @type {?} */
    FormModel.prototype.taskName;
    /** @type {?} */
    FormModel.prototype.processDefinitionId;
    /**
     * @type {?}
     * @private
     */
    FormModel.prototype._isValid;
    /** @type {?} */
    FormModel.prototype.className;
    /** @type {?} */
    FormModel.prototype.readOnly;
    /** @type {?} */
    FormModel.prototype.tabs;
    /**
     * Stores root containers
     * @type {?}
     */
    FormModel.prototype.fields;
    /** @type {?} */
    FormModel.prototype.outcomes;
    /** @type {?} */
    FormModel.prototype.customFieldTemplates;
    /** @type {?} */
    FormModel.prototype.fieldValidators;
    /** @type {?} */
    FormModel.prototype.selectedOutcome;
    /** @type {?} */
    FormModel.prototype.values;
    /** @type {?} */
    FormModel.prototype.processVariables;
    /** @type {?} */
    FormModel.prototype.json;
    /**
     * @type {?}
     * @protected
     */
    FormModel.prototype.formService;
}
//# sourceMappingURL=data:application/json;base64,
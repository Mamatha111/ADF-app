/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Compiler, Component, ComponentFactoryResolver, Input, NgModule, ViewChild, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import { FormRenderingService } from './../../services/form-rendering.service';
import { WidgetVisibilityService } from './../../services/widget-visibility.service';
import { FormFieldModel } from './../widgets/core/form-field.model';
export class FormFieldComponent {
    /**
     * @param {?} formRenderingService
     * @param {?} componentFactoryResolver
     * @param {?} visibilityService
     * @param {?} compiler
     */
    constructor(formRenderingService, componentFactoryResolver, visibilityService, compiler) {
        this.formRenderingService = formRenderingService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.visibilityService = visibilityService;
        this.compiler = compiler;
        /**
         * Contains all the necessary data needed to determine what UI Widget
         * to use when rendering the field in the form. You would typically not
         * create this data manually but instead create the form in APS and export
         * it to get to all the `FormFieldModel` definitions.
         */
        this.field = null;
        this.focus = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const w = window;
        if (w.adf === undefined) {
            w.adf = {};
        }
        /** @type {?} */
        let originalField = this.getField();
        if (originalField) {
            /** @type {?} */
            let customTemplate = this.field.form.customFieldTemplates[originalField.type];
            if (customTemplate && this.hasController(originalField.type)) {
                /** @type {?} */
                let factory = this.getComponentFactorySync(originalField.type, customTemplate);
                this.componentRef = this.container.createComponent(factory);
                /** @type {?} */
                let instance = this.componentRef.instance;
                if (instance) {
                    instance.field = originalField;
                }
            }
            else {
                /** @type {?} */
                let componentType = this.formRenderingService.resolveComponentType(originalField);
                if (componentType) {
                    /** @type {?} */
                    let factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
                    this.componentRef = this.container.createComponent(factory);
                    /** @type {?} */
                    let instance = (/** @type {?} */ (this.componentRef.instance));
                    instance.field = this.field;
                    instance.fieldChanged.subscribe((field) => {
                        if (field && this.field.form) {
                            this.visibilityService.refreshVisibility(field.form);
                            field.form.onFormFieldChanged(field);
                        }
                    });
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.componentRef = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    getField() {
        if (this.field && this.field.params) {
            /** @type {?} */
            const wrappedField = this.field.params.field;
            if (wrappedField && wrappedField.type) {
                return wrappedField;
            }
        }
        return this.field;
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    hasController(type) {
        return (adf && adf.components && adf.components[type]);
    }
    /**
     * @private
     * @param {?} type
     * @param {?} template
     * @return {?}
     */
    getComponentFactorySync(type, template) {
        /** @type {?} */
        let componentInfo = adf.components[type];
        if (componentInfo.factory) {
            return componentInfo.factory;
        }
        /** @type {?} */
        let metadata = {
            selector: `runtime-component-${type}`,
            template: template
        };
        /** @type {?} */
        let factory = this.createComponentFactorySync(this.compiler, metadata, componentInfo.class);
        componentInfo.factory = factory;
        return factory;
    }
    /**
     * @private
     * @param {?} compiler
     * @param {?} metadata
     * @param {?} componentClass
     * @return {?}
     */
    createComponentFactorySync(compiler, metadata, componentClass) {
        /** @type {?} */
        const cmpClass = componentClass || class RuntimeComponent {
        };
        /** @type {?} */
        const decoratedCmp = Component(metadata)(cmpClass);
        class RuntimeComponentModule {
        }
        RuntimeComponentModule.decorators = [
            { type: NgModule, args: [{ imports: [], declarations: [decoratedCmp] },] },
        ];
        /** @type {?} */
        let module = compiler.compileModuleAndAllComponentsSync(RuntimeComponentModule);
        return module.componentFactories.find((x) => x.componentType === decoratedCmp);
    }
    /**
     * @return {?}
     */
    focusToggle() {
        this.focus = !this.focus;
    }
}
FormFieldComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-form-field',
                template: `
        <div [id]="'field-'+field?.id+'-container'"
            [hidden]="!field?.isVisible"
            [class.adf-focus]="focus"
            (focusin)="focusToggle()"
            (focusout)="focusToggle()">
            <div #container></div>
        </div>
    `,
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
FormFieldComponent.ctorParameters = () => [
    { type: FormRenderingService },
    { type: ComponentFactoryResolver },
    { type: WidgetVisibilityService },
    { type: Compiler }
];
FormFieldComponent.propDecorators = {
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    field: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FormFieldComponent.prototype.container;
    /**
     * Contains all the necessary data needed to determine what UI Widget
     * to use when rendering the field in the form. You would typically not
     * create this data manually but instead create the form in APS and export
     * it to get to all the `FormFieldModel` definitions.
     * @type {?}
     */
    FormFieldComponent.prototype.field;
    /** @type {?} */
    FormFieldComponent.prototype.componentRef;
    /** @type {?} */
    FormFieldComponent.prototype.focus;
    /**
     * @type {?}
     * @private
     */
    FormFieldComponent.prototype.formRenderingService;
    /**
     * @type {?}
     * @private
     */
    FormFieldComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    FormFieldComponent.prototype.visibilityService;
    /**
     * @type {?}
     * @private
     */
    FormFieldComponent.prototype.compiler;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
/* tslint:disable:rxjs-no-subject-value */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { UserPreferencesService, UserPreferenceValues } from '../services/user-preferences.service';
import { Pagination } from '@alfresco/js-api';
export class InfinitePaginationComponent {
    /**
     * @param {?} cdr
     * @param {?} userPreferencesService
     */
    constructor(cdr, userPreferencesService) {
        this.cdr = cdr;
        this.userPreferencesService = userPreferencesService;
        /**
         * Is a new page loading?
         */
        this.isLoading = false;
        /**
         * Emitted when the "Load More" button is clicked.
         */
        this.loadMore = new EventEmitter();
        this.pagination = InfinitePaginationComponent.DEFAULT_PAGINATION;
        this.requestPaginationModel = {
            skipCount: 0,
            merge: true
        };
    }
    /**
     * Component that provides custom pagination support.
     * @param {?} target
     * @return {?}
     */
    set target(target) {
        if (target) {
            this._target = target;
            this.paginationSubscription = target.pagination.subscribe((pagination) => {
                this.isLoading = false;
                this.pagination = pagination;
                if (!this.pagination.hasMoreItems) {
                    this.pagination.hasMoreItems = false;
                }
                this.cdr.detectChanges();
            });
        }
    }
    /**
     * @return {?}
     */
    get target() {
        return this._target;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.userPreferencesService.select(UserPreferenceValues.PaginationSize).subscribe((pageSize) => {
            this.pageSize = this.pageSize || pageSize;
            this.requestPaginationModel.maxItems = this.pageSize;
        });
    }
    /**
     * @return {?}
     */
    onLoadMore() {
        this.requestPaginationModel.skipCount = 0;
        this.requestPaginationModel.merge = false;
        this.requestPaginationModel.maxItems += this.pageSize;
        this.loadMore.next(this.requestPaginationModel);
        if (this._target) {
            this.isLoading = true;
            this._target.updatePagination((/** @type {?} */ (this.requestPaginationModel)));
        }
    }
    /**
     * @return {?}
     */
    reset() {
        this.pagination.skipCount = 0;
        this.pagination.maxItems = this.pageSize;
        if (this._target) {
            this._target.updatePagination(this.pagination);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.paginationSubscription) {
            this.paginationSubscription.unsubscribe();
        }
    }
}
InfinitePaginationComponent.DEFAULT_PAGINATION = new Pagination({
    skipCount: 0,
    maxItems: 25,
    totalItems: 0
});
InfinitePaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-infinite-pagination',
                host: { 'class': 'infinite-adf-pagination' },
                template: "<div *ngIf=\"pagination?.hasMoreItems || isLoading\" class=\"adf-infinite-pagination\">\n\n    <button mat-button\n        *ngIf=\"!isLoading\"\n        class=\"adf-infinite-pagination-load-more\"\n        (click)=\"onLoadMore()\"\n        data-automation-id=\"adf-infinite-pagination-button\">\n            <ng-content></ng-content>\n    </button>\n\n    <mat-progress-bar *ngIf=\"isLoading\"\n        mode=\"indeterminate\"\n        class=\"adf-infinite-pagination-spinner\"\n        data-automation-id=\"adf-infinite-pagination-spinner\"></mat-progress-bar>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-infinite-pagination{display:flex;justify-content:space-around;min-height:56px}.adf-infinite-pagination-load-more{margin-bottom:10px;margin-top:10px}"]
            }] }
];
/** @nocollapse */
InfinitePaginationComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: UserPreferencesService }
];
InfinitePaginationComponent.propDecorators = {
    target: [{ type: Input }],
    pageSize: [{ type: Input }],
    isLoading: [{ type: Input, args: ['loading',] }],
    loadMore: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    InfinitePaginationComponent.DEFAULT_PAGINATION;
    /** @type {?} */
    InfinitePaginationComponent.prototype._target;
    /**
     * Number of items that are added with each "load more" event.
     * @type {?}
     */
    InfinitePaginationComponent.prototype.pageSize;
    /**
     * Is a new page loading?
     * @type {?}
     */
    InfinitePaginationComponent.prototype.isLoading;
    /**
     * Emitted when the "Load More" button is clicked.
     * @type {?}
     */
    InfinitePaginationComponent.prototype.loadMore;
    /** @type {?} */
    InfinitePaginationComponent.prototype.pagination;
    /** @type {?} */
    InfinitePaginationComponent.prototype.requestPaginationModel;
    /**
     * @type {?}
     * @private
     */
    InfinitePaginationComponent.prototype.paginationSubscription;
    /**
     * @type {?}
     * @private
     */
    InfinitePaginationComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    InfinitePaginationComponent.prototype.userPreferencesService;
}
//# sourceMappingURL=data:application/json;base64,
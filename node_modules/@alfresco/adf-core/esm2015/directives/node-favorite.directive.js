/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { from, forkJoin, of } from 'rxjs';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { catchError, map } from 'rxjs/operators';
export class NodeFavoriteDirective {
    /**
     * @param {?} alfrescoApiService
     */
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
        this.favorites = [];
        /**
         * Array of nodes to toggle as favorites.
         */
        this.selection = [];
        /**
         * Emitted when the favorite setting is complete.
         */
        this.toggle = new EventEmitter();
        /**
         * Emitted when the favorite setting fails.
         */
        this.error = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onClick() {
        this.toggleFavorite();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!changes.selection.currentValue.length) {
            this.favorites = [];
            return;
        }
        this.markFavoritesNodes(changes.selection.currentValue);
    }
    /**
     * @return {?}
     */
    toggleFavorite() {
        if (!this.favorites.length) {
            return;
        }
        /** @type {?} */
        const every = this.favorites.every((selected) => selected.entry.isFavorite);
        if (every) {
            /** @type {?} */
            const batch = this.favorites.map((selected) => {
                // shared files have nodeId
                /** @type {?} */
                const id = ((/** @type {?} */ (selected))).entry.nodeId || selected.entry.id;
                return from(this.alfrescoApiService.favoritesApi.removeFavoriteSite('-me-', id));
            });
            forkJoin(batch).subscribe(() => {
                this.favorites.map((selected) => selected.entry.isFavorite = false);
                this.toggle.emit();
            }, (error) => this.error.emit(error));
        }
        if (!every) {
            /** @type {?} */
            const notFavorite = this.favorites.filter((node) => !node.entry.isFavorite);
            /** @type {?} */
            const body = notFavorite.map((node) => this.createFavoriteBody(node));
            from(this.alfrescoApiService.favoritesApi.addFavorite('-me-', (/** @type {?} */ (body))))
                .subscribe(() => {
                notFavorite.map((selected) => selected.entry.isFavorite = true);
                this.toggle.emit();
            }, (error) => this.error.emit(error));
        }
    }
    /**
     * @param {?} selection
     * @return {?}
     */
    markFavoritesNodes(selection) {
        if (selection.length <= this.favorites.length) {
            /** @type {?} */
            const newFavorites = this.reduce(this.favorites, selection);
            this.favorites = newFavorites;
        }
        /** @type {?} */
        const result = this.diff(selection, this.favorites);
        /** @type {?} */
        const batch = this.getProcessBatch(result);
        forkJoin(batch).subscribe((data) => {
            this.favorites.push(...data);
        });
    }
    /**
     * @return {?}
     */
    hasFavorites() {
        if (this.favorites && !this.favorites.length) {
            return false;
        }
        return this.favorites.every((selected) => selected.entry.isFavorite);
    }
    /**
     * @private
     * @param {?} selection
     * @return {?}
     */
    getProcessBatch(selection) {
        return selection.map((selected) => this.getFavorite(selected));
    }
    /**
     * @private
     * @param {?} selected
     * @return {?}
     */
    getFavorite(selected) {
        /** @type {?} */
        const node = selected.entry;
        // ACS 6.x with 'isFavorite' include
        if (node && node.hasOwnProperty('isFavorite')) {
            return of(selected);
        }
        // ACS 5.x and 6.x without 'isFavorite' include
        const { name, isFile, isFolder } = (/** @type {?} */ (node));
        /** @type {?} */
        const id = ((/** @type {?} */ (node))).nodeId || node.id;
        /** @type {?} */
        const promise = this.alfrescoApiService.favoritesApi.getFavorite('-me-', id);
        return from(promise).pipe(map(() => ({
            entry: {
                id,
                isFolder,
                isFile,
                name,
                isFavorite: true
            }
        })), catchError(() => {
            return of({
                entry: {
                    id,
                    isFolder,
                    isFile,
                    name,
                    isFavorite: false
                }
            });
        }));
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    createFavoriteBody(node) {
        /** @type {?} */
        const type = this.getNodeType(node);
        // shared files have nodeId
        /** @type {?} */
        const id = node.entry.nodeId || node.entry.id;
        return {
            target: {
                [type]: {
                    guid: id
                }
            }
        };
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    getNodeType(node) {
        // shared could only be files
        if (!node.entry.isFile && !node.entry.isFolder) {
            return 'file';
        }
        return node.entry.isFile ? 'file' : 'folder';
    }
    /**
     * @private
     * @param {?} list
     * @param {?} patch
     * @return {?}
     */
    diff(list, patch) {
        /** @type {?} */
        const ids = patch.map((item) => item.entry.id);
        return list.filter((item) => ids.includes(item.entry.id) ? null : item);
    }
    /**
     * @private
     * @param {?} patch
     * @param {?} comparator
     * @return {?}
     */
    reduce(patch, comparator) {
        /** @type {?} */
        const ids = comparator.map((item) => item.entry.id);
        return patch.filter((item) => ids.includes(item.entry.id) ? item : null);
    }
}
NodeFavoriteDirective.decorators = [
    { type: Directive, args: [{
                selector: '[adf-node-favorite]',
                exportAs: 'adfFavorite'
            },] }
];
/** @nocollapse */
NodeFavoriteDirective.ctorParameters = () => [
    { type: AlfrescoApiService }
];
NodeFavoriteDirective.propDecorators = {
    selection: [{ type: Input, args: ['adf-node-favorite',] }],
    toggle: [{ type: Output }],
    error: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    NodeFavoriteDirective.prototype.favorites;
    /**
     * Array of nodes to toggle as favorites.
     * @type {?}
     */
    NodeFavoriteDirective.prototype.selection;
    /**
     * Emitted when the favorite setting is complete.
     * @type {?}
     */
    NodeFavoriteDirective.prototype.toggle;
    /**
     * Emitted when the favorite setting fails.
     * @type {?}
     */
    NodeFavoriteDirective.prototype.error;
    /**
     * @type {?}
     * @private
     */
    NodeFavoriteDirective.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { forkJoin, from, of } from 'rxjs';
import { AlfrescoApiService } from '../services/alfresco-api.service';
import { TranslationService } from '../services/translation.service';
import { map, catchError } from 'rxjs/operators';
/**
 * @record
 */
function ProcessedNodeData() { }
if (false) {
    /** @type {?} */
    ProcessedNodeData.prototype.entry;
    /** @type {?} */
    ProcessedNodeData.prototype.status;
}
/**
 * @record
 */
function ProcessStatus() { }
if (false) {
    /** @type {?} */
    ProcessStatus.prototype.success;
    /** @type {?} */
    ProcessStatus.prototype.failed;
    /**
     * @return {?}
     */
    ProcessStatus.prototype.someFailed = function () { };
    /**
     * @return {?}
     */
    ProcessStatus.prototype.someSucceeded = function () { };
    /**
     * @return {?}
     */
    ProcessStatus.prototype.oneFailed = function () { };
    /**
     * @return {?}
     */
    ProcessStatus.prototype.oneSucceeded = function () { };
    /**
     * @return {?}
     */
    ProcessStatus.prototype.allSucceeded = function () { };
    /**
     * @return {?}
     */
    ProcessStatus.prototype.allFailed = function () { };
}
export class NodeDeleteDirective {
    /**
     * @param {?} alfrescoApiService
     * @param {?} translation
     * @param {?} elementRef
     */
    constructor(alfrescoApiService, translation, elementRef) {
        this.alfrescoApiService = alfrescoApiService;
        this.translation = translation;
        this.elementRef = elementRef;
        /**
         * If true then the nodes are deleted immediately rather than being put in the trash
         */
        this.permanent = false;
        /**
         * Emitted when the nodes have been deleted.
         */
        this.delete = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onClick() {
        this.process(this.selection);
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (!this.selection || (this.selection && this.selection.length === 0)) {
            this.setDisableAttribute(true);
        }
        else {
            if (!this.elementRef.nativeElement.hasAttribute('adf-check-allowable-operation')) {
                this.setDisableAttribute(false);
            }
        }
    }
    /**
     * @private
     * @param {?} disable
     * @return {?}
     */
    setDisableAttribute(disable) {
        this.elementRef.nativeElement.disabled = disable;
    }
    /**
     * @private
     * @param {?} selection
     * @return {?}
     */
    process(selection) {
        if (selection && selection.length) {
            /** @type {?} */
            const batch = this.getDeleteNodesBatch(selection);
            forkJoin(...batch)
                .subscribe((data) => {
                /** @type {?} */
                const processedItems = this.processStatus(data);
                /** @type {?} */
                const message = this.getMessage(processedItems);
                this.delete.emit(message);
            });
        }
    }
    /**
     * @private
     * @param {?} selection
     * @return {?}
     */
    getDeleteNodesBatch(selection) {
        return selection.map((node) => this.deleteNode(node));
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    deleteNode(node) {
        /** @type {?} */
        const id = ((/** @type {?} */ (node.entry))).nodeId || node.entry.id;
        /** @type {?} */
        let promise;
        if (node.entry.hasOwnProperty('archivedAt')) {
            promise = this.alfrescoApiService.nodesApi.purgeDeletedNode(id);
        }
        else {
            promise = this.alfrescoApiService.nodesApi.deleteNode(id, { permanent: this.permanent });
        }
        return from(promise).pipe(map(() => ({
            entry: node.entry,
            status: 1
        })), catchError(() => of({
            entry: node.entry,
            status: 0
        })));
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    processStatus(data) {
        /** @type {?} */
        const deleteStatus = {
            success: [],
            failed: [],
            /**
             * @return {?}
             */
            get someFailed() {
                return !!(this.failed.length);
            },
            /**
             * @return {?}
             */
            get someSucceeded() {
                return !!(this.success.length);
            },
            /**
             * @return {?}
             */
            get oneFailed() {
                return this.failed.length === 1;
            },
            /**
             * @return {?}
             */
            get oneSucceeded() {
                return this.success.length === 1;
            },
            /**
             * @return {?}
             */
            get allSucceeded() {
                return this.someSucceeded && !this.someFailed;
            },
            /**
             * @return {?}
             */
            get allFailed() {
                return this.someFailed && !this.someSucceeded;
            }
        };
        return data.reduce((acc, next) => {
            if (next.status === 1) {
                acc.success.push(next);
            }
            else {
                acc.failed.push(next);
            }
            return acc;
        }, deleteStatus);
    }
    /**
     * @private
     * @param {?} status
     * @return {?}
     */
    getMessage(status) {
        if (status.allFailed && !status.oneFailed) {
            return this.translation.instant('CORE.DELETE_NODE.ERROR_PLURAL', { number: status.failed.length });
        }
        if (status.allSucceeded && !status.oneSucceeded) {
            return this.translation.instant('CORE.DELETE_NODE.PLURAL', { number: status.success.length });
        }
        if (status.someFailed && status.someSucceeded && !status.oneSucceeded) {
            return this.translation.instant('CORE.DELETE_NODE.PARTIAL_PLURAL', {
                success: status.success.length,
                failed: status.failed.length
            });
        }
        if (status.someFailed && status.oneSucceeded) {
            return this.translation.instant('CORE.DELETE_NODE.PARTIAL_SINGULAR', {
                success: status.success.length,
                failed: status.failed.length
            });
        }
        if (status.oneFailed && !status.someSucceeded) {
            return this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: status.failed[0].entry.name });
        }
        if (status.oneSucceeded && !status.someFailed) {
            return this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: status.success[0].entry.name });
        }
    }
}
NodeDeleteDirective.decorators = [
    { type: Directive, args: [{
                selector: '[adf-delete]'
            },] }
];
/** @nocollapse */
NodeDeleteDirective.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: TranslationService },
    { type: ElementRef }
];
NodeDeleteDirective.propDecorators = {
    selection: [{ type: Input, args: ['adf-delete',] }],
    permanent: [{ type: Input }],
    delete: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /**
     * Array of nodes to delete.
     * @type {?}
     */
    NodeDeleteDirective.prototype.selection;
    /**
     * If true then the nodes are deleted immediately rather than being put in the trash
     * @type {?}
     */
    NodeDeleteDirective.prototype.permanent;
    /**
     * Emitted when the nodes have been deleted.
     * @type {?}
     */
    NodeDeleteDirective.prototype.delete;
    /**
     * @type {?}
     * @private
     */
    NodeDeleteDirective.prototype.alfrescoApiService;
    /**
     * @type {?}
     * @private
     */
    NodeDeleteDirective.prototype.translation;
    /**
     * @type {?}
     * @private
     */
    NodeDeleteDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function UpdateNotification() { }
if (false) {
    /** @type {?} */
    UpdateNotification.prototype.target;
    /** @type {?} */
    UpdateNotification.prototype.changed;
}
/**
 * @record
 */
export function ClickNotification() { }
if (false) {
    /** @type {?} */
    ClickNotification.prototype.target;
}
/**
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
export function transformKeyToObject(key, value) {
    /** @type {?} */
    const objectLevels = key.split('.').reverse();
    return objectLevels.reduce((previousValue, currentValue) => {
        return { [currentValue]: previousValue };
    }, value);
}
export class CardViewUpdateService {
    constructor() {
        // Observable sources
        this.itemUpdatedSource = new Subject();
        this.itemClickedSource = new Subject();
        // Observable streams
        this.itemUpdated$ = (/** @type {?} */ (this.itemUpdatedSource.asObservable()));
        this.itemClicked$ = (/** @type {?} */ (this.itemClickedSource.asObservable()));
    }
    /**
     * @param {?} property
     * @param {?} newValue
     * @return {?}
     */
    update(property, newValue) {
        this.itemUpdatedSource.next({
            target: property,
            changed: transformKeyToObject(property.key, newValue)
        });
    }
    /**
     * @param {?} property
     * @return {?}
     */
    clicked(property) {
        this.itemClickedSource.next({
            target: property
        });
    }
}
CardViewUpdateService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ CardViewUpdateService.ngInjectableDef = i0.defineInjectable({ factory: function CardViewUpdateService_Factory() { return new CardViewUpdateService(); }, token: CardViewUpdateService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    CardViewUpdateService.prototype.itemUpdatedSource;
    /**
     * @type {?}
     * @private
     */
    CardViewUpdateService.prototype.itemClickedSource;
    /** @type {?} */
    CardViewUpdateService.prototype.itemUpdated$;
    /** @type {?} */
    CardViewUpdateService.prototype.itemClicked$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LXVwZGF0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsiY2FyZC12aWV3L3NlcnZpY2VzL2NhcmQtdmlldy11cGRhdGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7O0FBRzNDLHdDQUdDOzs7SUFGRyxvQ0FBWTs7SUFDWixxQ0FBYTs7Ozs7QUFHakIsdUNBRUM7OztJQURHLG1DQUFZOzs7Ozs7O0FBR2hCLE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxHQUFXLEVBQUUsS0FBSzs7VUFDN0MsWUFBWSxHQUFhLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFO0lBRXZELE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBSyxDQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsRUFBRTtRQUMzRCxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxhQUFhLEVBQUMsQ0FBQztJQUM1QyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDZCxDQUFDO0FBS0QsTUFBTSxPQUFPLHFCQUFxQjtJQUhsQzs7UUFNWSxzQkFBaUIsR0FBRyxJQUFJLE9BQU8sRUFBc0IsQ0FBQztRQUN0RCxzQkFBaUIsR0FBRyxJQUFJLE9BQU8sRUFBcUIsQ0FBQzs7UUFHdEQsaUJBQVksR0FBRyxtQkFBaUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFBLENBQUM7UUFDdEYsaUJBQVksR0FBRyxtQkFBZ0MsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxFQUFBLENBQUM7S0FjL0Y7Ozs7OztJQVpHLE1BQU0sQ0FBQyxRQUErQixFQUFFLFFBQWE7UUFDakQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQztZQUN4QixNQUFNLEVBQUUsUUFBUTtZQUNoQixPQUFPLEVBQUUsb0JBQW9CLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUM7U0FDeEQsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7SUFFRCxPQUFPLENBQUMsUUFBK0I7UUFDbkMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQztZQUN4QixNQUFNLEVBQUUsUUFBUTtTQUNuQixDQUFDLENBQUM7SUFDUCxDQUFDOzs7WUF4QkosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7Ozs7OztJQUlHLGtEQUE4RDs7Ozs7SUFDOUQsa0RBQTZEOztJQUc3RCw2Q0FBNkY7O0lBQzdGLDZDQUE0RiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENhcmRWaWV3QmFzZUl0ZW1Nb2RlbCB9IGZyb20gJy4uL21vZGVscy9jYXJkLXZpZXctYmFzZWl0ZW0ubW9kZWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVwZGF0ZU5vdGlmaWNhdGlvbiB7XG4gICAgdGFyZ2V0OiBhbnk7XG4gICAgY2hhbmdlZDogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsaWNrTm90aWZpY2F0aW9uIHtcbiAgICB0YXJnZXQ6IGFueTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybUtleVRvT2JqZWN0KGtleTogc3RyaW5nLCB2YWx1ZSk6IE9iamVjdCB7XG4gICAgY29uc3Qgb2JqZWN0TGV2ZWxzOiBzdHJpbmdbXSA9IGtleS5zcGxpdCgnLicpLnJldmVyc2UoKTtcblxuICAgIHJldHVybiBvYmplY3RMZXZlbHMucmVkdWNlPHt9PigocHJldmlvdXNWYWx1ZSwgY3VycmVudFZhbHVlKSA9PiB7XG4gICAgICAgIHJldHVybiB7IFtjdXJyZW50VmFsdWVdOiBwcmV2aW91c1ZhbHVlfTtcbiAgICB9LCB2YWx1ZSk7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ2FyZFZpZXdVcGRhdGVTZXJ2aWNlIHtcblxuICAgIC8vIE9ic2VydmFibGUgc291cmNlc1xuICAgIHByaXZhdGUgaXRlbVVwZGF0ZWRTb3VyY2UgPSBuZXcgU3ViamVjdDxVcGRhdGVOb3RpZmljYXRpb24+KCk7XG4gICAgcHJpdmF0ZSBpdGVtQ2xpY2tlZFNvdXJjZSA9IG5ldyBTdWJqZWN0PENsaWNrTm90aWZpY2F0aW9uPigpO1xuXG4gICAgLy8gT2JzZXJ2YWJsZSBzdHJlYW1zXG4gICAgcHVibGljIGl0ZW1VcGRhdGVkJCA9IDxPYnNlcnZhYmxlPFVwZGF0ZU5vdGlmaWNhdGlvbj4+IHRoaXMuaXRlbVVwZGF0ZWRTb3VyY2UuYXNPYnNlcnZhYmxlKCk7XG4gICAgcHVibGljIGl0ZW1DbGlja2VkJCA9IDxPYnNlcnZhYmxlPENsaWNrTm90aWZpY2F0aW9uPj4gdGhpcy5pdGVtQ2xpY2tlZFNvdXJjZS5hc09ic2VydmFibGUoKTtcblxuICAgIHVwZGF0ZShwcm9wZXJ0eTogQ2FyZFZpZXdCYXNlSXRlbU1vZGVsLCBuZXdWYWx1ZTogYW55KSB7XG4gICAgICAgIHRoaXMuaXRlbVVwZGF0ZWRTb3VyY2UubmV4dCh7XG4gICAgICAgICAgICB0YXJnZXQ6IHByb3BlcnR5LFxuICAgICAgICAgICAgY2hhbmdlZDogdHJhbnNmb3JtS2V5VG9PYmplY3QocHJvcGVydHkua2V5LCBuZXdWYWx1ZSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2xpY2tlZChwcm9wZXJ0eTogQ2FyZFZpZXdCYXNlSXRlbU1vZGVsKSB7XG4gICAgICAgIHRoaXMuaXRlbUNsaWNrZWRTb3VyY2UubmV4dCh7XG4gICAgICAgICAgICB0YXJnZXQ6IHByb3BlcnR5XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==
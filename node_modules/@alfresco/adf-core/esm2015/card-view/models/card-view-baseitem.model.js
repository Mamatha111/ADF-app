/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @abstract
 */
export class CardViewBaseItemModel {
    /**
     * @param {?} cardViewItemProperties
     */
    constructor(cardViewItemProperties) {
        this.label = cardViewItemProperties.label || '';
        this.value = cardViewItemProperties.value;
        this.key = cardViewItemProperties.key;
        this.default = cardViewItemProperties.default;
        this.editable = !!cardViewItemProperties.editable;
        this.clickable = !!cardViewItemProperties.clickable;
        this.icon = cardViewItemProperties.icon || '';
        this.validators = cardViewItemProperties.validators || [];
        this.data = cardViewItemProperties.data || null;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return this.value === undefined || this.value === null || this.value === '';
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    isValid(newValue) {
        if (!this.validators.length) {
            return true;
        }
        return this.validators
            .map((validator) => validator.isValid(newValue))
            .reduce((isValidUntilNow, isValid) => isValidUntilNow && isValid, true);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getValidationErrors(value) {
        if (!this.validators.length) {
            return [];
        }
        return this.validators.filter((validator) => !validator.isValid(value)).map((validator) => validator.message);
    }
}
if (false) {
    /** @type {?} */
    CardViewBaseItemModel.prototype.label;
    /** @type {?} */
    CardViewBaseItemModel.prototype.value;
    /** @type {?} */
    CardViewBaseItemModel.prototype.key;
    /** @type {?} */
    CardViewBaseItemModel.prototype.default;
    /** @type {?} */
    CardViewBaseItemModel.prototype.editable;
    /** @type {?} */
    CardViewBaseItemModel.prototype.clickable;
    /** @type {?} */
    CardViewBaseItemModel.prototype.icon;
    /** @type {?} */
    CardViewBaseItemModel.prototype.validators;
    /** @type {?} */
    CardViewBaseItemModel.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LWJhc2VpdGVtLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsiY2FyZC12aWV3L21vZGVscy9jYXJkLXZpZXctYmFzZWl0ZW0ubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsTUFBTSxPQUFnQixxQkFBcUI7Ozs7SUFXdkMsWUFBWSxzQkFBOEM7UUFDdEQsSUFBSSxDQUFDLEtBQUssR0FBRyxzQkFBc0IsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQ2hELElBQUksQ0FBQyxLQUFLLEdBQUcsc0JBQXNCLENBQUMsS0FBSyxDQUFDO1FBQzFDLElBQUksQ0FBQyxHQUFHLEdBQUcsc0JBQXNCLENBQUMsR0FBRyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxPQUFPLEdBQUcsc0JBQXNCLENBQUMsT0FBTyxDQUFDO1FBQzlDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQztRQUNsRCxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUM7UUFDcEQsSUFBSSxDQUFDLElBQUksR0FBRyxzQkFBc0IsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzlDLElBQUksQ0FBQyxVQUFVLEdBQUcsc0JBQXNCLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQztRQUMxRCxJQUFJLENBQUMsSUFBSSxHQUFHLHNCQUFzQixDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7SUFDcEQsQ0FBQzs7OztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssRUFBRSxDQUFDO0lBQ2hGLENBQUM7Ozs7O0lBRUQsT0FBTyxDQUFDLFFBQWE7UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVO2FBQ2pCLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUMvQyxNQUFNLENBQUMsQ0FBQyxlQUFlLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxlQUFlLElBQUksT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2hGLENBQUM7Ozs7O0lBRUQsbUJBQW1CLENBQUMsS0FBSztRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUU7WUFDekIsT0FBTyxFQUFFLENBQUM7U0FDYjtRQUVELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xILENBQUM7Q0FDSjs7O0lBM0NHLHNDQUFjOztJQUNkLHNDQUFXOztJQUNYLG9DQUFTOztJQUNULHdDQUFhOztJQUNiLHlDQUFrQjs7SUFDbEIsMENBQW1COztJQUNuQixxQ0FBYzs7SUFDZCwyQ0FBcUM7O0lBQ3JDLHFDQUFXIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ2FyZFZpZXdJdGVtUHJvcGVydGllcywgQ2FyZFZpZXdJdGVtVmFsaWRhdG9yIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jYXJkLXZpZXcuaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDYXJkVmlld0Jhc2VJdGVtTW9kZWwge1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgdmFsdWU6IGFueTtcbiAgICBrZXk6IGFueTtcbiAgICBkZWZhdWx0OiBhbnk7XG4gICAgZWRpdGFibGU6IGJvb2xlYW47XG4gICAgY2xpY2thYmxlOiBib29sZWFuO1xuICAgIGljb24/OiBzdHJpbmc7XG4gICAgdmFsaWRhdG9ycz86IENhcmRWaWV3SXRlbVZhbGlkYXRvcltdO1xuICAgIGRhdGE/OiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihjYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzOiBDYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIHRoaXMubGFiZWwgPSBjYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzLmxhYmVsIHx8ICcnO1xuICAgICAgICB0aGlzLnZhbHVlID0gY2FyZFZpZXdJdGVtUHJvcGVydGllcy52YWx1ZTtcbiAgICAgICAgdGhpcy5rZXkgPSBjYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzLmtleTtcbiAgICAgICAgdGhpcy5kZWZhdWx0ID0gY2FyZFZpZXdJdGVtUHJvcGVydGllcy5kZWZhdWx0O1xuICAgICAgICB0aGlzLmVkaXRhYmxlID0gISFjYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzLmVkaXRhYmxlO1xuICAgICAgICB0aGlzLmNsaWNrYWJsZSA9ICEhY2FyZFZpZXdJdGVtUHJvcGVydGllcy5jbGlja2FibGU7XG4gICAgICAgIHRoaXMuaWNvbiA9IGNhcmRWaWV3SXRlbVByb3BlcnRpZXMuaWNvbiB8fCAnJztcbiAgICAgICAgdGhpcy52YWxpZGF0b3JzID0gY2FyZFZpZXdJdGVtUHJvcGVydGllcy52YWxpZGF0b3JzIHx8IFtdO1xuICAgICAgICB0aGlzLmRhdGEgPSBjYXJkVmlld0l0ZW1Qcm9wZXJ0aWVzLmRhdGEgfHwgbnVsbDtcbiAgICB9XG5cbiAgICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMudmFsdWUgPT09IG51bGwgfHwgdGhpcy52YWx1ZSA9PT0gJyc7XG4gICAgfVxuXG4gICAgaXNWYWxpZChuZXdWYWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghdGhpcy52YWxpZGF0b3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0b3JzXG4gICAgICAgICAgICAubWFwKCh2YWxpZGF0b3IpID0+IHZhbGlkYXRvci5pc1ZhbGlkKG5ld1ZhbHVlKSlcbiAgICAgICAgICAgIC5yZWR1Y2UoKGlzVmFsaWRVbnRpbE5vdywgaXNWYWxpZCkgPT4gaXNWYWxpZFVudGlsTm93ICYmIGlzVmFsaWQsIHRydWUpO1xuICAgIH1cblxuICAgIGdldFZhbGlkYXRpb25FcnJvcnModmFsdWUpOiBzdHJpbmdbXSB7XG4gICAgICAgIGlmICghdGhpcy52YWxpZGF0b3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdG9ycy5maWx0ZXIoKHZhbGlkYXRvcikgPT4gIXZhbGlkYXRvci5pc1ZhbGlkKHZhbHVlKSkubWFwKCh2YWxpZGF0b3IpID0+IHZhbGlkYXRvci5tZXNzYWdlKTtcbiAgICB9XG59XG4iXX0=
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CardViewBaseItemModel } from './card-view-baseitem.model';
export class CardViewTextItemModel extends CardViewBaseItemModel {
    /**
     * @param {?} cardViewTextItemProperties
     */
    constructor(cardViewTextItemProperties) {
        super(cardViewTextItemProperties);
        this.type = 'text';
        this.multiline = !!cardViewTextItemProperties.multiline;
        this.pipes = cardViewTextItemProperties.pipes || [];
    }
    /**
     * @return {?}
     */
    get displayValue() {
        if (this.isEmpty()) {
            return this.default;
        }
        else {
            return this.applyPipes(this.value);
        }
    }
    /**
     * @private
     * @param {?} displayValue
     * @return {?}
     */
    applyPipes(displayValue) {
        if (this.pipes.length) {
            displayValue = this.pipes.reduce((accumulator, { pipe, params = [] }) => {
                return pipe.transform(accumulator, ...params);
            }, displayValue);
        }
        return displayValue;
    }
}
if (false) {
    /** @type {?} */
    CardViewTextItemModel.prototype.type;
    /** @type {?} */
    CardViewTextItemModel.prototype.multiline;
    /** @type {?} */
    CardViewTextItemModel.prototype.pipes;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC12aWV3LXRleHRpdGVtLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsiY2FyZC12aWV3L21vZGVscy9jYXJkLXZpZXctdGV4dGl0ZW0ubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHbkUsTUFBTSxPQUFPLHFCQUFzQixTQUFRLHFCQUFxQjs7OztJQUs1RCxZQUFZLDBCQUFzRDtRQUM5RCxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUx0QyxTQUFJLEdBQVcsTUFBTSxDQUFDO1FBTWxCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLFNBQVMsQ0FBRTtRQUN6RCxJQUFJLENBQUMsS0FBSyxHQUFHLDBCQUEwQixDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7SUFDeEQsQ0FBQzs7OztJQUVELElBQUksWUFBWTtRQUNaLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ2hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUN2QjthQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0QztJQUNMLENBQUM7Ozs7OztJQUVPLFVBQVUsQ0FBQyxZQUFZO1FBQzNCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDbkIsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFO2dCQUNwRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUM7WUFDbEQsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3BCO1FBRUQsT0FBTyxZQUFZLENBQUM7SUFDeEIsQ0FBQztDQUNKOzs7SUEzQkcscUNBQXNCOztJQUN0QiwwQ0FBb0I7O0lBQ3BCLHNDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENhcmRWaWV3SXRlbSB9IGZyb20gJy4uL2ludGVyZmFjZXMvY2FyZC12aWV3LWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IER5bmFtaWNDb21wb25lbnRNb2RlbCB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2R5bmFtaWMtY29tcG9uZW50LW1hcHBlci5zZXJ2aWNlJztcbmltcG9ydCB7IENhcmRWaWV3QmFzZUl0ZW1Nb2RlbCB9IGZyb20gJy4vY2FyZC12aWV3LWJhc2VpdGVtLm1vZGVsJztcbmltcG9ydCB7IENhcmRWaWV3VGV4dEl0ZW1QaXBlUHJvcGVydHksIENhcmRWaWV3VGV4dEl0ZW1Qcm9wZXJ0aWVzIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jYXJkLXZpZXcuaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBDYXJkVmlld1RleHRJdGVtTW9kZWwgZXh0ZW5kcyBDYXJkVmlld0Jhc2VJdGVtTW9kZWwgaW1wbGVtZW50cyBDYXJkVmlld0l0ZW0sIER5bmFtaWNDb21wb25lbnRNb2RlbCB7XG4gICAgdHlwZTogc3RyaW5nID0gJ3RleHQnO1xuICAgIG11bHRpbGluZT86IGJvb2xlYW47XG4gICAgcGlwZXM/OiBDYXJkVmlld1RleHRJdGVtUGlwZVByb3BlcnR5W107XG5cbiAgICBjb25zdHJ1Y3RvcihjYXJkVmlld1RleHRJdGVtUHJvcGVydGllczogQ2FyZFZpZXdUZXh0SXRlbVByb3BlcnRpZXMpIHtcbiAgICAgICAgc3VwZXIoY2FyZFZpZXdUZXh0SXRlbVByb3BlcnRpZXMpO1xuICAgICAgICB0aGlzLm11bHRpbGluZSA9ICEhY2FyZFZpZXdUZXh0SXRlbVByb3BlcnRpZXMubXVsdGlsaW5lIDtcbiAgICAgICAgdGhpcy5waXBlcyA9IGNhcmRWaWV3VGV4dEl0ZW1Qcm9wZXJ0aWVzLnBpcGVzIHx8IFtdO1xuICAgIH1cblxuICAgIGdldCBkaXNwbGF5VmFsdWUoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5UGlwZXModGhpcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFwcGx5UGlwZXMoZGlzcGxheVZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnBpcGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgZGlzcGxheVZhbHVlID0gdGhpcy5waXBlcy5yZWR1Y2UoKGFjY3VtdWxhdG9yLCB7IHBpcGUsIHBhcmFtcyA9IFtdIH0pID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGlwZS50cmFuc2Zvcm0oYWNjdW11bGF0b3IsIC4uLnBhcmFtcyk7XG4gICAgICAgICAgICB9LCBkaXNwbGF5VmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRpc3BsYXlWYWx1ZTtcbiAgICB9XG59XG4iXX0=
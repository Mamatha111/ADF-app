/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { of, from, throwError } from 'rxjs';
import { AlfrescoApiService, SearchService, NodesApiService, TranslationService } from '@alfresco/adf-core';
import { switchMap, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
var NodePermissionService = /** @class */ (function () {
    function NodePermissionService(apiService, searchApiService, nodeService, translation) {
        this.apiService = apiService;
        this.searchApiService = searchApiService;
        this.nodeService = nodeService;
        this.translation = translation;
    }
    /**
     * Gets a list of roles for the current node.
     * @param node The target node
     * @returns Array of strings representing the roles
     */
    /**
     * Gets a list of roles for the current node.
     * @param {?} node The target node
     * @return {?} Array of strings representing the roles
     */
    NodePermissionService.prototype.getNodeRoles = /**
     * Gets a list of roles for the current node.
     * @param {?} node The target node
     * @return {?} Array of strings representing the roles
     */
    function (node) {
        var _this = this;
        /** @type {?} */
        var retrieveSiteQueryBody = this.buildRetrieveSiteQueryBody(node.path.elements);
        return this.searchApiService.searchByQueryBody(retrieveSiteQueryBody)
            .pipe(switchMap(function (siteNodeList) {
            if (siteNodeList.list.entries.length > 0) {
                /** @type {?} */
                var siteName = siteNodeList.list.entries[0].entry.name;
                return _this.getGroupMembersBySiteName(siteName);
            }
            else {
                return of(node.permissions.settable);
            }
        }));
    };
    /**
     * Updates the permission role for a node.
     * @param node Target node
     * @param updatedPermissionRole Permission role to update or add
     * @returns Node with updated permission
     */
    /**
     * Updates the permission role for a node.
     * @param {?} node Target node
     * @param {?} updatedPermissionRole Permission role to update or add
     * @return {?} Node with updated permission
     */
    NodePermissionService.prototype.updatePermissionRole = /**
     * Updates the permission role for a node.
     * @param {?} node Target node
     * @param {?} updatedPermissionRole Permission role to update or add
     * @return {?} Node with updated permission
     */
    function (node, updatedPermissionRole) {
        /** @type {?} */
        var permissionBody = { permissions: { locallySet: [] } };
        /** @type {?} */
        var index = node.permissions.locallySet.map(function (permission) { return permission.authorityId; }).indexOf(updatedPermissionRole.authorityId);
        permissionBody.permissions.locallySet = permissionBody.permissions.locallySet.concat(node.permissions.locallySet);
        if (index !== -1) {
            permissionBody.permissions.locallySet[index] = updatedPermissionRole;
        }
        else {
            permissionBody.permissions.locallySet.push(updatedPermissionRole);
        }
        return this.nodeService.updateNode(node.id, permissionBody);
    };
    /**
     * Update permissions for a node.
     * @param nodeId ID of the target node
     * @param permissionList New permission settings
     * @returns Node with updated permissions
     */
    /**
     * Update permissions for a node.
     * @param {?} nodeId ID of the target node
     * @param {?} permissionList New permission settings
     * @return {?} Node with updated permissions
     */
    NodePermissionService.prototype.updateNodePermissions = /**
     * Update permissions for a node.
     * @param {?} nodeId ID of the target node
     * @param {?} permissionList New permission settings
     * @return {?} Node with updated permissions
     */
    function (nodeId, permissionList) {
        var _this = this;
        return this.nodeService.getNode(nodeId).pipe(switchMap(function (node) {
            return _this.getNodeRoles(node).pipe(switchMap(function (nodeRoles) { return of({ node: node, nodeRoles: nodeRoles }); }));
        }), switchMap(function (_a) {
            var node = _a.node, nodeRoles = _a.nodeRoles;
            return _this.updateLocallySetPermissions(node, permissionList, nodeRoles);
        }));
    };
    /**
     * Updates the locally set permissions for a node.
     * @param node ID of the target node
     * @param nodes Permission settings
     * @param nodeRole Permission role
     * @returns Node with updated permissions
     */
    /**
     * Updates the locally set permissions for a node.
     * @param {?} node ID of the target node
     * @param {?} nodes Permission settings
     * @param {?} nodeRole Permission role
     * @return {?} Node with updated permissions
     */
    NodePermissionService.prototype.updateLocallySetPermissions = /**
     * Updates the locally set permissions for a node.
     * @param {?} node ID of the target node
     * @param {?} nodes Permission settings
     * @param {?} nodeRole Permission role
     * @return {?} Node with updated permissions
     */
    function (node, nodes, nodeRole) {
        /** @type {?} */
        var permissionBody = { permissions: { locallySet: [] } };
        /** @type {?} */
        var permissionList = this.transformNodeToPermissionElement(nodes, nodeRole[0]);
        /** @type {?} */
        var duplicatedPermissions = this.getDuplicatedPermissions(node.permissions.locallySet, permissionList);
        if (duplicatedPermissions.length > 0) {
            /** @type {?} */
            var list = duplicatedPermissions.map(function (permission) { return 'authority -> ' + permission.authorityId + ' / role -> ' + permission.name; }).join(', ');
            /** @type {?} */
            var duplicatePermissionMessage = this.translation.instant('PERMISSION_MANAGER.ERROR.DUPLICATE-PERMISSION', { list: list });
            return throwError(duplicatePermissionMessage);
        }
        permissionBody.permissions.locallySet = node.permissions.locallySet ? node.permissions.locallySet.concat(permissionList) : permissionList;
        return this.nodeService.updateNode(node.id, permissionBody);
    };
    /**
     * @private
     * @param {?} nodeLocallySet
     * @param {?} permissionListAdded
     * @return {?}
     */
    NodePermissionService.prototype.getDuplicatedPermissions = /**
     * @private
     * @param {?} nodeLocallySet
     * @param {?} permissionListAdded
     * @return {?}
     */
    function (nodeLocallySet, permissionListAdded) {
        var _this = this;
        /** @type {?} */
        var duplicatePermissions = [];
        if (nodeLocallySet) {
            permissionListAdded.forEach(function (permission) {
                /** @type {?} */
                var duplicate = nodeLocallySet.find(function (localPermission) { return _this.isEqualPermission(localPermission, permission); });
                if (duplicate) {
                    duplicatePermissions.push(duplicate);
                }
            });
        }
        return duplicatePermissions;
    };
    /**
     * @private
     * @param {?} oldPermission
     * @param {?} newPermission
     * @return {?}
     */
    NodePermissionService.prototype.isEqualPermission = /**
     * @private
     * @param {?} oldPermission
     * @param {?} newPermission
     * @return {?}
     */
    function (oldPermission, newPermission) {
        return oldPermission.accessStatus === newPermission.accessStatus &&
            oldPermission.authorityId === newPermission.authorityId &&
            oldPermission.name === newPermission.name;
    };
    /**
     * @private
     * @param {?} nodes
     * @param {?} nodeRole
     * @return {?}
     */
    NodePermissionService.prototype.transformNodeToPermissionElement = /**
     * @private
     * @param {?} nodes
     * @param {?} nodeRole
     * @return {?}
     */
    function (nodes, nodeRole) {
        return nodes.map(function (node) {
            /** @type {?} */
            var newPermissionElement = (/** @type {?} */ ({
                'authorityId': node.entry.properties['cm:authorityName'] ?
                    node.entry.properties['cm:authorityName'] :
                    node.entry.properties['cm:userName'],
                'name': nodeRole,
                'accessStatus': 'ALLOWED'
            }));
            return newPermissionElement;
        });
    };
    /**
     * Removes a permission setting from a node.
     * @param node ID of the target node
     * @param permissionToRemove Permission setting to remove
     * @returns Node with modified permissions
     */
    /**
     * Removes a permission setting from a node.
     * @param {?} node ID of the target node
     * @param {?} permissionToRemove Permission setting to remove
     * @return {?} Node with modified permissions
     */
    NodePermissionService.prototype.removePermission = /**
     * Removes a permission setting from a node.
     * @param {?} node ID of the target node
     * @param {?} permissionToRemove Permission setting to remove
     * @return {?} Node with modified permissions
     */
    function (node, permissionToRemove) {
        /** @type {?} */
        var permissionBody = { permissions: { locallySet: [] } };
        /** @type {?} */
        var index = node.permissions.locallySet.map(function (permission) { return permission.authorityId; }).indexOf(permissionToRemove.authorityId);
        if (index !== -1) {
            node.permissions.locallySet.splice(index, 1);
            permissionBody.permissions.locallySet = node.permissions.locallySet;
            return this.nodeService.updateNode(node.id, permissionBody);
        }
    };
    /**
     * @private
     * @param {?} siteName
     * @return {?}
     */
    NodePermissionService.prototype.getGroupMembersBySiteName = /**
     * @private
     * @param {?} siteName
     * @return {?}
     */
    function (siteName) {
        var _this = this;
        /** @type {?} */
        var groupName = 'GROUP_site_' + siteName;
        return this.getGroupMemberByGroupName(groupName)
            .pipe(map(function (groupMemberPaging) {
            /** @type {?} */
            var displayResult = [];
            groupMemberPaging.list.entries.forEach(function (member) {
                displayResult.push(_this.formattedRoleName(member.entry.displayName, 'site_' + siteName));
            });
            return displayResult;
        }));
    };
    /**
     * Gets all members related to a group name.
     * @param groupName Name of group to look for members
     * @param opts Extra options supported by JS-API
     * @returns List of members
     */
    /**
     * Gets all members related to a group name.
     * @param {?} groupName Name of group to look for members
     * @param {?=} opts Extra options supported by JS-API
     * @return {?} List of members
     */
    NodePermissionService.prototype.getGroupMemberByGroupName = /**
     * Gets all members related to a group name.
     * @param {?} groupName Name of group to look for members
     * @param {?=} opts Extra options supported by JS-API
     * @return {?} List of members
     */
    function (groupName, opts) {
        return from(this.apiService.groupsApi.getGroupMembers(groupName, opts));
    };
    /**
     * @private
     * @param {?} displayName
     * @param {?} siteName
     * @return {?}
     */
    NodePermissionService.prototype.formattedRoleName = /**
     * @private
     * @param {?} displayName
     * @param {?} siteName
     * @return {?}
     */
    function (displayName, siteName) {
        return displayName.replace(siteName + '_', '');
    };
    /**
     * @private
     * @param {?} nodePath
     * @return {?}
     */
    NodePermissionService.prototype.buildRetrieveSiteQueryBody = /**
     * @private
     * @param {?} nodePath
     * @return {?}
     */
    function (nodePath) {
        /** @type {?} */
        var pathNames = nodePath.map(function (node) { return 'name: "' + node.name + '"'; });
        /** @type {?} */
        var buildedPathNames = pathNames.join(' OR ');
        return {
            'query': {
                'query': buildedPathNames
            },
            'paging': {
                'maxItems': 100,
                'skipCount': 0
            },
            'include': ['aspectNames', 'properties'],
            'filterQueries': [
                {
                    'query': "TYPE:'st:site'"
                }
            ]
        };
    };
    NodePermissionService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NodePermissionService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: SearchService },
        { type: NodesApiService },
        { type: TranslationService }
    ]; };
    /** @nocollapse */ NodePermissionService.ngInjectableDef = i0.defineInjectable({ factory: function NodePermissionService_Factory() { return new NodePermissionService(i0.inject(i1.AlfrescoApiService), i0.inject(i1.SearchService), i0.inject(i1.NodesApiService), i0.inject(i1.TranslationService)); }, token: NodePermissionService, providedIn: "root" });
    return NodePermissionService;
}());
export { NodePermissionService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NodePermissionService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    NodePermissionService.prototype.searchApiService;
    /**
     * @type {?}
     * @private
     */
    NodePermissionService.prototype.nodeService;
    /**
     * @type {?}
     * @private
     */
    NodePermissionService.prototype.translation;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { TagService } from './services/tag.service';
/**
 *
 * This component, ShowNodeTag a list of the tag on relative a node
 */
var TagNodeListComponent = /** @class */ (function () {
    /**
     * Constructor
     * @param tagService
     */
    function TagNodeListComponent(tagService) {
        var _this = this;
        this.tagService = tagService;
        /**
         * Show delete button
         */
        this.showDelete = true;
        /**
         * Emitted when a tag is selected.
         */
        this.results = new EventEmitter();
        this.tagService.refresh.subscribe(function () {
            _this.refreshTag();
        });
    }
    /**
     * @return {?}
     */
    TagNodeListComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        return this.refreshTag();
    };
    /**
     * @return {?}
     */
    TagNodeListComponent.prototype.refreshTag = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.nodeId) {
            this.tagService.getTagsByNodeId(this.nodeId).subscribe(function (tagPaging) {
                _this.tagsEntries = tagPaging.list.entries;
                _this.results.emit(_this.tagsEntries);
            });
        }
    };
    /**
     * @param {?} tag
     * @return {?}
     */
    TagNodeListComponent.prototype.removeTag = /**
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        var _this = this;
        this.tagService.removeTag(this.nodeId, tag).subscribe(function () {
            _this.refreshTag();
        });
    };
    TagNodeListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-tag-node-list',
                    template: "<mat-chip-list>\n    <mat-chip class=\"adf-tag-chips adf-primary-background-color\"\n              *ngFor=\"let currentEntry of tagsEntries; let idx = index\" (removed)=\"removeTag(currentEntry.entry.id)\">\n        <span id=\"tag_name_{{idx}}\">{{currentEntry.entry.tag}}</span>\n        <mat-icon *ngIf=\"showDelete\" id=\"tag_chips_delete_{{currentEntry.entry.tag}}\"\n                  class=\"adf-tag-chips-delete-icon adf-primary-contrast-text-color\" matChipRemove>cancel\n        </mat-icon>\n    </mat-chip>\n</mat-chip-list>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-tag-chips-delete{overflow:visible;cursor:pointer;height:17px;width:20px;float:right;border:0;background:0 0;padding:0;margin:-1px 0 0 10px}.adf-tag-chips-delete-icon{font-size:20px;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:20px;width:20px}"]
                }] }
    ];
    /** @nocollapse */
    TagNodeListComponent.ctorParameters = function () { return [
        { type: TagService }
    ]; };
    TagNodeListComponent.propDecorators = {
        nodeId: [{ type: Input }],
        showDelete: [{ type: Input }],
        results: [{ type: Output }]
    };
    return TagNodeListComponent;
}());
export { TagNodeListComponent };
if (false) {
    /**
     * The identifier of a node.
     * @type {?}
     */
    TagNodeListComponent.prototype.nodeId;
    /**
     * Show delete button
     * @type {?}
     */
    TagNodeListComponent.prototype.showDelete;
    /** @type {?} */
    TagNodeListComponent.prototype.tagsEntries;
    /**
     * Emitted when a tag is selected.
     * @type {?}
     */
    TagNodeListComponent.prototype.results;
    /**
     * @type {?}
     * @private
     */
    TagNodeListComponent.prototype.tagService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLW5vZGUtbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJ0YWcvdGFnLW5vZGUtbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7Ozs7O0FBUXBEO0lBcUJJOzs7T0FHRztJQUNILDhCQUFvQixVQUFzQjtRQUExQyxpQkFJQztRQUptQixlQUFVLEdBQVYsVUFBVSxDQUFZOzs7O1FBWjFDLGVBQVUsR0FBRyxJQUFJLENBQUM7Ozs7UUFNbEIsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFPekIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQzlCLEtBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Ozs7SUFFRCwwQ0FBVzs7O0lBQVg7UUFDSSxPQUFPLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7O0lBRUQseUNBQVU7OztJQUFWO1FBQUEsaUJBT0M7UUFORyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDYixJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQUMsU0FBb0I7Z0JBQ3hFLEtBQUksQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQzFDLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN4QyxDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7Ozs7SUFFRCx3Q0FBUzs7OztJQUFULFVBQVUsR0FBVztRQUFyQixpQkFJQztRQUhHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQ2xELEtBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O2dCQWhESixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0Isb2lCQUE2QztvQkFFN0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2lCQUN4Qzs7OztnQkFiUSxVQUFVOzs7eUJBZ0JkLEtBQUs7NkJBSUwsS0FBSzswQkFNTCxNQUFNOztJQStCWCwyQkFBQztDQUFBLEFBakRELElBaURDO1NBM0NZLG9CQUFvQjs7Ozs7O0lBRTdCLHNDQUNlOzs7OztJQUdmLDBDQUNrQjs7SUFFbEIsMkNBQWlCOzs7OztJQUdqQix1Q0FDNkI7Ozs7O0lBTWpCLDBDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUYWdTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy90YWcuc2VydmljZSc7XG5pbXBvcnQgeyBUYWdQYWdpbmcgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcblxuLyoqXG4gKlxuICogVGhpcyBjb21wb25lbnQsIFNob3dOb2RlVGFnIGEgbGlzdCBvZiB0aGUgdGFnIG9uIHJlbGF0aXZlIGEgbm9kZVxuICovXG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXRhZy1ub2RlLWxpc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi90YWctbm9kZS1saXN0LmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi90YWctbm9kZS1saXN0LmNvbXBvbmVudC5zY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBUYWdOb2RlTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgLyoqIFRoZSBpZGVudGlmaWVyIG9mIGEgbm9kZS4gKi9cbiAgICBASW5wdXQoKVxuICAgIG5vZGVJZDogc3RyaW5nO1xuXG4gICAgLyoqIFNob3cgZGVsZXRlIGJ1dHRvbiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2hvd0RlbGV0ZSA9IHRydWU7XG5cbiAgICB0YWdzRW50cmllczogYW55O1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhIHRhZyBpcyBzZWxlY3RlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICByZXN1bHRzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gdGFnU2VydmljZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdGFnU2VydmljZTogVGFnU2VydmljZSkge1xuICAgICAgICB0aGlzLnRhZ1NlcnZpY2UucmVmcmVzaC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVGFnKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoVGFnKCk7XG4gICAgfVxuXG4gICAgcmVmcmVzaFRhZygpIHtcbiAgICAgICAgaWYgKHRoaXMubm9kZUlkKSB7XG4gICAgICAgICAgICB0aGlzLnRhZ1NlcnZpY2UuZ2V0VGFnc0J5Tm9kZUlkKHRoaXMubm9kZUlkKS5zdWJzY3JpYmUoKHRhZ1BhZ2luZzogVGFnUGFnaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy50YWdzRW50cmllcyA9IHRhZ1BhZ2luZy5saXN0LmVudHJpZXM7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHRzLmVtaXQodGhpcy50YWdzRW50cmllcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZVRhZyh0YWc6IHN0cmluZykge1xuICAgICAgICB0aGlzLnRhZ1NlcnZpY2UucmVtb3ZlVGFnKHRoaXMubm9kZUlkLCB0YWcpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hUYWcoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19
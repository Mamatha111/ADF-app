/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { SearchService, TranslationService } from '@alfresco/adf-core';
import { SearchQueryBuilderService } from '../../search-query-builder.service';
import { SearchFilterList } from './models/search-filter-list.model';
import { takeWhile } from 'rxjs/operators';
var SearchFilterComponent = /** @class */ (function () {
    function SearchFilterComponent(queryBuilder, searchService, translationService) {
        var _this = this;
        this.queryBuilder = queryBuilder;
        this.searchService = searchService;
        this.translationService = translationService;
        this.DEFAULT_PAGE_SIZE = 5;
        this.isAlive = true;
        this.responseFacets = null;
        this.facetQueriesPageSize = this.DEFAULT_PAGE_SIZE;
        this.facetQueriesLabel = 'Facet Queries';
        this.facetQueriesExpanded = false;
        this.facetFieldsExpanded = false;
        this.selectedBuckets = [];
        if (queryBuilder.config && queryBuilder.config.facetQueries) {
            this.facetQueriesLabel = queryBuilder.config.facetQueries.label || 'Facet Queries';
            this.facetQueriesPageSize = queryBuilder.config.facetQueries.pageSize || this.DEFAULT_PAGE_SIZE;
            this.facetQueriesExpanded = queryBuilder.config.facetQueries.expanded;
        }
        if (queryBuilder.config && queryBuilder.config.facetFields) {
            this.facetFieldsExpanded = queryBuilder.config.facetFields.expanded;
        }
        this.queryBuilder.updated.pipe(takeWhile(function () { return _this.isAlive; })).subscribe(function () {
            _this.queryBuilder.execute();
        });
    }
    /**
     * @return {?}
     */
    SearchFilterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.queryBuilder) {
            this.queryBuilder.executed.pipe(takeWhile(function () { return _this.isAlive; })).subscribe(function (resultSetPaging) {
                _this.onDataLoaded(resultSetPaging);
                _this.searchService.dataLoaded.next(resultSetPaging);
            });
        }
    };
    /**
     * @return {?}
     */
    SearchFilterComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.isAlive = false;
    };
    /**
     * @private
     * @return {?}
     */
    SearchFilterComponent.prototype.updateSelectedBuckets = /**
     * @private
     * @return {?}
     */
    function () {
        var e_1, _a;
        if (this.responseFacets) {
            this.selectedBuckets = [];
            var _loop_1 = function (field) {
                var _a;
                if (field.buckets) {
                    (_a = this_1.selectedBuckets).push.apply(_a, tslib_1.__spread(this_1.queryBuilder.getUserFacetBuckets(field.field)
                        .filter(function (bucket) { return bucket.checked; })
                        .map(function (bucket) {
                        return { field: field, bucket: bucket };
                    })));
                }
            };
            var this_1 = this;
            try {
                for (var _b = tslib_1.__values(this.responseFacets), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var field = _c.value;
                    _loop_1(field);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            this.selectedBuckets = [];
        }
    };
    /**
     * @param {?} event
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    SearchFilterComponent.prototype.onToggleBucket = /**
     * @param {?} event
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    function (event, field, bucket) {
        if (event && bucket) {
            if (event.checked) {
                this.selectFacetBucket(field, bucket);
            }
            else {
                this.unselectFacetBucket(field, bucket);
            }
        }
    };
    /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    SearchFilterComponent.prototype.selectFacetBucket = /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    function (field, bucket) {
        if (bucket) {
            bucket.checked = true;
            this.queryBuilder.addUserFacetBucket(field, bucket);
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    };
    /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    SearchFilterComponent.prototype.unselectFacetBucket = /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    function (field, bucket) {
        if (bucket) {
            bucket.checked = false;
            this.queryBuilder.removeUserFacetBucket(field, bucket);
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    SearchFilterComponent.prototype.canResetSelectedBuckets = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (field && field.buckets) {
            return field.buckets.items.some(function (bucket) { return bucket.checked; });
        }
        return false;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    SearchFilterComponent.prototype.resetSelectedBuckets = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var e_2, _a;
        if (field && field.buckets) {
            try {
                for (var _b = tslib_1.__values(field.buckets.items), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var bucket = _c.value;
                    bucket.checked = false;
                    this.queryBuilder.removeUserFacetBucket(field, bucket);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    SearchFilterComponent.prototype.shouldExpand = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field.type === 'query' ? this.facetQueriesExpanded : this.facetFieldsExpanded;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    SearchFilterComponent.prototype.onDataLoaded = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var context = data.list.context;
        if (context) {
            this.parseFacets(context);
        }
        else {
            this.responseFacets = null;
        }
    };
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    SearchFilterComponent.prototype.parseFacets = /**
     * @private
     * @param {?} context
     * @return {?}
     */
    function (context) {
        var _this = this;
        if (!this.responseFacets) {
            /** @type {?} */
            var responseFacetFields = this.parseFacetFields(context);
            /** @type {?} */
            var responseGroupedFacetQueries = this.parseFacetQueries(context);
            this.responseFacets = responseFacetFields.concat.apply(responseFacetFields, tslib_1.__spread(responseGroupedFacetQueries));
        }
        else {
            this.responseFacets = this.responseFacets
                .map(function (field) {
                /** @type {?} */
                var responseField = (context.facets || []).find(function (response) { return response.label === field.label && response.type === field.type; });
                (field && field.buckets && field.buckets.items || [])
                    .map(function (bucket) {
                    /** @type {?} */
                    var responseBucket = ((responseField && responseField.buckets) || []).find(function (respBucket) { return respBucket.label === bucket.label; });
                    bucket.count = responseBucket ? _this.getCountValue(responseBucket) : 0;
                    return bucket;
                });
                return field;
            });
        }
    };
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    SearchFilterComponent.prototype.parseFacetFields = /**
     * @private
     * @param {?} context
     * @return {?}
     */
    function (context) {
        var _this = this;
        /** @type {?} */
        var configFacetFields = this.queryBuilder.config.facetFields && this.queryBuilder.config.facetFields.fields || [];
        return configFacetFields.map(function (field) {
            /** @type {?} */
            var responseField = (context.facets || []).find(function (response) { return response.type === 'field' && response.label === field.label; }) || {};
            /** @type {?} */
            var responseBuckets = _this.getResponseBuckets(responseField);
            /** @type {?} */
            var bucketList = new SearchFilterList(responseBuckets, field.pageSize);
            bucketList.filter = function (bucket) {
                if (bucket && bucketList.filterText) {
                    /** @type {?} */
                    var pattern = (bucketList.filterText || '').toLowerCase();
                    /** @type {?} */
                    var label = (_this.translationService.instant(bucket.display) || _this.translationService.instant(bucket.label)).toLowerCase();
                    return _this.queryBuilder.config.filterWithContains ? label.indexOf(pattern) !== -1 : label.startsWith(pattern);
                }
                return true;
            };
            return (/** @type {?} */ (tslib_1.__assign({}, field, { type: responseField.type, label: field.label, pageSize: field.pageSize | _this.DEFAULT_PAGE_SIZE, currentPageSize: field.pageSize | _this.DEFAULT_PAGE_SIZE, buckets: bucketList })));
        });
    };
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    SearchFilterComponent.prototype.parseFacetQueries = /**
     * @private
     * @param {?} context
     * @return {?}
     */
    function (context) {
        var _this = this;
        /** @type {?} */
        var configFacetQueries = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.queries || [];
        /** @type {?} */
        var configGroups = configFacetQueries.reduce(function (acc, query) {
            /** @type {?} */
            var group = _this.queryBuilder.getQueryGroup(query);
            if (acc[group]) {
                acc[group].push(query);
            }
            else {
                acc[group] = [query];
            }
            return acc;
        }, []);
        /** @type {?} */
        var result = [];
        Object.keys(configGroups).forEach(function (group) {
            /** @type {?} */
            var responseField = (context.facets || []).find(function (response) { return response.type === 'query' && response.label === group; }) || {};
            /** @type {?} */
            var responseBuckets = _this.getResponseQueryBuckets(responseField, configGroups[group]);
            /** @type {?} */
            var bucketList = new SearchFilterList(responseBuckets, _this.facetQueriesPageSize);
            bucketList.filter = function (bucket) {
                if (bucket && bucketList.filterText) {
                    /** @type {?} */
                    var pattern = (bucketList.filterText || '').toLowerCase();
                    /** @type {?} */
                    var label = (_this.translationService.instant(bucket.display) || _this.translationService.instant(bucket.label)).toLowerCase();
                    return _this.queryBuilder.config.filterWithContains ? label.indexOf(pattern) !== -1 : label.startsWith(pattern);
                }
                return true;
            };
            result.push((/** @type {?} */ ({
                field: group,
                type: responseField.type,
                label: group,
                pageSize: _this.DEFAULT_PAGE_SIZE,
                currentPageSize: _this.DEFAULT_PAGE_SIZE,
                buckets: bucketList
            })));
        });
        return result;
    };
    /**
     * @private
     * @param {?} responseField
     * @return {?}
     */
    SearchFilterComponent.prototype.getResponseBuckets = /**
     * @private
     * @param {?} responseField
     * @return {?}
     */
    function (responseField) {
        var _this = this;
        return ((responseField && responseField.buckets) || []).map(function (respBucket) {
            respBucket['count'] = _this.getCountValue(respBucket);
            return (/** @type {?} */ (tslib_1.__assign({}, respBucket, { checked: false, display: respBucket.display, label: respBucket.label })));
        });
    };
    /**
     * @private
     * @param {?} responseField
     * @param {?} configGroup
     * @return {?}
     */
    SearchFilterComponent.prototype.getResponseQueryBuckets = /**
     * @private
     * @param {?} responseField
     * @param {?} configGroup
     * @return {?}
     */
    function (responseField, configGroup) {
        var _this = this;
        return (configGroup || []).map(function (query) {
            /** @type {?} */
            var respBucket = ((responseField && responseField.buckets) || [])
                .find(function (bucket) { return bucket.label === query.label; });
            respBucket['count'] = _this.getCountValue(respBucket);
            return (/** @type {?} */ (tslib_1.__assign({}, respBucket, { checked: false, display: respBucket.display, label: respBucket.label })));
        }).filter(function (bucket) {
            /** @type {?} */
            var mincount = _this.queryBuilder.config.facetQueries.mincount;
            if (mincount === undefined) {
                mincount = 1;
            }
            return bucket.count >= mincount;
        });
    };
    /**
     * @private
     * @param {?} bucket
     * @return {?}
     */
    SearchFilterComponent.prototype.getCountValue = /**
     * @private
     * @param {?} bucket
     * @return {?}
     */
    function (bucket) {
        return (!!bucket && !!bucket.metrics && bucket.metrics[0] && bucket.metrics[0].value && bucket.metrics[0].value.count)
            || 0;
    };
    SearchFilterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-search-filter',
                    template: "<mat-accordion multi=\"true\" displayMode=\"flat\">\n\n    <mat-expansion-panel\n        *ngFor=\"let category of queryBuilder.categories\"\n        [attr.data-automation-id]=\"'expansion-panel-'+category.name\"\n        [(expanded)]=\"category.expanded\">\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                {{ category.name | translate }}\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <adf-search-widget-container\n            [id]=\"category.id\"\n            [selector]=\"category.component.selector\"\n            [settings]=\"category.component.settings\">\n        </adf-search-widget-container>\n    </mat-expansion-panel>\n\n    <ng-container *ngIf=\"responseFacets\">\n        <mat-expansion-panel [attr.data-automation-id]=\"'expansion-panel-'+field.label\" *ngFor=\"let field of responseFacets\"\n                             [expanded]=\"shouldExpand(field)\">\n            <mat-expansion-panel-header>\n                <mat-panel-title>{{ field.label | translate }}</mat-panel-title>\n            </mat-expansion-panel-header>\n\n            <div class=\"adf-facet-result-filter\">\n                <mat-form-field>\n                    <input\n                        matInput\n                        placeholder=\"{{ 'SEARCH.FILTER.ACTIONS.FILTER-CATEGORY' | translate }}\"\n                        [attr.data-automation-id]=\"'facet-result-filter-'+field.label\"\n                        [(ngModel)]=\"field.buckets.filterText\">\n                    <button *ngIf=\"field.buckets.filterText\"\n                        mat-button matSuffix mat-icon-button\n                        (click)=\"field.buckets.filterText = ''\">\n                        <mat-icon>close</mat-icon>\n                    </button>\n                </mat-form-field>\n            </div>\n\n            <div class=\"adf-checklist\">\n                <mat-checkbox\n                    *ngFor=\"let bucket of field.buckets\"\n                    [checked]=\"bucket.checked\"\n                    [attr.data-automation-id]=\"'checkbox-'+field.label+'-'+(bucket.display || bucket.label)\"\n                    (change)=\"onToggleBucket($event, field, bucket)\">\n                    <div \n                        matTooltip=\"{{ bucket.display || bucket.label | translate }}\"\n                        matTooltipPosition=\"right\"\n                        class=\"adf-facet-label\">\n                        {{ bucket.display || bucket.label | translate }} \n                        <span *ngIf=\"bucket.count!==null\">(</span>\n                        {{ bucket.count }}\n                        <span *ngIf=\"bucket.count!==null\">)</span>\n                    </div>\n                </mat-checkbox>\n            </div>\n\n            <div class=\"adf-facet-buttons\" *ngIf=\"field.buckets.fitsPage\">\n                <button *ngIf=\"canResetSelectedBuckets(field)\"\n                    mat-button\n                    color=\"primary\"\n                    (click)=\"resetSelectedBuckets(field)\">\n                    {{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\n                </button>\n            </div>\n\n            <div class=\"adf-facet-buttons\" *ngIf=\"!field.buckets.fitsPage\">\n                <button mat-icon-button\n                    *ngIf=\"canResetSelectedBuckets(field)\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\"\n                    (click)=\"resetSelectedBuckets(field)\">\n                    <mat-icon>clear</mat-icon>\n                </button>\n                <button mat-icon-button\n                    *ngIf=\"field.buckets.canShowLessItems\"\n                    (click)=\"field.buckets.showLessItems()\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\">\n                    <mat-icon>keyboard_arrow_up</mat-icon>\n                </button>\n                <button mat-icon-button\n                    *ngIf=\"field.buckets.canShowMoreItems\"\n                    (click)=\"field.buckets.showMoreItems()\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\">\n                    <mat-icon>keyboard_arrow_down</mat-icon>\n                </button>\n            </div>\n        </mat-expansion-panel>\n    </ng-container>\n</mat-accordion>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-search-filter' },
                    styles: [".adf-search-filter .adf-checklist{display:flex;flex-direction:column}.adf-search-filter .adf-checklist .mat-checkbox-label{text-overflow:ellipsis;overflow:hidden;width:100%}.adf-search-filter .adf-checklist .mat-checkbox-layout{width:100%}.adf-search-filter .adf-checklist .adf-facet-label{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.adf-search-filter .adf-checklist .mat-checkbox{margin:5px}.adf-search-filter .adf-checklist .mat-checkbox.mat-checkbox-checked .mat-checkbox-label{font-weight:700}.adf-search-filter .adf-facet-result-filter{display:flex;flex-direction:column}.adf-search-filter .adf-facet-result-filter>*{width:100%}.adf-search-filter .adf-facet-buttons{text-align:right}.adf-search-filter .adf-facet-buttons .mat-button{text-transform:uppercase}.adf-search-filter .adf-facet-buttons--topSpace{padding-top:15px}"]
                }] }
    ];
    /** @nocollapse */
    SearchFilterComponent.ctorParameters = function () { return [
        { type: SearchQueryBuilderService },
        { type: SearchService },
        { type: TranslationService }
    ]; };
    return SearchFilterComponent;
}());
export { SearchFilterComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.DEFAULT_PAGE_SIZE;
    /** @type {?} */
    SearchFilterComponent.prototype.isAlive;
    /** @type {?} */
    SearchFilterComponent.prototype.responseFacets;
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.facetQueriesPageSize;
    /** @type {?} */
    SearchFilterComponent.prototype.facetQueriesLabel;
    /** @type {?} */
    SearchFilterComponent.prototype.facetQueriesExpanded;
    /** @type {?} */
    SearchFilterComponent.prototype.facetFieldsExpanded;
    /** @type {?} */
    SearchFilterComponent.prototype.selectedBuckets;
    /** @type {?} */
    SearchFilterComponent.prototype.queryBuilder;
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.searchService;
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.translationService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWZpbHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJzZWFyY2gvY29tcG9uZW50cy9zZWFyY2gtZmlsdGVyL3NlYXJjaC1maWx0ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUVoRixPQUFPLEVBQUUsYUFBYSxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDdkUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFHL0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDckUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzNDO0lBcUJJLCtCQUFtQixZQUF1QyxFQUN0QyxhQUE0QixFQUM1QixrQkFBc0M7UUFGMUQsaUJBaUJDO1FBakJrQixpQkFBWSxHQUFaLFlBQVksQ0FBMkI7UUFDdEMsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQWRsRCxzQkFBaUIsR0FBRyxDQUFDLENBQUM7UUFFOUIsWUFBTyxHQUFHLElBQUksQ0FBQztRQUNmLG1CQUFjLEdBQWlCLElBQUksQ0FBQztRQUU1Qix5QkFBb0IsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUM7UUFDdEQsc0JBQWlCLEdBQVcsZUFBZSxDQUFDO1FBQzVDLHlCQUFvQixHQUFHLEtBQUssQ0FBQztRQUM3Qix3QkFBbUIsR0FBRyxLQUFLLENBQUM7UUFFNUIsb0JBQWUsR0FBMkQsRUFBRSxDQUFDO1FBS3pFLElBQUksWUFBWSxDQUFDLE1BQU0sSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLFlBQVks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UUFBUSxLQUFLLFNBQVMsRUFBRTtnQkFDcEIsUUFBUSxHQUFHLENBQUMsQ0FBQzthQUNwQjtZQUNELE9BQU8sTUFBTSxDQUFDLEtBQUssSUFBSSxRQUFRLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzs7Ozs7SUFFTyw2Q0FBYTs7Ozs7SUFBckIsVUFBc0IsTUFBcUI7UUFDdkMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7ZUFDL0csQ0FBQyxDQUFDO0lBQ2IsQ0FBQzs7Z0JBelFKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixneElBQTZDO29CQUU3QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtvQkFDckMsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLG1CQUFtQixFQUFFOztpQkFDdkM7Ozs7Z0JBYlEseUJBQXlCO2dCQUR6QixhQUFhO2dCQUFFLGtCQUFrQjs7SUFrUjFDLDRCQUFDO0NBQUEsQUExUUQsSUEwUUM7U0FuUVkscUJBQXFCOzs7Ozs7SUFFOUIsa0RBQThCOztJQUU5Qix3Q0FBZTs7SUFDZiwrQ0FBb0M7Ozs7O0lBRXBDLHFEQUFzRDs7SUFDdEQsa0RBQTRDOztJQUM1QyxxREFBNkI7O0lBQzdCLG9EQUE0Qjs7SUFFNUIsZ0RBQTZFOztJQUVqRSw2Q0FBOEM7Ozs7O0lBQzlDLDhDQUFvQzs7Ozs7SUFDcEMsbURBQThDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3RW5jYXBzdWxhdGlvbiwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdENoZWNrYm94Q2hhbmdlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgU2VhcmNoU2VydmljZSwgVHJhbnNsYXRpb25TZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IFNlYXJjaFF1ZXJ5QnVpbGRlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZWFyY2gtcXVlcnktYnVpbGRlci5zZXJ2aWNlJztcbmltcG9ydCB7IEZhY2V0RmllbGRCdWNrZXQgfSBmcm9tICcuLi8uLi9mYWNldC1maWVsZC1idWNrZXQuaW50ZXJmYWNlJztcbmltcG9ydCB7IEZhY2V0RmllbGQgfSBmcm9tICcuLi8uLi9mYWNldC1maWVsZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgU2VhcmNoRmlsdGVyTGlzdCB9IGZyb20gJy4vbW9kZWxzL3NlYXJjaC1maWx0ZXItbGlzdC5tb2RlbCc7XG5pbXBvcnQgeyB0YWtlV2hpbGUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZXN1bHRTZXRQYWdpbmcsIEdlbmVyaWNCdWNrZXQsIEdlbmVyaWNGYWNldFJlc3BvbnNlLCBSZXN1bHRTZXRDb250ZXh0IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXNlYXJjaC1maWx0ZXInLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zZWFyY2gtZmlsdGVyLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9zZWFyY2gtZmlsdGVyLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBob3N0OiB7IGNsYXNzOiAnYWRmLXNlYXJjaC1maWx0ZXInIH1cbn0pXG5leHBvcnQgY2xhc3MgU2VhcmNoRmlsdGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gICAgcHJpdmF0ZSBERUZBVUxUX1BBR0VfU0laRSA9IDU7XG5cbiAgICBpc0FsaXZlID0gdHJ1ZTtcbiAgICByZXNwb25zZUZhY2V0czogRmFjZXRGaWVsZFtdID0gbnVsbDtcblxuICAgIHByaXZhdGUgZmFjZXRRdWVyaWVzUGFnZVNpemUgPSB0aGlzLkRFRkFVTFRfUEFHRV9TSVpFO1xuICAgIGZhY2V0UXVlcmllc0xhYmVsOiBzdHJpbmcgPSAnRmFjZXQgUXVlcmllcyc7XG4gICAgZmFjZXRRdWVyaWVzRXhwYW5kZWQgPSBmYWxzZTtcbiAgICBmYWNldEZpZWxkc0V4cGFuZGVkID0gZmFsc2U7XG5cbiAgICBzZWxlY3RlZEJ1Y2tldHM6IEFycmF5PHsgZmllbGQ6IEZhY2V0RmllbGQsIGJ1Y2tldDogRmFjZXRGaWVsZEJ1Y2tldCB9PiA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHF1ZXJ5QnVpbGRlcjogU2VhcmNoUXVlcnlCdWlsZGVyU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHNlYXJjaFNlcnZpY2U6IFNlYXJjaFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB0cmFuc2xhdGlvblNlcnZpY2U6IFRyYW5zbGF0aW9uU2VydmljZSkge1xuICAgICAgICBpZiAocXVlcnlCdWlsZGVyLmNvbmZpZyAmJiBxdWVyeUJ1aWxkZXIuY29uZmlnLmZhY2V0UXVlcmllcykge1xuICAgICAgICAgICAgdGhpcy5mYWNldFF1ZXJpZXNMYWJlbCA9IHF1ZXJ5QnVpbGRlci5jb25maWcuZmFjZXRRdWVyaWVzLmxhYmVsIHx8ICdGYWNldCBRdWVyaWVzJztcbiAgICAgICAgICAgIHRoaXMuZmFjZXRRdWVyaWVzUGFnZVNpemUgPSBxdWVyeUJ1aWxkZXIuY29uZmlnLmZhY2V0UXVlcmllcy5wYWdlU2l6ZSB8fCB0aGlzLkRFRkFVTFRfUEFHRV9TSVpFO1xuICAgICAgICAgICAgdGhpcy5mYWNldFF1ZXJpZXNFeHBhbmRlZCA9IHF1ZXJ5QnVpbGRlci5jb25maWcuZmFjZXRRdWVyaWVzLmV4cGFuZGVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChxdWVyeUJ1aWxkZXIuY29uZmlnICYmIHF1ZXJ5QnVpbGRlci5jb25maWcuZmFjZXRGaWVsZHMpIHtcbiAgICAgICAgICAgIHRoaXMuZmFjZXRGaWVsZHNFeHBhbmRlZCA9IHF1ZXJ5QnVpbGRlci5jb25maWcuZmFjZXRGaWVsZHMuZXhwYW5kZWQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnF1ZXJ5QnVpbGRlci51cGRhdGVkLnBpcGUoXG4gICAgICAgICAgICB0YWtlV2hpbGUoKCkgPT4gdGhpcy5pc0FsaXZlKVxuICAgICAgICApLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnF1ZXJ5QnVpbGRlci5leGVjdXRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBpZiAodGhpcy5xdWVyeUJ1aWxkZXIpIHtcbiAgICAgICAgICAgIHRoaXMucXVlcnlCdWlsZGVyLmV4ZWN1dGVkLnBpcGUoXG4gICAgICAgICAgICAgICAgdGFrZVdoaWxlKCgpID0+IHRoaXMuaXNBbGl2ZSlcbiAgICAgICAgICAgICkuc3Vic2NyaWJlKChyZXN1bHRTZXRQYWdpbmc6IFJlc3VsdFNldFBhZ2luZykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub25EYXRhTG9hZGVkKHJlc3VsdFNldFBhZ2luZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hTZXJ2aWNlLmRhdGFMb2FkZWQubmV4dChyZXN1bHRTZXRQYWdpbmcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5pc0FsaXZlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVTZWxlY3RlZEJ1Y2tldHMoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlc3BvbnNlRmFjZXRzKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkQnVja2V0cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgZmllbGQgb2YgdGhpcy5yZXNwb25zZUZhY2V0cykge1xuICAgICAgICAgICAgICAgIGlmIChmaWVsZC5idWNrZXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRCdWNrZXRzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLnF1ZXJ5QnVpbGRlci5nZXRVc2VyRmFjZXRCdWNrZXRzKGZpZWxkLmZpZWxkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKGJ1Y2tldCkgPT4gYnVja2V0LmNoZWNrZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoYnVja2V0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGZpZWxkLCBidWNrZXQgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRCdWNrZXRzID0gW107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblRvZ2dsZUJ1Y2tldChldmVudDogTWF0Q2hlY2tib3hDaGFuZ2UsIGZpZWxkOiBGYWNldEZpZWxkLCBidWNrZXQ6IEZhY2V0RmllbGRCdWNrZXQpIHtcbiAgICAgICAgaWYgKGV2ZW50ICYmIGJ1Y2tldCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdEZhY2V0QnVja2V0KGZpZWxkLCBidWNrZXQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc2VsZWN0RmFjZXRCdWNrZXQoZmllbGQsIGJ1Y2tldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxlY3RGYWNldEJ1Y2tldChmaWVsZDogRmFjZXRGaWVsZCwgYnVja2V0OiBGYWNldEZpZWxkQnVja2V0KSB7XG4gICAgICAgIGlmIChidWNrZXQpIHtcbiAgICAgICAgICAgIGJ1Y2tldC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucXVlcnlCdWlsZGVyLmFkZFVzZXJGYWNldEJ1Y2tldChmaWVsZCwgYnVja2V0KTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRCdWNrZXRzKCk7XG4gICAgICAgICAgICB0aGlzLnF1ZXJ5QnVpbGRlci51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVuc2VsZWN0RmFjZXRCdWNrZXQoZmllbGQ6IEZhY2V0RmllbGQsIGJ1Y2tldDogRmFjZXRGaWVsZEJ1Y2tldCkge1xuICAgICAgICBpZiAoYnVja2V0KSB7XG4gICAgICAgICAgICBidWNrZXQuY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5xdWVyeUJ1aWxkZXIucmVtb3ZlVXNlckZhY2V0QnVja2V0KGZpZWxkLCBidWNrZXQpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZEJ1Y2tldHMoKTtcbiAgICAgICAgICAgIHRoaXMucXVlcnlCdWlsZGVyLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2FuUmVzZXRTZWxlY3RlZEJ1Y2tldHMoZmllbGQ6IEZhY2V0RmllbGQpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKGZpZWxkICYmIGZpZWxkLmJ1Y2tldHMpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZC5idWNrZXRzLml0ZW1zLnNvbWUoKGJ1Y2tldCkgPT4gYnVja2V0LmNoZWNrZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXNldFNlbGVjdGVkQnVja2V0cyhmaWVsZDogRmFjZXRGaWVsZCkge1xuICAgICAgICBpZiAoZmllbGQgJiYgZmllbGQuYnVja2V0cykge1xuICAgICAgICAgICAgZm9yIChsZXQgYnVja2V0IG9mIGZpZWxkLmJ1Y2tldHMuaXRlbXMpIHtcbiAgICAgICAgICAgICAgICBidWNrZXQuY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMucXVlcnlCdWlsZGVyLnJlbW92ZVVzZXJGYWNldEJ1Y2tldChmaWVsZCwgYnVja2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWRCdWNrZXRzKCk7XG4gICAgICAgICAgICB0aGlzLnF1ZXJ5QnVpbGRlci51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNob3VsZEV4cGFuZChmaWVsZDogRmFjZXRGaWVsZCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmllbGQudHlwZSA9PT0gJ3F1ZXJ5JyA/IHRoaXMuZmFjZXRRdWVyaWVzRXhwYW5kZWQgOiB0aGlzLmZhY2V0RmllbGRzRXhwYW5kZWQ7XG4gICAgfVxuXG4gICAgb25EYXRhTG9hZGVkKGRhdGE6IGFueSkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gZGF0YS5saXN0LmNvbnRleHQ7XG5cbiAgICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMucGFyc2VGYWNldHMoY29udGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlc3BvbnNlRmFjZXRzID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcGFyc2VGYWNldHMoY29udGV4dDogUmVzdWx0U2V0Q29udGV4dCkge1xuICAgICAgICBpZiAoIXRoaXMucmVzcG9uc2VGYWNldHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlRmFjZXRGaWVsZHMgPSB0aGlzLnBhcnNlRmFjZXRGaWVsZHMoY29udGV4dCk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZUdyb3VwZWRGYWNldFF1ZXJpZXMgPSB0aGlzLnBhcnNlRmFjZXRRdWVyaWVzKGNvbnRleHQpO1xuICAgICAgICAgICAgdGhpcy5yZXNwb25zZUZhY2V0cyA9IHJlc3BvbnNlRmFjZXRGaWVsZHMuY29uY2F0KC4uLnJlc3BvbnNlR3JvdXBlZEZhY2V0UXVlcmllcyk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVzcG9uc2VGYWNldHMgPSB0aGlzLnJlc3BvbnNlRmFjZXRzXG4gICAgICAgICAgICAgICAgLm1hcCgoZmllbGQpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzcG9uc2VGaWVsZCA9IChjb250ZXh0LmZhY2V0cyB8fCBbXSkuZmluZCgocmVzcG9uc2UpID0+IHJlc3BvbnNlLmxhYmVsID09PSBmaWVsZC5sYWJlbCAmJiByZXNwb25zZS50eXBlID09PSBmaWVsZC50eXBlKTtcblxuICAgICAgICAgICAgICAgICAgICAoZmllbGQgJiYgZmllbGQuYnVja2V0cyAmJiBmaWVsZC5idWNrZXRzLml0ZW1zIHx8IFtdKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoYnVja2V0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VCdWNrZXQgPSAoKHJlc3BvbnNlRmllbGQgJiYgcmVzcG9uc2VGaWVsZC5idWNrZXRzKSB8fCBbXSkuZmluZCgocmVzcEJ1Y2tldCkgPT4gcmVzcEJ1Y2tldC5sYWJlbCA9PT0gYnVja2V0LmxhYmVsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1Y2tldC5jb3VudCA9IHJlc3BvbnNlQnVja2V0ID8gdGhpcy5nZXRDb3VudFZhbHVlKHJlc3BvbnNlQnVja2V0KSA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ1Y2tldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcGFyc2VGYWNldEZpZWxkcyhjb250ZXh0OiBSZXN1bHRTZXRDb250ZXh0KTogRmFjZXRGaWVsZFtdIHtcbiAgICAgICAgY29uc3QgY29uZmlnRmFjZXRGaWVsZHMgPSB0aGlzLnF1ZXJ5QnVpbGRlci5jb25maWcuZmFjZXRGaWVsZHMgJiYgdGhpcy5xdWVyeUJ1aWxkZXIuY29uZmlnLmZhY2V0RmllbGRzLmZpZWxkcyB8fCBbXTtcblxuICAgICAgICByZXR1cm4gY29uZmlnRmFjZXRGaWVsZHMubWFwKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VGaWVsZCA9IChjb250ZXh0LmZhY2V0cyB8fCBbXSkuZmluZCgocmVzcG9uc2UpID0+IHJlc3BvbnNlLnR5cGUgPT09ICdmaWVsZCcgJiYgcmVzcG9uc2UubGFiZWwgPT09IGZpZWxkLmxhYmVsKSB8fCB7fTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlQnVja2V0cyA9IHRoaXMuZ2V0UmVzcG9uc2VCdWNrZXRzKHJlc3BvbnNlRmllbGQpO1xuXG4gICAgICAgICAgICBjb25zdCBidWNrZXRMaXN0ID0gbmV3IFNlYXJjaEZpbHRlckxpc3Q8RmFjZXRGaWVsZEJ1Y2tldD4ocmVzcG9uc2VCdWNrZXRzLCBmaWVsZC5wYWdlU2l6ZSk7XG4gICAgICAgICAgICBidWNrZXRMaXN0LmZpbHRlciA9IChidWNrZXQ6IEZhY2V0RmllbGRCdWNrZXQpOiBib29sZWFuID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYnVja2V0ICYmIGJ1Y2tldExpc3QuZmlsdGVyVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXR0ZXJuID0gKGJ1Y2tldExpc3QuZmlsdGVyVGV4dCB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFiZWwgPSAodGhpcy50cmFuc2xhdGlvblNlcnZpY2UuaW5zdGFudChidWNrZXQuZGlzcGxheSkgfHwgdGhpcy50cmFuc2xhdGlvblNlcnZpY2UuaW5zdGFudChidWNrZXQubGFiZWwpKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5xdWVyeUJ1aWxkZXIuY29uZmlnLmZpbHRlcldpdGhDb250YWlucyA/IGxhYmVsLmluZGV4T2YocGF0dGVybikgIT09IC0xIDogbGFiZWwuc3RhcnRzV2l0aChwYXR0ZXJuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gPEZhY2V0RmllbGQ+IHtcbiAgICAgICAgICAgICAgICAuLi5maWVsZCxcbiAgICAgICAgICAgICAgICB0eXBlOiByZXNwb25zZUZpZWxkLnR5cGUsXG4gICAgICAgICAgICAgICAgbGFiZWw6IGZpZWxkLmxhYmVsLFxuICAgICAgICAgICAgICAgIHBhZ2VTaXplOiBmaWVsZC5wYWdlU2l6ZSB8IHRoaXMuREVGQVVMVF9QQUdFX1NJWkUsXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2VTaXplOiBmaWVsZC5wYWdlU2l6ZSB8IHRoaXMuREVGQVVMVF9QQUdFX1NJWkUsXG4gICAgICAgICAgICAgICAgYnVja2V0czogYnVja2V0TGlzdFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXJzZUZhY2V0UXVlcmllcyhjb250ZXh0OiBSZXN1bHRTZXRDb250ZXh0KTogRmFjZXRGaWVsZFtdIHtcbiAgICAgICAgY29uc3QgY29uZmlnRmFjZXRRdWVyaWVzID0gdGhpcy5xdWVyeUJ1aWxkZXIuY29uZmlnLmZhY2V0UXVlcmllcyAmJiB0aGlzLnF1ZXJ5QnVpbGRlci5jb25maWcuZmFjZXRRdWVyaWVzLnF1ZXJpZXMgfHwgW107XG4gICAgICAgIGNvbnN0IGNvbmZpZ0dyb3VwcyA9IGNvbmZpZ0ZhY2V0UXVlcmllcy5yZWR1Y2UoKGFjYywgcXVlcnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5xdWVyeUJ1aWxkZXIuZ2V0UXVlcnlHcm91cChxdWVyeSk7XG4gICAgICAgICAgICBpZiAoYWNjW2dyb3VwXSkge1xuICAgICAgICAgICAgICAgIGFjY1tncm91cF0ucHVzaChxdWVyeSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFjY1tncm91cF0gPSBbcXVlcnldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSwgW10pO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKGNvbmZpZ0dyb3VwcykuZm9yRWFjaCgoZ3JvdXApID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlRmllbGQgPSAoY29udGV4dC5mYWNldHMgfHwgW10pLmZpbmQoKHJlc3BvbnNlKSA9PiByZXNwb25zZS50eXBlID09PSAncXVlcnknICYmIHJlc3BvbnNlLmxhYmVsID09PSBncm91cCkgfHwge307XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZUJ1Y2tldHMgPSB0aGlzLmdldFJlc3BvbnNlUXVlcnlCdWNrZXRzKHJlc3BvbnNlRmllbGQsIGNvbmZpZ0dyb3Vwc1tncm91cF0pO1xuXG4gICAgICAgICAgICBjb25zdCBidWNrZXRMaXN0ID0gbmV3IFNlYXJjaEZpbHRlckxpc3Q8RmFjZXRGaWVsZEJ1Y2tldD4ocmVzcG9uc2VCdWNrZXRzLCB0aGlzLmZhY2V0UXVlcmllc1BhZ2VTaXplKTtcbiAgICAgICAgICAgIGJ1Y2tldExpc3QuZmlsdGVyID0gKGJ1Y2tldDogRmFjZXRGaWVsZEJ1Y2tldCk6IGJvb2xlYW4gPT4ge1xuICAgICAgICAgICAgICAgIGlmIChidWNrZXQgJiYgYnVja2V0TGlzdC5maWx0ZXJUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhdHRlcm4gPSAoYnVja2V0TGlzdC5maWx0ZXJUZXh0IHx8ICcnKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYWJlbCA9ICh0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5pbnN0YW50KGJ1Y2tldC5kaXNwbGF5KSB8fCB0aGlzLnRyYW5zbGF0aW9uU2VydmljZS5pbnN0YW50KGJ1Y2tldC5sYWJlbCkpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5QnVpbGRlci5jb25maWcuZmlsdGVyV2l0aENvbnRhaW5zID8gbGFiZWwuaW5kZXhPZihwYXR0ZXJuKSAhPT0gLTEgOiBsYWJlbC5zdGFydHNXaXRoKHBhdHRlcm4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKDxGYWNldEZpZWxkPiB7XG4gICAgICAgICAgICAgICAgZmllbGQ6IGdyb3VwLFxuICAgICAgICAgICAgICAgIHR5cGU6IHJlc3BvbnNlRmllbGQudHlwZSxcbiAgICAgICAgICAgICAgICBsYWJlbDogZ3JvdXAsXG4gICAgICAgICAgICAgICAgcGFnZVNpemU6IHRoaXMuREVGQVVMVF9QQUdFX1NJWkUsXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2VTaXplOiB0aGlzLkRFRkFVTFRfUEFHRV9TSVpFLFxuICAgICAgICAgICAgICAgIGJ1Y2tldHM6IGJ1Y2tldExpc3RcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UmVzcG9uc2VCdWNrZXRzKHJlc3BvbnNlRmllbGQ6IEdlbmVyaWNGYWNldFJlc3BvbnNlKTogRmFjZXRGaWVsZEJ1Y2tldFtdIHtcbiAgICAgICAgcmV0dXJuICgocmVzcG9uc2VGaWVsZCAmJiByZXNwb25zZUZpZWxkLmJ1Y2tldHMpIHx8IFtdKS5tYXAoKHJlc3BCdWNrZXQpID0+IHtcblxuICAgICAgICAgICAgcmVzcEJ1Y2tldFsnY291bnQnXSA9IHRoaXMuZ2V0Q291bnRWYWx1ZShyZXNwQnVja2V0KTtcbiAgICAgICAgICAgIHJldHVybiA8RmFjZXRGaWVsZEJ1Y2tldD4ge1xuICAgICAgICAgICAgICAgIC4uLnJlc3BCdWNrZXQsXG4gICAgICAgICAgICAgICAgY2hlY2tlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogcmVzcEJ1Y2tldC5kaXNwbGF5LFxuICAgICAgICAgICAgICAgIGxhYmVsOiByZXNwQnVja2V0LmxhYmVsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFJlc3BvbnNlUXVlcnlCdWNrZXRzKHJlc3BvbnNlRmllbGQ6IEdlbmVyaWNGYWNldFJlc3BvbnNlLCBjb25maWdHcm91cDogYW55KTogRmFjZXRGaWVsZEJ1Y2tldFtdIHtcbiAgICAgICAgcmV0dXJuIChjb25maWdHcm91cCB8fCBbXSkubWFwKChxdWVyeSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcEJ1Y2tldCA9ICgocmVzcG9uc2VGaWVsZCAmJiByZXNwb25zZUZpZWxkLmJ1Y2tldHMpIHx8IFtdKVxuICAgICAgICAgICAgICAgIC5maW5kKChidWNrZXQpID0+IGJ1Y2tldC5sYWJlbCA9PT0gcXVlcnkubGFiZWwpO1xuXG4gICAgICAgICAgICByZXNwQnVja2V0Wydjb3VudCddID0gdGhpcy5nZXRDb3VudFZhbHVlKHJlc3BCdWNrZXQpO1xuICAgICAgICAgICAgcmV0dXJuIDxGYWNldEZpZWxkQnVja2V0PiB7XG4gICAgICAgICAgICAgICAgLi4ucmVzcEJ1Y2tldCxcbiAgICAgICAgICAgICAgICBjaGVja2VkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiByZXNwQnVja2V0LmRpc3BsYXksXG4gICAgICAgICAgICAgICAgbGFiZWw6IHJlc3BCdWNrZXQubGFiZWxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLmZpbHRlcigoYnVja2V0KSA9PiB7XG4gICAgICAgICAgICBsZXQgbWluY291bnQgPSB0aGlzLnF1ZXJ5QnVpbGRlci5jb25maWcuZmFjZXRRdWVyaWVzLm1pbmNvdW50O1xuICAgICAgICAgICAgaWYgKG1pbmNvdW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWluY291bnQgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJ1Y2tldC5jb3VudCA+PSBtaW5jb3VudDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRDb3VudFZhbHVlKGJ1Y2tldDogR2VuZXJpY0J1Y2tldCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAoISFidWNrZXQgJiYgISFidWNrZXQubWV0cmljcyAmJiBidWNrZXQubWV0cmljc1swXSAmJiBidWNrZXQubWV0cmljc1swXS52YWx1ZSAmJiBidWNrZXQubWV0cmljc1swXS52YWx1ZS5jb3VudClcbiAgICAgICAgICAgIHx8IDA7XG4gICAgfVxufVxuIl19
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EXTENDIBLE_COMPONENT, FileUtils, NotificationService, TranslationService, UploadService, ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';
import { Component, forwardRef, ViewEncapsulation, NgZone } from '@angular/core';
import { UploadBase } from './base-upload/upload-base';
var UploadDragAreaComponent = /** @class */ (function (_super) {
    tslib_1.__extends(UploadDragAreaComponent, _super);
    function UploadDragAreaComponent(uploadService, translationService, notificationService, contentService, ngZone) {
        var _this = _super.call(this, uploadService, translationService, ngZone) || this;
        _this.uploadService = uploadService;
        _this.translationService = translationService;
        _this.notificationService = notificationService;
        _this.contentService = contentService;
        _this.ngZone = ngZone;
        return _this;
    }
    /**
     * Method called when files are dropped in the drag area.
     *
     * @param files - files dropped in the drag area.
     */
    /**
     * Method called when files are dropped in the drag area.
     *
     * @param {?} files - files dropped in the drag area.
     * @return {?}
     */
    UploadDragAreaComponent.prototype.onFilesDropped = /**
     * Method called when files are dropped in the drag area.
     *
     * @param {?} files - files dropped in the drag area.
     * @return {?}
     */
    function (files) {
        if (!this.disabled && files.length) {
            this.uploadFiles(files);
        }
    };
    /**
     * Called when a folder are dropped in the drag area
     *
     * @param folder - name of the dropped folder
     */
    /**
     * Called when a folder are dropped in the drag area
     *
     * @param {?} folder - name of the dropped folder
     * @return {?}
     */
    UploadDragAreaComponent.prototype.onFolderEntityDropped = /**
     * Called when a folder are dropped in the drag area
     *
     * @param {?} folder - name of the dropped folder
     * @return {?}
     */
    function (folder) {
        var _this = this;
        if (!this.disabled && folder.isDirectory) {
            FileUtils.flatten(folder).then(function (filesInfo) {
                _this.uploadFilesInfo(filesInfo);
            });
        }
    };
    /**
     * Show undo notification bar.
     *
     * @param latestFilesAdded - files in the upload queue enriched with status flag and xhr object.
     */
    /**
     * Show undo notification bar.
     *
     * @param {?} latestFilesAdded - files in the upload queue enriched with status flag and xhr object.
     * @return {?}
     */
    UploadDragAreaComponent.prototype.showUndoNotificationBar = /**
     * Show undo notification bar.
     *
     * @param {?} latestFilesAdded - files in the upload queue enriched with status flag and xhr object.
     * @return {?}
     */
    function (latestFilesAdded) {
        var _this = this;
        /** @type {?} */
        var messageTranslate;
        /** @type {?} */
        var actionTranslate;
        messageTranslate = this.translationService.get('FILE_UPLOAD.MESSAGES.PROGRESS');
        actionTranslate = this.translationService.get('FILE_UPLOAD.ACTION.UNDO');
        this.notificationService.openSnackMessageAction(messageTranslate.value, actionTranslate.value, 3000).onAction().subscribe(function () {
            var _a;
            (_a = _this.uploadService).cancelUpload.apply(_a, tslib_1.__spread(latestFilesAdded));
        });
    };
    /** Returns true or false considering the component options and node permissions */
    /**
     * Returns true or false considering the component options and node permissions
     * @return {?}
     */
    UploadDragAreaComponent.prototype.isDroppable = /**
     * Returns true or false considering the component options and node permissions
     * @return {?}
     */
    function () {
        return !this.disabled;
    };
    /**
     * Handles 'upload-files' events raised by child components.
     *
     * @param event DOM event
     */
    /**
     * Handles 'upload-files' events raised by child components.
     *
     * @param {?} event DOM event
     * @return {?}
     */
    UploadDragAreaComponent.prototype.onUploadFiles = /**
     * Handles 'upload-files' events raised by child components.
     *
     * @param {?} event DOM event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        event.preventDefault();
        /** @type {?} */
        var isAllowed = this.contentService.hasAllowableOperations(event.detail.data.obj.entry, AllowableOperationsEnum.CREATE);
        if (isAllowed) {
            /** @type {?} */
            var fileInfo = event.detail.files;
            if (this.isTargetNodeFolder(event)) {
                /** @type {?} */
                var destinationFolderName_1 = event.detail.data.obj.entry.name;
                fileInfo.map(function (file) { return file.relativeFolder = destinationFolderName_1 ? destinationFolderName_1.concat(file.relativeFolder) : file.relativeFolder; });
            }
            if (fileInfo && fileInfo.length > 0) {
                this.uploadFilesInfo(fileInfo);
            }
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    UploadDragAreaComponent.prototype.isTargetNodeFolder = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return event.detail.data.obj && event.detail.data.obj.entry.isFolder;
    };
    UploadDragAreaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-upload-drag-area',
                    template: "<div [adf-file-draggable]=\"isDroppable()\" class=\"adf-upload-border\"\n     (filesDropped)=\"onFilesDropped($event)\"\n     (folderEntityDropped)=\"onFolderEntityDropped($event)\"\n     (upload-files)=\"onUploadFiles($event)\"\n     dropzone=\"\" webkitdropzone=\"*\" #droparea>\n    <ng-content></ng-content>\n</div>\n",
                    host: { 'class': 'adf-upload-drag-area' },
                    viewProviders: [
                        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(function () { return UploadDragAreaComponent; }) }
                    ],
                    encapsulation: ViewEncapsulation.None,
                    styles: ["adf-upload-drag-area{overflow:hidden}.adf-upload-border{vertical-align:middle;text-align:center;width:100%;box-sizing:border-box}.adf-file-draggable__input-focus{color:#2196f3;border:1px dashed #2196f3}"]
                }] }
    ];
    /** @nocollapse */
    UploadDragAreaComponent.ctorParameters = function () { return [
        { type: UploadService },
        { type: TranslationService },
        { type: NotificationService },
        { type: ContentService },
        { type: NgZone }
    ]; };
    return UploadDragAreaComponent;
}(UploadBase));
export { UploadDragAreaComponent };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    UploadDragAreaComponent.prototype.uploadService;
    /**
     * @type {?}
     * @protected
     */
    UploadDragAreaComponent.prototype.translationService;
    /**
     * @type {?}
     * @private
     */
    UploadDragAreaComponent.prototype.notificationService;
    /**
     * @type {?}
     * @private
     */
    UploadDragAreaComponent.prototype.contentService;
    /**
     * @type {?}
     * @protected
     */
    UploadDragAreaComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,
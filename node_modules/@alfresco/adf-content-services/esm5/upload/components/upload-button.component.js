/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentService, EXTENDIBLE_COMPONENT, FileUtils, LogService, TranslationService, UploadService, AllowableOperationsEnum } from '@alfresco/adf-core';
import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation, NgZone } from '@angular/core';
import { Subject } from 'rxjs';
import { PermissionModel } from '../../document-list/models/permissions.model';
import { UploadBase } from './base-upload/upload-base';
var UploadButtonComponent = /** @class */ (function (_super) {
    tslib_1.__extends(UploadButtonComponent, _super);
    function UploadButtonComponent(uploadService, contentService, translationService, logService, ngZone) {
        var _this = _super.call(this, uploadService, translationService, ngZone) || this;
        _this.uploadService = uploadService;
        _this.contentService = contentService;
        _this.translationService = translationService;
        _this.logService = logService;
        _this.ngZone = ngZone;
        /**
         * Allows/disallows upload folders (only for Chrome).
         */
        _this.uploadFolders = false;
        /**
         * Allows/disallows multiple files
         */
        _this.multipleFiles = false;
        /**
         * Custom tooltip text.
         */
        _this.tooltip = null;
        /**
         * Emitted when create permission is missing.
         */
        _this.permissionEvent = new EventEmitter();
        _this.hasAllowableOperations = false;
        _this.permissionValue = new Subject();
        return _this;
    }
    /**
     * @return {?}
     */
    UploadButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.permissionValue.subscribe(function (permission) {
            _this.hasAllowableOperations = permission;
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    UploadButtonComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var rootFolderId = changes['rootFolderId'];
        if (rootFolderId && rootFolderId.currentValue) {
            this.checkPermission();
        }
    };
    /**
     * @return {?}
     */
    UploadButtonComponent.prototype.isButtonDisabled = /**
     * @return {?}
     */
    function () {
        return this.disabled ? true : undefined;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    UploadButtonComponent.prototype.onFilesAdded = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var files = FileUtils.toFileArray($event.currentTarget.files);
        if (this.hasAllowableOperations) {
            this.uploadFiles(files);
        }
        else {
            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));
        }
        // reset the value of the input file
        $event.target.value = '';
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    UploadButtonComponent.prototype.onDirectoryAdded = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.hasAllowableOperations) {
            /** @type {?} */
            var files = FileUtils.toFileArray($event.currentTarget.files);
            this.uploadFiles(files);
        }
        else {
            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));
        }
        // reset the value of the input file
        $event.target.value = '';
    };
    /**
     * @return {?}
     */
    UploadButtonComponent.prototype.checkPermission = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.rootFolderId) {
            /** @type {?} */
            var opts = {
                includeSource: true,
                include: ['allowableOperations']
            };
            this.contentService.getNode(this.rootFolderId, opts).subscribe(function (res) { return _this.permissionValue.next(_this.nodeHasPermission(res.entry, AllowableOperationsEnum.CREATE)); }, function (error) { return _this.error.emit(error); });
        }
    };
    /**
     * @param {?} node
     * @param {?} permission
     * @return {?}
     */
    UploadButtonComponent.prototype.nodeHasPermission = /**
     * @param {?} node
     * @param {?} permission
     * @return {?}
     */
    function (node, permission) {
        return this.contentService.hasAllowableOperations(node, permission);
    };
    UploadButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-upload-button',
                    template: "<form class=\"adf-upload-button-file-container\">\n    <!--Files Upload-->\n    <a *ngIf=\"!uploadFolders\"\n        [disabled]=\"isButtonDisabled()\"\n        mat-raised-button color=\"primary\">\n        <mat-icon>file_upload</mat-icon>\n\n        <!--Multiple Files Upload-->\n        <span *ngIf=\"multipleFiles\">\n            <label\n                id=\"upload-multiple-file-label\"\n                *ngIf=\"!staticTitle\"\n                for=\"upload-multiple-files\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</label>\n            <label\n                id=\"upload-multiple-file-label-static\"\n                *ngIf=\"staticTitle\"\n                for=\"upload-multiple-files\">{{ staticTitle }}</label>\n            <input #uploadFiles\n                id=\"upload-multiple-files\"\n                data-automation-id=\"upload-multiple-files\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                multiple=\"multiple\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </span>\n\n        <!--Single Files Upload-->\n        <span *ngIf=\"!multipleFiles\">\n            <label\n                id=\"upload-single-file-label\"\n                *ngIf=\"!staticTitle\"\n                for=\"upload-single-file\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</label>\n            <label\n                id=\"upload-single-file-label-static\"\n                *ngIf=\"staticTitle\"\n                for=\"upload-single-file\">{{ staticTitle }}</label>\n            <input #uploadFiles\n                id=\"upload-single-file\"\n                data-automation-id=\"upload-single-file\"\n                type=\"file\"\n                name=\"uploadFiles\"\n                accept=\"{{acceptedFilesType}}\"\n                [attr.disabled]=\"isButtonDisabled()\"\n                [title]=\"tooltip\"\n                (change)=\"onFilesAdded($event)\">\n        </span>\n    </a>\n\n    <!--Folders Upload-->\n    <a *ngIf=\"uploadFolders\"\n        [disabled]=\"isButtonDisabled()\" mat-raised-button color=\"primary\">\n        <mat-icon>file_upload</mat-icon>\n        <label\n            id=\"uploadFolder-label\"\n            *ngIf=\"!staticTitle\"\n            for=\"uploadFolder\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FOLDER' | translate }}</label>\n        <label\n            id=\"uploadFolder-label-static\"\n            *ngIf=\"staticTitle\"\n            for=\"uploadFolder\">{{ staticTitle }}</label>\n        <input #uploadFolders\n            id=\"uploadFolder\"\n            data-automation-id=\"uploadFolder\"\n            type=\"file\"\n            name=\"uploadFiles\"\n            multiple=\"multiple\"\n            accept=\"{{acceptedFilesType}}\"\n            webkitdirectory directory\n            [attr.disabled]=\"isButtonDisabled()\"\n            [title]=\"tooltip\"\n            (change)=\"onDirectoryAdded($event)\">\n    </a>\n</form>\n",
                    viewProviders: [
                        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(function () { return UploadButtonComponent; }) }
                    ],
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-upload-button-file-container input{cursor:pointer;height:100%;right:0;opacity:0;position:absolute;top:0;width:300px;z-index:4}"]
                }] }
    ];
    /** @nocollapse */
    UploadButtonComponent.ctorParameters = function () { return [
        { type: UploadService },
        { type: ContentService },
        { type: TranslationService },
        { type: LogService },
        { type: NgZone }
    ]; };
    UploadButtonComponent.propDecorators = {
        uploadFolders: [{ type: Input }],
        multipleFiles: [{ type: Input }],
        staticTitle: [{ type: Input }],
        tooltip: [{ type: Input }],
        permissionEvent: [{ type: Output }]
    };
    return UploadButtonComponent;
}(UploadBase));
export { UploadButtonComponent };
if (false) {
    /**
     * Allows/disallows upload folders (only for Chrome).
     * @type {?}
     */
    UploadButtonComponent.prototype.uploadFolders;
    /**
     * Allows/disallows multiple files
     * @type {?}
     */
    UploadButtonComponent.prototype.multipleFiles;
    /**
     * Defines the text of the upload button.
     * @type {?}
     */
    UploadButtonComponent.prototype.staticTitle;
    /**
     * Custom tooltip text.
     * @type {?}
     */
    UploadButtonComponent.prototype.tooltip;
    /**
     * Emitted when create permission is missing.
     * @type {?}
     */
    UploadButtonComponent.prototype.permissionEvent;
    /**
     * @type {?}
     * @private
     */
    UploadButtonComponent.prototype.hasAllowableOperations;
    /**
     * @type {?}
     * @protected
     */
    UploadButtonComponent.prototype.permissionValue;
    /**
     * @type {?}
     * @protected
     */
    UploadButtonComponent.prototype.uploadService;
    /**
     * @type {?}
     * @private
     */
    UploadButtonComponent.prototype.contentService;
    /**
     * @type {?}
     * @protected
     */
    UploadButtonComponent.prototype.translationService;
    /**
     * @type {?}
     * @protected
     */
    UploadButtonComponent.prototype.logService;
    /**
     * @type {?}
     * @protected
     */
    UploadButtonComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,
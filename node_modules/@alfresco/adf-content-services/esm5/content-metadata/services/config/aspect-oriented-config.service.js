/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { getGroup, getProperty } from './property-group-reader';
var AspectOrientedConfigService = /** @class */ (function () {
    function AspectOrientedConfigService(config) {
        this.config = config;
    }
    /**
     * @param {?} groupName
     * @return {?}
     */
    AspectOrientedConfigService.prototype.isGroupAllowed = /**
     * @param {?} groupName
     * @return {?}
     */
    function (groupName) {
        /** @type {?} */
        var groupNames = Object.keys(this.config);
        return groupNames.indexOf(groupName) !== -1;
    };
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    AspectOrientedConfigService.prototype.reorganiseByConfig = /**
     * @param {?} propertyGroups
     * @return {?}
     */
    function (propertyGroups) {
        var _this = this;
        /** @type {?} */
        var aspects = this.config;
        /** @type {?} */
        var aspectNames = Object.keys(aspects);
        return aspectNames
            .reduce(function (groupAccumulator, aspectName) {
            /** @type {?} */
            var newGroup = _this.getOrganisedPropertyGroup(propertyGroups, aspectName);
            return groupAccumulator.concat(newGroup);
        }, [])
            .filter(function (organisedPropertyGroup) { return organisedPropertyGroup.properties.length > 0; });
    };
    /**
     * @private
     * @param {?} propertyGroups
     * @param {?} aspectName
     * @return {?}
     */
    AspectOrientedConfigService.prototype.getOrganisedPropertyGroup = /**
     * @private
     * @param {?} propertyGroups
     * @param {?} aspectName
     * @return {?}
     */
    function (propertyGroups, aspectName) {
        /** @type {?} */
        var group = getGroup(propertyGroups, aspectName);
        /** @type {?} */
        var newGroup = [];
        if (group) {
            /** @type {?} */
            var aspectProperties = this.config[aspectName];
            /** @type {?} */
            var properties = void 0;
            if (aspectProperties === '*') {
                properties = getProperty(propertyGroups, aspectName, aspectProperties);
            }
            else {
                properties = ((/** @type {?} */ (aspectProperties)))
                    .map(function (propertyName) { return getProperty(propertyGroups, aspectName, propertyName); })
                    .filter(function (props) { return props !== undefined; });
            }
            newGroup = [{ title: group.title, properties: properties }];
        }
        return newGroup;
    };
    return AspectOrientedConfigService;
}());
export { AspectOrientedConfigService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AspectOrientedConfigService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNwZWN0LW9yaWVudGVkLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiY29udGVudC1tZXRhZGF0YS9zZXJ2aWNlcy9jb25maWcvYXNwZWN0LW9yaWVudGVkLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFaEU7SUFFSSxxQ0FBb0IsTUFBVztRQUFYLFdBQU0sR0FBTixNQUFNLENBQUs7SUFBRyxDQUFDOzs7OztJQUU1QixvREFBYzs7OztJQUFyQixVQUFzQixTQUFpQjs7WUFDN0IsVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMzQyxPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7Ozs7SUFFTSx3REFBa0I7Ozs7SUFBekIsVUFBMEIsY0FBc0M7UUFBaEUsaUJBVUM7O1lBVFMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNOztZQUN2QixXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFFdEMsT0FBTyxXQUFXO2FBQ2IsTUFBTSxDQUFDLFVBQUMsZ0JBQWdCLEVBQUUsVUFBVTs7Z0JBQzNCLFFBQVEsR0FBRyxLQUFJLENBQUMseUJBQXlCLENBQUMsY0FBYyxFQUFFLFVBQVUsQ0FBQztZQUMzRSxPQUFPLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3QyxDQUFDLEVBQUUsRUFBRSxDQUFDO2FBQ0wsTUFBTSxDQUFDLFVBQUMsc0JBQXNCLElBQUssT0FBQSxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBNUMsQ0FBNEMsQ0FBQyxDQUFDO0lBQzFGLENBQUM7Ozs7Ozs7SUFFTywrREFBeUI7Ozs7OztJQUFqQyxVQUFrQyxjQUFjLEVBQUUsVUFBVTs7WUFDbEQsS0FBSyxHQUFHLFFBQVEsQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDOztZQUM5QyxRQUFRLEdBQUcsRUFBRTtRQUVqQixJQUFJLEtBQUssRUFBRTs7Z0JBQ0QsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7O2dCQUM1QyxVQUFVLFNBQUE7WUFFZCxJQUFJLGdCQUFnQixLQUFLLEdBQUcsRUFBRTtnQkFDMUIsVUFBVSxHQUFHLFdBQVcsQ0FBQyxjQUFjLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixDQUFDLENBQUM7YUFDMUU7aUJBQU07Z0JBQ0gsVUFBVSxHQUFHLENBQUMsbUJBQVcsZ0JBQWdCLEVBQUEsQ0FBQztxQkFDckMsR0FBRyxDQUFDLFVBQUMsWUFBWSxJQUFLLE9BQUEsV0FBVyxDQUFDLGNBQWMsRUFBRSxVQUFVLEVBQUUsWUFBWSxDQUFDLEVBQXJELENBQXFELENBQUM7cUJBQzVFLE1BQU0sQ0FBQyxVQUFDLEtBQUssSUFBSyxPQUFBLEtBQUssS0FBSyxTQUFTLEVBQW5CLENBQW1CLENBQUMsQ0FBQzthQUMvQztZQUVELFFBQVEsR0FBRyxDQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsVUFBVSxZQUFBLEVBQUUsQ0FBRSxDQUFDO1NBQ3JEO1FBRUQsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUNMLGtDQUFDO0FBQUQsQ0FBQyxBQTFDRCxJQTBDQzs7Ozs7OztJQXhDZSw2Q0FBbUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb250ZW50TWV0YWRhdGFDb25maWcsIE9yZ2FuaXNlZFByb3BlcnR5R3JvdXAsIFByb3BlcnR5R3JvdXBDb250YWluZXIgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2NvbnRlbnQtbWV0YWRhdGEuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBnZXRHcm91cCwgZ2V0UHJvcGVydHkgfSBmcm9tICcuL3Byb3BlcnR5LWdyb3VwLXJlYWRlcic7XG5cbmV4cG9ydCBjbGFzcyBBc3BlY3RPcmllbnRlZENvbmZpZ1NlcnZpY2UgaW1wbGVtZW50cyBDb250ZW50TWV0YWRhdGFDb25maWcge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjb25maWc6IGFueSkge31cblxuICAgIHB1YmxpYyBpc0dyb3VwQWxsb3dlZChncm91cE5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBncm91cE5hbWVzID0gT2JqZWN0LmtleXModGhpcy5jb25maWcpO1xuICAgICAgICByZXR1cm4gZ3JvdXBOYW1lcy5pbmRleE9mKGdyb3VwTmFtZSkgIT09IC0xO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW9yZ2FuaXNlQnlDb25maWcocHJvcGVydHlHcm91cHM6IFByb3BlcnR5R3JvdXBDb250YWluZXIpOiBPcmdhbmlzZWRQcm9wZXJ0eUdyb3VwW10ge1xuICAgICAgICBjb25zdCBhc3BlY3RzID0gdGhpcy5jb25maWcsXG4gICAgICAgICAgICBhc3BlY3ROYW1lcyA9IE9iamVjdC5rZXlzKGFzcGVjdHMpO1xuXG4gICAgICAgIHJldHVybiBhc3BlY3ROYW1lc1xuICAgICAgICAgICAgLnJlZHVjZSgoZ3JvdXBBY2N1bXVsYXRvciwgYXNwZWN0TmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0dyb3VwID0gdGhpcy5nZXRPcmdhbmlzZWRQcm9wZXJ0eUdyb3VwKHByb3BlcnR5R3JvdXBzLCBhc3BlY3ROYW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ3JvdXBBY2N1bXVsYXRvci5jb25jYXQobmV3R3JvdXApO1xuICAgICAgICAgICAgfSwgW10pXG4gICAgICAgICAgICAuZmlsdGVyKChvcmdhbmlzZWRQcm9wZXJ0eUdyb3VwKSA9PiBvcmdhbmlzZWRQcm9wZXJ0eUdyb3VwLnByb3BlcnRpZXMubGVuZ3RoID4gMCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRPcmdhbmlzZWRQcm9wZXJ0eUdyb3VwKHByb3BlcnR5R3JvdXBzLCBhc3BlY3ROYW1lKSB7XG4gICAgICAgIGNvbnN0IGdyb3VwID0gZ2V0R3JvdXAocHJvcGVydHlHcm91cHMsIGFzcGVjdE5hbWUpO1xuICAgICAgICBsZXQgbmV3R3JvdXAgPSBbXTtcblxuICAgICAgICBpZiAoZ3JvdXApIHtcbiAgICAgICAgICAgIGNvbnN0IGFzcGVjdFByb3BlcnRpZXMgPSB0aGlzLmNvbmZpZ1thc3BlY3ROYW1lXTtcbiAgICAgICAgICAgIGxldCBwcm9wZXJ0aWVzO1xuXG4gICAgICAgICAgICBpZiAoYXNwZWN0UHJvcGVydGllcyA9PT0gJyonKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IGdldFByb3BlcnR5KHByb3BlcnR5R3JvdXBzLCBhc3BlY3ROYW1lLCBhc3BlY3RQcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcyA9ICg8c3RyaW5nW10+IGFzcGVjdFByb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKHByb3BlcnR5TmFtZSkgPT4gZ2V0UHJvcGVydHkocHJvcGVydHlHcm91cHMsIGFzcGVjdE5hbWUsIHByb3BlcnR5TmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKHByb3BzKSA9PiBwcm9wcyAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmV3R3JvdXAgPSBbIHsgdGl0bGU6IGdyb3VwLnRpdGxlLCBwcm9wZXJ0aWVzIH0gXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXdHcm91cDtcbiAgICB9XG59XG4iXX0=
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var IndifferentConfigService = /** @class */ (function () {
    function IndifferentConfigService(config) {
    }
    /**
     * @param {?} groupName
     * @return {?}
     */
    IndifferentConfigService.prototype.isGroupAllowed = /**
     * @param {?} groupName
     * @return {?}
     */
    function (groupName) {
        return true;
    };
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    IndifferentConfigService.prototype.reorganiseByConfig = /**
     * @param {?} propertyGroups
     * @return {?}
     */
    function (propertyGroups) {
        return Object.keys(propertyGroups)
            .map(function (groupName) {
            /** @type {?} */
            var propertyGroup = propertyGroups[groupName];
            /** @type {?} */
            var properties = propertyGroup.properties;
            return Object.assign({}, propertyGroup, {
                properties: Object.keys(properties).map(function (propertyName) { return properties[propertyName]; })
            });
        });
    };
    return IndifferentConfigService;
}());
export { IndifferentConfigService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kaWZmZXJlbnQtY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJjb250ZW50LW1ldGFkYXRhL3NlcnZpY2VzL2NvbmZpZy9pbmRpZmZlcmVudC1jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFCQTtJQUVJLGtDQUFZLE1BQVc7SUFBRyxDQUFDOzs7OztJQUVwQixpREFBYzs7OztJQUFyQixVQUFzQixTQUFpQjtRQUNuQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7OztJQUVNLHFEQUFrQjs7OztJQUF6QixVQUEwQixjQUFzQztRQUM1RCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO2FBQzdCLEdBQUcsQ0FBQyxVQUFDLFNBQVM7O2dCQUNMLGFBQWEsR0FBRyxjQUFjLENBQUMsU0FBUyxDQUFDOztnQkFDM0MsVUFBVSxHQUFHLGFBQWEsQ0FBQyxVQUFVO1lBRXpDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsYUFBYSxFQUFFO2dCQUNwQyxVQUFVLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxZQUFZLElBQUssT0FBQSxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQXhCLENBQXdCLENBQUM7YUFDdEYsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBQ0wsK0JBQUM7QUFBRCxDQUFDLEFBbkJELElBbUJDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29udGVudE1ldGFkYXRhQ29uZmlnLCBPcmdhbmlzZWRQcm9wZXJ0eUdyb3VwLFxuICAgIFByb3BlcnR5R3JvdXBDb250YWluZXJcbn0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jb250ZW50LW1ldGFkYXRhLmludGVyZmFjZXMnO1xuXG5leHBvcnQgY2xhc3MgSW5kaWZmZXJlbnRDb25maWdTZXJ2aWNlIGltcGxlbWVudHMgQ29udGVudE1ldGFkYXRhQ29uZmlnIHtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogYW55KSB7fVxuXG4gICAgcHVibGljIGlzR3JvdXBBbGxvd2VkKGdyb3VwTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW9yZ2FuaXNlQnlDb25maWcocHJvcGVydHlHcm91cHM6IFByb3BlcnR5R3JvdXBDb250YWluZXIpOiBPcmdhbmlzZWRQcm9wZXJ0eUdyb3VwW10ge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcGVydHlHcm91cHMpXG4gICAgICAgICAgICAubWFwKChncm91cE5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cHNbZ3JvdXBOYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IHByb3BlcnR5R3JvdXAucHJvcGVydGllcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcm9wZXJ0eUdyb3VwLCB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLm1hcCgocHJvcGVydHlOYW1lKSA9PiBwcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV0pXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=
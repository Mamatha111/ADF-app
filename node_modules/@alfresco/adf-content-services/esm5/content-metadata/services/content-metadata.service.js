/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { BasicPropertiesService } from './basic-properties.service';
import { of } from 'rxjs';
import { PropertyGroupTranslatorService } from './property-groups-translator.service';
import { ContentMetadataConfigFactory } from './config/content-metadata-config.factory';
import { PropertyDescriptorsService } from './property-descriptors.service';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./basic-properties.service";
import * as i2 from "./config/content-metadata-config.factory";
import * as i3 from "./property-groups-translator.service";
import * as i4 from "./property-descriptors.service";
var ContentMetadataService = /** @class */ (function () {
    function ContentMetadataService(basicPropertiesService, contentMetadataConfigFactory, propertyGroupTranslatorService, propertyDescriptorsService) {
        this.basicPropertiesService = basicPropertiesService;
        this.contentMetadataConfigFactory = contentMetadataConfigFactory;
        this.propertyGroupTranslatorService = propertyGroupTranslatorService;
        this.propertyDescriptorsService = propertyDescriptorsService;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    ContentMetadataService.prototype.getBasicProperties = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return of(this.basicPropertiesService.getProperties(node));
    };
    /**
     * @param {?} node
     * @param {?=} presetName
     * @return {?}
     */
    ContentMetadataService.prototype.getGroupedProperties = /**
     * @param {?} node
     * @param {?=} presetName
     * @return {?}
     */
    function (node, presetName) {
        var _this = this;
        if (presetName === void 0) { presetName = 'default'; }
        /** @type {?} */
        var groupedProperties = of([]);
        if (node.aspectNames) {
            /** @type {?} */
            var config_1 = this.contentMetadataConfigFactory.get(presetName);
            /** @type {?} */
            var groupNames = node.aspectNames
                .concat(node.nodeType)
                .filter(function (groupName) { return config_1.isGroupAllowed(groupName); });
            if (groupNames.length > 0) {
                groupedProperties = this.propertyDescriptorsService.load(groupNames).pipe(map(function (groups) { return config_1.reorganiseByConfig(groups); }), map(function (groups) { return _this.setTitleToNameIfNotSet(groups); }), map(function (groups) { return _this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties); }));
            }
        }
        return groupedProperties;
    };
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    ContentMetadataService.prototype.setTitleToNameIfNotSet = /**
     * @param {?} propertyGroups
     * @return {?}
     */
    function (propertyGroups) {
        propertyGroups.map(function (propertyGroup) {
            propertyGroup.title = propertyGroup.title || propertyGroup.name;
        });
        return propertyGroups;
    };
    ContentMetadataService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ContentMetadataService.ctorParameters = function () { return [
        { type: BasicPropertiesService },
        { type: ContentMetadataConfigFactory },
        { type: PropertyGroupTranslatorService },
        { type: PropertyDescriptorsService }
    ]; };
    /** @nocollapse */ ContentMetadataService.ngInjectableDef = i0.defineInjectable({ factory: function ContentMetadataService_Factory() { return new ContentMetadataService(i0.inject(i1.BasicPropertiesService), i0.inject(i2.ContentMetadataConfigFactory), i0.inject(i3.PropertyGroupTranslatorService), i0.inject(i4.PropertyDescriptorsService)); }, token: ContentMetadataService, providedIn: "root" });
    return ContentMetadataService;
}());
export { ContentMetadataService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.basicPropertiesService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.contentMetadataConfigFactory;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.propertyGroupTranslatorService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.propertyDescriptorsService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiY29udGVudC1tZXRhZGF0YS9zZXJ2aWNlcy9jb250ZW50LW1ldGFkYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBR3RGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7O0FBRXJDO0lBS0ksZ0NBQW9CLHNCQUE4QyxFQUM5Qyw0QkFBMEQsRUFDMUQsOEJBQThELEVBQzlELDBCQUFzRDtRQUh0RCwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBQzlDLGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBOEI7UUFDMUQsbUNBQThCLEdBQTlCLDhCQUE4QixDQUFnQztRQUM5RCwrQkFBMEIsR0FBMUIsMEJBQTBCLENBQTRCO0lBQzFFLENBQUM7Ozs7O0lBRUQsbURBQWtCOzs7O0lBQWxCLFVBQW1CLElBQVU7UUFDekIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7Ozs7OztJQUVELHFEQUFvQjs7Ozs7SUFBcEIsVUFBcUIsSUFBVSxFQUFFLFVBQThCO1FBQS9ELGlCQW1CQztRQW5CZ0MsMkJBQUEsRUFBQSxzQkFBOEI7O1lBQ3ZELGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFFOUIsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFOztnQkFDWixRQUFNLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7O2dCQUM1RCxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVc7aUJBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2lCQUNyQixNQUFNLENBQUMsVUFBQyxTQUFTLElBQUssT0FBQSxRQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxFQUFoQyxDQUFnQyxDQUFDO1lBRWhFLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3ZCLGlCQUFpQixHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUNyRSxHQUFHLENBQUMsVUFBQyxNQUFNLElBQUssT0FBQSxRQUFNLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEVBQWpDLENBQWlDLENBQUMsRUFDbEQsR0FBRyxDQUFDLFVBQUMsTUFBTSxJQUFLLE9BQUEsS0FBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxFQUFuQyxDQUFtQyxDQUFDLEVBQ3BELEdBQUcsQ0FBQyxVQUFDLE1BQU0sSUFBSyxPQUFBLEtBQUksQ0FBQyw4QkFBOEIsQ0FBQyx5QkFBeUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUF0RixDQUFzRixDQUFDLENBQzFHLENBQUM7YUFDTDtTQUNKO1FBRUQsT0FBTyxpQkFBaUIsQ0FBQztJQUM3QixDQUFDOzs7OztJQUVELHVEQUFzQjs7OztJQUF0QixVQUF1QixjQUF3QztRQUMzRCxjQUFjLENBQUMsR0FBRyxDQUFDLFVBQUMsYUFBYTtZQUM3QixhQUFhLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxLQUFLLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQztRQUNwRSxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7O2dCQXpDSixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7O2dCQVhRLHNCQUFzQjtnQkFLdEIsNEJBQTRCO2dCQUg1Qiw4QkFBOEI7Z0JBSTlCLDBCQUEwQjs7O2lDQXpCbkM7Q0FzRUMsQUExQ0QsSUEwQ0M7U0F2Q1ksc0JBQXNCOzs7Ozs7SUFFbkIsd0RBQXNEOzs7OztJQUN0RCw4REFBa0U7Ozs7O0lBQ2xFLGdFQUFzRTs7Ozs7SUFDdEUsNERBQThEIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgQmFzaWNQcm9wZXJ0aWVzU2VydmljZSB9IGZyb20gJy4vYmFzaWMtcHJvcGVydGllcy5zZXJ2aWNlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQcm9wZXJ0eUdyb3VwVHJhbnNsYXRvclNlcnZpY2UgfSBmcm9tICcuL3Byb3BlcnR5LWdyb3Vwcy10cmFuc2xhdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2FyZFZpZXdJdGVtIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IENhcmRWaWV3R3JvdXAsIE9yZ2FuaXNlZFByb3BlcnR5R3JvdXAgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NvbnRlbnQtbWV0YWRhdGEuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBDb250ZW50TWV0YWRhdGFDb25maWdGYWN0b3J5IH0gZnJvbSAnLi9jb25maWcvY29udGVudC1tZXRhZGF0YS1jb25maWcuZmFjdG9yeSc7XG5pbXBvcnQgeyBQcm9wZXJ0eURlc2NyaXB0b3JzU2VydmljZSB9IGZyb20gJy4vcHJvcGVydHktZGVzY3JpcHRvcnMuc2VydmljZSc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ29udGVudE1ldGFkYXRhU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJhc2ljUHJvcGVydGllc1NlcnZpY2U6IEJhc2ljUHJvcGVydGllc1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjb250ZW50TWV0YWRhdGFDb25maWdGYWN0b3J5OiBDb250ZW50TWV0YWRhdGFDb25maWdGYWN0b3J5LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcHJvcGVydHlHcm91cFRyYW5zbGF0b3JTZXJ2aWNlOiBQcm9wZXJ0eUdyb3VwVHJhbnNsYXRvclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBwcm9wZXJ0eURlc2NyaXB0b3JzU2VydmljZTogUHJvcGVydHlEZXNjcmlwdG9yc1NlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBnZXRCYXNpY1Byb3BlcnRpZXMobm9kZTogTm9kZSk6IE9ic2VydmFibGU8Q2FyZFZpZXdJdGVtW10+IHtcbiAgICAgICAgcmV0dXJuIG9mKHRoaXMuYmFzaWNQcm9wZXJ0aWVzU2VydmljZS5nZXRQcm9wZXJ0aWVzKG5vZGUpKTtcbiAgICB9XG5cbiAgICBnZXRHcm91cGVkUHJvcGVydGllcyhub2RlOiBOb2RlLCBwcmVzZXROYW1lOiBzdHJpbmcgPSAnZGVmYXVsdCcpOiBPYnNlcnZhYmxlPENhcmRWaWV3R3JvdXBbXT4ge1xuICAgICAgICBsZXQgZ3JvdXBlZFByb3BlcnRpZXMgPSBvZihbXSk7XG5cbiAgICAgICAgaWYgKG5vZGUuYXNwZWN0TmFtZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29udGVudE1ldGFkYXRhQ29uZmlnRmFjdG9yeS5nZXQocHJlc2V0TmFtZSksXG4gICAgICAgICAgICAgICAgZ3JvdXBOYW1lcyA9IG5vZGUuYXNwZWN0TmFtZXNcbiAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChub2RlLm5vZGVUeXBlKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChncm91cE5hbWUpID0+IGNvbmZpZy5pc0dyb3VwQWxsb3dlZChncm91cE5hbWUpKTtcblxuICAgICAgICAgICAgaWYgKGdyb3VwTmFtZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGdyb3VwZWRQcm9wZXJ0aWVzID0gdGhpcy5wcm9wZXJ0eURlc2NyaXB0b3JzU2VydmljZS5sb2FkKGdyb3VwTmFtZXMpLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgIG1hcCgoZ3JvdXBzKSA9PiBjb25maWcucmVvcmdhbmlzZUJ5Q29uZmlnKGdyb3VwcykpLFxuICAgICAgICAgICAgICAgICAgICBtYXAoKGdyb3VwcykgPT4gdGhpcy5zZXRUaXRsZVRvTmFtZUlmTm90U2V0KGdyb3VwcykpLFxuICAgICAgICAgICAgICAgICAgICBtYXAoKGdyb3VwcykgPT4gdGhpcy5wcm9wZXJ0eUdyb3VwVHJhbnNsYXRvclNlcnZpY2UudHJhbnNsYXRlVG9DYXJkVmlld0dyb3Vwcyhncm91cHMsIG5vZGUucHJvcGVydGllcykpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBncm91cGVkUHJvcGVydGllcztcbiAgICB9XG5cbiAgICBzZXRUaXRsZVRvTmFtZUlmTm90U2V0KHByb3BlcnR5R3JvdXBzOiBPcmdhbmlzZWRQcm9wZXJ0eUdyb3VwW10pOiBPcmdhbmlzZWRQcm9wZXJ0eUdyb3VwW10ge1xuICAgICAgICBwcm9wZXJ0eUdyb3Vwcy5tYXAoKHByb3BlcnR5R3JvdXApID0+IHtcbiAgICAgICAgICAgIHByb3BlcnR5R3JvdXAudGl0bGUgPSBwcm9wZXJ0eUdyb3VwLnRpdGxlIHx8IHByb3BlcnR5R3JvdXAubmFtZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUdyb3VwcztcbiAgICB9XG59XG4iXX0=
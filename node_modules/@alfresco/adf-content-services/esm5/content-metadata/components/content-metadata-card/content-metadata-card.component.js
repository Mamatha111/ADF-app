/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { Node } from '@alfresco/js-api';
import { ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';
var ContentMetadataCardComponent = /** @class */ (function () {
    function ContentMetadataCardComponent(contentService) {
        this.contentService = contentService;
        /**
         * (optional) This flag displays/hides empty metadata
         * fields.
         */
        this.displayEmpty = false;
        /**
         * (optional) This flag sets the metadata in read only mode
         * preventing changes.
         */
        this.readOnly = false;
        /**
         * (optional) This flag allows the component to display more
         * than one accordion at a time.
         */
        this.multi = false;
        this._displayDefaultProperties = true;
        this.editable = false;
    }
    Object.defineProperty(ContentMetadataCardComponent.prototype, "displayDefaultProperties", {
        get: /**
         * @return {?}
         */
        function () {
            return this._displayDefaultProperties;
        },
        /** (optional) This flag displays/hides the metadata
         * properties.
         */
        set: /**
         * (optional) This flag displays/hides the metadata
         * properties.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._displayDefaultProperties = value;
            this.onDisplayDefaultPropertiesChange();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.onDisplayDefaultPropertiesChange = /**
     * @return {?}
     */
    function () {
        this.expanded = !this._displayDefaultProperties;
    };
    /**
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.toggleEdit = /**
     * @return {?}
     */
    function () {
        this.editable = !this.editable;
    };
    /**
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.toggleExpanded = /**
     * @return {?}
     */
    function () {
        this.expanded = !this.expanded;
    };
    /**
     * @return {?}
     */
    ContentMetadataCardComponent.prototype.hasAllowableOperations = /**
     * @return {?}
     */
    function () {
        return this.contentService.hasAllowableOperations(this.node, AllowableOperationsEnum.UPDATE);
    };
    ContentMetadataCardComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-content-metadata-card',
                    template: "<mat-card *ngIf=\"node\">\n    <mat-card-content>\n        <adf-content-metadata\n            [displayDefaultProperties]=\"displayDefaultProperties\"\n            [expanded]=\"expanded\"\n            [node]=\"node\"\n            [displayEmpty]=\"displayEmpty\"\n            [editable]=\"editable\"\n            [multi]=\"multi\"\n            [preset]=\"preset\">\n        </adf-content-metadata>\n    </mat-card-content>\n    <mat-card-footer class=\"adf-content-metadata-card-footer\" fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\">\n        <div>\n            <button *ngIf=\"!readOnly && hasAllowableOperations()\"\n                mat-icon-button\n                (click)=\"toggleEdit()\"\n                [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                data-automation-id=\"meta-data-card-toggle-edit\">\n                <mat-icon>mode_edit</mat-icon>\n            </button>\n        </div>\n        <button *ngIf=\"displayDefaultProperties\" mat-button (click)=\"toggleExpanded()\" data-automation-id=\"meta-data-card-toggle-expand\">\n            <ng-container *ngIf=\"expanded\">\n                <span data-automation-id=\"meta-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.MORE_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_down</mat-icon>\n            </ng-container>\n            <ng-container *ngIf=\"!expanded\">\n                <span data-automation-id=\"meta-data-card-toggle-expand-label\">{{ 'ADF_VIEWER.SIDEBAR.METADATA.LESS_INFORMATION' | translate }}</span>\n                <mat-icon>keyboard_arrow_up</mat-icon>\n            </ng-container>\n        </button>\n    </mat-card-footer>\n</mat-card>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { 'class': 'adf-content-metadata-card' },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ContentMetadataCardComponent.ctorParameters = function () { return [
        { type: ContentService }
    ]; };
    ContentMetadataCardComponent.propDecorators = {
        node: [{ type: Input }],
        displayEmpty: [{ type: Input }],
        preset: [{ type: Input }],
        readOnly: [{ type: Input }],
        multi: [{ type: Input }],
        displayDefaultProperties: [{ type: Input }]
    };
    return ContentMetadataCardComponent;
}());
export { ContentMetadataCardComponent };
if (false) {
    /**
     * (required) The node entity to fetch metadata about
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.node;
    /**
     * (optional) This flag displays/hides empty metadata
     * fields.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.displayEmpty;
    /**
     * (required) Name of the metadata preset, which defines aspects
     * and their properties.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.preset;
    /**
     * (optional) This flag sets the metadata in read only mode
     * preventing changes.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.readOnly;
    /**
     * (optional) This flag allows the component to display more
     * than one accordion at a time.
     * @type {?}
     */
    ContentMetadataCardComponent.prototype.multi;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataCardComponent.prototype._displayDefaultProperties;
    /** @type {?} */
    ContentMetadataCardComponent.prototype.editable;
    /** @type {?} */
    ContentMetadataCardComponent.prototype.expanded;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataCardComponent.prototype.contentService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS1jYXJkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImNvbnRlbnQtbWV0YWRhdGEvY29tcG9uZW50cy9jb250ZW50LW1ldGFkYXRhLWNhcmQvY29udGVudC1tZXRhZGF0YS1jYXJkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEMsT0FBTyxFQUFFLGNBQWMsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTdFO0lBdURJLHNDQUFvQixjQUE4QjtRQUE5QixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7Ozs7O1FBdkNsRCxpQkFBWSxHQUFZLEtBQUssQ0FBQzs7Ozs7UUFZOUIsYUFBUSxHQUFHLEtBQUssQ0FBQzs7Ozs7UUFNakIsVUFBSyxHQUFHLEtBQUssQ0FBQztRQUVOLDhCQUF5QixHQUFZLElBQUksQ0FBQztRQWVsRCxhQUFRLEdBQVksS0FBSyxDQUFDO0lBSzFCLENBQUM7SUFmRCxzQkFDSSxrRUFBd0I7Ozs7UUFLNUI7WUFDSSxPQUFPLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztRQUMxQyxDQUFDO1FBWEQ7O1dBRUc7Ozs7Ozs7UUFDSCxVQUM2QixLQUFjO1lBQ3ZDLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxLQUFLLENBQUM7WUFDdkMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLENBQUM7UUFDNUMsQ0FBQzs7O09BQUE7Ozs7SUFhRCx1RUFBZ0M7OztJQUFoQztRQUNJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUM7SUFDcEQsQ0FBQzs7OztJQUVELGlEQUFVOzs7SUFBVjtRQUNJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFRCxxREFBYzs7O0lBQWQ7UUFDSSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUNuQyxDQUFDOzs7O0lBRUQsNkRBQXNCOzs7SUFBdEI7UUFDSSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqRyxDQUFDOztnQkF4RUosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLHdyREFBcUQ7b0JBRXJELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxJQUFJLEVBQUUsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUU7O2lCQUNqRDs7OztnQkFSUSxjQUFjOzs7dUJBV2xCLEtBQUs7K0JBTUwsS0FBSzt5QkFNTCxLQUFLOzJCQU1MLEtBQUs7d0JBTUwsS0FBSzsyQ0FRTCxLQUFLOztJQWdDVixtQ0FBQztDQUFBLEFBekVELElBeUVDO1NBbEVZLDRCQUE0Qjs7Ozs7O0lBRXJDLDRDQUNXOzs7Ozs7SUFLWCxvREFDOEI7Ozs7OztJQUs5Qiw4Q0FDZTs7Ozs7O0lBS2YsZ0RBQ2lCOzs7Ozs7SUFLakIsNkNBQ2M7Ozs7O0lBRWQsaUVBQWtEOztJQWVsRCxnREFBMEI7O0lBRTFCLGdEQUFrQjs7Ozs7SUFFTixzREFBc0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgQ29udGVudFNlcnZpY2UsIEFsbG93YWJsZU9wZXJhdGlvbnNFbnVtIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtY29udGVudC1tZXRhZGF0YS1jYXJkJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vY29udGVudC1tZXRhZGF0YS1jYXJkLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9jb250ZW50LW1ldGFkYXRhLWNhcmQuY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgIGhvc3Q6IHsgJ2NsYXNzJzogJ2FkZi1jb250ZW50LW1ldGFkYXRhLWNhcmQnIH1cbn0pXG5leHBvcnQgY2xhc3MgQ29udGVudE1ldGFkYXRhQ2FyZENvbXBvbmVudCB7XG4gICAgLyoqIChyZXF1aXJlZCkgVGhlIG5vZGUgZW50aXR5IHRvIGZldGNoIG1ldGFkYXRhIGFib3V0ICovXG4gICAgQElucHV0KClcbiAgICBub2RlOiBOb2RlO1xuXG4gICAgLyoqIChvcHRpb25hbCkgVGhpcyBmbGFnIGRpc3BsYXlzL2hpZGVzIGVtcHR5IG1ldGFkYXRhXG4gICAgICogZmllbGRzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZGlzcGxheUVtcHR5OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogKHJlcXVpcmVkKSBOYW1lIG9mIHRoZSBtZXRhZGF0YSBwcmVzZXQsIHdoaWNoIGRlZmluZXMgYXNwZWN0c1xuICAgICAqIGFuZCB0aGVpciBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHJlc2V0OiBzdHJpbmc7XG5cbiAgICAvKiogKG9wdGlvbmFsKSBUaGlzIGZsYWcgc2V0cyB0aGUgbWV0YWRhdGEgaW4gcmVhZCBvbmx5IG1vZGVcbiAgICAgKiBwcmV2ZW50aW5nIGNoYW5nZXMuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICByZWFkT25seSA9IGZhbHNlO1xuXG4gICAgLyoqIChvcHRpb25hbCkgVGhpcyBmbGFnIGFsbG93cyB0aGUgY29tcG9uZW50IHRvIGRpc3BsYXkgbW9yZVxuICAgICAqIHRoYW4gb25lIGFjY29yZGlvbiBhdCBhIHRpbWUuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBtdWx0aSA9IGZhbHNlO1xuXG4gICAgcHJpdmF0ZSBfZGlzcGxheURlZmF1bHRQcm9wZXJ0aWVzOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiAob3B0aW9uYWwpIFRoaXMgZmxhZyBkaXNwbGF5cy9oaWRlcyB0aGUgbWV0YWRhdGFcbiAgICAgKiBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IGRpc3BsYXlEZWZhdWx0UHJvcGVydGllcyh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9kaXNwbGF5RGVmYXVsdFByb3BlcnRpZXMgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5vbkRpc3BsYXlEZWZhdWx0UHJvcGVydGllc0NoYW5nZSgpO1xuICAgIH1cblxuICAgIGdldCBkaXNwbGF5RGVmYXVsdFByb3BlcnRpZXMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwbGF5RGVmYXVsdFByb3BlcnRpZXM7XG4gICAgfVxuXG4gICAgZWRpdGFibGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGV4cGFuZGVkOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjb250ZW50U2VydmljZTogQ29udGVudFNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBvbkRpc3BsYXlEZWZhdWx0UHJvcGVydGllc0NoYW5nZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5leHBhbmRlZCA9ICF0aGlzLl9kaXNwbGF5RGVmYXVsdFByb3BlcnRpZXM7XG4gICAgfVxuXG4gICAgdG9nZ2xlRWRpdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lZGl0YWJsZSA9ICF0aGlzLmVkaXRhYmxlO1xuICAgIH1cblxuICAgIHRvZ2dsZUV4cGFuZGVkKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmV4cGFuZGVkID0gIXRoaXMuZXhwYW5kZWQ7XG4gICAgfVxuXG4gICAgaGFzQWxsb3dhYmxlT3BlcmF0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudFNlcnZpY2UuaGFzQWxsb3dhYmxlT3BlcmF0aW9ucyh0aGlzLm5vZGUsIEFsbG93YWJsZU9wZXJhdGlvbnNFbnVtLlVQREFURSk7XG4gICAgfVxufVxuIl19
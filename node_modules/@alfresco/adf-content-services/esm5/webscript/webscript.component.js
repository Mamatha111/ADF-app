/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ObjectDataTableAdapter } from '@alfresco/adf-core';
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output } from '@angular/core';
/**
 * <adf-webscript-get [scriptPath]="string"
 *                         [scriptArgs]="Object"
 *                         [contextRoot]="string"
 *                         [servicePath]="string"
 *                         [contentType]="JSON|HTML|DATATABLE"
 *                         (success)="customMethod($event)>
 * </adf-webscript-get>
 *
 * This component, provide a get webscript viewer
 *
 * \@InputParam {string} scriptPath path to Web Script (as defined by Web Script)
 * \@InputParam {Object} scriptArgs arguments to pass to Web Script
 * \@InputParam {string} contextRoot path where application is deployed default value 'alfresco'
 * \@InputParam {string} servicePath path where Web Script service is mapped default value 'service'
 * \@InputParam {string} contentType JSON | HTML | DATATABLE | TEXT
 *
 * \@Output - success - The event is emitted when the data are received
 *
 */
var WebscriptComponent = /** @class */ (function () {
    function WebscriptComponent(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        /**
         * Toggles whether to show or hide the data.
         */
        this.showData = true;
        /**
         * Path where the application is deployed
         */
        this.contextRoot = 'alfresco';
        /**
         * Path that the webscript service is mapped to.
         */
        this.servicePath = 'service';
        /**
         * Content type to interpret the data received from the webscript.
         * Can be "JSON" , "HTML" , "DATATABLE" or "TEXT"
         */
        this.contentType = 'TEXT';
        /**
         * Emitted when the operation succeeds. You can get the plain data from
         * the webscript through the **success** event parameter and use it as you
         * need in your application.
         */
        this.success = new EventEmitter();
        this.data = undefined;
        this.showError = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    WebscriptComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (this.showData) {
            this.clean();
        }
        return new Promise(function (resolve, reject) {
            _this.apiService.getInstance().webScript.executeWebScript('GET', _this.scriptPath, _this.scriptArgs, _this.contextRoot, _this.servicePath).then(function (webScriptData) {
                _this.data = webScriptData;
                if (_this.showData) {
                    if (_this.contentType === 'DATATABLE') {
                        _this.data = _this.showDataAsDataTable(webScriptData);
                    }
                }
                _this.success.emit(_this.data);
                resolve();
            }, function (error) {
                _this.logService.log('Error' + error);
                reject();
            });
        });
    };
    /**
     * show the data in a ng2-alfresco-datatable
     *
     * @param data
     *
     * @returns the data as datatable
     */
    /**
     * show the data in a ng2-alfresco-datatable
     *
     * @param {?} data
     *
     * @return {?} the data as datatable
     */
    WebscriptComponent.prototype.showDataAsDataTable = /**
     * show the data in a ng2-alfresco-datatable
     *
     * @param {?} data
     *
     * @return {?} the data as datatable
     */
    function (data) {
        /** @type {?} */
        var datatableData = null;
        try {
            if (!data.schema) {
                data.schema = ObjectDataTableAdapter.generateSchema(data.data);
            }
            if (data.schema && data.schema.length > 0) {
                this.data = new ObjectDataTableAdapter(data.data, data.schema);
            }
        }
        catch (error) {
            this.logService.error('error during the cast as datatable');
        }
        return datatableData;
    };
    /**
     * @return {?}
     */
    WebscriptComponent.prototype.clean = /**
     * @return {?}
     */
    function () {
        this.data = undefined;
    };
    /**
     * @return {?}
     */
    WebscriptComponent.prototype.isDataTableContent = /**
     * @return {?}
     */
    function () {
        return this.contentType === 'DATATABLE';
    };
    WebscriptComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-webscript-get',
                    template: "<div *ngIf=\"showData\">\n    <div *ngIf=\"contentType === 'JSON'\" id=\"webscript-data-JSON\">{{data | json}}</div>\n    <div *ngIf=\"contentType === 'HTML'\" id=\"webscript-data-HTML\" [innerHTML]=\"data\"></div>\n    <div *ngIf=\"contentType === 'TEXT'\" id=\"webscript-data-TEXT\">{{data}}</div>\n    <div *ngIf=\"isDataTableContent()\">\n        <adf-datatable id=\"webscript-datatable-wrapper\" [data]=\"data\"></adf-datatable>\n        <div>\n            <div *ngIf=\"showError\" id=\"error\">{{'WEBSCRIPT.ERROR' | translate: {\n                data: data,\n                contentType: contentType\n                }\n                }}\n            </div>\n        </div>\n    </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    WebscriptComponent.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    WebscriptComponent.propDecorators = {
        scriptPath: [{ type: Input }],
        scriptArgs: [{ type: Input }],
        showData: [{ type: Input }],
        contextRoot: [{ type: Input }],
        servicePath: [{ type: Input }],
        contentType: [{ type: Input }],
        success: [{ type: Output }]
    };
    return WebscriptComponent;
}());
export { WebscriptComponent };
if (false) {
    /**
     * (required) Path to the webscript (as defined by webscript).
     * @type {?}
     */
    WebscriptComponent.prototype.scriptPath;
    /**
     * Arguments to pass to the webscript.
     * @type {?}
     */
    WebscriptComponent.prototype.scriptArgs;
    /**
     * Toggles whether to show or hide the data.
     * @type {?}
     */
    WebscriptComponent.prototype.showData;
    /**
     * Path where the application is deployed
     * @type {?}
     */
    WebscriptComponent.prototype.contextRoot;
    /**
     * Path that the webscript service is mapped to.
     * @type {?}
     */
    WebscriptComponent.prototype.servicePath;
    /**
     * Content type to interpret the data received from the webscript.
     * Can be "JSON" , "HTML" , "DATATABLE" or "TEXT"
     * @type {?}
     */
    WebscriptComponent.prototype.contentType;
    /**
     * Emitted when the operation succeeds. You can get the plain data from
     * the webscript through the **success** event parameter and use it as you
     * need in your application.
     * @type {?}
     */
    WebscriptComponent.prototype.success;
    /** @type {?} */
    WebscriptComponent.prototype.data;
    /** @type {?} */
    WebscriptComponent.prototype.showError;
    /**
     * @type {?}
     * @private
     */
    WebscriptComponent.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    WebscriptComponent.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,
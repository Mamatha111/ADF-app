/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FlatTreeControl } from '@angular/cdk/tree';
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { TreeViewDataSource } from '../data/tree-view-datasource';
import { TreeViewService } from '../services/tree-view.service';
var TreeViewComponent = /** @class */ (function () {
    function TreeViewComponent(treeViewService) {
        this.treeViewService = treeViewService;
        /**
         * Emitted when a node in the tree view is clicked.
         */
        this.nodeClicked = new EventEmitter();
        /**
         * Emitted when an invalid node id is given.
         */
        this.error = new EventEmitter();
        this.getLevel = function (node) { return node.level; };
        this.isExpandable = function (node) { return node.expandable; };
        this.hasChild = function (level, nodeData) { return nodeData.expandable; };
        this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);
        this.dataSource = new TreeViewDataSource(this.treeControl, this.treeViewService);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    TreeViewComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['nodeId'] && changes['nodeId'].currentValue &&
            changes['nodeId'].currentValue !== changes['nodeId'].previousValue) {
            this.loadTreeNode();
        }
        else {
            this.dataSource.data = [];
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    TreeViewComponent.prototype.onNodeClicked = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.nodeClicked.emit(node);
    };
    /**
     * @private
     * @return {?}
     */
    TreeViewComponent.prototype.loadTreeNode = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.treeViewService.getTreeNodes(this.nodeId)
            .subscribe(function (treeNode) {
            _this.dataSource.data = treeNode;
        }, function (error) { return _this.error.emit(error); });
    };
    TreeViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-tree-view-list',
                    template: "<mat-tree class=\"adf-tree-view-main\" [dataSource]=\"dataSource\"\n          [treeControl]=\"treeControl\" *ngIf=\"nodeId; else missingNodeId\">\n    <mat-tree-node class=\"adf-tree-view-node\"\n        *matTreeNodeDef=\"let treeNode\" id=\"{{treeNode.name + '-tree-node'}}\"\n        matTreeNodePadding [matTreeNodePaddingIndent]=\"15\">\n        {{treeNode.name}}\n    </mat-tree-node>\n    <mat-tree-node class=\"adf-tree-view-node\"\n        id=\"{{treeNode.name + '-tree-child-node'}}\" *matTreeNodeDef=\"let treeNode; when: hasChild\"\n        matTreeNodePadding [matTreeNodePaddingIndent]=\"15\">\n        <button id=\"{{'button-'+treeNode.name}}\" (click)=\"onNodeClicked(treeNode.node)\"\n                mat-icon-button [attr.aria-label]=\"'toggle ' + treeNode.filename\" matTreeNodeToggle>\n            <mat-icon class=\"adf-tree-view-icon\">\n                {{treeControl.isExpanded(treeNode) ? 'folder_open' : 'folder'}}\n            </mat-icon>\n        </button>\n        {{treeNode.name}}\n    </mat-tree-node>\n</mat-tree>\n<ng-template #missingNodeId>\n    <div id=\"adf-tree-view-missing-node\">\n        {{'ADF-TREE-VIEW.MISSING-ID' | translate}}\n    </div>\n</ng-template>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    TreeViewComponent.ctorParameters = function () { return [
        { type: TreeViewService }
    ]; };
    TreeViewComponent.propDecorators = {
        nodeId: [{ type: Input }],
        nodeClicked: [{ type: Output }],
        error: [{ type: Output }]
    };
    return TreeViewComponent;
}());
export { TreeViewComponent };
if (false) {
    /**
     * Identifier of the node to display.
     * @type {?}
     */
    TreeViewComponent.prototype.nodeId;
    /**
     * Emitted when a node in the tree view is clicked.
     * @type {?}
     */
    TreeViewComponent.prototype.nodeClicked;
    /**
     * Emitted when an invalid node id is given.
     * @type {?}
     */
    TreeViewComponent.prototype.error;
    /** @type {?} */
    TreeViewComponent.prototype.treeControl;
    /** @type {?} */
    TreeViewComponent.prototype.dataSource;
    /** @type {?} */
    TreeViewComponent.prototype.getLevel;
    /** @type {?} */
    TreeViewComponent.prototype.isExpandable;
    /** @type {?} */
    TreeViewComponent.prototype.hasChild;
    /**
     * @type {?}
     * @private
     */
    TreeViewComponent.prototype.treeViewService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInRyZWUtdmlldy9jb21wb25lbnRzL3RyZWUtdmlldy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUE0QixNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpHLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUdoRTtJQXVCSSwyQkFBb0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCOzs7O1FBVHBELGdCQUFXLEdBQTRCLElBQUksWUFBWSxFQUFFLENBQUM7Ozs7UUFJMUQsVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBdUI5QyxhQUFRLEdBQUcsVUFBQyxJQUFrQixJQUFLLE9BQUEsSUFBSSxDQUFDLEtBQUssRUFBVixDQUFVLENBQUM7UUFFOUMsaUJBQVksR0FBRyxVQUFDLElBQWtCLElBQUssT0FBQSxJQUFJLENBQUMsVUFBVSxFQUFmLENBQWUsQ0FBQztRQUV2RCxhQUFRLEdBQUcsVUFBQyxLQUFhLEVBQUUsUUFBc0IsSUFBSyxPQUFBLFFBQVEsQ0FBQyxVQUFVLEVBQW5CLENBQW1CLENBQUM7UUFyQnRFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxlQUFlLENBQWUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7Ozs7O0lBRUQsdUNBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQzlCLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZO1lBQ25ELE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsRUFBRTtZQUNwRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDdkI7YUFBTTtZQUNILElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztTQUM3QjtJQUNMLENBQUM7Ozs7O0lBRUQseUNBQWE7Ozs7SUFBYixVQUFjLElBQWU7UUFDekIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7Ozs7SUFRTyx3Q0FBWTs7OztJQUFwQjtRQUFBLGlCQVFDO1FBUEcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQzthQUN6QyxTQUFTLENBQ04sVUFBQyxRQUF3QjtZQUNyQixLQUFJLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDcEMsQ0FBQyxFQUNELFVBQUMsS0FBSyxJQUFLLE9BQUEsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQXRCLENBQXNCLENBQ3BDLENBQUM7SUFDVixDQUFDOztnQkF2REosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLDByQ0FBdUM7O2lCQUUxQzs7OztnQkFQUSxlQUFlOzs7eUJBWW5CLEtBQUs7OEJBSUwsTUFBTTt3QkFJTixNQUFNOztJQXVDWCx3QkFBQztDQUFBLEFBeERELElBd0RDO1NBbERZLGlCQUFpQjs7Ozs7O0lBRzFCLG1DQUNlOzs7OztJQUdmLHdDQUMwRDs7Ozs7SUFHMUQsa0NBQzhDOztJQUU5Qyx3Q0FBMkM7O0lBQzNDLHVDQUErQjs7SUFvQi9CLHFDQUE4Qzs7SUFFOUMseUNBQXVEOztJQUV2RCxxQ0FBMEU7Ozs7O0lBdEI5RCw0Q0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBGbGF0VHJlZUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9jZGsvdHJlZSc7XG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmVlQmFzZU5vZGUgfSBmcm9tICcuLi9tb2RlbHMvdHJlZS12aWV3Lm1vZGVsJztcbmltcG9ydCB7IFRyZWVWaWV3RGF0YVNvdXJjZSB9IGZyb20gJy4uL2RhdGEvdHJlZS12aWV3LWRhdGFzb3VyY2UnO1xuaW1wb3J0IHsgVHJlZVZpZXdTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdHJlZS12aWV3LnNlcnZpY2UnO1xuaW1wb3J0IHsgTm9kZUVudHJ5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXRyZWUtdmlldy1saXN0JyxcbiAgICB0ZW1wbGF0ZVVybDogJ3RyZWUtdmlldy5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJ3RyZWUtdmlldy5jb21wb25lbnQuc2NzcyddXG59KVxuXG5leHBvcnQgY2xhc3MgVHJlZVZpZXdDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gICAgLyoqIElkZW50aWZpZXIgb2YgdGhlIG5vZGUgdG8gZGlzcGxheS4gKi9cbiAgICBASW5wdXQoKVxuICAgIG5vZGVJZDogc3RyaW5nO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhIG5vZGUgaW4gdGhlIHRyZWUgdmlldyBpcyBjbGlja2VkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIG5vZGVDbGlja2VkOiBFdmVudEVtaXR0ZXI8Tm9kZUVudHJ5PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYW4gaW52YWxpZCBub2RlIGlkIGlzIGdpdmVuLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIHRyZWVDb250cm9sOiBGbGF0VHJlZUNvbnRyb2w8VHJlZUJhc2VOb2RlPjtcbiAgICBkYXRhU291cmNlOiBUcmVlVmlld0RhdGFTb3VyY2U7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyZWVWaWV3U2VydmljZTogVHJlZVZpZXdTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMudHJlZUNvbnRyb2wgPSBuZXcgRmxhdFRyZWVDb250cm9sPFRyZWVCYXNlTm9kZT4odGhpcy5nZXRMZXZlbCwgdGhpcy5pc0V4cGFuZGFibGUpO1xuICAgICAgICB0aGlzLmRhdGFTb3VyY2UgPSBuZXcgVHJlZVZpZXdEYXRhU291cmNlKHRoaXMudHJlZUNvbnRyb2wsIHRoaXMudHJlZVZpZXdTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIGlmIChjaGFuZ2VzWydub2RlSWQnXSAmJiBjaGFuZ2VzWydub2RlSWQnXS5jdXJyZW50VmFsdWUgJiZcbiAgICAgICAgICAgIGNoYW5nZXNbJ25vZGVJZCddLmN1cnJlbnRWYWx1ZSAhPT0gY2hhbmdlc1snbm9kZUlkJ10ucHJldmlvdXNWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5sb2FkVHJlZU5vZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZS5kYXRhID0gW107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbk5vZGVDbGlja2VkKG5vZGU6IE5vZGVFbnRyeSkge1xuICAgICAgICB0aGlzLm5vZGVDbGlja2VkLmVtaXQobm9kZSk7XG4gICAgfVxuXG4gICAgZ2V0TGV2ZWwgPSAobm9kZTogVHJlZUJhc2VOb2RlKSA9PiBub2RlLmxldmVsO1xuXG4gICAgaXNFeHBhbmRhYmxlID0gKG5vZGU6IFRyZWVCYXNlTm9kZSkgPT4gbm9kZS5leHBhbmRhYmxlO1xuXG4gICAgaGFzQ2hpbGQgPSAobGV2ZWw6IG51bWJlciwgbm9kZURhdGE6IFRyZWVCYXNlTm9kZSkgPT4gbm9kZURhdGEuZXhwYW5kYWJsZTtcblxuICAgIHByaXZhdGUgbG9hZFRyZWVOb2RlKCkge1xuICAgICAgICB0aGlzLnRyZWVWaWV3U2VydmljZS5nZXRUcmVlTm9kZXModGhpcy5ub2RlSWQpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgICh0cmVlTm9kZTogVHJlZUJhc2VOb2RlW10pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlLmRhdGEgPSB0cmVlTm9kZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChlcnJvcikgPT4gdGhpcy5lcnJvci5lbWl0KGVycm9yKVxuICAgICAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=
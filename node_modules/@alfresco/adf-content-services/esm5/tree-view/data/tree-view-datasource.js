/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, merge } from 'rxjs';
import { map } from 'rxjs/operators';
import { FlatTreeControl } from '@angular/cdk/tree';
import { TreeViewService } from '../services/tree-view.service';
var TreeViewDataSource = /** @class */ (function () {
    function TreeViewDataSource(treeControl, treeViewService) {
        var _this = this;
        this.treeControl = treeControl;
        this.treeViewService = treeViewService;
        this.dataChange = new BehaviorSubject([]);
        this.childrenSubscription = null;
        this.changeSubscription = null;
        this.dataChange.subscribe(function (treeNodes) { return _this.treeNodes = treeNodes; });
    }
    Object.defineProperty(TreeViewDataSource.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this.treeNodes;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.treeControl.dataNodes = value;
            this.dataChange.next(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} collectionViewer
     * @return {?}
     */
    TreeViewDataSource.prototype.connect = /**
     * @param {?} collectionViewer
     * @return {?}
     */
    function (collectionViewer) {
        var _this = this;
        this.changeSubscription = this.treeControl.expansionModel.onChange.subscribe(function (change) {
            if (((/** @type {?} */ (change))).added &&
                ((/** @type {?} */ (change))).added.length > 0) {
                _this.expandTreeNodes((/** @type {?} */ (change)));
            }
            else if (((/** @type {?} */ (change))).removed) {
                _this.reduceTreeNodes((/** @type {?} */ (change)));
            }
        });
        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(function () { return _this.data; }));
    };
    /**
     * @return {?}
     */
    TreeViewDataSource.prototype.disconnect = /**
     * @return {?}
     */
    function () {
        if (this.childrenSubscription) {
            this.childrenSubscription.unsubscribe();
        }
        if (this.changeSubscription) {
            this.changeSubscription.unsubscribe();
        }
    };
    /**
     * @private
     * @param {?} change
     * @return {?}
     */
    TreeViewDataSource.prototype.expandTreeNodes = /**
     * @private
     * @param {?} change
     * @return {?}
     */
    function (change) {
        var _this = this;
        change.added.forEach(function (node) { return _this.expandNode(node); });
    };
    /**
     * @private
     * @param {?} change
     * @return {?}
     */
    TreeViewDataSource.prototype.reduceTreeNodes = /**
     * @private
     * @param {?} change
     * @return {?}
     */
    function (change) {
        var _this = this;
        change.removed.slice().reverse().forEach(function (node) { return _this.toggleNode(node); });
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    TreeViewDataSource.prototype.expandNode = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        this.childrenSubscription = this.treeViewService.getTreeNodes(node.nodeId)
            .subscribe(function (children) {
            var _a;
            /** @type {?} */
            var index = _this.data.indexOf(node);
            if (!children || index < 0) {
                node.expandable = false;
                return;
            }
            /** @type {?} */
            var nodes = children.map(function (actualNode) {
                actualNode.level = node.level + 1;
                return actualNode;
            });
            (_a = _this.data).splice.apply(_a, tslib_1.__spread([index + 1, 0], nodes));
            _this.dataChange.next(_this.data);
        });
    };
    /**
     * @param {?} node
     * @return {?}
     */
    TreeViewDataSource.prototype.toggleNode = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var index = this.data.indexOf(node);
        /** @type {?} */
        var count = 0;
        for (var i = index + 1; i < this.data.length
            && this.data[i].level > node.level; i++, count++) { }
        this.data.splice(index + 1, count);
        this.dataChange.next(this.data);
    };
    TreeViewDataSource.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TreeViewDataSource.ctorParameters = function () { return [
        { type: FlatTreeControl },
        { type: TreeViewService }
    ]; };
    return TreeViewDataSource;
}());
export { TreeViewDataSource };
if (false) {
    /** @type {?} */
    TreeViewDataSource.prototype.treeNodes;
    /** @type {?} */
    TreeViewDataSource.prototype.dataChange;
    /** @type {?} */
    TreeViewDataSource.prototype.childrenSubscription;
    /** @type {?} */
    TreeViewDataSource.prototype.changeSubscription;
    /**
     * @type {?}
     * @private
     */
    TreeViewDataSource.prototype.treeControl;
    /**
     * @type {?}
     * @private
     */
    TreeViewDataSource.prototype.treeViewService;
}
//# sourceMappingURL=data:application/json;base64,
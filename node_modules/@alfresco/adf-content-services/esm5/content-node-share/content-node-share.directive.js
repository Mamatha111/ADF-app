/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, HostListener, NgZone } from '@angular/core';
import { MatDialog } from '@angular/material';
import { NodeEntry } from '@alfresco/js-api';
import { ShareDialogComponent } from './content-node-share.dialog';
var NodeSharedDirective = /** @class */ (function () {
    function NodeSharedDirective(dialog, zone) {
        this.dialog = dialog;
        this.zone = zone;
        this.isFile = false;
        this.isShared = false;
    }
    /**
     * @return {?}
     */
    NodeSharedDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.node) {
            this.shareNode(this.node);
        }
    };
    /**
     * @param {?} nodeEntry
     * @return {?}
     */
    NodeSharedDirective.prototype.shareNode = /**
     * @param {?} nodeEntry
     * @return {?}
     */
    function (nodeEntry) {
        if (nodeEntry && nodeEntry.entry && nodeEntry.entry.isFile) {
            this.dialog.open(ShareDialogComponent, {
                width: '600px',
                panelClass: 'adf-share-link-dialog',
                data: {
                    node: nodeEntry,
                    baseShareUrl: this.baseShareUrl
                }
            });
        }
    };
    /**
     * @return {?}
     */
    NodeSharedDirective.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.onStable.subscribe(function () {
            if (_this.node && _this.node.entry) {
                _this.isFile = _this.node.entry.isFile;
                _this.isShared = _this.node.entry.properties['qshare:sharedId'];
            }
        });
    };
    NodeSharedDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-share]',
                    exportAs: 'adfShare'
                },] }
    ];
    /** @nocollapse */
    NodeSharedDirective.ctorParameters = function () { return [
        { type: MatDialog },
        { type: NgZone }
    ]; };
    NodeSharedDirective.propDecorators = {
        node: [{ type: Input, args: ['adf-share',] }],
        baseShareUrl: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return NodeSharedDirective;
}());
export { NodeSharedDirective };
if (false) {
    /** @type {?} */
    NodeSharedDirective.prototype.isFile;
    /** @type {?} */
    NodeSharedDirective.prototype.isShared;
    /**
     * Node to share.
     * @type {?}
     */
    NodeSharedDirective.prototype.node;
    /**
     * Prefix to add to the generated link.
     * @type {?}
     */
    NodeSharedDirective.prototype.baseShareUrl;
    /**
     * @type {?}
     * @private
     */
    NodeSharedDirective.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    NodeSharedDirective.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1ub2RlLXNoYXJlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImNvbnRlbnQtbm9kZS1zaGFyZS9jb250ZW50LW5vZGUtc2hhcmUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBYSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVuRTtJQXlCSSw2QkFBb0IsTUFBaUIsRUFBVSxJQUFZO1FBQXZDLFdBQU0sR0FBTixNQUFNLENBQVc7UUFBVSxTQUFJLEdBQUosSUFBSSxDQUFRO1FBbkIzRCxXQUFNLEdBQVksS0FBSyxDQUFDO1FBQ3hCLGFBQVEsR0FBWSxLQUFLLENBQUM7SUFrQm9DLENBQUM7Ozs7SUFOL0QscUNBQU87OztJQURQO1FBRUksSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0I7SUFDTCxDQUFDOzs7OztJQUlELHVDQUFTOzs7O0lBQVQsVUFBVSxTQUFvQjtRQUMxQixJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsS0FBSyxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ3hELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFO2dCQUNuQyxLQUFLLEVBQUUsT0FBTztnQkFDZCxVQUFVLEVBQUUsdUJBQXVCO2dCQUNuQyxJQUFJLEVBQUU7b0JBQ0YsSUFBSSxFQUFFLFNBQVM7b0JBQ2YsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO2lCQUNsQzthQUNKLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7OztJQUVELHlDQUFXOzs7SUFBWDtRQUFBLGlCQU9DO1FBTkcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO1lBQ3pCLElBQUksS0FBSSxDQUFDLElBQUksSUFBSSxLQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDOUIsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7Z0JBQ3JDLEtBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUM7YUFDakU7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O2dCQS9DSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFFBQVEsRUFBRSxVQUFVO2lCQUN2Qjs7OztnQkFSUSxTQUFTO2dCQURrQyxNQUFNOzs7dUJBaUJyRCxLQUFLLFNBQUMsV0FBVzsrQkFJakIsS0FBSzswQkFHTCxZQUFZLFNBQUMsT0FBTzs7SUE4QnpCLDBCQUFDO0NBQUEsQUFoREQsSUFnREM7U0E1Q1ksbUJBQW1COzs7SUFFNUIscUNBQXdCOztJQUN4Qix1Q0FBMEI7Ozs7O0lBSTFCLG1DQUNnQjs7Ozs7SUFHaEIsMkNBQ3FCOzs7OztJQVNULHFDQUF5Qjs7Ozs7SUFBRSxtQ0FBb0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBIb3N0TGlzdGVuZXIsIE9uQ2hhbmdlcywgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXREaWFsb2cgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBOb2RlRW50cnkgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcblxuaW1wb3J0IHsgU2hhcmVEaWFsb2dDb21wb25lbnQgfSBmcm9tICcuL2NvbnRlbnQtbm9kZS1zaGFyZS5kaWFsb2cnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1thZGYtc2hhcmVdJyxcbiAgICBleHBvcnRBczogJ2FkZlNoYXJlJ1xufSlcbmV4cG9ydCBjbGFzcyBOb2RlU2hhcmVkRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICAgIGlzRmlsZTogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGlzU2hhcmVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogTm9kZSB0byBzaGFyZS4gKi9cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8taW5wdXQtcmVuYW1lXG4gICAgQElucHV0KCdhZGYtc2hhcmUnKVxuICAgIG5vZGU6IE5vZGVFbnRyeTtcblxuICAgIC8qKiBQcmVmaXggdG8gYWRkIHRvIHRoZSBnZW5lcmF0ZWQgbGluay4gKi9cbiAgICBASW5wdXQoKVxuICAgIGJhc2VTaGFyZVVybDogc3RyaW5nO1xuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICAgIG9uQ2xpY2soKSB7XG4gICAgICAgIGlmICh0aGlzLm5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2hhcmVOb2RlKHRoaXMubm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRpYWxvZzogTWF0RGlhbG9nLCBwcml2YXRlIHpvbmU6IE5nWm9uZSkge31cblxuICAgIHNoYXJlTm9kZShub2RlRW50cnk6IE5vZGVFbnRyeSkge1xuICAgICAgICBpZiAobm9kZUVudHJ5ICYmIG5vZGVFbnRyeS5lbnRyeSAmJiBub2RlRW50cnkuZW50cnkuaXNGaWxlKSB7XG4gICAgICAgICAgICB0aGlzLmRpYWxvZy5vcGVuKFNoYXJlRGlhbG9nQ29tcG9uZW50LCB7XG4gICAgICAgICAgICAgICAgd2lkdGg6ICc2MDBweCcsXG4gICAgICAgICAgICAgICAgcGFuZWxDbGFzczogJ2FkZi1zaGFyZS1saW5rLWRpYWxvZycsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBub2RlOiBub2RlRW50cnksXG4gICAgICAgICAgICAgICAgICAgIGJhc2VTaGFyZVVybDogdGhpcy5iYXNlU2hhcmVVcmxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKCkge1xuICAgICAgICB0aGlzLnpvbmUub25TdGFibGUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLm5vZGUgJiYgdGhpcy5ub2RlLmVudHJ5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0ZpbGUgPSB0aGlzLm5vZGUuZW50cnkuaXNGaWxlO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNTaGFyZWQgPSB0aGlzLm5vZGUuZW50cnkucHJvcGVydGllc1sncXNoYXJlOnNoYXJlZElkJ107XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ElementRef } from '@angular/core';
var LibraryNameColumnComponent = /** @class */ (function () {
    function LibraryNameColumnComponent(element) {
        this.element = element;
    }
    /**
     * @return {?}
     */
    LibraryNameColumnComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.node = this.context.row.node;
        /** @type {?} */
        var rows = this.context.data.rows || [];
        if (this.node && this.node.entry) {
            this.displayText = this.makeLibraryTitle(this.node.entry, rows);
            this.displayTooltip = this.makeLibraryTooltip(this.node.entry);
        }
    };
    /**
     * @return {?}
     */
    LibraryNameColumnComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.element.nativeElement.dispatchEvent(new CustomEvent('name-click', {
            bubbles: true,
            detail: {
                node: this.node
            }
        }));
    };
    /**
     * @param {?} library
     * @return {?}
     */
    LibraryNameColumnComponent.prototype.makeLibraryTooltip = /**
     * @param {?} library
     * @return {?}
     */
    function (library) {
        var description = library.description, title = library.title;
        return description || title || '';
    };
    /**
     * @param {?} library
     * @param {?} rows
     * @return {?}
     */
    LibraryNameColumnComponent.prototype.makeLibraryTitle = /**
     * @param {?} library
     * @param {?} rows
     * @return {?}
     */
    function (library, rows) {
        /** @type {?} */
        var entries = rows.map(function (r) { return r.node.entry; });
        var title = library.title, id = library.id;
        /** @type {?} */
        var isDuplicate = false;
        if (entries) {
            isDuplicate = entries.some(function (entry) {
                return entry.id !== id && entry.title === title;
            });
        }
        return isDuplicate ? title + " (" + id + ")" : "" + title;
    };
    LibraryNameColumnComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-library-name-column',
                    template: "\n    <span title=\"{{ displayTooltip }}\" (click)=\"onClick()\">\n      {{ displayText }}\n    </span>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-datatable-cell adf-datatable-link adf-library-name-column' }
                }] }
    ];
    /** @nocollapse */
    LibraryNameColumnComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    LibraryNameColumnComponent.propDecorators = {
        context: [{ type: Input }]
    };
    return LibraryNameColumnComponent;
}());
export { LibraryNameColumnComponent };
if (false) {
    /** @type {?} */
    LibraryNameColumnComponent.prototype.context;
    /** @type {?} */
    LibraryNameColumnComponent.prototype.displayTooltip;
    /** @type {?} */
    LibraryNameColumnComponent.prototype.displayText;
    /** @type {?} */
    LibraryNameColumnComponent.prototype.node;
    /**
     * @type {?}
     * @private
     */
    LibraryNameColumnComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlicmFyeS1uYW1lLWNvbHVtbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJkb2N1bWVudC1saXN0L2NvbXBvbmVudHMvbGlicmFyeS1uYW1lLWNvbHVtbi9saWJyYXJ5LW5hbWUtY29sdW1uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQ0wsU0FBUyxFQUNULHVCQUF1QixFQUN2QixpQkFBaUIsRUFFakIsS0FBSyxFQUNMLFVBQVUsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUl2QjtJQW1CRSxvQ0FBb0IsT0FBbUI7UUFBbkIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtJQUFHLENBQUM7Ozs7SUFFM0MsNkNBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7O1lBQzVCLElBQUksR0FBd0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7UUFDOUQsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2hFLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDaEU7SUFDSCxDQUFDOzs7O0lBRUQsNENBQU87OztJQUFQO1FBQ0UsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUN0QyxJQUFJLFdBQVcsQ0FBQyxZQUFZLEVBQUU7WUFDNUIsT0FBTyxFQUFFLElBQUk7WUFDYixNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2FBQ2hCO1NBQ0YsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOzs7OztJQUVELHVEQUFrQjs7OztJQUFsQixVQUFtQixPQUFZO1FBQ3JCLElBQUEsaUNBQVcsRUFBRSxxQkFBSztRQUUxQixPQUFPLFdBQVcsSUFBSSxLQUFLLElBQUksRUFBRSxDQUFDO0lBQ3BDLENBQUM7Ozs7OztJQUVELHFEQUFnQjs7Ozs7SUFBaEIsVUFBaUIsT0FBWSxFQUFFLElBQXlCOztZQUNoRCxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQWUsSUFBSyxPQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFaLENBQVksQ0FBQztRQUNuRCxJQUFBLHFCQUFLLEVBQUUsZUFBRTs7WUFFYixXQUFXLEdBQUcsS0FBSztRQUV2QixJQUFJLE9BQU8sRUFBRTtZQUNYLFdBQVcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQUMsS0FBVTtnQkFDcEMsT0FBTyxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxLQUFLLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQztZQUNsRCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxXQUFXLENBQUMsQ0FBQyxDQUFJLEtBQUssVUFBSyxFQUFFLE1BQUcsQ0FBQyxDQUFDLENBQUMsS0FBRyxLQUFPLENBQUM7SUFDdkQsQ0FBQzs7Z0JBNURGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUseUJBQXlCO29CQUNuQyxRQUFRLEVBQUUsNkdBSVQ7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsK0RBQStELEVBQUU7aUJBQ2pGOzs7O2dCQWZDLFVBQVU7OzswQkFpQlQsS0FBSzs7SUFpRFIsaUNBQUM7Q0FBQSxBQTdERCxJQTZEQztTQWxEWSwwQkFBMEI7OztJQUNyQyw2Q0FDYTs7SUFFYixvREFBdUI7O0lBQ3ZCLGlEQUFvQjs7SUFDcEIsMENBQWdCOzs7OztJQUVKLDZDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxuICBPbkluaXQsXG4gIElucHV0LFxuICBFbGVtZW50UmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZUVudHJ5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBTaGFyZURhdGFSb3cgfSBmcm9tICcuLi8uLi9kYXRhL3NoYXJlLWRhdGEtcm93Lm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYWRmLWxpYnJhcnktbmFtZS1jb2x1bW4nLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxzcGFuIHRpdGxlPVwie3sgZGlzcGxheVRvb2x0aXAgfX1cIiAoY2xpY2spPVwib25DbGljaygpXCI+XG4gICAgICB7eyBkaXNwbGF5VGV4dCB9fVxuICAgIDwvc3Bhbj5cbiAgYCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGhvc3Q6IHsgY2xhc3M6ICdhZGYtZGF0YXRhYmxlLWNlbGwgYWRmLWRhdGF0YWJsZS1saW5rIGFkZi1saWJyYXJ5LW5hbWUtY29sdW1uJyB9XG59KVxuZXhwb3J0IGNsYXNzIExpYnJhcnlOYW1lQ29sdW1uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KClcbiAgY29udGV4dDogYW55O1xuXG4gIGRpc3BsYXlUb29sdGlwOiBzdHJpbmc7XG4gIGRpc3BsYXlUZXh0OiBzdHJpbmc7XG4gIG5vZGU6IE5vZGVFbnRyeTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5ub2RlID0gdGhpcy5jb250ZXh0LnJvdy5ub2RlO1xuICAgIGNvbnN0IHJvd3M6IEFycmF5PFNoYXJlRGF0YVJvdz4gPSB0aGlzLmNvbnRleHQuZGF0YS5yb3dzIHx8IFtdO1xuICAgIGlmICh0aGlzLm5vZGUgJiYgdGhpcy5ub2RlLmVudHJ5KSB7XG4gICAgICB0aGlzLmRpc3BsYXlUZXh0ID0gdGhpcy5tYWtlTGlicmFyeVRpdGxlKHRoaXMubm9kZS5lbnRyeSwgcm93cyk7XG4gICAgICB0aGlzLmRpc3BsYXlUb29sdGlwID0gdGhpcy5tYWtlTGlicmFyeVRvb2x0aXAodGhpcy5ub2RlLmVudHJ5KTtcbiAgICB9XG4gIH1cblxuICBvbkNsaWNrKCkge1xuICAgIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoJ25hbWUtY2xpY2snLCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGRldGFpbDoge1xuICAgICAgICAgIG5vZGU6IHRoaXMubm9kZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBtYWtlTGlicmFyeVRvb2x0aXAobGlicmFyeTogYW55KTogc3RyaW5nIHtcbiAgICBjb25zdCB7IGRlc2NyaXB0aW9uLCB0aXRsZSB9ID0gbGlicmFyeTtcblxuICAgIHJldHVybiBkZXNjcmlwdGlvbiB8fCB0aXRsZSB8fCAnJztcbiAgfVxuXG4gIG1ha2VMaWJyYXJ5VGl0bGUobGlicmFyeTogYW55LCByb3dzOiBBcnJheTxTaGFyZURhdGFSb3c+KTogc3RyaW5nIHtcbiAgICBjb25zdCBlbnRyaWVzID0gcm93cy5tYXAoKHI6IFNoYXJlRGF0YVJvdykgPT4gci5ub2RlLmVudHJ5KTtcbiAgICBjb25zdCB7IHRpdGxlLCBpZCB9ID0gbGlicmFyeTtcblxuICAgIGxldCBpc0R1cGxpY2F0ZSA9IGZhbHNlO1xuXG4gICAgaWYgKGVudHJpZXMpIHtcbiAgICAgIGlzRHVwbGljYXRlID0gZW50cmllcy5zb21lKChlbnRyeTogYW55KSA9PiB7XG4gICAgICAgIHJldHVybiBlbnRyeS5pZCAhPT0gaWQgJiYgZW50cnkudGl0bGUgPT09IHRpdGxlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzRHVwbGljYXRlID8gYCR7dGl0bGV9ICgke2lkfSlgIDogYCR7dGl0bGV9YDtcbiAgfVxufVxuIl19
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:rxjs-no-subject-value */
import { Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, NgZone, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { ContentService, DataSorting, DataTableComponent, DisplayMode, ObjectDataColumn, AppConfigService, DataColumnListComponent, UserPreferencesService, ThumbnailService, CustomLoadingContentTemplateDirective, CustomNoPermissionTemplateDirective, CustomEmptyContentTemplateDirective, AlfrescoApiService, UserPreferenceValues } from '@alfresco/adf-core';
import { NodePaging, Pagination } from '@alfresco/js-api';
import { Subject, BehaviorSubject, of } from 'rxjs';
import { ShareDataTableAdapter } from './../data/share-datatable-adapter';
import { presetsDefaultModel } from '../models/preset.model';
import { ContentActionModel } from './../models/content-action.model';
import { DocumentListService } from './../services/document-list.service';
import { NodeEntityEvent, NodeEntryEvent } from './node.event';
import { CustomResourcesService } from './../services/custom-resources.service';
var DocumentListComponent = /** @class */ (function () {
    function DocumentListComponent(documentListService, ngZone, elementRef, appConfig, userPreferencesService, customResourcesService, contentService, thumbnailService, alfrescoApiService) {
        var _this = this;
        this.documentListService = documentListService;
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.appConfig = appConfig;
        this.userPreferencesService = userPreferencesService;
        this.customResourcesService = customResourcesService;
        this.contentService = contentService;
        this.thumbnailService = thumbnailService;
        this.alfrescoApiService = alfrescoApiService;
        this.DEFAULT_PAGINATION = new Pagination({
            hasMoreItems: false,
            skipCount: 0,
            maxItems: 25,
            totalItems: 0
        });
        /**
         * Change the display mode of the table. Can be "list" or "gallery".
         */
        this.display = DisplayMode.List;
        /**
         * Define a set of CSS styles to apply depending on the permission
         * of the user on that node. See the Permission Style model
         * page for further details and examples.
         */
        this.permissionsStyle = [];
        /**
         * The default route for all the location-based columns (if declared).
         */
        this.locationFormat = '/';
        /**
         * Toggles navigation to folder content or file preview
         */
        this.navigate = true;
        /**
         * Toggles the header
         */
        this.showHeader = true;
        /**
         * User interaction for folder navigation or file preview.
         * Valid values are "click" and "dblclick". Default value: "dblclick"
         */
        this.navigationMode = DocumentListComponent.DOUBLE_CLICK_NAVIGATION; // click|dblclick
        // click|dblclick
        /**
         * Show document thumbnails rather than icons
         */
        this.thumbnails = false;
        /**
         * Row selection mode. Can be null, `single` or `multiple`. For `multiple` mode,
         * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for multiple rows.
         */
        this.selectionMode = 'single'; // null|single|multiple
        // null|single|multiple
        /**
         * Toggles multiselect mode
         */
        this.multiselect = false;
        /**
         * Toggles content actions for each row
         */
        this.contentActions = false;
        /**
         * Position of the content actions dropdown menu. Can be set to "left" or "right".
         */
        this.contentActionsPosition = 'right'; // left|right
        // left|right
        /**
         * Toggles context menus for each row
         */
        this.contextMenuActions = false;
        /**
         * Custom image for empty folder. Default value: './assets/images/empty_doc_lib.svg'
         */
        this.emptyFolderImageUrl = './assets/images/empty_doc_lib.svg';
        /**
         * Toggle file drop support for rows (see Upload Directive for further details)
         */
        this.allowDropFiles = false;
        /**
         * Defines default sorting. The format is an array of 2 strings `[key, direction]`
         * i.e. `['name', 'desc']` or `['name', 'asc']`. Set this value only if you want to
         * override the default sorting detected by the component based on columns.
         */
        this.sorting = ['name', 'asc'];
        /**
         * Defines sorting mode. Can be either `client` (items in the list
         * are sorted client-side) or `server` (the ordering supplied by the
         * server is used without further client-side sorting).
         * Note that the `server` option *does not* request the server to sort the data
         * before delivering it.
         */
        this.sortingMode = 'client';
        /**
         * Toggles the loading state and animated spinners for the component. Used in
         * combination with `navigate=false` to perform custom navigation and loading
         * state indication.
         */
        this.loading = false;
        /**
         * @hidden
         */
        this._rowFilter = null;
        /**
         * Custom function to choose image file paths to show. See the
         * [Image Resolver Model](image-resolver.model.md) page for
         * more information.
         */
        this.imageResolver = null;
        this._currentFolderId = null;
        /**
         * The Document list will show all the nodes contained in the NodePaging entity
         */
        this.node = null;
        /**
         * Default value is stored in the user preference settings. Use this only if you are not using pagination.
         */
        this.maxItems = this.DEFAULT_PAGINATION.maxItems;
        /**
         * Emitted when the user clicks a list node
         */
        this.nodeClick = new EventEmitter();
        /**
         * Emitted when the user double-clicks a list node
         */
        this.nodeDblClick = new EventEmitter();
        /**
         * Emitted when the current display folder changes
         */
        this.folderChange = new EventEmitter();
        /**
         * Emitted when the user acts upon files with either single or double click
         * (depends on `navigation-mode`). Useful for integration with the
         * Viewer component.
         */
        this.preview = new EventEmitter();
        /**
         * Emitted when the Document List has loaded all items and is ready for use
         */
        this.ready = new EventEmitter();
        /**
         * Emitted when the API fails to get the Document List data
         */
        this.error = new EventEmitter();
        this.actions = [];
        this.contextActionHandler = new Subject();
        this.noPermission = false;
        this.selection = new Array();
        this.$folderNode = new Subject();
        this._pagination = this.DEFAULT_PAGINATION;
        this.pagination = new BehaviorSubject(this.DEFAULT_PAGINATION);
        this.layoutPresets = {};
        this.subscriptions = [];
        this.rowMenuCache = {};
        this.userPreferencesService.select(UserPreferenceValues.PaginationSize).subscribe(function (pagSize) {
            _this.maxItems = _this._pagination.maxItems = pagSize;
        });
    }
    Object.defineProperty(DocumentListComponent.prototype, "rowFilter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rowFilter;
        },
        /**
         * Custom function to choose whether to show or hide rows.
         * See the [Row Filter Model](row-filter.model.md) page for
         * more information.
         */
        set: /**
         * Custom function to choose whether to show or hide rows.
         * See the [Row Filter Model](row-filter.model.md) page for
         * more information.
         * @param {?} rowFilter
         * @return {?}
         */
        function (rowFilter) {
            this._rowFilter = rowFilter;
            if (this.data) {
                this.data.setFilter(this._rowFilter);
                if (this._currentFolderId) {
                    this.reload();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DocumentListComponent.prototype, "currentFolderId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._currentFolderId;
        },
        /** The ID of the folder node to display or a reserved string alias for special sources */
        set: /**
         * The ID of the folder node to display or a reserved string alias for special sources
         * @param {?} currentFolderId
         * @return {?}
         */
        function (currentFolderId) {
            if (this._currentFolderId !== currentFolderId) {
                this._currentFolderId = currentFolderId;
                if (this.data) {
                    this.data.loadPage(null, false);
                    this.resetNewFolderPagination();
                }
                if (this._currentFolderId) {
                    this.loadFolder();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.getContextActions = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        if (node && node.entry) {
            /** @type {?} */
            var actions = this.getNodeActions(node);
            if (actions && actions.length > 0) {
                return actions.map(function (currentAction) {
                    return {
                        model: currentAction,
                        node: node,
                        subject: _this.contextActionHandler
                    };
                });
            }
        }
        return null;
    };
    Object.defineProperty(DocumentListComponent.prototype, "hasCustomLayout", {
        get: /**
         * @return {?}
         */
        function () {
            return this.columnList && this.columnList.columns && this.columnList.columns.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    DocumentListComponent.prototype.getDefaultSorting = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var defaultSorting;
        if (this.sorting) {
            var _a = tslib_1.__read(this.sorting, 2), key = _a[0], direction = _a[1];
            defaultSorting = new DataSorting(key, direction);
        }
        return defaultSorting;
    };
    /**
     * @private
     * @param {?=} name
     * @return {?}
     */
    DocumentListComponent.prototype.getLayoutPreset = /**
     * @private
     * @param {?=} name
     * @return {?}
     */
    function (name) {
        if (name === void 0) { name = 'default'; }
        return (this.layoutPresets[name] || this.layoutPresets['default']).map(function (col) { return new ObjectDataColumn(col); });
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.isMobile = /**
     * @return {?}
     */
    function () {
        return !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.data || this.data.getRows().length === 0;
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.rowMenuCache = {};
        this.loadLayoutPresets();
        this.data = new ShareDataTableAdapter(this.documentListService, this.thumbnailService, this.contentService, null, this.getDefaultSorting(), this.sortingMode);
        this.data.thumbnails = this.thumbnails;
        this.data.permissionsStyle = this.permissionsStyle;
        if (this._rowFilter) {
            this.data.setFilter(this._rowFilter);
        }
        if (this.imageResolver) {
            this.data.setImageResolver(this.imageResolver);
        }
        this.subscriptions.push(this.contextActionHandler.subscribe(function (val) { return _this.contextActionCallback(val); }));
        this.enforceSingleClickNavigationForMobile();
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.columnList) {
            this.subscriptions.push(this.columnList.columns.changes.subscribe(function () {
                _this.setTableSchema();
            }));
        }
        this.setTableSchema();
    };
    /**
     * @private
     * @return {?}
     */
    DocumentListComponent.prototype.setTableSchema = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var schema = [];
        if (this.hasCustomLayout) {
            schema = this.columnList.columns.map(function (c) { return (/** @type {?} */ (c)); });
        }
        if (!this.data) {
            this.data = new ShareDataTableAdapter(this.documentListService, this.thumbnailService, this.contentService, schema, this.getDefaultSorting(), this.sortingMode);
        }
        else if (schema && schema.length > 0) {
            this.data.setColumns(schema);
        }
        /** @type {?} */
        var columns = this.data.getColumns();
        if (!columns || columns.length === 0) {
            this.setupDefaultColumns(this._currentFolderId);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DocumentListComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.resetSelection();
        if (this.data) {
            this.data.thumbnails = this.thumbnails;
        }
        if (changes.sortingMode && !changes.sortingMode.firstChange && this.data) {
            this.data.sortingMode = changes.sortingMode.currentValue;
        }
        if (changes.sorting && !changes.sorting.firstChange && this.data) {
            /** @type {?} */
            var newValue = changes.sorting.currentValue;
            if (newValue && newValue.length > 0) {
                var _a = tslib_1.__read(newValue, 2), key = _a[0], direction = _a[1];
                this.data.setSorting(new DataSorting(key, direction));
            }
        }
        if (this.data) {
            if (changes.node && changes.node.currentValue) {
                /** @type {?} */
                var merge = this._pagination ? this._pagination.merge : false;
                this.data.loadPage(changes.node.currentValue, merge);
                this.onDataReady(changes.node.currentValue);
            }
            else if (changes.imageResolver) {
                this.data.setImageResolver(changes.imageResolver.currentValue);
            }
        }
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.reload = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.run(function () {
            _this.resetSelection();
            if (_this.node) {
                _this.data.loadPage(_this.node, _this._pagination.merge);
                _this.onDataReady(_this.node);
            }
            else {
                _this.loadFolder();
            }
        });
    };
    /**
     * @param {?} action
     * @return {?}
     */
    DocumentListComponent.prototype.contextActionCallback = /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        if (action) {
            this.executeContentAction(action.node, action.model);
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.getNodeActions = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        if (node && node.entry) {
            /** @type {?} */
            var target_1 = null;
            if (node.entry.isFile) {
                target_1 = 'document';
            }
            else if (node.entry.isFolder) {
                target_1 = 'folder';
            }
            if (target_1) {
                /** @type {?} */
                var actions = this.rowMenuCache[node.entry.id];
                if (actions) {
                    actions.forEach(function (action) {
                        _this.refreshAction(action, node);
                    });
                    return actions;
                }
                /** @type {?} */
                var actionsByTarget = this.actions
                    .filter(function (entry) {
                    /** @type {?} */
                    var isVisible = (typeof entry.visible === 'function')
                        ? entry.visible(node)
                        : entry.visible;
                    return isVisible && entry.target.toLowerCase() === target_1;
                })
                    .map(function (action) { return new ContentActionModel(action); });
                actionsByTarget.forEach(function (action) {
                    _this.refreshAction(action, node);
                });
                this.rowMenuCache[node.entry.id] = actionsByTarget;
                return actionsByTarget;
            }
        }
        return [];
    };
    /**
     * @private
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.refreshAction = /**
     * @private
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    function (action, node) {
        action.disabled = this.isActionDisabled(action, node);
        action.visible = this.isActionVisible(action, node);
    };
    /**
     * @private
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.isActionVisible = /**
     * @private
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    function (action, node) {
        if (typeof action.visible === 'function') {
            return action.visible(node);
        }
        return action.visible;
    };
    /**
     * @private
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.isActionDisabled = /**
     * @private
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    function (action, node) {
        if (typeof action.disabled === 'function') {
            return action.disabled(node);
        }
        if (action.permission && action.disableWithNoPermission && !this.contentService.hasAllowableOperations(node.entry, action.permission)) {
            return true;
        }
        return action.disabled;
    };
    /**
     * @param {?=} e
     * @return {?}
     */
    DocumentListComponent.prototype.onShowContextMenu = /**
     * @param {?=} e
     * @return {?}
     */
    function (e) {
        if (e && this.contextMenuActions) {
            e.preventDefault();
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.navigateTo = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (typeof node === 'string') {
            this.resetNewFolderPagination();
            this._currentFolderId = node;
            this.folderChange.emit(new NodeEntryEvent((/** @type {?} */ ({ id: node }))));
            this.reload();
            return true;
        }
        else {
            if (this.canNavigateFolder(node)) {
                this.resetNewFolderPagination();
                this._currentFolderId = this.getNodeFolderDestinationId(node);
                this.folderChange.emit(new NodeEntryEvent((/** @type {?} */ ({ id: this._currentFolderId }))));
                this.reload();
                return true;
            }
        }
        return false;
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.getNodeFolderDestinationId = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return this.isLinkFolder(node) ? node.properties['cm:destination'] : node.id;
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.isLinkFolder = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return node.nodeType === 'app:folderlink' && node.properties &&
            node.properties['cm:destination'];
    };
    /**
     * @param {?} nodeId
     * @return {?}
     */
    DocumentListComponent.prototype.updateCustomSourceData = /**
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        this._currentFolderId = nodeId;
    };
    /**
     * Invoked when executing content action for a document or folder.
     * @param node Node to be the context of the execution.
     * @param action Action to be executed against the context.
     */
    /**
     * Invoked when executing content action for a document or folder.
     * @param {?} node Node to be the context of the execution.
     * @param {?} action Action to be executed against the context.
     * @return {?}
     */
    DocumentListComponent.prototype.executeContentAction = /**
     * Invoked when executing content action for a document or folder.
     * @param {?} node Node to be the context of the execution.
     * @param {?} action Action to be executed against the context.
     * @return {?}
     */
    function (node, action) {
        if (node && node.entry && action) {
            /** @type {?} */
            var handlerSub = void 0;
            if (typeof action.handler === 'function') {
                handlerSub = action.handler(node, this, action.permission);
            }
            else {
                handlerSub = of(true);
            }
            if (typeof action.execute === 'function' && handlerSub) {
                handlerSub.subscribe(function () {
                    action.execute(node);
                });
            }
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    DocumentListComponent.prototype.setLoadingState = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (value) {
            clearTimeout(this.loadingTimeout);
            this.loadingTimeout = setTimeout(function () {
                _this.loading = true;
            }, 1000);
        }
        else {
            clearTimeout(this.loadingTimeout);
            this.loading = false;
        }
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.loadFolder = /**
     * @return {?}
     */
    function () {
        if (!this._pagination.merge) {
            this.setLoadingState(true);
        }
        if (!this.hasCustomLayout) {
            this.setupDefaultColumns(this._currentFolderId);
        }
        this.loadFolderByNodeId(this._currentFolderId);
    };
    /**
     * @param {?} nodeId
     * @return {?}
     */
    DocumentListComponent.prototype.loadFolderByNodeId = /**
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        var _this = this;
        if (this.customResourcesService.isCustomSource(nodeId)) {
            this.updateCustomSourceData(nodeId);
            this.customResourcesService.loadFolderByNodeId(nodeId, this._pagination, this.includeFields)
                .subscribe(function (nodePaging) {
                _this.onPageLoaded(nodePaging);
            }, function (err) {
                _this.error.emit(err);
            });
        }
        else {
            this.documentListService.getFolder(null, {
                maxItems: this._pagination.maxItems,
                skipCount: this._pagination.skipCount,
                rootFolderId: nodeId,
                where: this.where
            }, this.includeFields)
                .subscribe(function (nodePaging) {
                _this.getSourceNodeWithPath(nodeId).subscribe(function (nodeEntry) {
                    _this.onPageLoaded(nodePaging);
                });
            }, function (err) {
                _this.handleError(err);
            });
        }
    };
    /**
     * @param {?} nodeId
     * @return {?}
     */
    DocumentListComponent.prototype.getSourceNodeWithPath = /**
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        var _this = this;
        /** @type {?} */
        var getSourceObservable = this.documentListService.getFolderNode(nodeId, this.includeFields);
        getSourceObservable.subscribe(function (nodeEntry) {
            _this.folderNode = nodeEntry.entry;
            _this.$folderNode.next(_this.folderNode);
        });
        return getSourceObservable;
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.resetSelection = /**
     * @return {?}
     */
    function () {
        this.dataTable.resetSelection();
        this.selection = [];
        this.noPermission = false;
    };
    /**
     * @param {?} nodePaging
     * @return {?}
     */
    DocumentListComponent.prototype.onPageLoaded = /**
     * @param {?} nodePaging
     * @return {?}
     */
    function (nodePaging) {
        if (nodePaging) {
            this.data.loadPage(nodePaging, this._pagination.merge);
            this.setLoadingState(false);
            this.onDataReady(nodePaging);
        }
    };
    /**
     * Creates a set of predefined columns.
     */
    /**
     * Creates a set of predefined columns.
     * @param {?=} preset
     * @return {?}
     */
    DocumentListComponent.prototype.setupDefaultColumns = /**
     * Creates a set of predefined columns.
     * @param {?=} preset
     * @return {?}
     */
    function (preset) {
        if (preset === void 0) { preset = 'default'; }
        if (this.data) {
            /** @type {?} */
            var columns = this.getLayoutPreset(preset);
            this.data.setColumns(columns);
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.onPreviewFile = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node) {
            this.preview.emit(new NodeEntityEvent(node));
        }
    };
    /**
     * @param {?} nodeEntry
     * @return {?}
     */
    DocumentListComponent.prototype.onNodeClick = /**
     * @param {?} nodeEntry
     * @return {?}
     */
    function (nodeEntry) {
        /** @type {?} */
        var domEvent = new CustomEvent('node-click', {
            detail: {
                sender: this,
                node: nodeEntry
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
        /** @type {?} */
        var event = new NodeEntityEvent(nodeEntry);
        this.nodeClick.emit(event);
        if (!event.defaultPrevented) {
            if (this.navigate && this.navigationMode === DocumentListComponent.SINGLE_CLICK_NAVIGATION) {
                this.executeActionClick(nodeEntry);
            }
        }
    };
    /**
     * @param {?} nodeEntry
     * @return {?}
     */
    DocumentListComponent.prototype.onNodeDblClick = /**
     * @param {?} nodeEntry
     * @return {?}
     */
    function (nodeEntry) {
        /** @type {?} */
        var domEvent = new CustomEvent('node-dblclick', {
            detail: {
                sender: this,
                node: nodeEntry
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
        /** @type {?} */
        var event = new NodeEntityEvent(nodeEntry);
        this.nodeDblClick.emit(event);
        if (!event.defaultPrevented) {
            if (this.navigate && this.navigationMode === DocumentListComponent.DOUBLE_CLICK_NAVIGATION) {
                this.executeActionClick(nodeEntry);
            }
        }
    };
    /**
     * @param {?} nodeEntry
     * @return {?}
     */
    DocumentListComponent.prototype.executeActionClick = /**
     * @param {?} nodeEntry
     * @return {?}
     */
    function (nodeEntry) {
        var _this = this;
        if (nodeEntry && nodeEntry.entry) {
            if (nodeEntry.entry.isFile) {
                this.onPreviewFile(nodeEntry);
            }
            if (nodeEntry.entry.isFolder) {
                this.navigateTo(nodeEntry.entry);
            }
            if (nodeEntry.entry['guid']) {
                /** @type {?} */
                var options = {
                    include: this.includeFields
                };
                this.alfrescoApiService.nodesApi.getNode(nodeEntry.entry['guid'], options)
                    .then(function (node) {
                    _this.navigateTo(node.entry);
                });
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DocumentListComponent.prototype.onNodeSelect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.selection = event.selection.map(function (entry) { return entry.node; });
        /** @type {?} */
        var domEvent = new CustomEvent('node-select', {
            detail: {
                node: event.row.node,
                selection: this.selection
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DocumentListComponent.prototype.onNodeUnselect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.selection = event.selection.map(function (entry) { return entry.node; });
        /** @type {?} */
        var domEvent = new CustomEvent('node-unselect', {
            detail: {
                node: event.row.node,
                selection: this.selection
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DocumentListComponent.prototype.onShowRowContextMenu = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.contextMenuActions) {
            /** @type {?} */
            var args = event.value;
            /** @type {?} */
            var node = ((/** @type {?} */ (args.row))).node;
            if (node) {
                args.actions = this.getContextActions(node) || [];
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DocumentListComponent.prototype.onShowRowActionsMenu = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.contentActions) {
            /** @type {?} */
            var args = event.value;
            /** @type {?} */
            var node = ((/** @type {?} */ (args.row))).node;
            if (node) {
                args.actions = this.getNodeActions(node) || [];
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DocumentListComponent.prototype.onExecuteRowAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.contentActions) {
            /** @type {?} */
            var args = event.value;
            /** @type {?} */
            var node = ((/** @type {?} */ (args.row))).node;
            /** @type {?} */
            var action = ((/** @type {?} */ (args.action)));
            this.executeContentAction(node, action);
        }
    };
    /**
     * @private
     * @return {?}
     */
    DocumentListComponent.prototype.enforceSingleClickNavigationForMobile = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isMobile()) {
            this.navigationMode = DocumentListComponent.SINGLE_CLICK_NAVIGATION;
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.canNavigateFolder = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var canNavigateFolder = false;
        if (node && node.isFolder) {
            canNavigateFolder = true;
        }
        return canNavigateFolder;
    };
    /**
     * @private
     * @return {?}
     */
    DocumentListComponent.prototype.loadLayoutPresets = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var externalSettings = this.appConfig.get('document-list.presets', null);
        if (externalSettings) {
            this.layoutPresets = Object.assign({}, presetsDefaultModel, externalSettings);
        }
        else {
            this.layoutPresets = presetsDefaultModel;
        }
    };
    /**
     * @private
     * @param {?} nodePaging
     * @return {?}
     */
    DocumentListComponent.prototype.onDataReady = /**
     * @private
     * @param {?} nodePaging
     * @return {?}
     */
    function (nodePaging) {
        this.ready.emit(nodePaging);
        this.pagination.next(nodePaging.list.pagination);
    };
    /**
     * @param {?} requestPaginationModel
     * @return {?}
     */
    DocumentListComponent.prototype.updatePagination = /**
     * @param {?} requestPaginationModel
     * @return {?}
     */
    function (requestPaginationModel) {
        this._pagination.maxItems = requestPaginationModel.maxItems;
        this._pagination.merge = requestPaginationModel.merge;
        this._pagination.skipCount = requestPaginationModel.skipCount;
        this.reload();
    };
    /**
     * @private
     * @return {?}
     */
    DocumentListComponent.prototype.resetNewFolderPagination = /**
     * @private
     * @return {?}
     */
    function () {
        this._pagination.skipCount = 0;
        this._pagination.maxItems = this.maxItems;
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
        this.subscriptions = [];
    };
    /**
     * @private
     * @param {?} err
     * @return {?}
     */
    DocumentListComponent.prototype.handleError = /**
     * @private
     * @param {?} err
     * @return {?}
     */
    function (err) {
        if (err.message) {
            try {
                if (JSON.parse(err.message).error.statusCode === 403) {
                    this.setLoadingState(false);
                    this.noPermission = true;
                }
            }
            catch (error) {
            }
        }
        this.error.emit(err);
    };
    DocumentListComponent.SINGLE_CLICK_NAVIGATION = 'click';
    DocumentListComponent.DOUBLE_CLICK_NAVIGATION = 'dblclick';
    DocumentListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-document-list',
                    template: "<adf-datatable\n    #dataTable\n    [selectionMode]=\"selectionMode\"\n    [data]=\"data\"\n    [actions]=\"contentActions\"\n    [actionsPosition]=\"contentActionsPosition\"\n    [multiselect]=\"multiselect\"\n    [allowDropFiles]=\"allowDropFiles\"\n    [contextMenu]=\"contextMenuActions\"\n    [rowStyle]=\"rowStyle\"\n    [rowStyleClass]=\"rowStyleClass\"\n    [loading]=\"loading\"\n    [display]=\"display\"\n    [noPermission]=\"noPermission\"\n    [showHeader]=\"!isEmpty() && showHeader\"\n    [rowMenuCacheEnabled]=\"false\"\n    (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n    (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n    (executeRowAction)=\"onExecuteRowAction($event)\"\n    (rowClick)=\"onNodeClick($event.value?.node)\"\n    (rowDblClick)=\"onNodeDblClick($event.value?.node)\"\n    (row-select)=\"onNodeSelect($event.detail)\"\n    (row-unselect)=\"onNodeUnselect($event.detail)\"\n    [class.adf-datatable-gallery-thumbnails]=\"data.thumbnails\">\n\n    <adf-no-content-template>\n        <ng-template>\n            <adf-empty-list *ngIf=\"!customNoContentTemplate\">\n                <div class=\"adf-empty-list_template adf-empty-folder\">\n                    <div class=\"adf-empty-folder-this-space-is-empty\">{{'ADF-DOCUMENT-LIST.EMPTY.HEADER' | translate}}</div>\n                    <div fxHide.lt-md=\"true\" class=\"adf-empty-folder-drag-drop\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate }}</div>\n                    <div fxHide.lt-md=\"true\" class=\"adf-empty-folder-any-files-here-to-add\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE' | translate }}</div>\n                    <img class=\"adf-empty-folder-image\" [src]=\"emptyFolderImageUrl\">\n                </div>\n                <!-- <div adf-empty-list-header class=\"adf-empty-list-header\"> {{'ADF-DOCUMENT-LIST.EMPTY.HEADER' | translate}} </div> -->\n            </adf-empty-list>\n            <ng-content select=\"adf-custom-empty-content-template, empty-folder-content\"></ng-content>\n        </ng-template>\n    </adf-no-content-template>\n\n    <adf-no-permission-template>\n        <ng-template>\n            <div class=\"adf-no-permission__template\" *ngIf=\"!customNoPermissionsTemplate\">\n                <mat-icon>ic_error</mat-icon>\n                <p class=\"adf-no-permission__template--text\">{{ 'ADF-DOCUMENT-LIST.NO_PERMISSION' | translate }}</p>\n            </div>\n            <ng-content select=\"adf-custom-no-permission-template, no-permission-content\"></ng-content>\n        </ng-template>\n    </adf-no-permission-template>\n\n    <adf-loading-content-template>\n        <ng-template>\n            <div class=\"adf-document-list-loading-container\" *ngIf=\"!customLoadingContent\">\n                <mat-progress-spinner\n                    id=\"adf-document-list-loading\"\n                    class=\"adf-document-list-loading-margin\"\n                    [color]=\"'primary'\"\n                    [mode]=\"'indeterminate'\">\n                </mat-progress-spinner>\n            </div>\n            <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n        </ng-template>\n    </adf-loading-content-template>\n\n</adf-datatable>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    DocumentListComponent.ctorParameters = function () { return [
        { type: DocumentListService },
        { type: NgZone },
        { type: ElementRef },
        { type: AppConfigService },
        { type: UserPreferencesService },
        { type: CustomResourcesService },
        { type: ContentService },
        { type: ThumbnailService },
        { type: AlfrescoApiService }
    ]; };
    DocumentListComponent.propDecorators = {
        columnList: [{ type: ContentChild, args: [DataColumnListComponent,] }],
        customLoadingContent: [{ type: ContentChild, args: [CustomLoadingContentTemplateDirective,] }],
        customNoPermissionsTemplate: [{ type: ContentChild, args: [CustomNoPermissionTemplateDirective,] }],
        customNoContentTemplate: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
        includeFields: [{ type: Input }],
        where: [{ type: Input }],
        display: [{ type: Input }],
        permissionsStyle: [{ type: Input }],
        locationFormat: [{ type: Input }],
        navigate: [{ type: Input }],
        showHeader: [{ type: Input }],
        navigationMode: [{ type: Input }],
        thumbnails: [{ type: Input }],
        selectionMode: [{ type: Input }],
        multiselect: [{ type: Input }],
        contentActions: [{ type: Input }],
        contentActionsPosition: [{ type: Input }],
        contextMenuActions: [{ type: Input }],
        emptyFolderImageUrl: [{ type: Input }],
        allowDropFiles: [{ type: Input }],
        sorting: [{ type: Input }],
        sortingMode: [{ type: Input }],
        rowStyle: [{ type: Input }],
        rowStyleClass: [{ type: Input }],
        loading: [{ type: Input }],
        _rowFilter: [{ type: Input }],
        rowFilter: [{ type: Input }],
        imageResolver: [{ type: Input }],
        currentFolderId: [{ type: Input }],
        node: [{ type: Input }],
        maxItems: [{ type: Input }],
        nodeClick: [{ type: Output }],
        nodeDblClick: [{ type: Output }],
        folderChange: [{ type: Output }],
        preview: [{ type: Output }],
        ready: [{ type: Output }],
        error: [{ type: Output }],
        dataTable: [{ type: ViewChild, args: ['dataTable',] }],
        onShowContextMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }]
    };
    return DocumentListComponent;
}());
export { DocumentListComponent };
if (false) {
    /** @type {?} */
    DocumentListComponent.SINGLE_CLICK_NAVIGATION;
    /** @type {?} */
    DocumentListComponent.DOUBLE_CLICK_NAVIGATION;
    /** @type {?} */
    DocumentListComponent.prototype.DEFAULT_PAGINATION;
    /** @type {?} */
    DocumentListComponent.prototype.columnList;
    /** @type {?} */
    DocumentListComponent.prototype.customLoadingContent;
    /** @type {?} */
    DocumentListComponent.prototype.customNoPermissionsTemplate;
    /** @type {?} */
    DocumentListComponent.prototype.customNoContentTemplate;
    /**
     * Include additional information about the node in the server request. For example: association, isLink, isLocked and others.
     * @type {?}
     */
    DocumentListComponent.prototype.includeFields;
    /**
     * Filters the Node list using the *where* condition of the REST API
     * (for example, isFolder=true). See the REST API documentation for more information.
     * @type {?}
     */
    DocumentListComponent.prototype.where;
    /**
     * Change the display mode of the table. Can be "list" or "gallery".
     * @type {?}
     */
    DocumentListComponent.prototype.display;
    /**
     * Define a set of CSS styles to apply depending on the permission
     * of the user on that node. See the Permission Style model
     * page for further details and examples.
     * @type {?}
     */
    DocumentListComponent.prototype.permissionsStyle;
    /**
     * The default route for all the location-based columns (if declared).
     * @type {?}
     */
    DocumentListComponent.prototype.locationFormat;
    /**
     * Toggles navigation to folder content or file preview
     * @type {?}
     */
    DocumentListComponent.prototype.navigate;
    /**
     * Toggles the header
     * @type {?}
     */
    DocumentListComponent.prototype.showHeader;
    /**
     * User interaction for folder navigation or file preview.
     * Valid values are "click" and "dblclick". Default value: "dblclick"
     * @type {?}
     */
    DocumentListComponent.prototype.navigationMode;
    /**
     * Show document thumbnails rather than icons
     * @type {?}
     */
    DocumentListComponent.prototype.thumbnails;
    /**
     * Row selection mode. Can be null, `single` or `multiple`. For `multiple` mode,
     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for multiple rows.
     * @type {?}
     */
    DocumentListComponent.prototype.selectionMode;
    /**
     * Toggles multiselect mode
     * @type {?}
     */
    DocumentListComponent.prototype.multiselect;
    /**
     * Toggles content actions for each row
     * @type {?}
     */
    DocumentListComponent.prototype.contentActions;
    /**
     * Position of the content actions dropdown menu. Can be set to "left" or "right".
     * @type {?}
     */
    DocumentListComponent.prototype.contentActionsPosition;
    /**
     * Toggles context menus for each row
     * @type {?}
     */
    DocumentListComponent.prototype.contextMenuActions;
    /**
     * Custom image for empty folder. Default value: './assets/images/empty_doc_lib.svg'
     * @type {?}
     */
    DocumentListComponent.prototype.emptyFolderImageUrl;
    /**
     * Toggle file drop support for rows (see Upload Directive for further details)
     * @type {?}
     */
    DocumentListComponent.prototype.allowDropFiles;
    /**
     * Defines default sorting. The format is an array of 2 strings `[key, direction]`
     * i.e. `['name', 'desc']` or `['name', 'asc']`. Set this value only if you want to
     * override the default sorting detected by the component based on columns.
     * @type {?}
     */
    DocumentListComponent.prototype.sorting;
    /**
     * Defines sorting mode. Can be either `client` (items in the list
     * are sorted client-side) or `server` (the ordering supplied by the
     * server is used without further client-side sorting).
     * Note that the `server` option *does not* request the server to sort the data
     * before delivering it.
     * @type {?}
     */
    DocumentListComponent.prototype.sortingMode;
    /**
     * The inline style to apply to every row. See
     * the Angular NgStyle
     * docs for more details and usage examples.
     * @type {?}
     */
    DocumentListComponent.prototype.rowStyle;
    /**
     * The CSS class to apply to every row
     * @type {?}
     */
    DocumentListComponent.prototype.rowStyleClass;
    /**
     * Toggles the loading state and animated spinners for the component. Used in
     * combination with `navigate=false` to perform custom navigation and loading
     * state indication.
     * @type {?}
     */
    DocumentListComponent.prototype.loading;
    /**
     * @hidden
     * @type {?}
     */
    DocumentListComponent.prototype._rowFilter;
    /**
     * Custom function to choose image file paths to show. See the
     * [Image Resolver Model](image-resolver.model.md) page for
     * more information.
     * @type {?}
     */
    DocumentListComponent.prototype.imageResolver;
    /** @type {?} */
    DocumentListComponent.prototype._currentFolderId;
    /**
     * The Document list will show all the nodes contained in the NodePaging entity
     * @type {?}
     */
    DocumentListComponent.prototype.node;
    /**
     * Default value is stored in the user preference settings. Use this only if you are not using pagination.
     * @type {?}
     */
    DocumentListComponent.prototype.maxItems;
    /**
     * Emitted when the user clicks a list node
     * @type {?}
     */
    DocumentListComponent.prototype.nodeClick;
    /**
     * Emitted when the user double-clicks a list node
     * @type {?}
     */
    DocumentListComponent.prototype.nodeDblClick;
    /**
     * Emitted when the current display folder changes
     * @type {?}
     */
    DocumentListComponent.prototype.folderChange;
    /**
     * Emitted when the user acts upon files with either single or double click
     * (depends on `navigation-mode`). Useful for integration with the
     * Viewer component.
     * @type {?}
     */
    DocumentListComponent.prototype.preview;
    /**
     * Emitted when the Document List has loaded all items and is ready for use
     * @type {?}
     */
    DocumentListComponent.prototype.ready;
    /**
     * Emitted when the API fails to get the Document List data
     * @type {?}
     */
    DocumentListComponent.prototype.error;
    /** @type {?} */
    DocumentListComponent.prototype.dataTable;
    /** @type {?} */
    DocumentListComponent.prototype.actions;
    /** @type {?} */
    DocumentListComponent.prototype.contextActionHandler;
    /** @type {?} */
    DocumentListComponent.prototype.data;
    /** @type {?} */
    DocumentListComponent.prototype.noPermission;
    /** @type {?} */
    DocumentListComponent.prototype.selection;
    /** @type {?} */
    DocumentListComponent.prototype.$folderNode;
    /** @type {?} */
    DocumentListComponent.prototype.folderNode;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype._pagination;
    /** @type {?} */
    DocumentListComponent.prototype.pagination;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.layoutPresets;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.rowMenuCache;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.loadingTimeout;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.documentListService;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.appConfig;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.userPreferencesService;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.customResourcesService;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.thumbnailService;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,
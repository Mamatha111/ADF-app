/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, AuthenticationService, ContentService, LogService, ThumbnailService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
var DocumentListService = /** @class */ (function () {
    function DocumentListService(authService, contentService, apiService, logService, thumbnailService) {
        this.contentService = contentService;
        this.apiService = apiService;
        this.logService = logService;
        this.thumbnailService = thumbnailService;
    }
    /**
     * Deletes a node.
     * @param nodeId ID of the node to delete
     * @returns Empty response when the operation is complete
     */
    /**
     * Deletes a node.
     * @param {?} nodeId ID of the node to delete
     * @return {?} Empty response when the operation is complete
     */
    DocumentListService.prototype.deleteNode = /**
     * Deletes a node.
     * @param {?} nodeId ID of the node to delete
     * @return {?} Empty response when the operation is complete
     */
    function (nodeId) {
        return from(this.apiService.getInstance().nodes.deleteNode(nodeId));
    };
    /**
     * Copy a node to destination node
     *
     * @param nodeId The id of the node to be copied
     * @param targetParentId The id of the folder where the node will be copied
     * @returns NodeEntry for the copied node
     */
    /**
     * Copy a node to destination node
     *
     * @param {?} nodeId The id of the node to be copied
     * @param {?} targetParentId The id of the folder where the node will be copied
     * @return {?} NodeEntry for the copied node
     */
    DocumentListService.prototype.copyNode = /**
     * Copy a node to destination node
     *
     * @param {?} nodeId The id of the node to be copied
     * @param {?} targetParentId The id of the folder where the node will be copied
     * @return {?} NodeEntry for the copied node
     */
    function (nodeId, targetParentId) {
        var _this = this;
        return from(this.apiService.getInstance().nodes.copyNode(nodeId, { targetParentId: targetParentId })).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Moves a node to destination node.
     *
     * @param nodeId The id of the node to be moved
     * @param targetParentId The id of the folder where the node will be moved
     * @returns NodeEntry for the moved node
     */
    /**
     * Moves a node to destination node.
     *
     * @param {?} nodeId The id of the node to be moved
     * @param {?} targetParentId The id of the folder where the node will be moved
     * @return {?} NodeEntry for the moved node
     */
    DocumentListService.prototype.moveNode = /**
     * Moves a node to destination node.
     *
     * @param {?} nodeId The id of the node to be moved
     * @param {?} targetParentId The id of the folder where the node will be moved
     * @return {?} NodeEntry for the moved node
     */
    function (nodeId, targetParentId) {
        var _this = this;
        return from(this.apiService.getInstance().nodes.moveNode(nodeId, { targetParentId: targetParentId })).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets the folder node with the specified relative name path below the root node.
     * @param folder Path to folder.
     * @param opts Options.
     * @param includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @returns Details of the folder
     */
    /**
     * Gets the folder node with the specified relative name path below the root node.
     * @param {?} folder Path to folder.
     * @param {?=} opts Options.
     * @param {?=} includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @return {?} Details of the folder
     */
    DocumentListService.prototype.getFolder = /**
     * Gets the folder node with the specified relative name path below the root node.
     * @param {?} folder Path to folder.
     * @param {?=} opts Options.
     * @param {?=} includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @return {?} Details of the folder
     */
    function (folder, opts, includeFields) {
        var _this = this;
        if (includeFields === void 0) { includeFields = []; }
        /** @type {?} */
        var rootNodeId = DocumentListService.ROOT_ID;
        if (opts && opts.rootFolderId) {
            rootNodeId = opts.rootFolderId;
        }
        /** @type {?} */
        var includeFieldsRequest = tslib_1.__spread(['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames'], includeFields).filter(function (element, index, array) { return index === array.indexOf(element); });
        /** @type {?} */
        var params = {
            includeSource: true,
            include: includeFieldsRequest
        };
        if (folder) {
            params.relativePath = folder;
        }
        if (opts) {
            if (opts.maxItems) {
                params.maxItems = opts.maxItems;
            }
            if (opts.skipCount) {
                params.skipCount = opts.skipCount;
            }
            if (opts.where) {
                params.where = opts.where;
            }
        }
        return from(this.apiService.getInstance().nodes.getNodeChildren(rootNodeId, params)).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets a node via its node ID.
     * @param nodeId ID of the target node
     * @param includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @returns Details of the folder
     */
    /**
     * Gets a node via its node ID.
     * @param {?} nodeId ID of the target node
     * @param {?=} includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @return {?} Details of the folder
     */
    DocumentListService.prototype.getNode = /**
     * Gets a node via its node ID.
     * @param {?} nodeId ID of the target node
     * @param {?=} includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @return {?} Details of the folder
     */
    function (nodeId, includeFields) {
        if (includeFields === void 0) { includeFields = []; }
        /** @type {?} */
        var includeFieldsRequest = tslib_1.__spread(['path', 'properties', 'allowableOperations', 'permissions'], includeFields).filter(function (element, index, array) { return index === array.indexOf(element); });
        /** @type {?} */
        var opts = {
            includeSource: true,
            include: includeFieldsRequest
        };
        return this.contentService.getNode(nodeId, opts);
    };
    /**
     * Gets a folder node via its node ID.
     * @param nodeId ID of the folder node
     * @param includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @returns Details of the folder
     */
    /**
     * Gets a folder node via its node ID.
     * @param {?} nodeId ID of the folder node
     * @param {?=} includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @return {?} Details of the folder
     */
    DocumentListService.prototype.getFolderNode = /**
     * Gets a folder node via its node ID.
     * @param {?} nodeId ID of the folder node
     * @param {?=} includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @return {?} Details of the folder
     */
    function (nodeId, includeFields) {
        var _this = this;
        if (includeFields === void 0) { includeFields = []; }
        /** @type {?} */
        var includeFieldsRequest = tslib_1.__spread(['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames'], includeFields).filter(function (element, index, array) { return index === array.indexOf(element); });
        /** @type {?} */
        var opts = {
            includeSource: true,
            include: includeFieldsRequest
        };
        return from(this.apiService.getInstance().nodes.getNode(nodeId, opts)).pipe(catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Get thumbnail URL for the given document node.
     * @param node Node to get URL for.
     * @returns Thumbnail URL string
     */
    /**
     * Get thumbnail URL for the given document node.
     * @param {?} node Node to get URL for.
     * @return {?} Thumbnail URL string
     */
    DocumentListService.prototype.getDocumentThumbnailUrl = /**
     * Get thumbnail URL for the given document node.
     * @param {?} node Node to get URL for.
     * @return {?} Thumbnail URL string
     */
    function (node) {
        return this.thumbnailService.getDocumentThumbnailUrl(node);
    };
    /**
     * Gets the icon that represents a MIME type.
     * @param mimeType MIME type to get the icon for
     * @returns Path to the icon file
     */
    /**
     * Gets the icon that represents a MIME type.
     * @param {?} mimeType MIME type to get the icon for
     * @return {?} Path to the icon file
     */
    DocumentListService.prototype.getMimeTypeIcon = /**
     * Gets the icon that represents a MIME type.
     * @param {?} mimeType MIME type to get the icon for
     * @return {?} Path to the icon file
     */
    function (mimeType) {
        return this.thumbnailService.getMimeTypeIcon(mimeType);
    };
    /**
     * Gets a default icon for MIME types with no specific icon.
     * @returns Path to the icon file
     */
    /**
     * Gets a default icon for MIME types with no specific icon.
     * @return {?} Path to the icon file
     */
    DocumentListService.prototype.getDefaultMimeTypeIcon = /**
     * Gets a default icon for MIME types with no specific icon.
     * @return {?} Path to the icon file
     */
    function () {
        return this.thumbnailService.getDefaultMimeTypeIcon();
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    DocumentListService.prototype.handleError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    };
    DocumentListService.ROOT_ID = '-root-';
    DocumentListService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DocumentListService.ctorParameters = function () { return [
        { type: AuthenticationService },
        { type: ContentService },
        { type: AlfrescoApiService },
        { type: LogService },
        { type: ThumbnailService }
    ]; };
    /** @nocollapse */ DocumentListService.ngInjectableDef = i0.defineInjectable({ factory: function DocumentListService_Factory() { return new DocumentListService(i0.inject(i1.AuthenticationService), i0.inject(i1.ContentService), i0.inject(i1.AlfrescoApiService), i0.inject(i1.LogService), i0.inject(i1.ThumbnailService)); }, token: DocumentListService, providedIn: "root" });
    return DocumentListService;
}());
export { DocumentListService };
if (false) {
    /** @type {?} */
    DocumentListService.ROOT_ID;
    /**
     * @type {?}
     * @private
     */
    DocumentListService.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    DocumentListService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    DocumentListService.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    DocumentListService.prototype.thumbnailService;
}
//# sourceMappingURL=data:application/json;base64,
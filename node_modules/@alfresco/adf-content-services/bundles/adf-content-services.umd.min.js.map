{"version":3,"sources":["ng://@alfresco/adf-content-services/material.module.ts","node_modules/tslib/tslib.es6.js","ng://@alfresco/adf-content-services/document-list/services/document-list.service.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-selector.component.ts","ng://@alfresco/adf-content-services/dialogs/node-lock.dialog.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-dialog.service.ts","ng://@alfresco/adf-content-services/directives/node-lock.directive.ts","ng://@alfresco/adf-content-services/directives/content-directive.module.ts","ng://@alfresco/adf-content-services/social/services/rating.service.ts","ng://@alfresco/adf-content-services/social/rating.component.ts","ng://@alfresco/adf-content-services/social/like.component.ts","ng://@alfresco/adf-content-services/social/social.module.ts","ng://@alfresco/adf-content-services/tag/services/tag.service.ts","ng://@alfresco/adf-content-services/tag/tag-actions.component.ts","ng://@alfresco/adf-content-services/tag/tag-list.component.ts","ng://@alfresco/adf-content-services/tag/tag-node-list.component.ts","ng://@alfresco/adf-content-services/tag/tag.module.ts","ng://@alfresco/adf-content-services/webscript/webscript.component.ts","ng://@alfresco/adf-content-services/webscript/webscript.module.ts","ng://@alfresco/adf-content-services/document-list/data/share-data-row.model.ts","ng://@alfresco/adf-content-services/document-list/data/share-datatable-adapter.ts","ng://@alfresco/adf-content-services/document-list/models/preset.model.ts","ng://@alfresco/adf-content-services/document-list/models/content-action.model.ts","ng://@alfresco/adf-content-services/document-list/components/node.event.ts","ng://@alfresco/adf-content-services/document-list/services/custom-resources.service.ts","ng://@alfresco/adf-content-services/document-list/components/document-list.component.ts","ng://@alfresco/adf-content-services/document-list/components/content-column/content-column-list.component.ts","ng://@alfresco/adf-content-services/document-list/components/content-column/content-column.component.ts","ng://@alfresco/adf-content-services/document-list/models/permissions.model.ts","ng://@alfresco/adf-content-services/document-list/services/node-actions.service.ts","ng://@alfresco/adf-content-services/document-list/services/document-actions.service.ts","ng://@alfresco/adf-content-services/document-list/services/folder-actions.service.ts","ng://@alfresco/adf-content-services/document-list/components/content-action/content-action-list.component.ts","ng://@alfresco/adf-content-services/document-list/components/content-action/content-action.component.ts","ng://@alfresco/adf-content-services/document-list/components/library-name-column/library-name-column.component.ts","ng://@alfresco/adf-content-services/document-list/components/library-role-column/library-role-column.component.ts","ng://@alfresco/adf-content-services/document-list/components/library-status-column/library-status-column.component.ts","ng://@alfresco/adf-content-services/document-list/components/name-column/name-column.component.ts","ng://@alfresco/adf-content-services/document-list/components/trashcan-name-column/trashcan-name-column.component.ts","ng://@alfresco/adf-content-services/document-list/models/document-library.model.ts","ng://@alfresco/adf-content-services/document-list/models/permissions-style.model.ts","ng://@alfresco/adf-content-services/upload/components/file-uploading-dialog.component.ts","ng://@alfresco/adf-content-services/upload/components/file-uploading-list-row.component.ts","ng://@alfresco/adf-content-services/upload/components/file-uploading-list.component.ts","ng://@alfresco/adf-content-services/upload/components/upload-files.event.ts","ng://@alfresco/adf-content-services/upload/components/base-upload/upload-base.ts","ng://@alfresco/adf-content-services/upload/components/upload-button.component.ts","ng://@alfresco/adf-content-services/upload/components/upload-version-button.component.ts","ng://@alfresco/adf-content-services/upload/components/upload-drag-area.component.ts","ng://@alfresco/adf-content-services/upload/pipes/file-upload-error.pipe.ts","ng://@alfresco/adf-content-services/upload/directives/file-draggable.directive.ts","ng://@alfresco/adf-content-services/upload/upload.module.ts","ng://@alfresco/adf-content-services/document-list/document-list.module.ts","ng://@alfresco/adf-content-services/search/search-query-builder.service.ts","ng://@alfresco/adf-content-services/search/components/search.component.ts","ng://@alfresco/adf-content-services/search/components/empty-search-result.component.ts","ng://@alfresco/adf-content-services/search/components/search-control.component.ts","ng://@alfresco/adf-content-services/search/components/search-trigger.directive.ts","ng://@alfresco/adf-content-services/search/components/search-filter/models/search-filter-list.model.ts","ng://@alfresco/adf-content-services/search/components/search-filter/search-filter.component.ts","ng://@alfresco/adf-content-services/search/components/search-text/search-text.component.ts","ng://@alfresco/adf-content-services/search/components/search-radio/search-radio.component.ts","ng://@alfresco/adf-content-services/search/components/search-slider/search-slider.component.ts","ng://@alfresco/adf-content-services/search/forms/live-error-state-matcher.ts","ng://@alfresco/adf-content-services/search/components/search-number-range/search-number-range.component.ts","ng://@alfresco/adf-content-services/search/components/search-check-list/search-check-list.component.ts","ng://@alfresco/adf-content-services/search/components/search-date-range/search-date-range.component.ts","ng://@alfresco/adf-content-services/search/components/search-filter/search-filter.service.ts","ng://@alfresco/adf-content-services/search/components/search-chip-list/search-chip-list.component.ts","ng://@alfresco/adf-content-services/search/components/search-sorting-picker/search-sorting-picker.component.ts","ng://@alfresco/adf-content-services/search/components/search-widget-container/search-widget-container.component.ts","ng://@alfresco/adf-content-services/search/search.module.ts","ng://@alfresco/adf-content-services/site-dropdown/sites-dropdown.component.ts","ng://@alfresco/adf-content-services/site-dropdown/sites-dropdown.module.ts","ng://@alfresco/adf-content-services/breadcrumb/breadcrumb.component.ts","ng://@alfresco/adf-content-services/breadcrumb/dropdown-breadcrumb.component.ts","ng://@alfresco/adf-content-services/breadcrumb/breadcrumb.module.ts","ng://@alfresco/adf-content-services/dialogs/confirm.dialog.ts","ng://@alfresco/adf-content-services/version-manager/version-list.component.ts","ng://@alfresco/adf-content-services/version-manager/version-manager.component.ts","ng://@alfresco/adf-content-services/version-manager/version-upload.component.ts","ng://@alfresco/adf-content-services/version-manager/version-manager.module.ts","ng://@alfresco/adf-content-services/content-node-selector/name-location-cell/name-location-cell.component.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-selector.service.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-selector-panel.component.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-selector.module.ts","ng://@alfresco/adf-content-services/dialogs/folder-name.validators.ts","ng://@alfresco/adf-content-services/dialogs/folder.dialog.ts","ng://@alfresco/adf-content-services/dialogs/library/library.dialog.ts","ng://@alfresco/adf-content-services/dialogs/dialog.module.ts","ng://@alfresco/adf-content-services/folder-directive/folder-create.directive.ts","ng://@alfresco/adf-content-services/folder-directive/folder-edit.directive.ts","ng://@alfresco/adf-content-services/folder-directive/folder-directive.module.ts","ng://@alfresco/adf-content-services/content-metadata/components/content-metadata-card/content-metadata-card.component.ts","ng://@alfresco/adf-content-services/content-metadata/services/basic-properties.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/property-groups-translator.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/property-group-reader.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/aspect-oriented-config.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/indifferent-config.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/layout-oriented-config.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/content-metadata-config.factory.ts","ng://@alfresco/adf-content-services/content-metadata/services/property-descriptors.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/content-metadata.service.ts","ng://@alfresco/adf-content-services/content-metadata/components/content-metadata/content-metadata.component.ts","ng://@alfresco/adf-content-services/content-metadata/content-metadata.module.ts","ng://@alfresco/adf-content-services/permission-manager/models/permission.model.ts","ng://@alfresco/adf-content-services/permission-manager/services/node-permission.service.ts","ng://@alfresco/adf-content-services/permission-manager/components/permission-list/permission-list.component.ts","ng://@alfresco/adf-content-services/permission-manager/components/permission-list/no-permission.component.ts","ng://@alfresco/adf-content-services/permission-manager/components/inherited-button.directive.ts","ng://@alfresco/adf-content-services/permission-manager/components/add-permission/add-permission-dialog.component.ts","ng://@alfresco/adf-content-services/permission-manager/services/node-permission-dialog.service.ts","ng://@alfresco/adf-content-services/permission-manager/components/add-permission/search-config-permission.service.ts","ng://@alfresco/adf-content-services/permission-manager/components/add-permission/add-permission-panel.component.ts","ng://@alfresco/adf-content-services/permission-manager/components/add-permission/add-permission.component.ts","ng://@alfresco/adf-content-services/permission-manager/permission-manager.module.ts","ng://@alfresco/adf-content-services/content-node-share/content-node-share.dialog.ts","ng://@alfresco/adf-content-services/content-node-share/content-node-share.directive.ts","ng://@alfresco/adf-content-services/content-node-share/content-node-share.module.ts","ng://@alfresco/adf-content-services/tree-view/models/tree-view.model.ts","ng://@alfresco/adf-content-services/tree-view/services/tree-view.service.ts","ng://@alfresco/adf-content-services/tree-view/data/tree-view-datasource.ts","ng://@alfresco/adf-content-services/tree-view/components/tree-view.component.ts","ng://@alfresco/adf-content-services/tree-view/tree-view.module.ts","ng://@alfresco/adf-content-services/content.module.ts"],"names":["modules","MatButtonModule","MatChipsModule","MatDialogModule","MatIconModule","MatCardModule","MatInputModule","MatListModule","MatProgressSpinnerModule","MatProgressBarModule","MatRippleModule","MatMenuModule","MatOptionModule","MatExpansionModule","MatSelectModule","MatCheckboxModule","MatDatepickerModule","MatSlideToggleModule","MatRadioModule","MatSliderModule","MatTreeModule","MaterialModule","NgModule","args","imports","exports","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","r","ar","error","__spread","concat","DocumentListService","authService","contentService","apiService","logService","thumbnailService","deleteNode","nodeId","from","getInstance","nodes","copyNode","targetParentId","_this","pipe","catchError","err","handleError","moveNode","getFolder","folder","opts","includeFields","rootNodeId","ROOT_ID","rootFolderId","params","includeSource","include","tslib_1.__spread","filter","element","index","array","indexOf","relativePath","maxItems","skipCount","where","getNodeChildren","getNode","getFolderNode","getDocumentThumbnailUrl","node","getMimeTypeIcon","mimeType","getDefaultMimeTypeIcon","throwError","Injectable","providedIn","AuthenticationService","ContentService","AlfrescoApiService","LogService","ThumbnailService","ContentNodeSelectorComponent","data","buttonActionName","actionName","toUpperCase","close","select","complete","onSelect","nodeList","chosenNode","onClick","Component","selector","template","encapsulation","ViewEncapsulation","None","Inject","MAT_DIALOG_DATA","NodeLockDialogComponent","formBuilder","dialog","alfrescoApi","ngOnInit","nodeName","name","form","group","isLocked","allowOwner","properties","isTimeLock","time","moment","defineProperty","duration","diff","asSeconds","NodeBodyLock","timeToExpire","lockTimeInSeconds","type","lifetime","toggleLock","nodesApi","lockNode","id","nodeBodyLock","unlockNode","submit","entry","catch","onError","FormBuilder","MatDialogRef","Optional","ContentNodeDialogService","documentListService","siteService","translation","EventEmitter","openFileBrowseDialogByFolderId","folderNodeId","switchMap","nodeEntry","openUploadFileDialog","openLockNodeDialog","contentEntry","observable","Subject","hasAllowableOperations","AllowableOperationsEnum","LOCK","open","emit","width","openFileBrowseDialogBySite","getSites","response","list","entries","guid","openFolderBrowseDialogBySite","openFolderBrowseDialogByFolderId","openUploadFolderDialog","openCopyMoveDialog","action","permission","excludeSiteContent","subscribe","bind","title","getTitleTranslation","currentFolderId","parentId","imageResolver","isSelectionValid","isCopyMoveSelectionValid","nonDocumentSiteContent","openContentNodeDialog","errors","Error","JSON","stringify","statusCode","instant","hasAllowableOperationsOnNodeFolder","isNodeFile","currentPanelClass","chosenWidth","panelClass","row","col","isFile","isNodeFolder","isFolder","hasEntityCreatePermission","isSite","nodeType","closeAll","MatDialog","SitesService","TranslationService","Output","NodeLockDirective","renderer","contentNodeDialogService","event","preventDefault","ngAfterViewInit","setProperty","nativeElement","Directive","ElementRef","Renderer2","Input","HostListener","ContentDirectiveModule","CommonModule","declarations","RatingService","getRating","ratingType","core","ratingsApi","postRating","vote","ratingBody","RatingBody","myRating","rate","deleteRating","removeRating","console","RatingComponent","ratingService","average","changeVote","stars","ngOnChanges","ratingObserver","ratingEntry","aggregate","calculateStars","fill","updateVote","LikeComponent","likesCounter","isLike","clean","numberOfRatings","ratedAt","likeClick","SocialModule","TagService","refresh","getTagsByNodeId","tagsApi","getNodeTags","getAllTheTags","getTags","addTag","tagName","tagBody","TagBody","tag","observableAdd","tagEntry","removeTag","observableRemove","TagActionsComponent","tagService","translateService","successAdd","disableAddTag","subscriptions","refreshTag","ngOnDestroy","forEach","subscription","unsubscribe","tagPaging","tagsEntries","searchTag","newTagName","get","errorMsg","searchTagName","find","currentTag","cleanErrorMsg","TagListComponent","size","isLoading","isSizeMinimum","defaultPagination","hasMoreItems","pagination","tags","loadMoreTags","count","loadLessTags","slice","TagNodeListComponent","showDelete","results","TagModule","FormsModule","ReactiveFormsModule","CoreModule","forChild","WebscriptComponent","showData","contextRoot","servicePath","contentType","success","undefined","showError","changes","webScript","executeWebScript","scriptPath","scriptArgs","webScriptData","showDataAsDataTable","log","schema","ObjectDataTableAdapter","generateSchema","isDataTableContent","WebScriptModule","ShareDataRow","obj","permissionsStyle","cache","isSelected","cssClass","ERR_OBJECT_NOT_FOUND","isDropTarget","isFolderAndHasPermissionToUpload","getPermissionClass","nodeEntity","permissionsClasses","currentPermissionsStyle","applyPermissionStyleToFolder","applyPermissionStyleToFile","css","cacheValue","key","getValue","ObjectUtils","imageErrorResolver","content","hasValue","ShareDataTableAdapter","sorting","sortingMode","ERR_ROW_NOT_FOUND","ERR_COL_NOT_FOUND","thumbnails","rows","columns","_sortingMode","newValue","toLowerCase","getRows","setRows","sort","getColumns","setColumns","dataRow","resolved","getFolderIcon","getSorting","setSorting","sortRows","direction","DataSorting","setFilter","setImageResolver","resolver","isSmartFolder","isRuleFolder","isALinkFolder","nodeAspects","getNodeAspectNames","aspectNames","options","includes","numeric","a","left","Date","valueOf","toString","right","localeCompare","loadPage","nodePaging","merge","shareDataRows","nodeEntries","map","item","sortable","c","listPrunedDuplicate","elementToFilter","currentRow","presetsDefaultModel","-trashcan-","srTitle","format","-sites-","-mysites-","-favorites-","-recent-","-sharedlinks-","default","ContentActionModel","disableWithNoPermission","disabled","visible","icon","handler","execute","target","Document","Folder","All","DocumentActionModel","json","_super","tslib_1.__extends","FolderActionModel","NodeEntityEvent","BaseEvent","NodeEntryEvent","CustomResourcesService","CREATE_PERMISSION","getRecentFiles","personId","Observable","observer","peopleApi","getPerson","person","username","query","SearchRequest","language","filterQueries","field","ascending","paging","searchApi","search","searchResult","loadFavorites","includeFieldsRequest","getIncludesFields","favoritesApi","getFavorites","page","_a","file","cm:title","cm:description","description","loadMemberSites","listSiteMembershipsForPerson","SiteMemberPaging","site","allowableOperations","loadSites","sitesApi","loadTrashcan","getDeletedNodes","loadSharedLinks","sharedLinksApi","findSharedLinks","isCustomSource","folderId","isCustomSources","isSupportedSource","isSupportedSources","loadFolderByNodeId","getCorrespondingNodeIds","getIdFromEntry","of","targetGuid","hasCorrespondingNodeIds","DocumentListComponent","ngZone","elementRef","appConfig","userPreferencesService","customResourcesService","alfrescoApiService","DEFAULT_PAGINATION","Pagination","totalItems","display","DisplayMode","List","locationFormat","navigate","showHeader","navigationMode","DOUBLE_CLICK_NAVIGATION","selectionMode","multiselect","contentActions","contentActionsPosition","contextMenuActions","emptyFolderImageUrl","allowDropFiles","loading","_rowFilter","_currentFolderId","nodeClick","nodeDblClick","folderChange","preview","ready","actions","contextActionHandler","noPermission","selection","$folderNode","_pagination","BehaviorSubject","layoutPresets","rowMenuCache","UserPreferenceValues","PaginationSize","pagSize","rowFilter","reload","resetNewFolderPagination","loadFolder","getContextActions","getNodeActions","currentAction","model","subject","columnList","getDefaultSorting","defaultSorting","getLayoutPreset","ObjectDataColumn","isMobile","test","navigator","userAgent","isEmpty","loadLayoutPresets","val","contextActionCallback","enforceSingleClickNavigationForMobile","ngAfterContentInit","setTableSchema","hasCustomLayout","setupDefaultColumns","resetSelection","firstChange","currentValue","onDataReady","run","executeContentAction","target_1","refreshAction","actionsByTarget","isActionDisabled","isActionVisible","onShowContextMenu","navigateTo","canNavigateFolder","getNodeFolderDestinationId","isLinkFolder","updateCustomSourceData","handlerSub","setLoadingState","clearTimeout","loadingTimeout","setTimeout","onPageLoaded","getSourceNodeWithPath","getSourceObservable","folderNode","dataTable","preset","onPreviewFile","onNodeClick","domEvent","CustomEvent","detail","sender","bubbles","dispatchEvent","defaultPrevented","SINGLE_CLICK_NAVIGATION","executeActionClick","onNodeDblClick","onNodeSelect","onNodeUnselect","onShowRowContextMenu","onShowRowActionsMenu","onExecuteRowAction","externalSettings","updatePagination","requestPaginationModel","message","parse","NgZone","AppConfigService","UserPreferencesService","ContentChild","DataColumnListComponent","CustomLoadingContentTemplateDirective","CustomNoPermissionTemplateDirective","CustomEmptyContentTemplateDirective","ViewChild","ContentColumnListComponent","documentList","registerColumn","column","ContentColumnComponent","register","TemplateRef","PermissionModel","NodeActionsService","contentDialogService","dialogRef","downloadNode","NodeDownloadDirective","copyContent","doFileOperation","copyFolder","moveContent","moveFolder","selections","DocumentActionsService","nodeActionsService","permissionEvent","handlers","setupActionHandlers","getHandler","lKey","setHandler","canExecuteAction","actionObservable","prepareHandlers","fileOperationMessage","handlerObservable","FolderActionsService","ContentActionListComponent","registerAction","unregisterAction","idx","splice","ContentActionComponent","documentActions","folderActions","ContentActionTarget","folderActionModel","generateAction","documentActionModel","unregister","getSystemHandler","providers","LibraryNameColumnComponent","context","displayText","makeLibraryTitle","displayTooltip","makeLibraryTooltip","library","isDuplicate","some","changeDetection","ChangeDetectionStrategy","OnPush","host","class","LibraryRoleColumnComponent","role","LibraryStatusColumnComponent","visibility","NameColumnComponent","TrashcanNameColumnComponent","isLibrary","NodePaging","NodePagingList","NodeMinimalEntry","NodeMinimal","UserInfo","ContentInfo","PathInfoEntity","PathElementEntity","PermissionStyleModel","FileUploadingDialogComponent","uploadService","changeDetector","position","filesUploadingList","isDialogActive","totalCompleted","totalErrors","isDialogMinimized","isConfirmation","listSubscription","queueChanged","fileList","counterSubscription","fileUploadComplete","fileUploadDeleted","totalComplete","detectChanges","errorSubscription","fileUploadError","totalError","fileUploadSubscription","fileUpload","fileDeleted","objId","status","FileUploadStatus","Cancelled","toggleConfirmation","cancelAllUploads","uploadList","cancelAllFiles","toggleMinimized","clearQueue","UploadService","ChangeDetectorRef","FileUploadingListRowComponent","cancel","remove","onCancel","onRemove","showCancelledStatus","Aborted","Deleted","FileUploadingListComponent","files","cancelFile","cancelUpload","removeFile","notifyError","getUploadingFiles","deletedFiles","Complete","forkJoin","isUploadCompleted","isUploadCancelled","Boolean","Starting","Progress","Pending","every","permanent","_i","messageError","fileName","total","NodesApiService","UploadFilesEvent","callback","isDefaultPrevented","pauseUpload","resumeUpload","addToQueue","uploadFilesInTheQueue","UploadBase","translationService","acceptedFilesType","versioning","majorVersion","beginUpload","uploadFiles","filteredFiles","createFileModel","webkitRelativePath","replace","uploadQueue","uploadFilesInfo","fileInfo","relativeFolder","isFileAcceptable","isFileSizeAcceptable","split","ext","trim","extension","path","FileModel","comment","newVersion","isFileSizeAllowed","isMaxFileSizeDefined","isFileSizeCorrect","maxFilesSize","acceptableSize","UploadButtonComponent","uploadFolders","multipleFiles","tooltip","permissionValue","checkPermission","isButtonDisabled","onFilesAdded","$event","FileUtils","toFileArray","currentTarget","onDirectoryAdded","res","nodeHasPermission","CREATE","viewProviders","provide","EXTENDIBLE_COMPONENT","useExisting","forwardRef","UploadVersionButtonComponent","fileModel","UPDATE","UploadDragAreaComponent","notificationService","onFilesDropped","onFolderEntityDropped","isDirectory","flatten","filesInfo","showUndoNotificationBar","latestFilesAdded","messageTranslate","actionTranslate","openSnackMessageAction","onAction","isDroppable","onUploadFiles","stopPropagation","isTargetNodeFolder","destinationFolderName_1","NotificationService","FileUploadErrorPipe","transform","errorCode","Pipe","pure","FileDraggableDirective","el","enabled","filesDropped","folderEntityDropped","cssClassName","runOutsideAngular","addEventListener","onDragEnter","onDragOver","onDragLeave","onDropFiles","removeEventListener","items","dataTransfer","webkitGetAsEntry","getAsFile","classList","add","UploadModule","DocumentListModule","FlexLayoutModule","entryComponents","SearchQueryBuilderService","_userQuery","updated","executed","categories","queryFragments","userFacetBuckets","ranges","resetToDefaults","config","category","defaults","addUserFacetBucket","bucket","buckets","facetBucket","getUserFacetBuckets","removeUserFacetBucket","addFilterQuery","filterQuery","removeFilterQuery","getFacetQuery","hasFacetQueries","facetQueries","queries","getFacetField","facetFields","fields","update","buildQuery","resultSetPaging","getFinalQuery","facetFormat","getPrimarySorting","getSortingOptions","getQueryGroup","def","RequestSortDefinitionInner","facet","customQuery","userQuery","join","keys","subQuery","facets","mincount","limit","offset","prefix","SearchComponent","searchService","_elementRef","displayWith","maxResults","skipResults","searchTerm","resultLoaded","showPanel","_isOpen","keyPressedStream","_classList","asObservable","debounceTime","searchedWord","loadSearchResults","dataLoaded","onSearchDataLoaded","onSearchDataError","className","setVisibility","resetResults","cleanResults","isOpen","hidePanel","preserveWhitespaces","exportAs","SearchService","EmptySearchResultComponent","SearchControlComponent","expandable","highlight","inputType","autocomplete","liveSearchEnabled","liveSearchMaxResults","searchChange","optionClicked","noSearchResultTemplate","toggleSearch","focusSubject","subscriptAnimationState","searchAutocomplete","document","activeElement","searchInput","blur","applySearchFocus","animationDoneEvent","toState","focus","setupFocusEventHandlers","isNoSearchTemplatePresent","emptySearchTemplate","isLoggedIn","isEcmLoggedIn","searchSubmit","toggleSearchBar","inputChange","getAutoComplete","isSearchBarActive","elementClicked","onFocus","onBlur","activateToolbar","selectFirstResult","listResultElement","_getHostElement","onRowArrowDown","nextElement","getNextElementSibling","onRowArrowUp","previousElement","getPreviousElementSibling","FocusEvent","nextElementSibling","previousElementSibling","animations","trigger","state","style","margin-left","transition","animate","ViewChildren","MatListItem","SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","SearchTriggerDirective","multi","changeDetectorRef","onDestroy$","_panelOpen","escapeEventStream","onChange","onTouched","closingActionsSubscription","searchPanel","openPanel","subscribeToClosingActions","closePanel","outsideClickStream","fromEvent","clickTarget","takeUntil","writeValue","setTriggerValue","registerOnChange","fn","registerOnTouched","handleKeydown","keyCode","ESCAPE","panelOpen","ENTER","handleInput","inputValue","isPanelOptionClicked","isPanelOption","isNoResultOption","panel","contains","firstStable","onStable","optionChanges","panelClosingActions","setValueAndClose","toDisplay","textContent","[attr.autocomplete]","aria-autocomplete","[attr.aria-expanded]","(blur)","(input)","(keydown)","DOCUMENT","SearchFilterList","pageSize","filteredItems","_filterText","currentPageSize","_filter","applyFilter","showMoreItems","canShowMoreItems","showLessItems","canShowLessItems","clear","filterText","pointer","visibleItems","SearchFilterComponent","queryBuilder","DEFAULT_PAGE_SIZE","isAlive","responseFacets","facetQueriesPageSize","facetQueriesLabel","facetQueriesExpanded","facetFieldsExpanded","selectedBuckets","expanded","takeWhile","onDataLoaded","updateSelectedBuckets","this_1","checked","_b","tslib_1.__values","_c","onToggleBucket","selectFacetBucket","unselectFacetBucket","canResetSelectedBuckets","resetSelectedBuckets","shouldExpand","parseFacets","responseField","responseBucket","respBucket","getCountValue","responseFacetFields","parseFacetFields","responseGroupedFacetQueries","parseFacetQueries","responseBuckets","getResponseBuckets","bucketList","pattern","filterWithContains","startsWith","configGroups","reduce","acc","getResponseQueryBuckets","configGroup","metrics","SearchTextComponent","settings","match","RegExp","exec","reset","updateQuery","onChangedHandler","SearchRadioComponent","setValue","getSelectedValue","selected","opt","changeHandler","SearchSliderComponent","thumbLabel","min","max","LiveErrorStateMatcher","isErrorState","control","isSubmitted","submitted","invalid","dirty","touched","pristine","SearchNumberRangeComponent","matcher","validators","Validators","compose","required","FormControl","to","FormGroup","formValidator","formGroup","parseInt","mismatch","isValid","Map","set","formatString","str","expr","SearchCheckListComponent","operator","option","flush","DEFAULT_FORMAT_DATE","MOMENT_DATE_FORMATS","SearchDateRangeComponent","dateAdapter","datePickerDateFormat","getFromValidationMessage","hasError","hasParseError","getToValidationMessage","dateFormat","overrideDisplayFormat","Locale","locale","setLocale","maxDate","today","startOf","start","end","endOf","formControl","srcElement","formatDate","setErrors","invalidOnChange","getError","text","forcePlaceholder","click","DateAdapter","useClass","MomentDateAdapter","deps","MAT_DATE_LOCALE","MAT_DATE_FORMATS","useValue","ɵ0","SearchFilterService","widgets","radio","slider","number-range","check-list","date-range","SearchChipListComponent","SearchSortingPickerComponent","primary","getSortingOrder","onValueChanged","applySorting","onSortingChanged","findOptionByKey","SearchWidgetContainerComponent","searchFilterService","componentFactoryResolver","componentType","factory","resolveComponentFactory","componentRef","createComponent","setupWidget","ref","instance","destroy","ComponentFactoryResolver","read","ViewContainerRef","ALFRESCO_SEARCH_DIRECTIVES","SearchModule","Members","Containers","DropdownSitesComponent","sitesService","hideMyFiles","siteList","placeholder","change","MY_FILES_VALUE","setDefaultSiteList","selectedSite","extendedOptions","relations","sitePaging","Relations","filteredResultsByMember","siteEntry","SiteEntry","unshift","sites","loggedUserName","getEcmCurrentLoggedUserName","isCurrentUserMember","members","member","SitesDropdownModule","BreadcrumbComponent","root","rootId","route","recalculateNodes","parseRoute","lastNodes","previousNodes","reverse","dropdown","hasPreviousNodes","elements","rootPos","getElementPosition","findIndex","onRoutePathClick","DropdownBreadcrumbComponent","currentNode","BreadcrumbModule","ConfirmDialogComponent","yesLabel","noLabel","VersionListComponent","versions","showComments","allowDownload","showActions","restored","deleted","versionsApi","loadVersionHistory","canUpdate","canDelete","restore","versionId","revertVersion","onVersionRestored","listVersionHistory","versionPaging","downloadVersion","versionDownloadUrl","getVersionContentUrl","downloadContent","deleteVersion","minWidth","afterClosed","onVersionDeleted","attachment","contentApi","getContentUrl","url","link","createElement","href","appendChild","removeChild","VersionManagerComponent","uploadSuccess","uploadError","uploadState","nodeUpdated","versionListComponent","onUploadSuccess","onUploadError","onUploadCancel","toggleNewVersion","height","opacity","VersionUploadComponent","semanticVersion","uploadVersion","canUpload","isMajorVersion","VersionManagerModule","NameLocationCellComponent","fullPath","ContentNodeSelectorService","extraNodeIds","extraParentFiltering","extraId","defaultSearchNode","scope","locations","searchByQueryBody","defaultValidation","ContentNodeSelectorPanelComponent","contentNodeSelectorService","dropdownHideMyFiles","dropdownSiteList","_excludeSiteContent","showingSearchResults","loadingSearchResults","inDialog","_chosenNode","folderIdToShow","infiniteScroll","debounceSearch","valueChanges","searchValue","createRowFilter","valuesArray","breadcrumbTransform","isExcludedSiteContent","siteChanged","chosenSite","siteId","updateResults","clearSearch","startNewSearch","infinitePaginationComponent","querySearch","nodeIds","showSearchResults","onFolderChange","onFolderLoaded","attemptNodeSelection","showBreadcrumbs","getNextPageOfSearch","resetChosenNode","HighlightDirective","InfinitePaginationComponent","ContentNodeSelectorModule","I18N_ERRORS_PATH","forbidSpecialCharacters","forbidEndingDot","forbidOnlySpaces","FolderDialogComponent","editTitle","createTitle","parentNodeId","createFolder","edit","updateNode","editing","valid","errorMessage","LibraryDialogComponent","libraryTitleExists","visibilityOptions","maxLength","minLength","createSiteIdValidator","visibilityOption","controls","mergeMap","checkLibraryNameExists","canGenerateId","patchValue","sanitize","markAsTouched","visibilityChangeHandler","siteBody","createSite","input","libraryTitle","findLibraryByTitle","queriesApi","findSites","timer","getSite","DialogModule","MatMomentDatetimeModule","MatDatetimepickerModule","FolderCreateDirective","openDialog","DIALOG_WIDTH","dialogConfig","dialogInstance","componentInstance","folderCreate","FolderEditDirective","folderEdit","FolderDirectiveModule","ContentMetadataCardComponent","displayEmpty","readOnly","_displayDefaultProperties","editable","onDisplayDefaultPropertiesChange","toggleEdit","toggleExpanded","BasicPropertiesService","fileSizePipe","getProperties","sizeInBytes","mimeTypeName","author","CardViewTextItemModel","createdByUser","displayName","CardViewDateItemModel","createdAt","pipes","modifiedByUser","modifiedAt","multiline","FileSizePipe","D_MLTEXT","D_DATETIME","D_FLOAT","D_DOUBLE","D_BOOLEAN","PropertyGroupTranslatorService","translateToCardViewGroups","propertyGroups","propertyValues","propertyGroup","translatedPropertyGroup","translateArray","property","translate","propertyValue","checkECMTypeValidity","dataType","cardViewItemProperty","propertyDefinition","defaultValue","CardViewIntItemModel","CardViewFloatItemModel","CardViewDatetimeItemModel","CardViewBoolItemModel","ecmPropertyType","RECOGNISED_ECM_TYPES","emptyGroup","getGroup","groupName","getProperty","propertyName","groupDefinition","convertObjectToArray","object","AspectOrientedConfigService","isGroupAllowed","reorganiseByConfig","aspects","groupAccumulator","aspectName","newGroup","getOrganisedPropertyGroup","organisedPropertyGroup","aspectProperties","props","IndifferentConfigService","LayoutOrientedConfigService","getMatchingGroups","layoutBlock","flattenItems","explodedItem","accumulator","flattenedProperties","isArray","aspect","ContentMetadataConfigFactory","appConfigService","presetName","presetConfig","presets","DEFAULT_PRESET_NAME","INDIFFERENT_PRESET","createConfig","isLayoutOrientedPreset","isAspectOrientedPreset","freeze","isObject","x","PropertyDescriptorsService","load","groupNames","groupFetchStreams","defer","classesApi","getClass","convertToObject","propertyGroupsArray","ContentMetadataService","basicPropertiesService","contentMetadataConfigFactory","propertyGroupTranslatorService","propertyDescriptorsService","getBasicProperties","getGroupedProperties","groupedProperties","config_1","groups","setTitleToNameIfNotSet","ContentMetadataComponent","contentMetadataService","cardViewUpdateService","nodesApiService","displayDefaultProperties","disposableNodeUpdate","itemUpdated$","saveNode","updatedNode","loadProperties","basicProperties$","groupedProperties$","nodeBody","changed","CardViewUpdateService","ContentMetadataModule","PermissionDisplayModel","isInherited","authorityId","accessStatus","NodePermissionService","searchApiService","nodeService","getNodeRoles","retrieveSiteQueryBody","buildRetrieveSiteQueryBody","siteNodeList","siteName","getGroupMembersBySiteName","permissions","settable","updatePermissionRole","updatedPermissionRole","permissionBody","locallySet","updateNodePermissions","permissionList","nodeRoles","updateLocallySetPermissions","nodeRole","transformNodeToPermissionElement","duplicatedPermissions","getDuplicatedPermissions","duplicatePermissionMessage","nodeLocallySet","permissionListAdded","duplicatePermissions","duplicate","localPermission","isEqualPermission","oldPermission","newPermission","removePermission","permissionToRemove","getGroupMemberByGroupName","groupMemberPaging","displayResult","formattedRoleName","groupsApi","getGroupMembers","nodePath","PermissionListComponent","nodePermissionService","fetchNodePermissions","actualNode","getPermissionList","settableList","settableRoles","allPermissions","permissionElement","inherited","permissionInherited","saveNewRole","permissionRow","buildUpdatedPermission","newRole","permissionRole","NoPermissionTemplateComponent","InheritPermissionDirective","onInheritPermissionClicked","UPDATEPERMISSIONS","isInheritanceEnabled","(click)","AddPermissionDialogComponent","currentSelection","onAddClicked","confirm","NodePermissionDialogService","openAddPermissionDialog","confirm_1","updateNodePermissionByDialog","SearchPermissionConfigurationService","generateQueryBody","AddPermissionPanelComponent","selectedItems","EVERYONE","NodeEntry","cm:authorityName","isAlreadySelected","SearchConfigurationService","AddPermissionComponent","nodeApiService","isAddEnabled","applySelection","PermissionManagerModule","ShareDialogComponent","sharedLinksApiService","renditionService","minDate","isFileShared","isDisabled","sharedUrl","disable","skip","tap","updates","updateEntryExpiryDate","baseShareUrl","createSharedLinks","sharedId","updateForm","removeShare","deleteSharedLink","onSlideShareChange","openConfirmationDialog","closeOnNavigation","beforeClose","sharedLink","generateRenditionForNode","expiryDate","qshare:expiryDate","utc","local","SharedLinksApiService","RenditionsService","NodeSharedDirective","zone","isShared","shareNode","ContentNodeShareModule","forRoot","ngModule","TreeBaseNode","level","TreeViewService","nodeApi","getTreeNodes","nodePage","TreeViewDataSource","treeControl","treeViewService","dataChange","childrenSubscription","changeSubscription","treeNodes","dataNodes","connect","collectionViewer","expansionModel","added","expandTreeNodes","removed","reduceTreeNodes","viewChange","disconnect","expandNode","toggleNode","children","FlatTreeControl","TreeViewComponent","nodeClicked","getLevel","isExpandable","hasChild","nodeData","dataSource","previousValue","loadTreeNode","onNodeClicked","treeNode","TreeViewModule","TranslateModule","ContentModuleLazy","source","ContentModule","TRANSLATION_PROVIDER","ɵ0$2"],"mappings":"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","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport {\n    MatButtonModule,\n    MatChipsModule,\n    MatDialogModule,\n    MatIconModule,\n    MatCardModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatOptionModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRippleModule,\n    MatExpansionModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatSlideToggleModule,\n    MatRadioModule,\n    MatSliderModule,\n    MatTreeModule\n} from '@angular/material';\n\nexport function modules() {\n    return [\n        MatButtonModule,\n        MatChipsModule,\n        MatDialogModule,\n        MatIconModule,\n        MatCardModule,\n        MatInputModule,\n        MatListModule,\n        MatProgressSpinnerModule,\n        MatProgressBarModule,\n        MatRippleModule,\n        MatMenuModule,\n        MatOptionModule,\n        MatExpansionModule,\n        MatSelectModule,\n        MatCheckboxModule,\n        MatDatepickerModule,\n        MatSlideToggleModule,\n        MatRadioModule,\n        MatSliderModule,\n        MatTreeModule\n    ];\n}\n\n@NgModule({\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AlfrescoApiService, AuthenticationService, ContentService, LogService, ThumbnailService\n} from '@alfresco/adf-core';\n\nimport { Injectable } from '@angular/core';\nimport { NodeEntry, NodePaging } from '@alfresco/js-api';\nimport { Observable, from, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DocumentListService {\n\n    static ROOT_ID = '-root-';\n\n    constructor(authService: AuthenticationService,\n                private contentService: ContentService,\n                private apiService: AlfrescoApiService,\n                private logService: LogService,\n                private thumbnailService: ThumbnailService) {\n    }\n\n    /**\n     * Deletes a node.\n     * @param nodeId ID of the node to delete\n     * @returns Empty response when the operation is complete\n     */\n    deleteNode(nodeId: string): Observable<any> {\n        return from(this.apiService.getInstance().nodes.deleteNode(nodeId));\n    }\n\n    /**\n     * Copy a node to destination node\n     *\n     * @param nodeId The id of the node to be copied\n     * @param targetParentId The id of the folder where the node will be copied\n     * @returns NodeEntry for the copied node\n     */\n    copyNode(nodeId: string, targetParentId: string) {\n        return from(this.apiService.getInstance().nodes.copyNode(nodeId, { targetParentId })).pipe(\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Moves a node to destination node.\n     *\n     * @param nodeId The id of the node to be moved\n     * @param targetParentId The id of the folder where the node will be moved\n     * @returns NodeEntry for the moved node\n     */\n    moveNode(nodeId: string, targetParentId: string) {\n        return from(this.apiService.getInstance().nodes.moveNode(nodeId, { targetParentId })).pipe(\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Gets the folder node with the specified relative name path below the root node.\n     * @param folder Path to folder.\n     * @param opts Options.\n     * @param includeFields Extra information to include (available options are \"aspectNames\", \"isLink\" and \"association\")\n     * @returns Details of the folder\n     */\n    getFolder(folder: string, opts?: any, includeFields: string[] = []): Observable<NodePaging> {\n        let rootNodeId = DocumentListService.ROOT_ID;\n        if (opts && opts.rootFolderId) {\n            rootNodeId = opts.rootFolderId;\n        }\n\n        let includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n\n        let params: any = {\n            includeSource: true,\n            include: includeFieldsRequest\n        };\n\n        if (folder) {\n            params.relativePath = folder;\n        }\n\n        if (opts) {\n            if (opts.maxItems) {\n                params.maxItems = opts.maxItems;\n            }\n            if (opts.skipCount) {\n                params.skipCount = opts.skipCount;\n            }\n            if (opts.where) {\n                params.where = opts.where;\n            }\n        }\n\n        return from(this.apiService.getInstance().nodes.getNodeChildren(rootNodeId, params)).pipe(\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Gets a node via its node ID.\n     * @param nodeId ID of the target node\n     * @param includeFields Extra information to include (available options are \"aspectNames\", \"isLink\" and \"association\")\n     * @returns Details of the folder\n     */\n    getNode(nodeId: string, includeFields: string[] = []): Observable<NodeEntry> {\n\n        let includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n\n        let opts: any = {\n            includeSource: true,\n            include: includeFieldsRequest\n        };\n\n        return this.contentService.getNode(nodeId, opts);\n    }\n\n    /**\n     * Gets a folder node via its node ID.\n     * @param nodeId ID of the folder node\n     * @param includeFields Extra information to include (available options are \"aspectNames\", \"isLink\" and \"association\")\n     * @returns Details of the folder\n     */\n    getFolderNode(nodeId: string, includeFields: string[] = []): Observable<NodeEntry> {\n\n        let includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n\n        let opts: any = {\n            includeSource: true,\n            include: includeFieldsRequest\n        };\n\n        return from(this.apiService.getInstance().nodes.getNode(nodeId, opts)).pipe(\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Get thumbnail URL for the given document node.\n     * @param node Node to get URL for.\n     * @returns Thumbnail URL string\n     */\n    getDocumentThumbnailUrl(node: NodeEntry): string {\n        return this.thumbnailService.getDocumentThumbnailUrl(node);\n    }\n\n    /**\n     * Gets the icon that represents a MIME type.\n     * @param mimeType MIME type to get the icon for\n     * @returns Path to the icon file\n     */\n    getMimeTypeIcon(mimeType: string): string {\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n\n    /**\n     * Gets a default icon for MIME types with no specific icon.\n     * @returns Path to the icon file\n     */\n    getDefaultMimeTypeIcon(): string {\n        return this.thumbnailService.getDefaultMimeTypeIcon();\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\nimport { Node } from '@alfresco/js-api';\nimport { ContentNodeSelectorComponentData } from './content-node-selector.component-data.interface';\n\n@Component({\n    selector: 'adf-content-node-selector',\n    templateUrl: './content-node-selector.component.html',\n    styleUrls: ['./content-node-selector.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ContentNodeSelectorComponent {\n\n    buttonActionName: string;\n    chosenNode: Node[];\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: ContentNodeSelectorComponentData) {\n        this.buttonActionName = data.actionName ? `NODE_SELECTOR.${data.actionName.toUpperCase()}` : 'NODE_SELECTOR.CHOOSE';\n    }\n\n    close() {\n        this.data.select.complete();\n    }\n\n    onSelect(nodeList: Node[]) {\n        this.chosenNode = nodeList;\n    }\n\n    onClick(): void {\n        this.data.select.next(this.chosenNode);\n        this.data.select.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport moment from 'moment-es6';\n\nimport { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\nimport { NodeBodyLock, Node, NodeEntry } from '@alfresco/js-api';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-node-lock',\n    styleUrls: ['./folder.dialog.scss'],\n    templateUrl: './node-lock.dialog.html'\n})\nexport class NodeLockDialogComponent implements OnInit {\n\n    form: FormGroup;\n    node: Node = null;\n    nodeName: string;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        public dialog: MatDialogRef<NodeLockDialogComponent>,\n        private alfrescoApi: AlfrescoApiService,\n        @Optional()\n        @Inject(MAT_DIALOG_DATA)\n        public data: any\n    ) {\n    }\n\n    ngOnInit() {\n        const { node } = this.data;\n        this.nodeName = node.name;\n\n        this.form = this.formBuilder.group({\n            isLocked: node.isLocked || false,\n            allowOwner: node.properties['cm:lockType'] === 'WRITE_LOCK',\n            isTimeLock: !!node.properties['cm:expiryDate'],\n            time: !!node.properties['cm:expiryDate'] ? moment(node.properties['cm:expiryDate']) : moment()\n        });\n    }\n\n    private get lockTimeInSeconds(): number {\n        if (this.form.value.isTimeLock) {\n            let duration = moment.duration(moment(this.form.value.time).diff(moment()));\n            return duration.asSeconds();\n        }\n\n        return 0;\n    }\n\n    private get nodeBodyLock(): NodeBodyLock {\n        return new NodeBodyLock({\n            'timeToExpire': this.lockTimeInSeconds,\n            'type': this.form.value.allowOwner ? 'ALLOW_OWNER_CHANGES' : 'FULL',\n            'lifetime': 'PERSISTENT'\n        });\n    }\n\n    private toggleLock(): Promise<NodeEntry> {\n        const { alfrescoApi: { nodesApi }, data: { node } } = this;\n\n        if (this.form.value.isLocked) {\n            return nodesApi.lockNode(node.id, this.nodeBodyLock);\n        }\n\n        return nodesApi.unlockNode(node.id);\n    }\n\n    submit(): void {\n        this.toggleLock()\n            .then((node: NodeEntry) => {\n                this.data.node.isLocked = this.form.value.isLocked;\n                this.dialog.close(node.entry);\n            })\n            .catch((error: any) => this.data.onError(error));\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MatDialog } from '@angular/material';\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { ContentService } from '@alfresco/adf-core';\nimport { Subject, Observable, throwError } from 'rxjs';\nimport { ShareDataRow } from '../document-list/data/share-data-row.model';\nimport { Node, NodeEntry, SitePaging } from '@alfresco/js-api';\nimport { DataColumn, SitesService, TranslationService, AllowableOperationsEnum } from '@alfresco/adf-core';\nimport { DocumentListService } from '../document-list/services/document-list.service';\nimport { ContentNodeSelectorComponent } from './content-node-selector.component';\nimport { ContentNodeSelectorComponentData } from './content-node-selector.component-data.interface';\nimport { NodeLockDialogComponent } from '../dialogs/node-lock.dialog';\nimport { switchMap } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ContentNodeDialogService {\n    static nonDocumentSiteContent = [\n        'blog',\n        'calendar',\n        'dataLists',\n        'discussions',\n        'links',\n        'wiki'\n    ];\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private dialog: MatDialog,\n                private contentService: ContentService,\n                private documentListService: DocumentListService,\n                private siteService: SitesService,\n                private translation: TranslationService) {\n    }\n\n    /**\n     * Opens a file browser at a chosen folder location.\n     * @param folderNodeId ID of the folder to use\n     * @returns Information about the selected file(s)\n     */\n    openFileBrowseDialogByFolderId(folderNodeId: string): Observable<Node[]> {\n        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap((nodeEntry: NodeEntry) => {\n            return this.openUploadFileDialog('Choose', nodeEntry.entry);\n        }));\n    }\n\n    /**\n     * Opens a lock node dialog.\n     * @param contentEntry Node to lock\n     * @returns Error/status message (if any)\n     */\n    public openLockNodeDialog(contentEntry: Node): Subject<string> {\n        const observable: Subject<string> = new Subject<string>();\n\n        if (this.contentService.hasAllowableOperations(contentEntry, AllowableOperationsEnum.LOCK)) {\n            this.dialog.open(NodeLockDialogComponent, {\n                data: {\n                    node: contentEntry,\n                    onError: (error) => {\n                        this.error.emit(error);\n                        observable.error(error);\n                    }\n                },\n                width: '400px'\n            });\n        } else {\n            observable.error('OPERATION.FAIL.NODE.NO_PERMISSION');\n        }\n\n        return observable;\n    }\n\n    /**\n     * Opens a file browser at a chosen site location.\n     * @returns Information about the selected file(s)\n     */\n    openFileBrowseDialogBySite(): Observable<Node[]> {\n        return this.siteService.getSites().pipe(switchMap((response: SitePaging) => {\n            return this.openFileBrowseDialogByFolderId(response.list.entries[0].entry.guid);\n        }));\n    }\n\n    /**\n     * Opens a folder browser at a chosen site location.\n     * @returns Information about the selected folder(s)\n     */\n    openFolderBrowseDialogBySite(): Observable<Node[]> {\n        return this.openFolderBrowseDialogByFolderId('-my-');\n    }\n\n    /**\n     * Opens a folder browser at a chosen folder location.\n     * @param folderNodeId ID of the folder to use\n     * @returns Information about the selected folder(s)\n     */\n    openFolderBrowseDialogByFolderId(folderNodeId: string): Observable<Node[]> {\n        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap((node: NodeEntry) => {\n            return this.openUploadFolderDialog('Choose', node.entry);\n        }));\n    }\n\n    /**\n     * Opens a dialog to copy or move an item to a new location.\n     * @param action Name of the action (eg, \"Copy\" or \"Move\") to show in the title\n     * @param contentEntry Item to be copied or moved\n     * @param permission Permission for the operation\n     * @param excludeSiteContent The site content that should be filtered out\n     * @returns Information about files that were copied/moved\n     */\n    openCopyMoveDialog(action: string, contentEntry: Node, permission?: string, excludeSiteContent?: string[]): Observable<Node[]> {\n        if (this.contentService.hasAllowableOperations(contentEntry, permission)) {\n\n            const select = new Subject<Node[]>();\n            select.subscribe({\n                complete: this.close.bind(this)\n            });\n\n            const title = this.getTitleTranslation(action, contentEntry.name);\n\n            const data: ContentNodeSelectorComponentData = {\n                title: title,\n                actionName: action,\n                currentFolderId: contentEntry.parentId,\n                imageResolver: this.imageResolver.bind(this),\n                where: '(isFolder=true)',\n                isSelectionValid: this.isCopyMoveSelectionValid.bind(this),\n                excludeSiteContent: excludeSiteContent || ContentNodeDialogService.nonDocumentSiteContent,\n                select: select\n            };\n\n            this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');\n\n            return select;\n        } else {\n            let errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));\n            return throwError(errors);\n        }\n    }\n\n    /**\n     * Gets the translation of the dialog title.\n     * @param action Name of the action to display in the dialog title\n     * @param name Name of the item on which the action is being performed\n     * @returns Translated version of the title\n     */\n    getTitleTranslation(action: string, name: string): string {\n        return this.translation.instant(`NODE_SELECTOR.${action.toUpperCase()}_ITEM`, { name });\n    }\n\n    /**\n     * Opens a dialog to choose folders to upload.\n     * @param action Name of the action to show in the title\n     * @param contentEntry  Item to upload\n     * @returns Information about the chosen folder(s)\n     */\n    openUploadFolderDialog(action: string, contentEntry: Node): Observable<Node[]> {\n        const select = new Subject<Node[]>();\n        select.subscribe({\n            complete: this.close.bind(this)\n        });\n\n        const data: ContentNodeSelectorComponentData = {\n            title: `${action} '${contentEntry.name}' to ...`,\n            actionName: action,\n            currentFolderId: contentEntry.id,\n            imageResolver: this.imageResolver.bind(this),\n            isSelectionValid: this.hasAllowableOperationsOnNodeFolder.bind(this),\n            where: '(isFolder=true)',\n            select: select\n        };\n\n        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');\n        return select;\n    }\n\n    /**\n     * Opens a dialog to choose a file to upload.\n     * @param action Name of the action to show in the title\n     * @param contentEntry Item to upload\n     * @returns Information about the chosen file(s)\n     */\n    openUploadFileDialog(action: string, contentEntry: Node): Observable<Node[]> {\n        const select = new Subject<Node[]>();\n        select.subscribe({\n            complete: this.close.bind(this)\n        });\n\n        const data: ContentNodeSelectorComponentData = {\n            title: `${action} '${contentEntry.name}' to ...`,\n            actionName: action,\n            currentFolderId: contentEntry.id,\n            imageResolver: this.imageResolver.bind(this),\n            isSelectionValid: this.isNodeFile.bind(this),\n            select: select\n        };\n\n        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');\n        return select;\n    }\n\n    private openContentNodeDialog(data: ContentNodeSelectorComponentData, currentPanelClass: string, chosenWidth: string) {\n        this.dialog.open(ContentNodeSelectorComponent, { data, panelClass: currentPanelClass, width: chosenWidth });\n    }\n\n    private imageResolver(row: ShareDataRow, col: DataColumn): string | null {\n        const entry: Node = row.node.entry;\n        if (!this.contentService.hasAllowableOperations(entry, 'create')) {\n            return this.documentListService.getMimeTypeIcon('disable/folder');\n        }\n\n        return null;\n    }\n\n    private isNodeFile(entry: Node): boolean {\n        return entry.isFile;\n    }\n\n    private hasAllowableOperationsOnNodeFolder(entry: Node): boolean {\n        return this.isNodeFolder(entry) && this.contentService.hasAllowableOperations(entry, 'create');\n    }\n\n    private isNodeFolder(entry: Node): boolean {\n        return entry.isFolder;\n    }\n\n    private isCopyMoveSelectionValid(entry: Node): boolean {\n        return this.hasEntityCreatePermission(entry) && !this.isSite(entry);\n    }\n\n    private hasEntityCreatePermission(entry: Node): boolean {\n        return this.contentService.hasAllowableOperations(entry, 'create');\n    }\n\n    private isSite(entry) {\n        return !!entry.guid || entry.nodeType === 'st:site' || entry.nodeType === 'st:sites';\n    }\n\n    /** Closes the currently open dialog. */\n    close() {\n        this.dialog.closeAll();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Directive, ElementRef, Renderer2, HostListener, Input, AfterViewInit } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { AllowableOperationsEnum, ContentService } from '@alfresco/adf-core';\nimport { ContentNodeDialogService } from '../content-node-selector/content-node-dialog.service';\n\n@Directive({\n    selector: '[adf-node-lock]'\n})\nexport class NodeLockDirective implements AfterViewInit {\n\n    /** Node to lock/unlock. */\n    @Input('adf-node-lock')\n    node: Node;\n\n    @HostListener('click', [ '$event' ])\n    onClick(event) {\n        event.preventDefault();\n        this.contentNodeDialogService.openLockNodeDialog(this.node);\n    }\n\n    constructor(\n        public element: ElementRef,\n        private renderer: Renderer2,\n        private contentService: ContentService,\n        private contentNodeDialogService: ContentNodeDialogService\n    ) {}\n\n    ngAfterViewInit() {\n        const hasAllowableOperations = this.contentService.hasAllowableOperations(this.node, AllowableOperationsEnum.LOCK);\n        this.renderer.setProperty(this.element.nativeElement, 'disabled', !hasAllowableOperations);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { NodeLockDirective } from './node-lock.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        NodeLockDirective\n    ],\n    exports: [\n        NodeLockDirective\n    ]\n})\nexport class ContentDirectiveModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { RatingEntry, RatingBody } from '@alfresco/js-api';\nimport { from, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/internal/Observable';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RatingService {\n\n    constructor(private apiService: AlfrescoApiService) {\n    }\n\n    /**\n     * Gets the current user's rating for a node.\n     * @param nodeId Node to get the rating from\n     * @param ratingType Type of rating (can be \"likes\" or \"fiveStar\")\n     * @returns The rating value\n     */\n    getRating(nodeId: string, ratingType: any): Observable<RatingEntry | {}> {\n        return from(this.apiService.getInstance().core.ratingsApi.getRating(nodeId, ratingType))\n            .pipe(\n                catchError(this.handleError)\n            );\n    }\n\n    /**\n     * Adds the current user's rating for a node.\n     * @param nodeId Target node for the rating\n     * @param ratingType Type of rating (can be \"likes\" or \"fiveStar\")\n     * @param vote Rating value (boolean for \"likes\", numeric 0..5 for \"fiveStar\")\n     * @returns Details about the rating, including the new value\n     */\n    postRating(nodeId: string, ratingType: string, vote: any): Observable<RatingEntry | {}> {\n        let ratingBody: RatingBody = new RatingBody({\n            'id': ratingType,\n            'myRating': vote\n        });\n        return from(this.apiService.getInstance().core.ratingsApi.rate(nodeId, ratingBody))\n            .pipe(\n                catchError(this.handleError)\n            );\n    }\n\n    /**\n     * Removes the current user's rating for a node.\n     * @param nodeId Target node\n     * @param ratingType Type of rating to remove (can be \"likes\" or \"fiveStar\")\n     * @returns Null response indicating that the operation is complete\n     */\n    deleteRating(nodeId: string, ratingType: any): Observable<any> {\n        return from(this.apiService.getInstance().core.ratingsApi.removeRating(nodeId, ratingType))\n            .pipe(\n                catchError(this.handleError)\n            );\n    }\n\n    private handleError(error: any): any {\n        console.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { RatingService } from './services/rating.service';\nimport { RatingEntry } from '@alfresco/js-api';\n\n@Component({\n    selector: 'adf-rating',\n    styleUrls: ['./rating.component.scss'],\n    templateUrl: './rating.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class RatingComponent implements OnChanges {\n\n    /** Identifier of the node to apply the rating to. */\n    @Input()\n    nodeId: string;\n\n    average: number = 0;\n\n    ratingType: string = 'fiveStar';\n\n    /** Emitted when the \"vote\" gets changed. */\n    @Output()\n    changeVote = new EventEmitter();\n\n    stars: Array<any> = [];\n\n    constructor(private ratingService: RatingService) {\n    }\n\n    ngOnChanges() {\n        let ratingObserver = this.ratingService.getRating(this.nodeId, this.ratingType);\n\n        ratingObserver.subscribe(\n            (ratingEntry: RatingEntry) => {\n                if (ratingEntry.entry.aggregate) {\n                    this.average = ratingEntry.entry.aggregate.average;\n                    this.calculateStars();\n                }\n            }\n        );\n\n        return ratingObserver;\n    }\n\n    calculateStars() {\n        this.stars = [];\n\n        for (let i = 0; i < 5; i++) {\n            if (i < this.average) {\n                this.stars.push({ fill: true });\n            } else {\n                this.stars.push({ fill: false });\n            }\n        }\n\n        this.changeVote.emit(this.average);\n    }\n\n    updateVote(vote: number) {\n        this.ratingService.postRating(this.nodeId, this.ratingType, vote).subscribe(\n            (ratingEntry: RatingEntry) => {\n                if (ratingEntry.entry.aggregate) {\n                    if (this.average !== ratingEntry.entry.aggregate.average) {\n                        this.average = ratingEntry.entry.aggregate.average;\n                        this.calculateStars();\n                    }\n                }\n            }\n        );\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { RatingService } from './services/rating.service';\nimport { RatingEntry } from '@alfresco/js-api';\n\n@Component({\n    selector: 'adf-like',\n    styleUrls: ['./like.component.scss'],\n    templateUrl: './like.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class LikeComponent implements OnChanges {\n    /** Identifier of a node to apply likes to. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when the \"vote\" gets changed. */\n    @Output()\n    changeVote = new EventEmitter();\n\n    likesCounter: number = 0;\n    ratingType: string = 'likes';\n    isLike: boolean = false;\n\n    constructor(private ratingService: RatingService) {\n    }\n\n    ngOnChanges() {\n        this.clean();\n\n        this.ratingService.getRating(this.nodeId, this.ratingType).subscribe(\n            (ratingEntry: RatingEntry) => {\n                if (ratingEntry.entry.aggregate) {\n                    this.likesCounter = ratingEntry.entry.aggregate.numberOfRatings;\n                    if (ratingEntry.entry.ratedAt) {\n                        this.isLike = true;\n                    }\n                }\n            }\n        );\n    }\n\n    likeClick() {\n        if (this.isLike) {\n            this.ratingService.deleteRating(this.nodeId, this.ratingType).subscribe(\n                () => {\n                    this.likesCounter -= 1;\n                    this.isLike = false;\n                    this.changeVote.emit(this.likesCounter);\n                }\n            );\n        } else {\n            this.ratingService.postRating(this.nodeId, this.ratingType, true).subscribe(\n                (ratingEntry: RatingEntry) => {\n                    this.likesCounter = ratingEntry.entry.aggregate.numberOfRatings;\n                    this.isLike = true;\n                    this.changeVote.emit(this.likesCounter);\n                }\n            );\n        }\n    }\n\n    clean() {\n        this.isLike = false;\n        this.likesCounter = 0;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { LikeComponent } from './like.component';\nimport { RatingComponent } from './rating.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    exports: [\n        RatingComponent,\n        LikeComponent\n    ],\n    declarations: [\n        RatingComponent,\n        LikeComponent\n    ]\n})\nexport class SocialModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { Observable, from, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { TagBody,  TagPaging, TagEntry } from '@alfresco/js-api';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TagService {\n\n    /** Emitted when tag information is updated. */\n    @Output()\n    refresh = new EventEmitter();\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Gets a list of tags added to a node.\n     * @param nodeId ID of the target node\n     * @returns TagPaging object (defined in JS-API) containing the tags\n     */\n    getTagsByNodeId(nodeId: string): Observable<TagPaging> {\n        return from(this.apiService.getInstance().core.tagsApi.getNodeTags(nodeId)).pipe(\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Gets a list of all the tags already defined in the repository.\n     * @param opts Options supported by JS-API\n     * @returns TagPaging object (defined in JS-API) containing the tags\n     */\n    getAllTheTags(opts?: any): Observable<TagPaging> {\n        return from(this.apiService.getInstance().core.tagsApi.getTags(opts))\n            .pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Adds a tag to a node.\n     * @param nodeId ID of the target node\n     * @param tagName Name of the tag to add\n     * @returns TagEntry object (defined in JS-API) with details of the new tag\n     */\n    addTag(nodeId: string, tagName: string): Observable<TagEntry> {\n        const tagBody = new TagBody();\n        tagBody.tag = tagName;\n\n        let observableAdd = from(this.apiService.getInstance().core.tagsApi.addTag(nodeId, tagBody));\n\n        observableAdd.subscribe((tagEntry: TagEntry) => {\n            this.refresh.emit(tagEntry);\n        }, (err) => {\n            this.handleError(err);\n        });\n\n        return observableAdd;\n    }\n\n    /**\n     * Removes a tag from a node.\n     * @param nodeId ID of the target node\n     * @param tag Name of the tag to remove\n     * @returns Null object when the operation completes\n     */\n    removeTag(nodeId: string, tag: string): Observable<any> {\n        const observableRemove = from(this.apiService.getInstance().core.tagsApi.removeTag(nodeId, tag));\n\n        observableRemove.subscribe((data) => {\n            this.refresh.emit(data);\n        }, (err) => {\n            this.handleError(err);\n        });\n\n        return observableRemove;\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TranslationService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation, OnDestroy, OnInit } from '@angular/core';\nimport { TagService } from './services/tag.service';\nimport { Subscription } from 'rxjs';\nimport { TagPaging } from '@alfresco/js-api';\n\n/**\n *\n * This component, provide a list of the tags relative a node with actions button to add or remove new tag\n */\n\n@Component({\n    selector: 'adf-tag-node-actions-list',\n    templateUrl: './tag-actions.component.html',\n    styleUrls: ['./tag-actions.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TagActionsComponent implements OnChanges, OnInit, OnDestroy {\n\n    /** The identifier of a node. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when a tag is added successfully. */\n    @Output()\n    successAdd: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when an action is chosen. */\n    @Output()\n    result = new EventEmitter();\n\n    newTagName: string;\n    tagsEntries: any;\n    errorMsg: string;\n    disableAddTag: boolean = true;\n\n    private subscriptions: Subscription[] = [];\n\n    constructor(private tagService: TagService, private translateService: TranslationService) {\n    }\n\n    ngOnInit() {\n        this.subscriptions.push(\n            this.tagService.refresh.subscribe(() => {\n                this.refreshTag();\n            })\n        );\n    }\n\n    ngOnChanges() {\n        return this.refreshTag();\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n\n    refreshTag() {\n        if (this.nodeId) {\n            this.tagService.getTagsByNodeId(this.nodeId).subscribe((tagPaging: TagPaging) => {\n                this.tagsEntries = tagPaging.list.entries;\n                this.disableAddTag = false;\n                this.result.emit(this.tagsEntries);\n            }, () => {\n                this.tagsEntries = null;\n                this.disableAddTag = true;\n                this.result.emit(this.tagsEntries);\n            });\n        }\n    }\n\n    addTag() {\n        if (this.searchTag(this.newTagName)) {\n            this.translateService.get('TAG.MESSAGES.EXIST').subscribe((error) => {\n                this.errorMsg = error;\n            });\n            this.error.emit(this.errorMsg);\n        } else {\n            this.tagService.addTag(this.nodeId, this.newTagName).subscribe(() => {\n                this.newTagName = '';\n                this.successAdd.emit(this.nodeId);\n            });\n        }\n    }\n\n    searchTag(searchTagName: string) {\n        if (this.tagsEntries) {\n            return this.tagsEntries.find((currentTag) => {\n                return (searchTagName === currentTag.entry.tag);\n            });\n        }\n    }\n\n    cleanErrorMsg() {\n        this.errorMsg = '';\n    }\n\n    removeTag(tag: string) {\n        this.tagService.removeTag(this.nodeId, tag);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { TagService } from './services/tag.service';\nimport { PaginationModel } from '@alfresco/adf-core';\n\n/**\n * This component provide a list of all the tag inside the ECM\n */\n@Component({\n    selector: 'adf-tag-list',\n    templateUrl: './tag-list.component.html',\n    styleUrls: ['./tag-list.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TagListComponent implements OnInit {\n\n    /** Emitted when a tag is selected. */\n    @Output()\n    result = new EventEmitter();\n\n    /**\n     * Array of tags that are displayed\n     */\n    tagsEntries: any = [];\n\n    /**\n     * Number of items per iteration\n     */\n    size: number = 10;\n\n    defaultPagination: PaginationModel;\n    pagination: PaginationModel;\n\n    isLoading = false;\n    isSizeMinimum = true;\n\n    /**\n     * Constructor\n     * @param tagService\n     */\n    constructor(private tagService: TagService) {\n\n        this.defaultPagination = {\n            skipCount: 0,\n            maxItems: this.size,\n            hasMoreItems: false\n        };\n\n        this.pagination = this.defaultPagination;\n\n        this.tagService.refresh.subscribe(() => {\n            this.tagsEntries = [];\n            this.refreshTag(this.defaultPagination);\n        });\n    }\n\n    ngOnInit() {\n        return this.refreshTag(this.defaultPagination);\n    }\n\n    refreshTag(opts?: any) {\n        this.tagService.getAllTheTags(opts).subscribe((tags: any) => {\n            this.tagsEntries = this.tagsEntries.concat(tags.list.entries);\n            this.pagination = tags.list.pagination;\n            this.result.emit(this.tagsEntries);\n            this.isLoading = false;\n        });\n    }\n\n    loadMoreTags() {\n        if (this.pagination.hasMoreItems) {\n            this.isLoading = true;\n            this.isSizeMinimum = false;\n\n            this.refreshTag({\n                skipCount: this.pagination.skipCount + this.pagination.count,\n                maxItems: this.size\n            });\n        }\n    }\n\n    loadLessTags() {\n        this.isSizeMinimum = false;\n        this.tagsEntries = this.tagsEntries.slice(0, this.tagsEntries.length - this.pagination.count);\n        this.pagination.skipCount = this.pagination.skipCount - this.pagination.count;\n        this.pagination.hasMoreItems = true;\n\n        if (this.tagsEntries.length <= this.size) {\n            this.isSizeMinimum = true;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { TagService } from './services/tag.service';\nimport { TagPaging } from '@alfresco/js-api';\n\n/**\n *\n * This component, ShowNodeTag a list of the tag on relative a node\n */\n\n@Component({\n    selector: 'adf-tag-node-list',\n    templateUrl: './tag-node-list.component.html',\n    styleUrls: ['./tag-node-list.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TagNodeListComponent implements OnChanges {\n    /** The identifier of a node. */\n    @Input()\n    nodeId: string;\n\n    /** Show delete button */\n    @Input()\n    showDelete = true;\n\n    tagsEntries: any;\n\n    /** Emitted when a tag is selected. */\n    @Output()\n    results = new EventEmitter();\n\n    /**\n     * Constructor\n     * @param tagService\n     */\n    constructor(private tagService: TagService) {\n        this.tagService.refresh.subscribe(() => {\n            this.refreshTag();\n        });\n    }\n\n    ngOnChanges() {\n        return this.refreshTag();\n    }\n\n    refreshTag() {\n        if (this.nodeId) {\n            this.tagService.getTagsByNodeId(this.nodeId).subscribe((tagPaging: TagPaging) => {\n                this.tagsEntries = tagPaging.list.entries;\n                this.results.emit(this.tagsEntries);\n            });\n        }\n    }\n\n    removeTag(tag: string) {\n        this.tagService.removeTag(this.nodeId, tag).subscribe(() => {\n            this.refreshTag();\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MaterialModule } from '../material.module';\nimport { TagActionsComponent } from './tag-actions.component';\nimport { TagListComponent } from './tag-list.component';\nimport { TagNodeListComponent } from './tag-node-list.component';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        TagActionsComponent,\n        TagListComponent,\n        TagNodeListComponent\n    ],\n    declarations: [\n        TagActionsComponent,\n        TagListComponent,\n        TagNodeListComponent\n    ]\n})\nexport class TagModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ObjectDataTableAdapter } from '@alfresco/adf-core';\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\n\n/**\n * <adf-webscript-get [scriptPath]=\"string\"\n *                         [scriptArgs]=\"Object\"\n *                         [contextRoot]=\"string\"\n *                         [servicePath]=\"string\"\n *                         [contentType]=\"JSON|HTML|DATATABLE\"\n *                         (success)=\"customMethod($event)>\n * </adf-webscript-get>\n *\n * This component, provide a get webscript viewer\n *\n * @InputParam {string} scriptPath path to Web Script (as defined by Web Script)\n * @InputParam {Object} scriptArgs arguments to pass to Web Script\n * @InputParam {string} contextRoot path where application is deployed default value 'alfresco'\n * @InputParam {string} servicePath path where Web Script service is mapped default value 'service'\n * @InputParam {string} contentType JSON | HTML | DATATABLE | TEXT\n *\n * @Output - success - The event is emitted when the data are received\n *\n */\n@Component({\n    selector: 'adf-webscript-get',\n    templateUrl: 'webscript.component.html'\n})\nexport class WebscriptComponent implements OnChanges {\n\n    /** (required) Path to the webscript (as defined by webscript). */\n    @Input()\n    scriptPath: string;\n\n    /** Arguments to pass to the webscript. */\n    @Input()\n    scriptArgs: any;\n\n    /** Toggles whether to show or hide the data. */\n    @Input()\n    showData: boolean = true;\n\n    /** Path where the application is deployed */\n    @Input()\n    contextRoot: string = 'alfresco';\n\n    /** Path that the webscript service is mapped to. */\n    @Input()\n    servicePath: string = 'service';\n\n    /** Content type to interpret the data received from the webscript.\n     * Can be \"JSON\" , \"HTML\" , \"DATATABLE\" or \"TEXT\"\n     */\n    @Input()\n    contentType: string = 'TEXT';\n\n    /** Emitted when the operation succeeds. You can get the plain data from\n     * the webscript through the **success** event parameter and use it as you\n     * need in your application.\n     */\n    @Output()\n    success = new EventEmitter();\n\n    data: any = undefined;\n    showError: boolean = false;\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    ngOnChanges(changes) {\n        if (this.showData) {\n            this.clean();\n        }\n\n        return new Promise((resolve, reject) => {\n            this.apiService.getInstance().webScript.executeWebScript('GET', this.scriptPath, this.scriptArgs, this.contextRoot, this.servicePath).then((webScriptData) => {\n\n                this.data = webScriptData;\n\n                if (this.showData) {\n                    if (this.contentType === 'DATATABLE') {\n                        this.data = this.showDataAsDataTable(webScriptData);\n                    }\n                }\n\n                this.success.emit(this.data);\n\n                resolve();\n            }, (error) => {\n                this.logService.log('Error' + error);\n                reject();\n            });\n        });\n    }\n\n    /**\n     * show the data in a ng2-alfresco-datatable\n     *\n     * @param data\n     *\n     * @returns the data as datatable\n     */\n    showDataAsDataTable(data: any) {\n        let datatableData: any = null;\n        try {\n\n            if (!data.schema) {\n                data.schema = ObjectDataTableAdapter.generateSchema(data.data);\n            }\n\n            if (data.schema && data.schema.length > 0) {\n                this.data = new ObjectDataTableAdapter(data.data, data.schema);\n            }\n\n        } catch (error) {\n            this.logService.error('error during the cast as datatable');\n        }\n\n        return datatableData;\n    }\n\n    clean() {\n        this.data = undefined;\n    }\n\n    isDataTableContent() {\n        return this.contentType === 'DATATABLE';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CoreModule } from '@alfresco/adf-core';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { MaterialModule } from '../material.module';\nimport { WebscriptComponent } from './webscript.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        WebscriptComponent\n    ],\n    declarations: [\n        WebscriptComponent\n    ]\n})\nexport class WebScriptModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataRow, ObjectUtils, ThumbnailService, ContentService } from '@alfresco/adf-core';\nimport { MinimalNode, NodeEntry } from '@alfresco/js-api';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\n\nexport class ShareDataRow implements DataRow {\n\n    static ERR_OBJECT_NOT_FOUND: string = 'Object source not found';\n\n    cache: { [key: string]: any } = {};\n    isSelected: boolean = false;\n    isDropTarget: boolean;\n    cssClass: string = '';\n\n    get node(): NodeEntry {\n        return this.obj;\n    }\n\n    constructor(private obj: NodeEntry,\n                private contentService: ContentService,\n                private permissionsStyle: PermissionStyleModel[],\n                private thumbnailService?: ThumbnailService) {\n        if (!obj) {\n            throw new Error(ShareDataRow.ERR_OBJECT_NOT_FOUND);\n        }\n\n        this.isDropTarget = this.isFolderAndHasPermissionToUpload(obj);\n\n        if (permissionsStyle) {\n            this.cssClass = this.getPermissionClass(obj);\n        }\n    }\n\n    getPermissionClass(nodeEntity: NodeEntry): string {\n        let permissionsClasses = '';\n\n        this.permissionsStyle.forEach((currentPermissionsStyle: PermissionStyleModel) => {\n\n            if (this.applyPermissionStyleToFolder(nodeEntity.entry, currentPermissionsStyle) || this.applyPermissionStyleToFile(nodeEntity.entry, currentPermissionsStyle)) {\n\n                if (this.contentService.hasAllowableOperations(nodeEntity.entry, currentPermissionsStyle.permission)) {\n                    permissionsClasses += ` ${currentPermissionsStyle.css}`;\n                }\n            }\n\n        });\n\n        return permissionsClasses;\n    }\n\n    private applyPermissionStyleToFile(node: MinimalNode, currentPermissionsStyle: PermissionStyleModel): boolean {\n        return (currentPermissionsStyle.isFile && node.isFile);\n    }\n\n    private applyPermissionStyleToFolder(node: MinimalNode, currentPermissionsStyle: PermissionStyleModel): boolean {\n        return (currentPermissionsStyle.isFolder && node.isFolder);\n    }\n\n    isFolderAndHasPermissionToUpload(nodeEntry: NodeEntry): boolean {\n        return this.isFolder(nodeEntry) && this.contentService.hasAllowableOperations(nodeEntry.entry, 'create');\n    }\n\n    isFolder(nodeEntry: NodeEntry): boolean {\n        return nodeEntry.entry && nodeEntry.entry.isFolder;\n    }\n\n    cacheValue(key: string, value: any): any {\n        this.cache[key] = value;\n        return value;\n    }\n\n    getValue(key: string): any {\n        if (this.cache[key] !== undefined) {\n            return this.cache[key];\n        }\n        return ObjectUtils.getValue(this.obj.entry, key);\n    }\n\n    imageErrorResolver(event: Event): any {\n        if (this.obj.entry.content) {\n            return this.thumbnailService.getMimeTypeIcon(this.obj.entry.content.mimeType);\n        }\n    }\n\n    hasValue(key: string): boolean {\n        return this.getValue(key) !== undefined;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    DataColumn,\n    DataRow,\n    DataSorting,\n    DataTableAdapter,\n    ThumbnailService,\n    ContentService\n} from '@alfresco/adf-core';\nimport { NodePaging } from '@alfresco/js-api';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { DocumentListService } from './../services/document-list.service';\nimport { ShareDataRow } from './share-data-row.model';\nimport { NodeEntry } from '@alfresco/js-api/src/api/content-rest-api/model/nodeEntry';\nimport { RowFilter } from './row-filter.model';\n\nexport class ShareDataTableAdapter implements DataTableAdapter {\n\n    ERR_ROW_NOT_FOUND: string = 'Row not found';\n    ERR_COL_NOT_FOUND: string = 'Column not found';\n\n    private _sortingMode: string;\n    private sorting: DataSorting;\n    private rows: DataRow[];\n    private columns: DataColumn[];\n\n    private filter: RowFilter;\n    private imageResolver: any;\n\n    thumbnails: boolean = false;\n    permissionsStyle: PermissionStyleModel[];\n    selectedRow: DataRow;\n\n    set sortingMode(value: string) {\n        let newValue = (value || 'client').toLowerCase();\n        if (newValue !== 'client' && newValue !== 'server') {\n            newValue = 'client';\n        }\n        this._sortingMode = newValue;\n    }\n\n    get sortingMode(): string {\n        return this._sortingMode;\n    }\n\n    constructor(private documentListService: DocumentListService,\n                private thumbnailService: ThumbnailService,\n                private contentService: ContentService,\n                schema: DataColumn[] = [],\n                sorting?: DataSorting,\n                sortingMode: string = 'client') {\n        this.rows = [];\n        this.columns = schema || [];\n        this.sorting = sorting;\n        this.sortingMode = sortingMode;\n    }\n\n    getRows(): Array<DataRow> {\n        return this.rows;\n    }\n\n    // TODO: disable this api\n    setRows(rows: Array<DataRow>) {\n        this.rows = rows || [];\n        this.sort();\n    }\n\n    getColumns(): Array<DataColumn> {\n        return this.columns;\n    }\n\n    setColumns(columns: Array<DataColumn>) {\n        this.columns = columns || [];\n    }\n\n    getValue(row: DataRow, col: DataColumn): any {\n        if (!row) {\n            throw new Error(this.ERR_ROW_NOT_FOUND);\n        }\n        if (!col) {\n            throw new Error(this.ERR_COL_NOT_FOUND);\n        }\n        let dataRow: ShareDataRow = <ShareDataRow> row;\n        let value: any = row.getValue(col.key);\n        if (dataRow.cache[col.key] !== undefined) {\n            return dataRow.cache[col.key];\n        }\n\n        if (col.key === '$thumbnail') {\n\n            if (this.imageResolver) {\n                let resolved = this.imageResolver(row, col);\n                if (resolved) {\n                    return resolved;\n                }\n            }\n\n            const node = (<ShareDataRow> row).node;\n\n            if (node.entry.isFolder) {\n                return this.getFolderIcon(node);\n            }\n\n            if (node.entry.isFile) {\n                if (this.thumbnails) {\n                    return this.documentListService.getDocumentThumbnailUrl(node);\n                }\n            }\n\n            if (node.entry.content) {\n                const mimeType = node.entry.content.mimeType;\n                if (mimeType) {\n                    return this.documentListService.getMimeTypeIcon(mimeType);\n                }\n            }\n\n            return this.documentListService.getDefaultMimeTypeIcon();\n        }\n\n        if (col.type === 'image') {\n\n            if (this.imageResolver) {\n                let resolved = this.imageResolver(row, col);\n                if (resolved) {\n                    return resolved;\n                }\n            }\n        }\n\n        return dataRow.cacheValue(col.key, value);\n    }\n\n    getSorting(): DataSorting {\n        return this.sorting;\n    }\n\n    setSorting(sorting: DataSorting): void {\n        this.sorting = sorting;\n\n        this.sortRows(this.rows, this.sorting);\n    }\n\n    sort(key?: string, direction?: string): void {\n        let sorting = this.sorting || new DataSorting();\n        if (key) {\n            sorting.key = key;\n            sorting.direction = direction || 'asc';\n        }\n        this.setSorting(sorting);\n    }\n\n    setFilter(filter: RowFilter) {\n        this.filter = filter;\n    }\n\n    setImageResolver(resolver: any) {\n        this.imageResolver = resolver;\n    }\n\n    private getFolderIcon(node: any) {\n        if (this.isSmartFolder(node)) {\n            return this.documentListService.getMimeTypeIcon('smartFolder');\n        } else if (this.isRuleFolder(node)) {\n            return this.documentListService.getMimeTypeIcon('ruleFolder');\n        } else if (this.isALinkFolder(node)) {\n            return this.documentListService.getMimeTypeIcon('linkFolder');\n        } else {\n            return this.documentListService.getMimeTypeIcon('folder');\n        }\n    }\n\n    isSmartFolder(node: any) {\n        let nodeAspects = this.getNodeAspectNames(node);\n        return nodeAspects.indexOf('smf:customConfigSmartFolder') > -1 ||\n            (nodeAspects.indexOf('smf:systemConfigSmartFolder') > -1);\n    }\n\n    isRuleFolder(node: any) {\n        let nodeAspects = this.getNodeAspectNames(node);\n        return nodeAspects.indexOf('rule:rules') > -1 ||\n            (nodeAspects.indexOf('rule:rules') > -1);\n    }\n\n    isALinkFolder(node: any) {\n        const nodeType = node.entry ? node.entry.nodeType : node.nodeType;\n        return nodeType === 'app:folderlink';\n    }\n\n    private getNodeAspectNames(node: any): any[] {\n        return node.entry && node.entry.aspectNames ? node.entry.aspectNames : node.aspectNames ? node.aspectNames : [];\n    }\n\n    private sortRows(rows: DataRow[], sorting: DataSorting) {\n        if (this.sortingMode === 'server') {\n            return;\n        }\n\n        const options: Intl.CollatorOptions = {};\n\n        if (sorting && sorting.key && rows && rows.length > 0) {\n\n            if (sorting.key.includes('sizeInBytes') || sorting.key === 'name') {\n                options.numeric = true;\n            }\n\n            rows.sort((a: ShareDataRow, b: ShareDataRow) => {\n                if (a.node.entry.isFolder !== b.node.entry.isFolder) {\n                    return a.node.entry.isFolder ? -1 : 1;\n                }\n\n                let left = a.getValue(sorting.key);\n                if (left) {\n                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();\n                } else {\n                    left = '';\n                }\n\n                let right = b.getValue(sorting.key);\n                if (right) {\n                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();\n                } else {\n                    right = '';\n                }\n\n                return sorting.direction === 'asc'\n                    ? left.localeCompare(right, undefined, options)\n                    : right.localeCompare(left, undefined, options);\n            });\n        }\n    }\n\n    public loadPage(nodePaging: NodePaging, merge: boolean = false) {\n        let shareDataRows: ShareDataRow[] = [];\n\n        if (nodePaging && nodePaging.list) {\n            let nodeEntries: NodeEntry[] = nodePaging.list.entries;\n            if (nodeEntries && nodeEntries.length > 0) {\n                shareDataRows = nodeEntries.map((item) => new ShareDataRow(item, this.contentService, this.permissionsStyle, this.thumbnailService));\n\n                if (this.filter) {\n                    shareDataRows = shareDataRows.filter(this.filter);\n                }\n\n                if (this.sortingMode !== 'server') {\n                    // Sort by first sortable or just first column\n                    if (this.columns && this.columns.length > 0) {\n                        let sorting = this.getSorting();\n                        if (sorting) {\n                            this.sortRows(shareDataRows, sorting);\n                        } else {\n                            let sortable = this.columns.filter((c) => c.sortable);\n                            if (sortable.length > 0) {\n                                this.sort(sortable[0].key, 'asc');\n                            } else {\n                                this.sort(this.columns[0].key, 'asc');\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (merge) {\n            let listPrunedDuplicate = shareDataRows.filter((elementToFilter: any) => {\n                let isPresent = this.rows.find((currentRow: any) => {\n                    return currentRow.obj.entry.id === elementToFilter.obj.entry.id;\n                });\n\n                return !isPresent;\n            });\n\n            this.rows = this.rows.concat(listPrunedDuplicate);\n        } else {\n            this.rows = shareDataRows;\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport let presetsDefaultModel = {\n    '-trashcan-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'archivedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'archivedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_BY',\n            sortable: true\n        }\n    ],\n    '-sites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'title',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'visibility',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',\n            sortable: true\n        }\n    ],\n    '-mysites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'title',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'visibility',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',\n            sortable: true\n        }\n    ],\n    '-favorites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        }\n    ],\n    '-recent-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            cssClass: 'ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        }\n    ],\n    '-sharedlinks-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            cssClass: 'ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        },\n        {\n            key: 'sharedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SHARED_BY',\n            sortable: true\n        }\n    ],\n    'default': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        }\n    ]\n};\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ContentActionModel {\n    icon: string;\n    title: string;\n    handler: ContentActionHandler;\n    execute: Function;\n    target: string;\n    permission: string;\n    disableWithNoPermission: boolean = false;\n    disabled: boolean | Function = false;\n    visible: boolean | Function = true;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.icon = obj.icon;\n            this.title = obj.title;\n            this.handler = obj.handler;\n            this.execute = obj.execute;\n            this.target = obj.target;\n            this.permission = obj.permission;\n            this.disableWithNoPermission = obj.disableWithNoPermission;\n\n            if (obj.hasOwnProperty('disabled')) {\n                this.disabled = obj.disabled;\n            }\n\n            if (obj.hasOwnProperty('visible')) {\n                this.visible = obj.visible;\n            }\n        }\n    }\n}\n\nexport enum ContentActionTarget {\n    Document = 'document',\n    Folder = 'folder',\n    All = 'all'\n}\n\nexport type ContentActionHandler = (obj: any, target?: any, permission?: string) => any;\n\nexport class DocumentActionModel extends ContentActionModel {\n    constructor(json?: any)  {\n        super(json);\n        this.target = 'document';\n    }\n}\n\nexport class FolderActionModel extends  ContentActionModel {\n    constructor(json?: any)  {\n        super(json);\n        this.target = 'folder';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseEvent } from '@alfresco/adf-core';\nimport { NodeEntry, Node } from '@alfresco/js-api';\n\nexport class NodeEntityEvent extends BaseEvent<NodeEntry> {\n\n    value: NodeEntry;\n\n    defaultPrevented: boolean;\n\n    constructor(nodeEntry: NodeEntry) {\n        super();\n        this.value = nodeEntry;\n    }\n}\n\nexport class NodeEntryEvent extends BaseEvent<Node> {\n\n    value: Node;\n\n    defaultPrevented: boolean;\n\n    constructor(node: Node) {\n        super();\n        this.value = node;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AlfrescoApiService,\n    LogService,\n    PaginationModel\n} from '@alfresco/adf-core';\n\nimport {\n    NodePaging,\n    PersonEntry,\n    SitePaging,\n    DeletedNodesPaging,\n    SearchRequest,\n    SharedLinkPaging,\n    FavoritePaging,\n    SiteMemberPaging,\n    SiteRolePaging\n} from '@alfresco/js-api';\nimport { Injectable } from '@angular/core';\nimport { Observable, from, of, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CustomResourcesService {\n\n    private CREATE_PERMISSION = 'create';\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Gets files recently accessed by a user.\n     * @param personId ID of the user\n     * @param pagination Specifies how to paginate the results\n     * @returns List of nodes for the recently used files\n     */\n    getRecentFiles(personId: string, pagination: PaginationModel): Observable<NodePaging> {\n        return new Observable((observer) => {\n            this.apiService.peopleApi.getPerson(personId)\n                .then((person: PersonEntry) => {\n                        const username = person.entry.id;\n                        const query: SearchRequest = new SearchRequest({\n                            query: {\n                                query: '*',\n                                language: 'afts'\n                            },\n                            filterQueries: [\n                                { query: `cm:modified:[NOW/DAY-30DAYS TO NOW/DAY+1DAY]` },\n                                { query: `cm:modifier:${username} OR cm:creator:${username}` },\n                                { query: `TYPE:\"content\" AND -TYPE:\"app:filelink\" AND -TYPE:\"fm:post\"` }\n                            ],\n                            include: ['path', 'properties', 'allowableOperations'],\n                            sort: [{\n                                type: 'FIELD',\n                                field: 'cm:modified',\n                                ascending: false\n                            }],\n                            paging: {\n                                maxItems: pagination.maxItems,\n                                skipCount: pagination.skipCount\n                            }\n                        });\n                        return this.apiService.searchApi.search(query)\n                            .then((searchResult) => {\n                                    observer.next(searchResult);\n                                    observer.complete();\n                                },\n                                (err) => {\n                                    observer.error(err);\n                                    observer.complete();\n                                });\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Gets favorite files for the current user.\n     * @param pagination Specifies how to paginate the results\n     * @param includeFields List of data field names to include in the results\n     * @returns List of favorite files\n     */\n    loadFavorites(pagination: PaginationModel, includeFields: string[] = []): Observable<NodePaging> {\n        let includeFieldsRequest = this.getIncludesFields(includeFields);\n\n        const options = {\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount,\n            where: '(EXISTS(target/file) OR EXISTS(target/folder))',\n            include: includeFieldsRequest\n        };\n\n        return new Observable((observer) => {\n            this.apiService.favoritesApi.getFavorites('-me-', options)\n                .then((result: FavoritePaging) => {\n                        let page: FavoritePaging = {\n                            list: {\n                                entries: result.list.entries\n                                    .map(({ entry: { target } }: any) => ({\n                                        entry: target.file || target.folder\n                                    }))\n                                    .map(({ entry }: any) => {\n                                        entry.properties = {\n                                            'cm:title': entry.title,\n                                            'cm:description': entry.description\n                                        };\n                                        return { entry };\n                                    }),\n                                pagination: result.list.pagination\n                            }\n                        };\n\n                        observer.next(page);\n                        observer.complete();\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Gets sites that the current user is a member of.\n     * @param pagination Specifies how to paginate the results\n     * @returns List of sites\n     */\n    loadMemberSites(pagination: PaginationModel): Observable<SiteMemberPaging> {\n        const options = {\n            include: ['properties'],\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return new Observable((observer) => {\n            this.apiService.peopleApi.listSiteMembershipsForPerson('-me-', options)\n                .then((result: SiteRolePaging) => {\n                        let page: SiteMemberPaging = new SiteMemberPaging( {\n                            list: {\n                                entries: result.list.entries\n                                    .map(({ entry: { site } }: any) => {\n                                        site.allowableOperations = site.allowableOperations ? site.allowableOperations : [this.CREATE_PERMISSION];\n                                        site.name = site.name || site.title;\n                                        return {\n                                            entry: site\n                                        };\n                                    }),\n                                pagination: result.list.pagination\n                            }\n                        });\n\n                        observer.next(page);\n                        observer.complete();\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Gets all sites in the repository.\n     * @param pagination Specifies how to paginate the results\n     * @returns List of sites\n     */\n    loadSites(pagination: PaginationModel): Observable<NodePaging> {\n        const options = {\n            include: ['properties', 'aspectNames'],\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return new Observable((observer) => {\n            this.apiService.sitesApi.getSites(options)\n                .then((page: SitePaging) => {\n                        page.list.entries.map(\n                            ({ entry }: any) => {\n                                entry.name = entry.name || entry.title;\n                                return { entry };\n                            }\n                        );\n                        observer.next(page);\n                        observer.complete();\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Gets all items currently in the trash.\n     * @param pagination Specifies how to paginate the results\n     * @param includeFields List of data field names to include in the results\n     * @returns List of deleted items\n     */\n    loadTrashcan(pagination: PaginationModel, includeFields: string[] = []): Observable<DeletedNodesPaging> {\n        let includeFieldsRequest = this.getIncludesFields(includeFields);\n\n        const options = {\n            include: includeFieldsRequest,\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return from(this.apiService.nodesApi.getDeletedNodes(options))\n            .pipe(catchError((err) => this.handleError(err)));\n\n    }\n\n    /**\n     * Gets shared links for the current user.\n     * @param pagination Specifies how to paginate the results\n     * @param includeFields List of data field names to include in the results\n     * @returns List of shared links\n     */\n    loadSharedLinks(pagination: PaginationModel, includeFields: string[] = []): Observable<SharedLinkPaging> {\n        let includeFieldsRequest = this.getIncludesFields(includeFields);\n\n        const options = {\n            include: includeFieldsRequest,\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return from(this.apiService.sharedLinksApi.findSharedLinks(options))\n            .pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Is the folder ID one of the well-known aliases?\n     * @param folderId Folder ID name to check\n     * @returns True if the ID is a well-known name, false otherwise\n     */\n    isCustomSource(folderId: string): boolean {\n        let isCustomSources = false;\n        const sources = ['-trashcan-', '-sharedlinks-', '-sites-', '-mysites-', '-favorites-', '-recent-'];\n\n        if (sources.indexOf(folderId) > -1) {\n            isCustomSources = true;\n        }\n\n        return isCustomSources;\n    }\n\n    /**\n     * Is the folder ID a \"-my\", \"-root-\", or \"-shared-\" alias?\n     * @param folderId Folder ID name to check\n     * @returns True if the ID is one of the supported sources, false otherwise\n     */\n    isSupportedSource(folderId: string): boolean {\n        let isSupportedSources = false;\n        const sources = ['-my-', '-root-', '-shared-'];\n\n        if (sources.indexOf(folderId) > -1) {\n            isSupportedSources = true;\n        }\n\n        return isSupportedSources;\n    }\n\n    /**\n     * Gets a folder's contents.\n     * @param nodeId ID of the target folder node\n     * @param pagination Specifies how to paginate the results\n     * @param includeFields List of data field names to include in the results\n     * @returns List of items contained in the folder\n     */\n    loadFolderByNodeId(nodeId: string, pagination: PaginationModel, includeFields: string[] = []): any {\n        if (nodeId === '-trashcan-') {\n            return this.loadTrashcan(pagination, includeFields);\n        } else if (nodeId === '-sharedlinks-') {\n            return this.loadSharedLinks(pagination, includeFields);\n        } else if (nodeId === '-sites-') {\n            return this.loadSites(pagination);\n        } else if (nodeId === '-mysites-') {\n            return this.loadMemberSites(pagination);\n        } else if (nodeId === '-favorites-') {\n            return this.loadFavorites(pagination, includeFields);\n        } else if (nodeId === '-recent-') {\n            return this.getRecentFiles('-me-', pagination);\n        }\n    }\n\n    // TODO: remove it from here\n\n    /**\n     * Gets the contents of one of the well-known aliases in the form of node ID strings.\n     * @param nodeId ID of the target folder node\n     * @param pagination Specifies how to paginate the results\n     * @returns List of node IDs\n     */\n    getCorrespondingNodeIds(nodeId: string, pagination: PaginationModel = {}): Observable<string[]> {\n        if (this.isCustomSource(nodeId)) {\n\n            return this.loadFolderByNodeId(nodeId, pagination)\n                .pipe(map((result: any): string[] => {\n                    return result.list.entries.map((node: any): string => this.getIdFromEntry(node, nodeId));\n                }));\n\n        } else if (nodeId) {\n            // cases when nodeId is '-my-', '-root-' or '-shared-'\n            return from(this.apiService.nodesApi.getNode(nodeId)\n                .then((node) => [node.entry.id]));\n        }\n\n        return of([]);\n    }\n\n    /**\n     * Chooses the correct ID for a node entry.\n     * @param node Node object\n     * @param nodeId ID of the node object\n     * @returns ID value\n     */\n    getIdFromEntry(node: any, nodeId: string): string {\n        if (nodeId === '-sharedlinks-') {\n            return node.entry.nodeId;\n        } else if (nodeId === '-sites-' || nodeId === '-mysites-') {\n            return node.entry.guid;\n        } else if (nodeId === '-favorites-') {\n            return node.entry.targetGuid;\n        } else {\n            return node.entry.id;\n        }\n    }\n\n    /**\n     * Does the well-known alias have a corresponding node ID?\n     * @param nodeId Node to check\n     * @returns True if the alias has a corresponding node ID, false otherwise\n     */\n    hasCorrespondingNodeIds(nodeId: string): boolean {\n        return this.isCustomSource(nodeId) || this.isSupportedSource(nodeId);\n    }\n\n    private getIncludesFields(includeFields: string[]): string[] {\n        return ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n    }\n\n    private handleError(error: Response) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:rxjs-no-subject-value */\n\nimport {\n    AfterContentInit, Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, NgZone,\n    OnChanges, OnDestroy, OnInit, Output, SimpleChanges, ViewChild, ViewEncapsulation\n} from '@angular/core';\n\nimport {\n    ContentService,\n    DataCellEvent,\n    DataColumn,\n    DataRowActionEvent,\n    DataSorting,\n    DataTableComponent,\n    DisplayMode,\n    ObjectDataColumn,\n    PaginatedComponent,\n    AppConfigService,\n    DataColumnListComponent,\n    UserPreferencesService,\n    PaginationModel,\n    ThumbnailService,\n    CustomLoadingContentTemplateDirective,\n    CustomNoPermissionTemplateDirective,\n    CustomEmptyContentTemplateDirective,\n    RequestPaginationModel,\n    AlfrescoApiService,\n    UserPreferenceValues\n} from '@alfresco/adf-core';\n\nimport { Node, NodeEntry, NodePaging, Pagination } from '@alfresco/js-api';\nimport { Subject, BehaviorSubject, Subscription, of } from 'rxjs';\nimport { ShareDataRow } from './../data/share-data-row.model';\nimport { ShareDataTableAdapter } from './../data/share-datatable-adapter';\nimport { presetsDefaultModel } from '../models/preset.model';\nimport { ContentActionModel } from './../models/content-action.model';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { DocumentListService } from './../services/document-list.service';\nimport { NodeEntityEvent, NodeEntryEvent } from './node.event';\nimport { CustomResourcesService } from './../services/custom-resources.service';\nimport { NavigableComponentInterface } from '../../breadcrumb/navigable-component.interface';\nimport { RowFilter } from '../data/row-filter.model';\nimport { Observable } from 'rxjs/index';\n\n@Component({\n    selector: 'adf-document-list',\n    styleUrls: ['./document-list.component.scss'],\n    templateUrl: './document-list.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class DocumentListComponent implements OnInit, OnChanges, OnDestroy, AfterContentInit, PaginatedComponent, NavigableComponentInterface {\n\n    static SINGLE_CLICK_NAVIGATION: string = 'click';\n    static DOUBLE_CLICK_NAVIGATION: string = 'dblclick';\n\n    DEFAULT_PAGINATION: Pagination = new Pagination({\n        hasMoreItems: false,\n        skipCount: 0,\n        maxItems: 25,\n        totalItems: 0\n    });\n\n    @ContentChild(DataColumnListComponent)\n    columnList: DataColumnListComponent;\n\n    @ContentChild(CustomLoadingContentTemplateDirective)\n    customLoadingContent: CustomLoadingContentTemplateDirective;\n\n    @ContentChild(CustomNoPermissionTemplateDirective)\n    customNoPermissionsTemplate: CustomNoPermissionTemplateDirective;\n\n    @ContentChild(CustomEmptyContentTemplateDirective)\n    customNoContentTemplate: CustomEmptyContentTemplateDirective;\n\n    /** Include additional information about the node in the server request. For example: association, isLink, isLocked and others. */\n    @Input()\n    includeFields: string[];\n\n    /**\n     * Filters the Node list using the *where* condition of the REST API\n     * (for example, isFolder=true). See the REST API documentation for more information.\n     */\n    @Input()\n    where: string;\n\n    /** Change the display mode of the table. Can be \"list\" or \"gallery\". */\n    @Input()\n    display: string = DisplayMode.List;\n\n    /** Define a set of CSS styles to apply depending on the permission\n     * of the user on that node. See the Permission Style model\n     * page for further details and examples.\n     */\n    @Input()\n    permissionsStyle: PermissionStyleModel[] = [];\n\n    /** The default route for all the location-based columns (if declared). */\n    @Input()\n    locationFormat: string = '/';\n\n    /** Toggles navigation to folder content or file preview */\n    @Input()\n    navigate: boolean = true;\n\n    /** Toggles the header */\n    @Input()\n    showHeader: boolean = true;\n\n    /** User interaction for folder navigation or file preview.\n     * Valid values are \"click\" and \"dblclick\". Default value: \"dblclick\"\n     */\n    @Input()\n    navigationMode: string = DocumentListComponent.DOUBLE_CLICK_NAVIGATION; // click|dblclick\n\n    /** Show document thumbnails rather than icons */\n    @Input()\n    thumbnails: boolean = false;\n\n    /** Row selection mode. Can be null, `single` or `multiple`. For `multiple` mode,\n     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for multiple rows.\n     */\n    @Input()\n    selectionMode: string = 'single'; // null|single|multiple\n\n    /** Toggles multiselect mode */\n    @Input()\n    multiselect: boolean = false;\n\n    /** Toggles content actions for each row */\n    @Input()\n    contentActions: boolean = false;\n\n    /** Position of the content actions dropdown menu. Can be set to \"left\" or \"right\". */\n    @Input()\n    contentActionsPosition: string = 'right'; // left|right\n\n    /** Toggles context menus for each row */\n    @Input()\n    contextMenuActions: boolean = false;\n\n    /** Custom image for empty folder. Default value: './assets/images/empty_doc_lib.svg' */\n    @Input()\n    emptyFolderImageUrl: string = './assets/images/empty_doc_lib.svg';\n\n    /** Toggle file drop support for rows (see Upload Directive for further details) */\n    @Input()\n    allowDropFiles: boolean = false;\n\n    /** Defines default sorting. The format is an array of 2 strings `[key, direction]`\n     * i.e. `['name', 'desc']` or `['name', 'asc']`. Set this value only if you want to\n     * override the default sorting detected by the component based on columns.\n     */\n    @Input()\n    sorting = ['name', 'asc'];\n\n    /** Defines sorting mode. Can be either `client` (items in the list\n     * are sorted client-side) or `server` (the ordering supplied by the\n     * server is used without further client-side sorting).\n     * Note that the `server` option *does not* request the server to sort the data\n     * before delivering it.\n     */\n    @Input()\n    sortingMode = 'client';\n\n    /** The inline style to apply to every row. See\n     * the Angular NgStyle\n     * docs for more details and usage examples.\n     */\n    @Input()\n    rowStyle: string;\n\n    /** The CSS class to apply to every row */\n    @Input()\n    rowStyleClass: string;\n\n    /** Toggles the loading state and animated spinners for the component. Used in\n     * combination with `navigate=false` to perform custom navigation and loading\n     * state indication.\n     */\n    @Input()\n    loading: boolean = false;\n\n    /** @hidden */\n    @Input()\n    _rowFilter: RowFilter | null = null;\n\n    /**\n     * Custom function to choose whether to show or hide rows.\n     * See the [Row Filter Model](row-filter.model.md) page for\n     * more information.\n     */\n    @Input()\n    set rowFilter(rowFilter: RowFilter) {\n        this._rowFilter = rowFilter;\n        if (this.data) {\n            this.data.setFilter(this._rowFilter);\n            if (this._currentFolderId) {\n                this.reload();\n            }\n        }\n    }\n\n    get rowFilter(): RowFilter {\n        return this._rowFilter;\n    }\n\n    /**\n     * Custom function to choose image file paths to show. See the\n     * [Image Resolver Model](image-resolver.model.md) page for\n     * more information.\n     */\n    @Input()\n    imageResolver: any | null = null;\n\n    _currentFolderId: string = null;\n\n    /** The ID of the folder node to display or a reserved string alias for special sources */\n    @Input()\n    set currentFolderId(currentFolderId: string) {\n        if (this._currentFolderId !== currentFolderId) {\n            this._currentFolderId = currentFolderId;\n            if (this.data) {\n                this.data.loadPage(null, false);\n                this.resetNewFolderPagination();\n            }\n\n            if (this._currentFolderId) {\n                this.loadFolder();\n            }\n        }\n    }\n\n    get currentFolderId(): string {\n        return this._currentFolderId;\n    }\n\n    /** The Document list will show all the nodes contained in the NodePaging entity */\n    @Input()\n    node: NodePaging = null;\n\n    /** Default value is stored in the user preference settings. Use this only if you are not using pagination. */\n    @Input()\n    maxItems: number = this.DEFAULT_PAGINATION.maxItems;\n\n    /** Emitted when the user clicks a list node */\n    @Output()\n    nodeClick: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    /** Emitted when the user double-clicks a list node */\n    @Output()\n    nodeDblClick: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    /** Emitted when the current display folder changes */\n    @Output()\n    folderChange: EventEmitter<NodeEntryEvent> = new EventEmitter<NodeEntryEvent>();\n\n    /** Emitted when the user acts upon files with either single or double click\n     * (depends on `navigation-mode`). Useful for integration with the\n     * Viewer component.\n     */\n    @Output()\n    preview: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    /** Emitted when the Document List has loaded all items and is ready for use */\n    @Output()\n    ready: EventEmitter<NodePaging> = new EventEmitter();\n\n    /** Emitted when the API fails to get the Document List data */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('dataTable')\n    dataTable: DataTableComponent;\n\n    actions: ContentActionModel[] = [];\n    contextActionHandler: Subject<any> = new Subject();\n    data: ShareDataTableAdapter;\n    noPermission: boolean = false;\n    selection = new Array<NodeEntry>();\n    $folderNode: Subject<Node> = new Subject<Node>();\n\n    // @deprecated 3.0.0\n    folderNode: Node;\n\n    private _pagination: PaginationModel = this.DEFAULT_PAGINATION;\n    pagination: BehaviorSubject<PaginationModel> = new BehaviorSubject<PaginationModel>(this.DEFAULT_PAGINATION);\n\n    private layoutPresets = {};\n    private subscriptions: Subscription[] = [];\n    private rowMenuCache: { [key: string]: ContentActionModel[] } = {};\n    private loadingTimeout;\n\n    constructor(private documentListService: DocumentListService,\n                private ngZone: NgZone,\n                private elementRef: ElementRef,\n                private appConfig: AppConfigService,\n                private userPreferencesService: UserPreferencesService,\n                private customResourcesService: CustomResourcesService,\n                private contentService: ContentService,\n                private thumbnailService: ThumbnailService,\n                private alfrescoApiService: AlfrescoApiService) {\n\n        this.userPreferencesService.select(UserPreferenceValues.PaginationSize).subscribe((pagSize) => {\n            this.maxItems = this._pagination.maxItems = pagSize;\n        });\n    }\n\n    getContextActions(node: NodeEntry) {\n        if (node && node.entry) {\n            let actions = this.getNodeActions(node);\n            if (actions && actions.length > 0) {\n                return actions.map((currentAction: ContentActionModel) => {\n                    return {\n                        model: currentAction,\n                        node: node,\n                        subject: this.contextActionHandler\n                    };\n                });\n            }\n        }\n        return null;\n    }\n\n    get hasCustomLayout(): boolean {\n        return this.columnList && this.columnList.columns && this.columnList.columns.length > 0;\n    }\n\n    private getDefaultSorting(): DataSorting {\n        let defaultSorting: DataSorting;\n        if (this.sorting) {\n            const [key, direction] = this.sorting;\n            defaultSorting = new DataSorting(key, direction);\n        }\n        return defaultSorting;\n    }\n\n    private getLayoutPreset(name: string = 'default'): DataColumn[] {\n        return (this.layoutPresets[name] || this.layoutPresets['default']).map((col) => new ObjectDataColumn(col));\n    }\n\n    isMobile(): boolean {\n        return !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    }\n\n    isEmpty() {\n        return !this.data || this.data.getRows().length === 0;\n    }\n\n    ngOnInit() {\n        this.rowMenuCache = {};\n        this.loadLayoutPresets();\n        this.data = new ShareDataTableAdapter(this.documentListService, this.thumbnailService, this.contentService, null, this.getDefaultSorting(), this.sortingMode);\n        this.data.thumbnails = this.thumbnails;\n        this.data.permissionsStyle = this.permissionsStyle;\n\n        if (this._rowFilter) {\n            this.data.setFilter(this._rowFilter);\n        }\n\n        if (this.imageResolver) {\n            this.data.setImageResolver(this.imageResolver);\n        }\n\n        this.subscriptions.push(\n            this.contextActionHandler.subscribe((val) => this.contextActionCallback(val))\n        );\n\n        this.enforceSingleClickNavigationForMobile();\n    }\n\n    ngAfterContentInit() {\n        if (this.columnList) {\n            this.subscriptions.push(\n                this.columnList.columns.changes.subscribe(() => {\n                    this.setTableSchema();\n                })\n            );\n        }\n        this.setTableSchema();\n    }\n\n    private setTableSchema() {\n        let schema: DataColumn[] = [];\n\n        if (this.hasCustomLayout) {\n            schema = this.columnList.columns.map((c) => <DataColumn> c);\n        }\n\n        if (!this.data) {\n            this.data = new ShareDataTableAdapter(this.documentListService, this.thumbnailService, this.contentService, schema, this.getDefaultSorting(), this.sortingMode);\n        } else if (schema && schema.length > 0) {\n            this.data.setColumns(schema);\n        }\n\n        let columns = this.data.getColumns();\n        if (!columns || columns.length === 0) {\n            this.setupDefaultColumns(this._currentFolderId);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.resetSelection();\n        if (this.data) {\n            this.data.thumbnails = this.thumbnails;\n\n        }\n        if (changes.sortingMode && !changes.sortingMode.firstChange && this.data) {\n            this.data.sortingMode = changes.sortingMode.currentValue;\n        }\n\n        if (changes.sorting && !changes.sorting.firstChange && this.data) {\n            const newValue = changes.sorting.currentValue;\n            if (newValue && newValue.length > 0) {\n                const [key, direction] = newValue;\n                this.data.setSorting(new DataSorting(key, direction));\n            }\n        }\n\n        if (this.data) {\n            if (changes.node && changes.node.currentValue) {\n                let merge = this._pagination ? this._pagination.merge : false;\n\n                this.data.loadPage(changes.node.currentValue, merge);\n                this.onDataReady(changes.node.currentValue);\n            } else if (changes.imageResolver) {\n                this.data.setImageResolver(changes.imageResolver.currentValue);\n            }\n        }\n    }\n\n    reload() {\n        this.ngZone.run(() => {\n            this.resetSelection();\n            if (this.node) {\n                this.data.loadPage(this.node, this._pagination.merge);\n                this.onDataReady(this.node);\n            } else {\n                this.loadFolder();\n            }\n        });\n    }\n\n    contextActionCallback(action) {\n        if (action) {\n            this.executeContentAction(action.node, action.model);\n        }\n    }\n\n    getNodeActions(node: NodeEntry | any): ContentActionModel[] {\n        if (node && node.entry) {\n            let target = null;\n\n            if (node.entry.isFile) {\n                target = 'document';\n            } else if (node.entry.isFolder) {\n                target = 'folder';\n            }\n\n            if (target) {\n                const actions = this.rowMenuCache[node.entry.id];\n                if (actions) {\n                    actions.forEach((action) => {\n                        this.refreshAction(action, node);\n                    });\n                    return actions;\n                }\n\n                let actionsByTarget = this.actions\n                    .filter((entry) => {\n                        const isVisible = (typeof entry.visible === 'function')\n                            ? entry.visible(node)\n                            : entry.visible;\n\n                        return isVisible && entry.target.toLowerCase() === target;\n                    })\n                    .map((action) => new ContentActionModel(action));\n\n                actionsByTarget.forEach((action) => {\n                    this.refreshAction(action, node);\n                });\n\n                this.rowMenuCache[node.entry.id] = actionsByTarget;\n                return actionsByTarget;\n            }\n        }\n\n        return [];\n    }\n\n    private refreshAction(action: ContentActionModel, node: NodeEntry) {\n        action.disabled = this.isActionDisabled(action, node);\n        action.visible = this.isActionVisible(action, node);\n    }\n\n    private isActionVisible(action: ContentActionModel, node: NodeEntry): boolean {\n        if (typeof action.visible === 'function') {\n            return action.visible(node);\n        }\n\n        return action.visible;\n    }\n\n    private isActionDisabled(action: ContentActionModel, node: NodeEntry): boolean {\n        if (typeof action.disabled === 'function') {\n            return action.disabled(node);\n        }\n\n        if (action.permission && action.disableWithNoPermission && !this.contentService.hasAllowableOperations(node.entry, action.permission)) {\n            return true;\n        }\n\n        return action.disabled;\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onShowContextMenu(e?: Event) {\n        if (e && this.contextMenuActions) {\n            e.preventDefault();\n        }\n    }\n\n    navigateTo(node: Node | string): boolean {\n        if (typeof node === 'string') {\n            this.resetNewFolderPagination();\n            this._currentFolderId = node;\n            this.folderChange.emit(new NodeEntryEvent(<Node> { id: node }));\n            this.reload();\n            return true;\n        } else {\n            if (this.canNavigateFolder(node)) {\n                this.resetNewFolderPagination();\n                this._currentFolderId = this.getNodeFolderDestinationId(node);\n                this.folderChange.emit(new NodeEntryEvent(<Node> { id: this._currentFolderId }));\n                this.reload();\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private getNodeFolderDestinationId(node: Node) {\n        return this.isLinkFolder(node) ? node.properties['cm:destination'] : node.id;\n    }\n\n    private isLinkFolder(node: Node) {\n        return node.nodeType === 'app:folderlink' && node.properties &&\n            node.properties['cm:destination'];\n    }\n\n    updateCustomSourceData(nodeId: string): void {\n        this._currentFolderId = nodeId;\n    }\n\n    /**\n     * Invoked when executing content action for a document or folder.\n     * @param node Node to be the context of the execution.\n     * @param action Action to be executed against the context.\n     */\n    executeContentAction(node: NodeEntry, action: ContentActionModel) {\n        if (node && node.entry && action) {\n            let handlerSub;\n\n            if (typeof action.handler === 'function') {\n                handlerSub = action.handler(node, this, action.permission);\n            } else {\n                handlerSub = of(true);\n            }\n\n            if (typeof action.execute === 'function' && handlerSub) {\n                handlerSub.subscribe(() => {\n                    action.execute(node);\n                });\n            }\n        }\n    }\n\n    private setLoadingState(value: boolean) {\n        if (value) {\n            clearTimeout(this.loadingTimeout);\n            this.loadingTimeout = setTimeout(() => {\n                this.loading = true;\n            }, 1000);\n        } else {\n            clearTimeout(this.loadingTimeout);\n            this.loading = false;\n        }\n    }\n\n    loadFolder() {\n        if (!this._pagination.merge) {\n            this.setLoadingState(true);\n        }\n\n        if (!this.hasCustomLayout) {\n            this.setupDefaultColumns(this._currentFolderId);\n        }\n\n        this.loadFolderByNodeId(this._currentFolderId);\n    }\n\n    loadFolderByNodeId(nodeId: string) {\n        if (this.customResourcesService.isCustomSource(nodeId)) {\n            this.updateCustomSourceData(nodeId);\n            this.customResourcesService.loadFolderByNodeId(nodeId, this._pagination, this.includeFields)\n                .subscribe((nodePaging: NodePaging) => {\n                    this.onPageLoaded(nodePaging);\n                }, (err) => {\n                    this.error.emit(err);\n                });\n        } else {\n\n            this.documentListService.getFolder(null, {\n                maxItems: this._pagination.maxItems,\n                skipCount: this._pagination.skipCount,\n                rootFolderId: nodeId,\n                where: this.where\n            }, this.includeFields)\n                .subscribe((nodePaging: NodePaging) => {\n                    this.getSourceNodeWithPath(nodeId).subscribe((nodeEntry: NodeEntry) => {\n                        this.onPageLoaded(nodePaging);\n                    });\n                }, (err) => {\n                    this.handleError(err);\n                });\n        }\n    }\n\n    getSourceNodeWithPath(nodeId: string): Observable<NodeEntry> {\n        let getSourceObservable = this.documentListService.getFolderNode(nodeId, this.includeFields);\n\n        getSourceObservable.subscribe((nodeEntry: NodeEntry) => {\n            this.folderNode = nodeEntry.entry;\n            this.$folderNode.next(this.folderNode);\n        });\n\n        return getSourceObservable;\n    }\n\n    resetSelection() {\n        this.dataTable.resetSelection();\n        this.selection = [];\n        this.noPermission = false;\n    }\n\n    onPageLoaded(nodePaging: NodePaging) {\n        if (nodePaging) {\n            this.data.loadPage(nodePaging, this._pagination.merge);\n            this.setLoadingState(false);\n            this.onDataReady(nodePaging);\n        }\n    }\n\n    /**\n     * Creates a set of predefined columns.\n     */\n    setupDefaultColumns(preset: string = 'default'): void {\n        if (this.data) {\n            const columns = this.getLayoutPreset(preset);\n            this.data.setColumns(columns);\n        }\n    }\n\n    onPreviewFile(node: NodeEntry) {\n        if (node) {\n            this.preview.emit(new NodeEntityEvent(node));\n        }\n    }\n\n    onNodeClick(nodeEntry: NodeEntry) {\n        const domEvent = new CustomEvent('node-click', {\n            detail: {\n                sender: this,\n                node: nodeEntry\n            },\n            bubbles: true\n        });\n\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n\n        const event = new NodeEntityEvent(nodeEntry);\n        this.nodeClick.emit(event);\n\n        if (!event.defaultPrevented) {\n            if (this.navigate && this.navigationMode === DocumentListComponent.SINGLE_CLICK_NAVIGATION) {\n                this.executeActionClick(nodeEntry);\n            }\n        }\n\n    }\n\n    onNodeDblClick(nodeEntry: NodeEntry) {\n        const domEvent = new CustomEvent('node-dblclick', {\n            detail: {\n                sender: this,\n                node: nodeEntry\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n\n        const event = new NodeEntityEvent(nodeEntry);\n        this.nodeDblClick.emit(event);\n\n        if (!event.defaultPrevented) {\n            if (this.navigate && this.navigationMode === DocumentListComponent.DOUBLE_CLICK_NAVIGATION) {\n                this.executeActionClick(nodeEntry);\n            }\n        }\n    }\n\n    executeActionClick(nodeEntry: NodeEntry) {\n        if (nodeEntry && nodeEntry.entry) {\n            if (nodeEntry.entry.isFile) {\n                this.onPreviewFile(nodeEntry);\n            }\n\n            if (nodeEntry.entry.isFolder) {\n                this.navigateTo(nodeEntry.entry);\n            }\n\n            if (nodeEntry.entry['guid']) {\n                const options = {\n                    include: this.includeFields\n                };\n\n                this.alfrescoApiService.nodesApi.getNode(nodeEntry.entry['guid'], options)\n                    .then((node: NodeEntry) => {\n                        this.navigateTo(node.entry);\n                    });\n            }\n        }\n    }\n\n    onNodeSelect(event: { row: ShareDataRow, selection: Array<ShareDataRow> }) {\n        this.selection = event.selection.map((entry) => entry.node);\n        const domEvent = new CustomEvent('node-select', {\n            detail: {\n                node: event.row.node,\n                selection: this.selection\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n    }\n\n    onNodeUnselect(event: { row: ShareDataRow, selection: Array<ShareDataRow> }) {\n        this.selection = event.selection.map((entry) => entry.node);\n        const domEvent = new CustomEvent('node-unselect', {\n            detail: {\n                node: event.row.node,\n                selection: this.selection\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n    }\n\n    onShowRowContextMenu(event: DataCellEvent) {\n        if (this.contextMenuActions) {\n            let args = event.value;\n            let node = (<ShareDataRow> args.row).node;\n            if (node) {\n                args.actions = this.getContextActions(node) || [];\n            }\n        }\n    }\n\n    onShowRowActionsMenu(event: DataCellEvent) {\n        if (this.contentActions) {\n            let args = event.value;\n            let node = (<ShareDataRow> args.row).node;\n            if (node) {\n                args.actions = this.getNodeActions(node) || [];\n            }\n        }\n    }\n\n    onExecuteRowAction(event: DataRowActionEvent) {\n        if (this.contentActions) {\n            let args = event.value;\n            let node = (<ShareDataRow> args.row).node;\n            let action = (<ContentActionModel> args.action);\n            this.executeContentAction(node, action);\n        }\n    }\n\n    private enforceSingleClickNavigationForMobile(): void {\n        if (this.isMobile()) {\n            this.navigationMode = DocumentListComponent.SINGLE_CLICK_NAVIGATION;\n        }\n    }\n\n    canNavigateFolder(node: Node): boolean {\n        let canNavigateFolder: boolean = false;\n\n        if (node && node.isFolder) {\n            canNavigateFolder = true;\n        }\n\n        return canNavigateFolder;\n    }\n\n    private loadLayoutPresets(): void {\n        const externalSettings = this.appConfig.get('document-list.presets', null);\n\n        if (externalSettings) {\n            this.layoutPresets = Object.assign({}, presetsDefaultModel, externalSettings);\n        } else {\n            this.layoutPresets = presetsDefaultModel;\n        }\n    }\n\n    private onDataReady(nodePaging: NodePaging) {\n        this.ready.emit(nodePaging);\n        this.pagination.next(nodePaging.list.pagination);\n    }\n\n    updatePagination(requestPaginationModel: RequestPaginationModel) {\n        this._pagination.maxItems = requestPaginationModel.maxItems;\n        this._pagination.merge = requestPaginationModel.merge;\n        this._pagination.skipCount = requestPaginationModel.skipCount;\n        this.reload();\n    }\n\n    private resetNewFolderPagination() {\n        this._pagination.skipCount = 0;\n        this._pagination.maxItems = this.maxItems;\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach((s) => s.unsubscribe());\n        this.subscriptions = [];\n    }\n\n    private handleError(err: any) {\n        if (err.message) {\n            try {\n                if (JSON.parse(err.message).error.statusCode === 403) {\n                    this.setLoadingState(false);\n                    this.noPermission = true;\n                }\n            } catch (error) {\n            }\n        }\n        this.error.emit(err);\n\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { DataColumn } from '@alfresco/adf-core';\nimport { LogService } from '@alfresco/adf-core';\nimport { Component } from '@angular/core';\n\nimport { DocumentListComponent } from './../document-list.component';\n\n@Component({\n    selector: 'content-columns',\n    template: ''\n})\nexport class ContentColumnListComponent {\n\n    constructor(private documentList: DocumentListComponent, private logService: LogService ) {\n        this.logService.log('ContentColumnListComponent is deprecated starting with 1.7.0 and may be removed in future versions. Use DataColumnListComponent instead.');\n    }\n\n    /**\n     * Registers column model within the parent document list component.\n     * @param column Column definition model to register.\n     */\n    registerColumn(column: DataColumn): boolean {\n        if (this.documentList && column) {\n            let columns = this.documentList.data.getColumns();\n            columns.push(column);\n            return true;\n        }\n        return false;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector no-input-rename  */\n\nimport { DataColumn } from '@alfresco/adf-core';\nimport { LogService } from '@alfresco/adf-core';\nimport { AfterContentInit, Component, ContentChild, Input, OnInit, TemplateRef } from '@angular/core';\n\nimport { ContentColumnListComponent } from './content-column-list.component';\n\n@Component({\n    selector: 'content-column',\n    template: ''\n})\nexport class ContentColumnComponent implements OnInit, AfterContentInit, DataColumn {\n\n    @Input()\n    key: string;\n\n    @Input()\n    type: string = 'text';\n\n    @Input()\n    format: string;\n\n    @Input()\n    sortable: boolean = false;\n\n    @Input()\n    title: string = '';\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    /**\n     * Title to be used for screen readers.\n     */\n    @Input('sr-title')\n    srTitle: string;\n\n    @Input('class')\n    cssClass: string;\n\n    constructor(private list: ContentColumnListComponent, private logService: LogService) {\n        this.logService.log('ContentColumnComponent is deprecated starting with 1.7.0 and may be removed in future versions. Use DataColumnComponent instead.');\n    }\n\n    ngOnInit() {\n        if (!this.srTitle && this.key === '$thumbnail') {\n            this.srTitle = 'Thumbnail';\n        }\n    }\n\n    ngAfterContentInit() {\n        this.register();\n    }\n\n    register(): boolean {\n        if (this.list) {\n            return this.list.registerColumn(this);\n        }\n        return false;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class PermissionModel {\n    type: string;\n    action: string;\n    permission: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.type = obj.type || null;\n            this.action = obj.action || null;\n            this.permission = obj.permission || null;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable, Output, EventEmitter } from '@angular/core';\nimport { Node, NodeEntry } from '@alfresco/js-api';\nimport { Subject } from 'rxjs';\nimport { AlfrescoApiService, ContentService, NodeDownloadDirective } from '@alfresco/adf-core';\nimport { MatDialog } from '@angular/material';\n\nimport { DocumentListService } from './document-list.service';\nimport { ContentNodeDialogService } from '../../content-node-selector/content-node-dialog.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NodeActionsService {\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private contentDialogService: ContentNodeDialogService,\n                public dialogRef: MatDialog,\n                public content: ContentService,\n                private documentListService?: DocumentListService,\n                private apiService?: AlfrescoApiService,\n                private dialog?: MatDialog) {}\n\n    downloadNode(node: NodeEntry) {\n        new NodeDownloadDirective(this.apiService, this.dialog)\n            .downloadNode(node);\n    }\n\n    /**\n     * Copy content node\n     *\n     * @param contentEntry node to copy\n     * @param permission permission which is needed to apply the action\n     */\n    public copyContent(contentEntry: Node, permission?: string): Subject<string> {\n        return this.doFileOperation('copy', 'content', contentEntry, permission);\n    }\n\n    /**\n     * Copy folder node\n     *\n     * @param contentEntry node to copy\n     * @param permission permission which is needed to apply the action\n     */\n    public copyFolder(contentEntry: Node, permission?: string): Subject<string> {\n        return this.doFileOperation('copy', 'folder', contentEntry, permission);\n    }\n\n    /**\n     * Move content node\n     *\n     * @param contentEntry node to move\n     * @param permission permission which is needed to apply the action\n     */\n    public moveContent(contentEntry: Node, permission?: string): Subject<string> {\n        return this.doFileOperation('move', 'content', contentEntry, permission);\n    }\n\n    /**\n     * Move folder node\n     *\n     * @param contentEntry node to move\n     * @param permission permission which is needed to apply the action\n     */\n    public moveFolder(contentEntry: Node, permission?: string): Subject<string> {\n        return this.doFileOperation('move', 'folder', contentEntry, permission);\n    }\n\n    /**\n     * General method for performing the given operation (copy|move)\n     *\n     * @param action the action to perform (copy|move)\n     * @param type type of the content (content|folder)\n     * @param contentEntry the contentEntry which has to have the action performed on\n     * @param permission permission which is needed to apply the action\n     */\n    private doFileOperation(action: string, type: string, contentEntry: Node, permission?: string): Subject<string> {\n        const observable: Subject<string> = new Subject<string>();\n\n        this.contentDialogService\n            .openCopyMoveDialog(action, contentEntry, permission)\n            .subscribe((selections: Node[]) => {\n                const selection = selections[0];\n                this.documentListService[`${action}Node`].call(this.documentListService, contentEntry.id, selection.id)\n                    .subscribe(\n                    observable.next.bind(observable, `OPERATION.SUCCESS.${type.toUpperCase()}.${action.toUpperCase()}`),\n                    observable.error.bind(observable)\n                    );\n            },\n            (error) => {\n                observable.error(error);\n                return observable;\n            });\n        return observable;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentService, TranslationService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { Observable, Subject, throwError } from 'rxjs';\nimport { ContentActionHandler } from '../models/content-action.model';\nimport { PermissionModel } from '../models/permissions.model';\nimport { DocumentListService } from './document-list.service';\nimport { NodeActionsService } from './node-actions.service';\nimport { ContentNodeDialogService } from '../../content-node-selector/content-node-dialog.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DocumentActionsService {\n\n    permissionEvent: Subject<PermissionModel> = new Subject<PermissionModel>();\n    error: Subject<Error> = new Subject<Error>();\n    success: Subject<string> = new Subject<string>();\n\n    private handlers: { [id: string]: ContentActionHandler; } = {};\n\n    constructor(private nodeActionsService: NodeActionsService,\n                private contentNodeDialogService: ContentNodeDialogService,\n                private translation: TranslationService,\n                private documentListService?: DocumentListService,\n                private contentService?: ContentService) {\n        this.setupActionHandlers();\n    }\n\n    /**\n     * Gets the handler for an action.\n     * @param key Identifier of the action\n     * @returns The handler for the action\n     */\n    getHandler(key: string): ContentActionHandler {\n        if (key) {\n            let lKey = key.toLowerCase();\n            return this.handlers[lKey] || null;\n        }\n        return null;\n    }\n\n    /**\n     * Sets a new handler for an action.\n     * @param key Identifier of the action\n     * @param handler Handler for the action\n     * @returns False if the key was an empty/null string, true otherwise\n     */\n    setHandler(key: string, handler: ContentActionHandler): boolean {\n        if (key) {\n            let lKey = key.toLowerCase();\n            this.handlers[lKey] = handler;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Checks if actions can be executed for an item.\n     * @param nodeEntry Item to receive an action\n     * @returns True if the action can be executed on this item, false otherwise\n     */\n    canExecuteAction(nodeEntry: NodeEntry): boolean {\n        return this.documentListService && nodeEntry && nodeEntry.entry.isFile === true;\n    }\n\n    private setupActionHandlers() {\n        this.handlers['copy'] = this.copyNode.bind(this);\n        this.handlers['move'] = this.moveNode.bind(this);\n        this.handlers['delete'] = this.deleteNode.bind(this);\n        this.handlers['download'] = this.downloadNode.bind(this);\n        this.handlers['lock'] = this.lockNode.bind(this);\n    }\n\n    private lockNode(node: NodeEntry, target?: any, permission?: string) {\n        return this.contentNodeDialogService.openLockNodeDialog(node.entry);\n    }\n\n    private downloadNode(obj: NodeEntry, target?: any, permission?: string) {\n        this.nodeActionsService.downloadNode(obj);\n    }\n\n    private copyNode(node: NodeEntry, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.copyContent(node.entry, permission);\n        this.prepareHandlers(actionObservable, 'content', 'copy', target, permission);\n        return actionObservable;\n    }\n\n    private moveNode(node: NodeEntry, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.moveContent(node.entry, permission);\n        this.prepareHandlers(actionObservable, 'content', 'move', target, permission);\n        return actionObservable;\n    }\n\n    private prepareHandlers(actionObservable, type: string, action: string, target?: any, permission?: string): void {\n        actionObservable.subscribe(\n            (fileOperationMessage) => {\n                this.success.next(fileOperationMessage);\n            },\n            this.error.next.bind(this.error)\n        );\n    }\n\n    private deleteNode(node: NodeEntry, target?: any, permission?: string): Observable<any> {\n        let handlerObservable;\n\n        if (this.canExecuteAction(node)) {\n            if (this.contentService.hasAllowableOperations(node.entry, permission)) {\n                handlerObservable = this.documentListService.deleteNode(node.entry.id);\n                handlerObservable.subscribe(() => {\n                    let message = this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });\n                    this.success.next(message);\n                }, () => {\n                    let message = this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });\n                    this.error.next(message);\n                });\n                return handlerObservable;\n            } else {\n                this.permissionEvent.next(new PermissionModel({\n                    type: 'content',\n                    action: 'delete',\n                    permission: permission\n                }));\n                return throwError(new Error('No permission to delete'));\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentService, TranslationService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { Observable, Subject, throwError } from 'rxjs';\nimport { ContentActionHandler } from '../models/content-action.model';\nimport { PermissionModel } from '../models/permissions.model';\nimport { DocumentListService } from './document-list.service';\nimport { NodeActionsService } from './node-actions.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FolderActionsService {\n\n    permissionEvent: Subject<PermissionModel> = new Subject<PermissionModel>();\n    error: Subject<Error> = new Subject<Error>();\n    success: Subject<string> = new Subject<string>();\n\n    private handlers: { [id: string]: ContentActionHandler; } = {};\n\n    constructor(private nodeActionsService: NodeActionsService,\n                private documentListService: DocumentListService,\n                private contentService: ContentService,\n                private translation: TranslationService) {\n        this.setupActionHandlers();\n    }\n\n    /**\n     * Gets the handler function for an action.\n     * @param key Identifier for the action\n     * @returns The handler function\n     */\n    getHandler(key: string): ContentActionHandler {\n        if (key) {\n            let lKey = key.toLowerCase();\n            return this.handlers[lKey] || null;\n        }\n        return null;\n    }\n\n    /**\n     * Sets a new handler function for an action.\n     * @param key Identifier for the action\n     * @param handler The new handler function\n     * @returns True if the key was a valid action identifier, false otherwise\n     */\n    setHandler(key: string, handler: ContentActionHandler): boolean {\n        if (key) {\n            let lKey = key.toLowerCase();\n            this.handlers[lKey] = handler;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Checks if an action is available for a particular item.\n     * @param nodeEntry Item to check\n     * @returns True if the action is available, false otherwise\n     */\n    canExecuteAction(nodeEntry: NodeEntry): boolean {\n        return this.documentListService && nodeEntry && nodeEntry.entry.isFolder === true;\n    }\n\n    private setupActionHandlers() {\n        this.handlers['copy'] = this.copyNode.bind(this);\n        this.handlers['move'] = this.moveNode.bind(this);\n        this.handlers['delete'] = this.deleteNode.bind(this);\n        this.handlers['download'] = this.downloadNode.bind(this);\n    }\n\n    private downloadNode(nodeEntry: NodeEntry) {\n        this.nodeActionsService.downloadNode(nodeEntry);\n    }\n\n    private copyNode(nodeEntry: NodeEntry, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.copyFolder(nodeEntry.entry, permission);\n        this.prepareHandlers(actionObservable, 'folder', 'copy', target, permission);\n        return actionObservable;\n    }\n\n    private moveNode(nodeEntry: NodeEntry, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.moveFolder(nodeEntry.entry, permission);\n        this.prepareHandlers(actionObservable, 'folder', 'move', target, permission);\n        return actionObservable;\n    }\n\n    private prepareHandlers(actionObservable, type: string, action: string, target?: any, permission?: string): void {\n        actionObservable.subscribe(\n            (fileOperationMessage) => {\n                if (target && typeof target.reload === 'function') {\n                    target.reload();\n                }\n                this.success.next(fileOperationMessage);\n            },\n            this.error.next.bind(this.error)\n        );\n    }\n\n    private deleteNode(node: NodeEntry, target?: any, permission?: string): Observable<any> {\n        let handlerObservable: Observable<any>;\n\n        if (this.canExecuteAction(node)) {\n            if (this.contentService.hasAllowableOperations(node.entry, permission)) {\n                handlerObservable = this.documentListService.deleteNode(node.entry.id);\n                handlerObservable.subscribe(() => {\n                    if (target && typeof target.reload === 'function') {\n                        target.reload();\n                    }\n\n                    let message = this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });\n                    this.success.next(message);\n                }, () => {\n                    let message = this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });\n                    this.error.next(message);\n                });\n\n                return handlerObservable;\n            } else {\n                this.permissionEvent.next(new PermissionModel({type: 'folder', action: 'delete', permission: permission}));\n                return throwError(new Error('No permission to delete'));\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component } from '@angular/core';\n\nimport { ContentActionModel } from './../../models/content-action.model';\nimport { DocumentListComponent } from './../document-list.component';\n\n@Component({\n    selector: 'content-actions',\n    template: ''\n})\nexport class ContentActionListComponent {\n\n    constructor(private documentList: DocumentListComponent) {\n    }\n\n    /**\n     * Registers action handler within the parent document list component.\n     * @param action Action model to register.\n     */\n    registerAction(action: ContentActionModel): boolean {\n        if (this.documentList && action) {\n            this.documentList.actions.push(action);\n            return true;\n        }\n        return false;\n    }\n\n    unregisterAction(action: ContentActionModel): boolean {\n        if (this.documentList && action) {\n            const idx = this.documentList.actions.indexOf(action);\n            if (idx >= 0) {\n                this.documentList.actions.splice(idx, 1);\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, EventEmitter, Input, OnInit, Output, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';\n\nimport { ContentActionHandler } from '../../models/content-action.model';\nimport { DocumentActionsService } from '../../services/document-actions.service';\nimport { FolderActionsService } from '../../services/folder-actions.service';\nimport { ContentActionModel, ContentActionTarget } from './../../models/content-action.model';\nimport { ContentActionListComponent } from './content-action-list.component';\nimport { Subscription } from 'rxjs';\n\n@Component({\n    selector: 'content-action',\n    template: '',\n    providers: [\n        DocumentActionsService,\n        FolderActionsService\n    ]\n})\nexport class ContentActionComponent implements OnInit, OnChanges, OnDestroy {\n\n    /** The title of the action as shown in the menu. */\n    @Input()\n    title: string = 'Action';\n\n    /** The name of the icon to display next to the menu command (can be left blank). */\n    @Input()\n    icon: string;\n\n    /** Visibility state (see examples). */\n    @Input()\n    visible: boolean | Function = true;\n\n    /** System actions. Can be \"delete\", \"download\", \"copy\" or \"move\". */\n    @Input()\n    handler: string;\n\n    /** Type of item that the action applies to. Can be \"document\" or \"folder\" */\n    @Input()\n    target: string = ContentActionTarget.All;\n\n    /** The permission type. */\n    @Input()\n    permission: string;\n\n    /** Should this action be disabled in the menu if the user doesn't have permission for it? */\n    @Input()\n    disableWithNoPermission: boolean;\n\n    /** Is the menu item disabled? */\n    @Input()\n    disabled: boolean | Function = false;\n\n    /** Emitted when the user selects the action from the menu. */\n    @Output()\n    execute = new EventEmitter();\n\n    /** Emitted when a permission error occurs */\n    @Output()\n    permissionEvent = new EventEmitter();\n\n    /** Emitted when an error occurs during the action.\n     * Applies to copy and move actions.\n     */\n    @Output()\n    error = new EventEmitter();\n\n    /** Emitted when the action succeeds with the success string message.\n     * Applies to copy, move and delete actions.\n     */\n    @Output()\n    success = new EventEmitter();\n\n    documentActionModel: ContentActionModel;\n    folderActionModel: ContentActionModel;\n\n    private subscriptions: Subscription[] = [];\n\n    constructor(\n        private list: ContentActionListComponent,\n        private documentActions: DocumentActionsService,\n        private folderActions: FolderActionsService) {\n    }\n\n    ngOnInit() {\n        if (this.target === ContentActionTarget.All) {\n            this.folderActionModel = this.generateAction(ContentActionTarget.Folder);\n            this.documentActionModel = this.generateAction(ContentActionTarget.Document);\n        } else {\n            this.documentActionModel = this.generateAction(this.target);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.visible && !changes.visible.firstChange) {\n            if (this.documentActionModel) {\n                this.documentActionModel.visible = changes.visible.currentValue;\n            }\n            if (this.folderActionModel) {\n                this.folderActionModel.visible = changes.visible.currentValue;\n            }\n        }\n\n        if (changes.disabled && !changes.disabled.firstChange) {\n            if (this.documentActionModel) {\n                this.documentActionModel.disabled = changes.disabled.currentValue;\n            }\n            if (this.folderActionModel) {\n                this.folderActionModel.disabled = changes.disabled.currentValue;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n        this.subscriptions = [];\n\n        if (this.documentActionModel) {\n            this.unregister(this.documentActionModel);\n            this.documentActionModel = null;\n        }\n\n        if (this.folderActionModel) {\n            this.unregister(this.folderActionModel);\n            this.folderActionModel = null;\n        }\n    }\n\n    register(model: ContentActionModel): boolean {\n        if (this.list) {\n            return this.list.registerAction(model);\n        }\n        return false;\n    }\n\n    unregister(model: ContentActionModel): boolean {\n        if (this.list) {\n            return this.list.unregisterAction(model);\n        }\n        return false;\n    }\n\n    private generateAction(target: string): ContentActionModel {\n        const model = new ContentActionModel({\n            title: this.title,\n            icon: this.icon,\n            permission: this.permission,\n            disableWithNoPermission: this.disableWithNoPermission,\n            target: target,\n            disabled: this.disabled,\n            visible: this.visible\n        });\n        if (this.handler) {\n            model.handler = this.getSystemHandler(target, this.handler);\n        }\n\n        if (this.execute) {\n            model.execute = (value: any): void => {\n                this.execute.emit({ value });\n            };\n        }\n\n        this.register(model);\n        return model;\n    }\n\n    getSystemHandler(target: string, name: string): ContentActionHandler {\n        if (target) {\n            target = target.toLowerCase();\n\n            if (target === ContentActionTarget.Document) {\n                if (this.documentActions) {\n                    this.subscriptions.push(\n                        this.documentActions.permissionEvent.subscribe((permission) => {\n                            this.permissionEvent.emit(permission);\n                        }),\n                        this.documentActions.error.subscribe((errors) => {\n                            this.error.emit(errors);\n                        }),\n                        this.documentActions.success.subscribe((message) => {\n                            this.success.emit(message);\n                        })\n                    );\n\n                    return this.documentActions.getHandler(name);\n                }\n                return null;\n            }\n\n            if (target === ContentActionTarget.Folder) {\n                if (this.folderActions) {\n                    this.subscriptions.push(\n                        this.folderActions.permissionEvent.subscribe((permission) => {\n                            this.permissionEvent.emit(permission);\n                        }),\n                        this.folderActions.error.subscribe((errors) => {\n                            this.error.emit(errors);\n                        }),\n                        this.folderActions.success.subscribe((message) => {\n                            this.success.emit(message);\n                        })\n                    );\n\n                    return this.folderActions.getHandler(name);\n                }\n                return null;\n            }\n        }\n        return null;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  OnInit,\n  Input,\n  ElementRef\n} from '@angular/core';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { ShareDataRow } from '../../data/share-data-row.model';\n\n@Component({\n  selector: 'adf-library-name-column',\n  template: `\n    <span title=\"{{ displayTooltip }}\" (click)=\"onClick()\">\n      {{ displayText }}\n    </span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  host: { class: 'adf-datatable-cell adf-datatable-link adf-library-name-column' }\n})\nexport class LibraryNameColumnComponent implements OnInit {\n  @Input()\n  context: any;\n\n  displayTooltip: string;\n  displayText: string;\n  node: NodeEntry;\n\n  constructor(private element: ElementRef) {}\n\n  ngOnInit() {\n    this.node = this.context.row.node;\n    const rows: Array<ShareDataRow> = this.context.data.rows || [];\n    if (this.node && this.node.entry) {\n      this.displayText = this.makeLibraryTitle(this.node.entry, rows);\n      this.displayTooltip = this.makeLibraryTooltip(this.node.entry);\n    }\n  }\n\n  onClick() {\n    this.element.nativeElement.dispatchEvent(\n      new CustomEvent('name-click', {\n        bubbles: true,\n        detail: {\n          node: this.node\n        }\n      })\n    );\n  }\n\n  makeLibraryTooltip(library: any): string {\n    const { description, title } = library;\n\n    return description || title || '';\n  }\n\n  makeLibraryTitle(library: any, rows: Array<ShareDataRow>): string {\n    const entries = rows.map((r: ShareDataRow) => r.node.entry);\n    const { title, id } = library;\n\n    let isDuplicate = false;\n\n    if (entries) {\n      isDuplicate = entries.some((entry: any) => {\n        return entry.id !== id && entry.title === title;\n      });\n    }\n\n    return isDuplicate ? `${title} (${id})` : `${title}`;\n  }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'adf-library-role-column',\n  template: `\n    <span title=\"{{ displayText | translate }}\">\n      {{ displayText | translate }}\n    </span>\n  `,\n  host: { class: 'adf-library-role-column' }\n})\nexport class LibraryRoleColumnComponent implements OnInit {\n  @Input()\n  context: any;\n\n  displayText: string;\n\n  ngOnInit() {\n    const node = this.context.row.node;\n    if (node && node.entry) {\n      const role: string = node.entry.role;\n      switch (role) {\n        case 'SiteManager':\n          this.displayText = 'LIBRARY.ROLE.MANAGER';\n          break;\n        case 'SiteCollaborator':\n          this.displayText = 'LIBRARY.ROLE.COLLABORATOR';\n          break;\n        case 'SiteContributor':\n          this.displayText = 'LIBRARY.ROLE.CONTRIBUTOR';\n          break;\n        case 'SiteConsumer':\n          this.displayText = 'LIBRARY.ROLE.CONSUMER';\n          break;\n        default:\n          this.displayText = '';\n          break;\n      }\n    }\n  }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'adf-library-status-column',\n  template: `\n    <span title=\"{{ displayText | translate }}\">\n      {{ displayText | translate }}\n    </span>\n  `,\n  host: { class: 'adf-library-status-column' }\n})\nexport class LibraryStatusColumnComponent implements OnInit {\n  @Input()\n  context: any;\n\n  displayText: string;\n\n  ngOnInit() {\n    const node = this.context.row.node;\n    if (node && node.entry) {\n      const visibility: string = node.entry.visibility;\n\n      switch (visibility.toUpperCase()) {\n        case 'PUBLIC':\n          this.displayText = 'LIBRARY.VISIBILITY.PUBLIC';\n          break;\n        case 'PRIVATE':\n          this.displayText = 'LIBRARY.VISIBILITY.PRIVATE';\n          break;\n        case 'MODERATED':\n          this.displayText = 'LIBRARY.VISIBILITY.MODERATED';\n          break;\n        default:\n          this.displayText = 'UNKNOWN';\n          break;\n      }\n    }\n  }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ElementRef\n} from '@angular/core';\nimport { NodeEntry } from '@alfresco/js-api';\n\n@Component({\n  selector: 'adf-name-column',\n  template: `\n    <span title=\"{{ node | adfNodeNameTooltip }}\" (click)=\"onClick()\">\n      {{ displayText }}\n    </span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  host: { class: 'adf-datatable-cell adf-datatable-link adf-name-column' }\n})\nexport class NameColumnComponent implements OnInit {\n  @Input()\n  context: any;\n\n  displayText: string;\n  node: NodeEntry;\n\n  constructor(private element: ElementRef) {}\n\n  ngOnInit() {\n    this.node = this.context.row.node;\n    if (this.node && this.node.entry) {\n      this.displayText = this.node.entry.name || this.node.entry.id;\n    }\n  }\n\n  onClick() {\n    this.element.nativeElement.dispatchEvent(\n      new CustomEvent('name-click', {\n        bubbles: true,\n        detail: {\n          node: this.node\n        }\n      })\n    );\n  }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  OnInit,\n  Input\n} from '@angular/core';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { ShareDataRow } from '../../data/share-data-row.model';\n\n@Component({\n  selector: 'adf-trashcan-name-column',\n  template: `\n    <ng-container *ngIf=\"!isLibrary\">\n      <span title=\"{{ node | adfNodeNameTooltip }}\">{{ displayText }}</span>\n    </ng-container>\n    <ng-container *ngIf=\"isLibrary\">\n      <span title=\"{{ displayTooltip }}\">{{ displayText }}</span>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  host: { class: 'adf-datatable-cell adf-trashcan-name-column' }\n})\nexport class TrashcanNameColumnComponent implements OnInit {\n  @Input()\n  context: any;\n\n  isLibrary = false;\n  displayText: string;\n  displayTooltip: string;\n  node: NodeEntry;\n\n  ngOnInit() {\n    this.node = this.context.row.node;\n    const rows: Array<ShareDataRow> = this.context.data.rows || [];\n\n    if (this.node && this.node.entry) {\n      this.isLibrary = this.node.entry.nodeType === 'st:site';\n\n      if (this.isLibrary) {\n        const { properties } = this.node.entry;\n\n        this.displayText = this.makeLibraryTitle(this.node.entry, rows);\n        this.displayTooltip =\n          properties['cm:description'] || properties['cm:title'];\n      } else {\n        this.displayText = this.node.entry.name || this.node.entry.id;\n      }\n    }\n  }\n\n  makeLibraryTitle(library: any, rows: Array<ShareDataRow>): string {\n    const entries = rows.map((r: ShareDataRow) => r.node.entry);\n    const { id } = library;\n    const title = library.properties['cm:title'];\n\n    let isDuplicate = false;\n\n    if (entries) {\n      isDuplicate = entries.some((entry: any) => {\n        return entry.id !== id && entry.properties['cm:title'] === title;\n      });\n    }\n\n    return isDuplicate\n      ? `${library.properties['cm:title']} (${library.name})`\n      : `${library.properties['cm:title']}`;\n  }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// note: contains only limited subset of available fields\n\nimport { NodeEntry, Node } from '@alfresco/js-api';\n\nexport class NodePaging {\n    list: NodePagingList;\n}\n\nexport class NodePagingList {\n    pagination: Pagination;\n    entries: NodeMinimalEntry[];\n}\n\nexport class NodeMinimalEntry implements NodeEntry {\n    entry: NodeMinimal;\n}\n\nexport class Pagination {\n    count: number;\n    hasMoreItems: boolean;\n    totalItems: number;\n    skipCount: number;\n    maxItems: number;\n}\n\nexport class NodeMinimal implements Node {\n    id: string;\n    parentId: string;\n    name: string;\n    nodeType: string;\n    isFolder: boolean;\n    isFile: boolean;\n    modifiedAt: Date;\n    modifiedByUser: UserInfo;\n    createdAt: Date;\n    createdByUser: UserInfo;\n    content: ContentInfo;\n    path: PathInfoEntity;\n    properties: NodeProperties = {};\n    aspectNames: string[];\n}\n\nexport class UserInfo {\n    displayName: string;\n    id: string;\n}\n\nexport class ContentInfo {\n    mimeType: string;\n    mimeTypeName: string;\n    sizeInBytes: number;\n    encoding: string;\n}\n\nexport class PathInfoEntity {\n    elements: PathElementEntity[];\n    isComplete: boolean;\n    name: string;\n}\n\nexport class PathElementEntity {\n    id: string;\n    name: string;\n}\n\nexport interface NodeProperties {\n    [key: string]: any;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AllowableOperationsEnum } from '@alfresco/adf-core';\n\nexport class PermissionStyleModel {\n    css: string;\n    permission: AllowableOperationsEnum;\n    isFolder: boolean = true;\n    isFile: boolean = true;\n\n    constructor(css: string, permission: AllowableOperationsEnum, isFile: boolean = true, isFolder: boolean = true) {\n        this.css = css;\n        this.permission = permission;\n        this.isFile = isFile;\n        this.isFolder = isFolder;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    FileModel, FileUploadCompleteEvent, FileUploadDeleteEvent,\n    FileUploadErrorEvent, FileUploadStatus, UploadService\n} from '@alfresco/adf-core';\nimport { ChangeDetectorRef, Component, Input, Output, EventEmitter, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { Subscription, merge } from 'rxjs';\nimport { FileUploadingListComponent } from './file-uploading-list.component';\n\n@Component({\n    selector: 'adf-file-uploading-dialog',\n    templateUrl: './file-uploading-dialog.component.html',\n    styleUrls: ['./file-uploading-dialog.component.scss']\n})\nexport class FileUploadingDialogComponent implements OnInit, OnDestroy {\n    @ViewChild('uploadList')\n    uploadList: FileUploadingListComponent;\n\n    /** Dialog position. Can be 'left' or 'right'. */\n    @Input()\n    position: string = 'right';\n\n    /** Emitted when a file in the list has an error. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    filesUploadingList: FileModel[] = [];\n    isDialogActive: boolean = false;\n    totalCompleted: number = 0;\n    totalErrors: number = 0;\n    isDialogMinimized: boolean = false;\n    isConfirmation: boolean = false;\n\n    private listSubscription: Subscription;\n    private counterSubscription: Subscription;\n    private fileUploadSubscription: Subscription;\n    private errorSubscription: Subscription;\n\n    constructor(private uploadService: UploadService,\n                private changeDetector: ChangeDetectorRef) {\n    }\n\n    ngOnInit() {\n        this.listSubscription = this.uploadService\n            .queueChanged.subscribe((fileList: FileModel[]) => {\n                this.filesUploadingList = fileList;\n\n                if (this.filesUploadingList.length) {\n                    this.isDialogActive = true;\n                }\n            });\n\n        this.counterSubscription = merge(\n                this.uploadService.fileUploadComplete,\n                this.uploadService.fileUploadDeleted\n            )\n            .subscribe((event: (FileUploadDeleteEvent | FileUploadCompleteEvent)) => {\n                this.totalCompleted = event.totalComplete;\n                this.changeDetector.detectChanges();\n            });\n\n        this.errorSubscription = this.uploadService.fileUploadError\n            .subscribe((event: FileUploadErrorEvent) => {\n                this.totalErrors = event.totalError;\n                this.changeDetector.detectChanges();\n            });\n\n        this.fileUploadSubscription = this.uploadService\n            .fileUpload.subscribe(() => {\n                this.changeDetector.detectChanges();\n            });\n\n        this.uploadService.fileDeleted.subscribe((objId) => {\n            if (this.filesUploadingList) {\n                let file = this.filesUploadingList.find((item) => {\n                    return item.data.entry.id === objId;\n                });\n                if (file) {\n                    file.status = FileUploadStatus.Cancelled;\n                    this.changeDetector.detectChanges();\n                }\n            }\n        });\n    }\n\n    /**\n     * Toggle confirmation message.\n     */\n    toggleConfirmation() {\n        this.isConfirmation = !this.isConfirmation;\n\n        if (this.isDialogMinimized) {\n            this.isDialogMinimized = false;\n        }\n    }\n\n    /**\n     * Cancel uploads and hide confirmation\n     */\n    cancelAllUploads() {\n        this.toggleConfirmation();\n\n        this.uploadList.cancelAllFiles();\n    }\n\n    /**\n     * Toggle dialog minimized state.\n     */\n    toggleMinimized(): void {\n        this.isDialogMinimized = !this.isDialogMinimized;\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * Dismiss dialog\n     */\n    close(): void {\n        this.isConfirmation = false;\n        this.totalCompleted = 0;\n        this.totalErrors = 0;\n        this.filesUploadingList = [];\n        this.isDialogActive = false;\n        this.isDialogMinimized = false;\n        this.uploadService.clearQueue();\n        this.changeDetector.detectChanges();\n    }\n\n    ngOnDestroy() {\n        this.uploadService.clearQueue();\n        this.listSubscription.unsubscribe();\n        this.counterSubscription.unsubscribe();\n        this.fileUploadSubscription.unsubscribe();\n        this.errorSubscription.unsubscribe();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, FileUploadStatus } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'adf-file-uploading-list-row',\n    templateUrl: './file-uploading-list-row.component.html',\n    styleUrls: ['./file-uploading-list-row.component.scss']\n})\nexport class FileUploadingListRowComponent {\n    @Input()\n    file: FileModel;\n\n    @Output()\n    cancel: EventEmitter<FileModel> = new EventEmitter<FileModel>();\n\n    @Output()\n    remove: EventEmitter<FileModel> = new EventEmitter<FileModel>();\n\n    FileUploadStatus = FileUploadStatus;\n\n    onCancel(file: FileModel): void {\n        this.cancel.emit(file);\n    }\n\n    onRemove(file: FileModel): void {\n        this.remove.emit(file);\n    }\n\n    showCancelledStatus(): boolean {\n        return this.file.status === FileUploadStatus.Cancelled ||\n            this.file.status === FileUploadStatus.Aborted ||\n            this.file.status === FileUploadStatus.Deleted;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, FileUploadStatus, NodesApiService, TranslationService, UploadService } from '@alfresco/adf-core';\nimport { Component, ContentChild, Input, Output, TemplateRef, EventEmitter } from '@angular/core';\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-file-uploading-list',\n    templateUrl: './file-uploading-list.component.html',\n    styleUrls: ['./file-uploading-list.component.scss']\n})\nexport class FileUploadingListComponent {\n\n    FileUploadStatus = FileUploadStatus;\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    @Input()\n    files: FileModel[] = [];\n\n    /** Emitted when a file in the list has an error. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    constructor(\n        private uploadService: UploadService,\n        private nodesApi: NodesApiService,\n        private translateService: TranslationService) {\n    }\n\n    /**\n     * Cancel file upload\n     *\n     * @param file File model to cancel upload for.\n     *\n     * @memberOf FileUploadingListComponent\n     */\n    cancelFile(file: FileModel): void {\n        this.uploadService.cancelUpload(file);\n    }\n\n    removeFile(file: FileModel): void {\n        this.deleteNode(file)\n            .subscribe(() => {\n                if ( file.status === FileUploadStatus.Error) {\n                    this.notifyError(file);\n                }\n\n                this.uploadService.cancelUpload(file);\n            });\n    }\n\n    /**\n     * Call the appropriate method for each file, depending on state\n     */\n    cancelAllFiles(): void {\n        this.getUploadingFiles()\n            .forEach((file) => this.uploadService.cancelUpload(file));\n\n        const deletedFiles = this.files\n            .filter((file) => file.status === FileUploadStatus.Complete)\n            .map((file) => this.deleteNode(file));\n\n        forkJoin(...deletedFiles)\n            .subscribe((files: FileModel[]) => {\n                const errors = files\n                    .filter((file) => file.status === FileUploadStatus.Error);\n\n                if (errors.length) {\n                    this.notifyError(...errors);\n                }\n\n                this.uploadService.cancelUpload(...files);\n            });\n    }\n\n    /**\n     * Checks if all the files are uploaded false if there is at least one file in Progress | Starting | Pending\n     */\n    isUploadCompleted(): boolean {\n         return !this.isUploadCancelled() &&\n            Boolean(this.files.length) &&\n            !this.files\n                .some(({status}) =>\n                    status === FileUploadStatus.Starting ||\n                    status === FileUploadStatus.Progress ||\n                    status === FileUploadStatus.Pending\n                );\n    }\n\n    /**\n     * Check if all the files are Cancelled | Aborted | Error. false if there is at least one file in uploading states\n     */\n    isUploadCancelled(): boolean {\n        return !!this.files.length &&\n            this.files\n                .every(({status}) =>\n                    status === FileUploadStatus.Aborted ||\n                    status === FileUploadStatus.Cancelled ||\n                    status === FileUploadStatus.Deleted\n                );\n    }\n\n    private deleteNode(file: FileModel): Observable<FileModel> {\n        const { id } = file.data.entry;\n\n        return this.nodesApi\n            .deleteNode(id, { permanent: true })\n            .pipe(\n                map(() => {\n                    file.status = FileUploadStatus.Deleted;\n                    return file;\n                }),\n                catchError(() => {\n                    file.status = FileUploadStatus.Error;\n                    return of(file);\n                })\n            );\n    }\n\n    private notifyError(...files: FileModel[]) {\n        let messageError: string = null;\n\n        if (files.length === 1) {\n            messageError = this.translateService\n                .instant(\n                    'FILE_UPLOAD.MESSAGES.REMOVE_FILE_ERROR',\n                    { fileName: files[0].name}\n                );\n        } else {\n            messageError = this.translateService\n                .instant(\n                    'FILE_UPLOAD.MESSAGES.REMOVE_FILES_ERROR',\n                    { total: files.length }\n                );\n        }\n\n        this.error.emit(messageError);\n    }\n\n    private getUploadingFiles() {\n        return this.files.filter((item) => {\n            if (\n                item.status === FileUploadStatus.Pending ||\n                item.status === FileUploadStatus.Progress ||\n                item.status === FileUploadStatus.Starting\n            ) {\n                return item;\n            }\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, UploadService } from '@alfresco/adf-core';\nimport { EventEmitter } from '@angular/core';\n\nexport class UploadFilesEvent {\n    private isDefaultPrevented: boolean = false;\n\n    get defaultPrevented() {\n        return this.isDefaultPrevented;\n    }\n\n    preventDefault() {\n        this.isDefaultPrevented = true;\n    }\n\n    constructor(\n        public files: Array<FileModel>,\n        private uploadService: UploadService,\n        private callback: EventEmitter<any>\n    ) {}\n\n    pauseUpload() {\n        this.preventDefault();\n    }\n\n    resumeUpload() {\n        if (this.files && this.files.length > 0) {\n            this.uploadService.addToQueue(...this.files);\n            this.uploadService.uploadFilesInTheQueue(this.callback);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, FileInfo } from '@alfresco/adf-core';\nimport { EventEmitter, Input, Output, OnInit, OnDestroy, NgZone } from '@angular/core';\nimport { UploadService, TranslationService } from '@alfresco/adf-core';\nimport { Subscription } from 'rxjs';\nimport { UploadFilesEvent } from '../upload-files.event';\n\nexport abstract class UploadBase implements OnInit, OnDestroy {\n\n    /** Sets a limit on the maximum size (in bytes) of a file to be uploaded.\n     * Has no effect if undefined.\n     */\n    @Input()\n    maxFilesSize: number;\n\n    /** The ID of the root. Use the nodeId for\n     * Content Services or the taskId/processId for Process Services.\n     */\n    @Input()\n    rootFolderId: string = '-root-';\n\n    /** Toggles component disabled state (if there is no node permission checking). */\n    @Input()\n    disabled: boolean = false;\n\n    /** Filter for accepted file types. */\n    @Input()\n    acceptedFilesType: string = '*';\n\n    /** Toggles versioning. */\n    @Input()\n    versioning: boolean = false;\n\n    /** majorVersion boolean field to true to indicate a major version should be created. */\n    @Input()\n    majorVersion: boolean = false;\n\n    /** When you overwrite existing content, you can use the comment field to add a version comment that appears in the version history */\n    @Input()\n    comment: string;\n\n    /** Custom node type for uploaded file */\n    @Input()\n    nodeType: string = 'cm:content';\n\n    /** Emitted when the file is uploaded successfully. */\n    @Output()\n    success = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error = new EventEmitter();\n\n    /** Emitted when the upload begins. */\n    @Output()\n    beginUpload = new EventEmitter<UploadFilesEvent>();\n\n    protected subscriptions: Subscription[] = [];\n\n    constructor(protected uploadService: UploadService,\n                protected translationService: TranslationService,\n                protected ngZone: NgZone) {\n    }\n\n    ngOnInit() {\n        this.subscriptions.push(\n            this.uploadService.fileUploadError.subscribe((error) => {\n                this.error.emit(error);\n            })\n        );\n\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n\n    /**\n     * Upload a list of file in the specified path\n     * @param files\n     * @param path\n     */\n    uploadFiles(files: File[]): void {\n        const filteredFiles: FileModel[] = files\n            .map<FileModel>((file: File) => {\n                return this.createFileModel(file, this.rootFolderId, ((<any> file).webkitRelativePath || '').replace(/\\/[^\\/]*$/, ''));\n            });\n\n        this.uploadQueue(filteredFiles);\n    }\n\n    uploadFilesInfo(files: FileInfo[]): void {\n        const filteredFiles: FileModel[] = files\n            .map<FileModel>((fileInfo: FileInfo) => {\n                return this.createFileModel(fileInfo.file, this.rootFolderId, fileInfo.relativeFolder);\n            });\n\n        this.uploadQueue(filteredFiles);\n    }\n\n    private uploadQueue(files: FileModel[]) {\n        let filteredFiles = files\n            .filter(this.isFileAcceptable.bind(this))\n            .filter(this.isFileSizeAcceptable.bind(this));\n\n        this.ngZone.run(() => {\n            const event = new UploadFilesEvent(\n                [...filteredFiles],\n                this.uploadService,\n                this.success\n            );\n            this.beginUpload.emit(event);\n\n            if (!event.defaultPrevented) {\n                if (filteredFiles.length > 0) {\n                    this.uploadService.addToQueue(...filteredFiles);\n                    this.uploadService.uploadFilesInTheQueue(this.success);\n                }\n            }\n        });\n    }\n\n    /**\n     * Checks if the given file is allowed by the extension filters\n     *\n     * @param file FileModel\n     */\n    protected isFileAcceptable(file: FileModel): boolean {\n        if (this.acceptedFilesType === '*') {\n            return true;\n        }\n\n        const allowedExtensions = this.acceptedFilesType\n            .split(',')\n            .map((ext) => ext.trim().replace(/^\\./, ''));\n\n        if (allowedExtensions.indexOf(file.extension) !== -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Creates FileModel from File\n     *\n     * @param file\n     */\n    protected createFileModel(file: File, parentId: string, path: string, id?: string): FileModel {\n        return new FileModel(file, {\n            comment: this.comment,\n            majorVersion: this.majorVersion,\n            newVersion: this.versioning,\n            parentId: parentId,\n            path: path,\n            nodeType: this.nodeType\n        }, id);\n    }\n\n    protected isFileSizeAllowed(file: FileModel) {\n        let isFileSizeAllowed = true;\n        if (this.isMaxFileSizeDefined()) {\n            isFileSizeAllowed = this.isFileSizeCorrect(file);\n        }\n\n        return isFileSizeAllowed;\n    }\n\n    protected isMaxFileSizeDefined() {\n        return this.maxFilesSize !== undefined && this.maxFilesSize !== null;\n    }\n\n    protected isFileSizeCorrect(file: FileModel) {\n        return this.maxFilesSize >= 0 && file.size <= this.maxFilesSize;\n    }\n\n    /**\n     * Checks if the given file is an acceptable size\n     *\n     * @param file FileModel\n     */\n    private isFileSizeAcceptable(file: FileModel): boolean {\n        let acceptableSize = true;\n\n        if (!this.isFileSizeAllowed(file)) {\n            acceptableSize = false;\n\n            const message = this.translationService.instant(\n                'FILE_UPLOAD.MESSAGES.EXCEED_MAX_FILE_SIZE',\n                { fileName: file.name }\n            );\n\n            this.error.emit(message);\n        }\n\n        return acceptableSize;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    ContentService, EXTENDIBLE_COMPONENT, FileUtils,\n    LogService, NodeAllowableOperationSubject, TranslationService, UploadService, AllowableOperationsEnum\n} from '@alfresco/adf-core';\nimport {\n    Component, EventEmitter, forwardRef, Input,\n    OnChanges, OnInit, Output, SimpleChanges, ViewEncapsulation, NgZone\n} from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { Subject } from 'rxjs';\nimport { PermissionModel } from '../../document-list/models/permissions.model';\nimport { UploadBase } from './base-upload/upload-base';\n\n@Component({\n    selector: 'adf-upload-button',\n    templateUrl: './upload-button.component.html',\n    styleUrls: ['./upload-button.component.scss'],\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadButtonComponent) }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadButtonComponent extends UploadBase implements OnInit, OnChanges, NodeAllowableOperationSubject {\n\n    /** Allows/disallows upload folders (only for Chrome). */\n    @Input()\n    uploadFolders: boolean = false;\n\n    /** Allows/disallows multiple files */\n    @Input()\n    multipleFiles: boolean = false;\n\n    /** Defines the text of the upload button. */\n    @Input()\n    staticTitle: string;\n\n    /** Custom tooltip text. */\n    @Input()\n    tooltip: string = null;\n\n    /** Emitted when create permission is missing. */\n    @Output()\n    permissionEvent: EventEmitter<PermissionModel> = new EventEmitter<PermissionModel>();\n\n    private hasAllowableOperations: boolean = false;\n\n    protected permissionValue: Subject<boolean> = new Subject<boolean>();\n\n    constructor(protected uploadService: UploadService,\n                private contentService: ContentService,\n                protected translationService: TranslationService,\n                protected logService: LogService,\n                protected ngZone: NgZone) {\n        super(uploadService, translationService, ngZone);\n    }\n\n    ngOnInit() {\n        this.permissionValue.subscribe((permission: boolean) => {\n            this.hasAllowableOperations = permission;\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let rootFolderId = changes['rootFolderId'];\n        if (rootFolderId && rootFolderId.currentValue) {\n            this.checkPermission();\n        }\n    }\n\n    isButtonDisabled(): boolean {\n        return this.disabled ? true : undefined;\n    }\n\n    onFilesAdded($event: any): void {\n        let files: File[] = FileUtils.toFileArray($event.currentTarget.files);\n\n        if (this.hasAllowableOperations) {\n            this.uploadFiles(files);\n        } else {\n            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));\n        }\n        // reset the value of the input file\n        $event.target.value = '';\n    }\n\n    onDirectoryAdded($event: any): void {\n        if (this.hasAllowableOperations) {\n            let files: File[] = FileUtils.toFileArray($event.currentTarget.files);\n            this.uploadFiles(files);\n        } else {\n            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));\n        }\n        // reset the value of the input file\n        $event.target.value = '';\n    }\n\n    checkPermission() {\n        if (this.rootFolderId) {\n            let opts: any = {\n                includeSource: true,\n                include: ['allowableOperations']\n            };\n\n            this.contentService.getNode(this.rootFolderId, opts).subscribe(\n                (res) => this.permissionValue.next(this.nodeHasPermission(res.entry, AllowableOperationsEnum.CREATE)),\n                (error) => this.error.emit(error)\n            );\n        }\n    }\n\n    nodeHasPermission(node: Node, permission: AllowableOperationsEnum | string): boolean {\n        return this.contentService.hasAllowableOperations(node, permission);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AllowableOperationsEnum  } from '@alfresco/adf-core';\nimport { Component, forwardRef, Input, OnChanges, ViewEncapsulation, OnInit } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { UploadButtonComponent } from './upload-button.component';\nimport { FileModel, EXTENDIBLE_COMPONENT } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-upload-version-button',\n    templateUrl: './upload-button.component.html',\n    styleUrls: ['./upload-button.component.scss'],\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadVersionButtonComponent) }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadVersionButtonComponent extends UploadButtonComponent implements OnChanges, OnInit {\n\n    /** (**Required**) The node to be versioned. */\n    @Input()\n    node: Node;\n\n    protected createFileModel(file: File): FileModel {\n        const fileModel = super.createFileModel(file, this.rootFolderId, ((<any> file).webkitRelativePath || '').replace(/\\/[^\\/]*$/, ''), this.node.id);\n\n        if (!this.isFileAcceptable(fileModel)) {\n            const message = this.translationService.instant('FILE_UPLOAD.VERSION.MESSAGES.INCOMPATIBLE_VERSION');\n            this.error.emit(message);\n        }\n\n        return fileModel;\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.checkPermission();\n    }\n\n    checkPermission() {\n        this.permissionValue.next(this.nodeHasPermission(this.node, AllowableOperationsEnum.UPDATE));\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    EXTENDIBLE_COMPONENT, FileInfo, FileModel, FileUtils, NodeAllowableOperationSubject,\n    NotificationService, TranslationService, UploadService, ContentService, AllowableOperationsEnum\n} from '@alfresco/adf-core';\nimport { Component, forwardRef, ViewEncapsulation, NgZone } from '@angular/core';\nimport { UploadBase } from './base-upload/upload-base';\n\n@Component({\n    selector: 'adf-upload-drag-area',\n    templateUrl: './upload-drag-area.component.html',\n    styleUrls: ['./upload-drag-area.component.css'],\n    host: { 'class': 'adf-upload-drag-area' },\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadDragAreaComponent) }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadDragAreaComponent extends UploadBase implements NodeAllowableOperationSubject {\n\n    constructor(protected uploadService: UploadService,\n                protected translationService: TranslationService,\n                private notificationService: NotificationService,\n                private contentService: ContentService,\n                protected ngZone: NgZone) {\n        super(uploadService, translationService, ngZone);\n    }\n\n    /**\n     * Method called when files are dropped in the drag area.\n     *\n     * @param files - files dropped in the drag area.\n     */\n    onFilesDropped(files: File[]): void {\n        if (!this.disabled && files.length) {\n            this.uploadFiles(files);\n        }\n    }\n\n    /**\n     * Called when a folder are dropped in the drag area\n     *\n     * @param folder - name of the dropped folder\n     */\n    onFolderEntityDropped(folder: any): void {\n        if (!this.disabled && folder.isDirectory) {\n            FileUtils.flatten(folder).then((filesInfo) => {\n                this.uploadFilesInfo(filesInfo);\n            });\n        }\n    }\n\n    /**\n     * Show undo notification bar.\n     *\n     * @param latestFilesAdded - files in the upload queue enriched with status flag and xhr object.\n     */\n    showUndoNotificationBar(latestFilesAdded: FileModel[]) {\n        let messageTranslate: any, actionTranslate: any;\n        messageTranslate = this.translationService.get('FILE_UPLOAD.MESSAGES.PROGRESS');\n        actionTranslate = this.translationService.get('FILE_UPLOAD.ACTION.UNDO');\n\n        this.notificationService.openSnackMessageAction(messageTranslate.value, actionTranslate.value, 3000).onAction().subscribe(() => {\n            this.uploadService.cancelUpload(...latestFilesAdded);\n        });\n    }\n\n    /** Returns true or false considering the component options and node permissions */\n    isDroppable(): boolean {\n        return !this.disabled;\n    }\n\n    /**\n     * Handles 'upload-files' events raised by child components.\n     *\n     * @param event DOM event\n     */\n    onUploadFiles(event: CustomEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        let isAllowed: boolean = this.contentService.hasAllowableOperations(event.detail.data.obj.entry, AllowableOperationsEnum.CREATE);\n        if (isAllowed) {\n            let fileInfo: FileInfo[] = event.detail.files;\n            if (this.isTargetNodeFolder(event)) {\n                const destinationFolderName = event.detail.data.obj.entry.name;\n                fileInfo.map((file) => file.relativeFolder = destinationFolderName ? destinationFolderName.concat(file.relativeFolder) : file.relativeFolder);\n            }\n            if (fileInfo && fileInfo.length > 0) {\n                this.uploadFilesInfo(fileInfo);\n            }\n        }\n    }\n\n    private isTargetNodeFolder(event: CustomEvent): boolean {\n        return event.detail.data.obj && event.detail.data.obj.entry.isFolder;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { TranslationService } from '@alfresco/adf-core';\n\n@Pipe({\n    name: 'adfFileUploadError',\n    pure: true\n})\nexport class FileUploadErrorPipe implements PipeTransform {\n\n    constructor(private translation: TranslationService) {\n    }\n\n    transform(errorCode: number): string {\n        return this.translation.instant(`FILE_UPLOAD.ERRORS.${errorCode || 'GENERIC'}`);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { FileUtils } from '@alfresco/adf-core';\nimport { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\n\n/**\n * Directive selectors without adf- prefix will be deprecated on 3.0.0\n */\n@Directive({\n    selector: '[adf-file-draggable], [file-draggable]'\n})\nexport class FileDraggableDirective implements OnInit, OnDestroy {\n\n    files: File [];\n\n    /** Enables/disables drag-and-drop functionality. */\n    @Input('adf-file-draggable')\n    enabled: boolean = true;\n\n    /** Emitted when one or more files are dragged and dropped onto the draggable element. */\n    @Output()\n    filesDropped: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    /** Emitted when a directory is dragged and dropped onto the draggable element. */\n    @Output()\n    folderEntityDropped: EventEmitter<any> = new EventEmitter();\n\n    private cssClassName: string = 'adf-file-draggable__input-focus';\n    private element: HTMLElement;\n\n    constructor(el: ElementRef, private ngZone: NgZone) {\n        this.element = el.nativeElement;\n    }\n\n    ngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            this.element.addEventListener('dragenter', this.onDragEnter.bind(this));\n            this.element.addEventListener('dragover', this.onDragOver.bind(this));\n            this.element.addEventListener('dragleave', this.onDragLeave.bind(this));\n            this.element.addEventListener('drop', this.onDropFiles.bind(this));\n        });\n    }\n\n    ngOnDestroy() {\n        this.element.removeEventListener('dragenter', this.onDragEnter);\n        this.element.removeEventListener('dragover', this.onDragOver);\n        this.element.removeEventListener('dragleave', this.onDragLeave);\n        this.element.removeEventListener('drop', this.onDropFiles);\n    }\n\n    /**\n     * Method called when files is dropped in the drag and drop area.\n     * @param event DOM event.\n     */\n    onDropFiles(event: any): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n\n            // Chrome, Edge, Firefox, Opera (Files + Folders)\n            const items = event.dataTransfer.items;\n            if (items) {\n                const files: File[] = [];\n\n                for (let i = 0; i < items.length; i++) {\n                    if (items[i].webkitGetAsEntry) {\n                        const item = items[i].webkitGetAsEntry();\n\n                        if (item) {\n                            if (item.isFile) {\n                                const file = items[i].getAsFile();\n\n                                if (file) {\n                                    files.push(file);\n                                }\n                            } else if (item.isDirectory) {\n                                this.folderEntityDropped.emit(item);\n                            }\n                        }\n                    }\n                }\n                if (files.length > 0) {\n                    this.filesDropped.emit(files);\n                }\n            } else {\n                // IE, Safari, Chrome, Edge, Firefox, Opera (Files only)\n                const files = FileUtils.toFileArray(event.dataTransfer.files);\n                this.filesDropped.emit(files);\n            }\n\n            this.element.classList.remove(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file drag in.\n     *\n     * @param event - DOM event.\n     */\n    onDragEnter(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.add(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file drag out.\n     *\n     * @param event - DOM event.\n     */\n    onDragLeave(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.remove(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file is over the drag area.\n     *\n     * @param event\n     */\n    onDragOver(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.add(this.cssClassName);\n        }\n    }\n\n    /**\n     * Prevent default and stop propagation of the DOM event.\n     *\n     * @param $event - DOM event.\n     */\n    preventDefault(event: Event): void {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { MaterialModule } from '../material.module';\nimport { FileUploadingDialogComponent } from './components/file-uploading-dialog.component';\nimport { FileUploadingListRowComponent } from './components/file-uploading-list-row.component';\nimport { FileUploadingListComponent } from './components/file-uploading-list.component';\nimport { UploadButtonComponent } from './components/upload-button.component';\nimport { UploadVersionButtonComponent } from './components/upload-version-button.component';\nimport { UploadDragAreaComponent } from './components/upload-drag-area.component';\nimport { FileUploadErrorPipe } from './pipes/file-upload-error.pipe';\n\nimport { CoreModule } from '@alfresco/adf-core';\nimport { FileDraggableDirective } from './directives/file-draggable.directive';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        FileDraggableDirective,\n        UploadDragAreaComponent,\n        UploadButtonComponent,\n        UploadVersionButtonComponent,\n        FileUploadingDialogComponent,\n        FileUploadingListComponent,\n        FileUploadingListRowComponent,\n        FileUploadErrorPipe\n    ],\n    exports: [\n        FileDraggableDirective,\n        UploadDragAreaComponent,\n        UploadButtonComponent,\n        UploadVersionButtonComponent,\n        FileUploadingDialogComponent,\n        FileUploadingListComponent,\n        FileUploadingListRowComponent,\n        FileUploadErrorPipe\n    ]\n})\nexport class UploadModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { CoreModule } from '@alfresco/adf-core';\n\nimport { MaterialModule } from '../material.module';\nimport { UploadModule } from '../upload/upload.module';\n\nimport { ContentActionListComponent } from './components/content-action/content-action-list.component';\nimport { ContentActionComponent } from './components/content-action/content-action.component';\nimport { ContentColumnListComponent } from './components/content-column/content-column-list.component';\nimport { ContentColumnComponent } from './components/content-column/content-column.component';\nimport { DocumentListComponent } from './components/document-list.component';\n\nimport { TrashcanNameColumnComponent } from './components/trashcan-name-column/trashcan-name-column.component';\nimport { LibraryStatusColumnComponent } from './components/library-status-column/library-status-column.component';\nimport { LibraryRoleColumnComponent } from './components/library-role-column/library-role-column.component';\nimport { LibraryNameColumnComponent } from './components/library-name-column/library-name-column.component';\nimport { NameColumnComponent } from './components/name-column/name-column.component';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        UploadModule\n    ],\n    declarations: [\n        DocumentListComponent,\n        ContentColumnComponent,\n        TrashcanNameColumnComponent,\n        LibraryStatusColumnComponent,\n        LibraryRoleColumnComponent,\n        LibraryNameColumnComponent,\n        NameColumnComponent,\n        ContentColumnListComponent,\n        ContentActionComponent,\n        ContentActionListComponent\n    ],\n    exports: [\n        DocumentListComponent,\n        ContentColumnComponent,\n        TrashcanNameColumnComponent,\n        LibraryStatusColumnComponent,\n        LibraryRoleColumnComponent,\n        LibraryNameColumnComponent,\n        NameColumnComponent,\n        ContentColumnListComponent,\n        ContentActionComponent,\n        ContentActionListComponent\n    ],\n    entryComponents: [\n        TrashcanNameColumnComponent,\n        LibraryStatusColumnComponent,\n        LibraryRoleColumnComponent,\n        LibraryNameColumnComponent,\n        NameColumnComponent\n    ]\n})\nexport class DocumentListModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';\nimport {\n    QueryBody,\n    RequestFacetFields,\n    RequestFacetField,\n    RequestSortDefinitionInner,\n    ResultSetPaging\n} from '@alfresco/js-api';\nimport { SearchCategory } from './search-category.interface';\nimport { FilterQuery } from './filter-query.interface';\nimport { SearchRange } from './search-range.interface';\nimport { SearchConfiguration } from './search-configuration.interface';\nimport { FacetQuery } from './facet-query.interface';\nimport { SearchSortingDefinition } from './search-sorting-definition.interface';\nimport { FacetField } from './facet-field.interface';\nimport { FacetFieldBucket } from './facet-field-bucket.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SearchQueryBuilderService {\n\n    private _userQuery = '';\n\n    updated: Subject<QueryBody> = new Subject();\n    executed: Subject<ResultSetPaging> = new Subject();\n\n    categories: Array<SearchCategory> = [];\n    queryFragments: { [id: string]: string } = {};\n    filterQueries: FilterQuery[] = [];\n    paging: { maxItems?: number; skipCount?: number } = null;\n    sorting: Array<SearchSortingDefinition> = [];\n\n    protected userFacetBuckets: { [key: string]: Array<FacetFieldBucket> } = {};\n\n    get userQuery(): string {\n        return this._userQuery;\n    }\n\n    set userQuery(value: string) {\n        value = (value || '').trim();\n        this._userQuery = value ? `(${value})` : '';\n    }\n\n    config: SearchConfiguration;\n\n    // TODO: to be supported in future iterations\n    ranges: { [id: string]: SearchRange } = {};\n\n    constructor(private appConfig: AppConfigService, private alfrescoApiService: AlfrescoApiService) {\n        this.resetToDefaults();\n    }\n\n    /**\n     * Resets the query to the defaults specified in the app config.\n     */\n    resetToDefaults() {\n        const template = this.appConfig.get<SearchConfiguration>('search');\n        if (template) {\n            this.config = JSON.parse(JSON.stringify(template));\n            this.categories = (this.config.categories || []).filter((category) => category.enabled);\n            this.filterQueries = this.config.filterQueries || [];\n            this.userFacetBuckets = {};\n            if (this.config.sorting) {\n                this.sorting = this.config.sorting.defaults || [];\n            }\n        }\n    }\n\n    /**\n     * Adds a facet bucket to a field.\n     * @param field The target field\n     * @param bucket Bucket to add\n     */\n    addUserFacetBucket(field: FacetField, bucket: FacetFieldBucket) {\n        if (field && field.field && bucket) {\n            const buckets = this.userFacetBuckets[field.field] || [];\n            const existing = buckets.find((facetBucket) => facetBucket.label === bucket.label);\n            if (!existing) {\n                buckets.push(bucket);\n            }\n            this.userFacetBuckets[field.field] = buckets;\n        }\n    }\n\n    /**\n     * Gets the buckets currently added to a field\n     * @param field The target fields\n     * @returns Bucket array\n     */\n    getUserFacetBuckets(field: string) {\n        return this.userFacetBuckets[field] || [];\n    }\n\n    /**\n     * Removes an existing bucket from a field.\n     * @param field The target field\n     * @param bucket Bucket to remove\n     */\n    removeUserFacetBucket(field: FacetField, bucket: FacetFieldBucket) {\n        if (field && field.field && bucket) {\n            const buckets = this.userFacetBuckets[field.field] || [];\n            this.userFacetBuckets[field.field] = buckets\n                .filter((facetBucket) => facetBucket.label !== bucket.label);\n        }\n    }\n\n    /**\n     * Adds a filter query to the current query.\n     * @param query Query string to add\n     */\n    addFilterQuery(query: string): void {\n        if (query) {\n            const existing = this.filterQueries.find((filterQuery) => filterQuery.query === query);\n            if (!existing) {\n                this.filterQueries.push({ query: query });\n            }\n        }\n    }\n\n    /**\n     * Removes an existing filter query.\n     * @param query The query to remove\n     */\n    removeFilterQuery(query: string): void {\n        if (query) {\n            this.filterQueries = this.filterQueries\n                .filter((filterQuery) => filterQuery.query !== query);\n        }\n    }\n\n    /**\n     * Gets a facet query by label.\n     * @param label Label of the query\n     * @returns Facet query data\n     */\n    getFacetQuery(label: string): FacetQuery {\n        if (label && this.hasFacetQueries) {\n            const result = this.config.facetQueries.queries.find((query) => query.label === label);\n            if (result) {\n                return { ...result };\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Gets a facet field by label.\n     * @param label Label of the facet field\n     * @returns Facet field data\n     */\n    getFacetField(label: string): FacetField {\n        if (label) {\n            const fields = this.config.facetFields.fields || [];\n            const result = fields.find((field) => field.label === label);\n            if (result) {\n                return { ...result };\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Builds the current query and triggers the `updated` event.\n     */\n    update(): void {\n        const query = this.buildQuery();\n        this.updated.next(query);\n    }\n\n    /**\n     * Builds and executes the current query.\n     * @returns Nothing\n     */\n    async execute() {\n        const query = this.buildQuery();\n        if (query) {\n            const resultSetPaging: ResultSetPaging = await this.alfrescoApiService.searchApi.search(query);\n            this.executed.next(resultSetPaging);\n        }\n    }\n\n    /**\n     * Builds the current query.\n     * @returns The finished query\n     */\n    buildQuery(): QueryBody {\n        let query = this.getFinalQuery();\n\n        const include = this.config.include || [];\n        if (include.length === 0) {\n            include.push('path', 'allowableOperations');\n        }\n\n        if (query) {\n            const result: QueryBody = <QueryBody> {\n                query: {\n                    query: query,\n                    language: 'afts'\n                },\n                include: include,\n                paging: this.paging,\n                fields: this.config.fields,\n                filterQueries: this.filterQueries,\n                facetQueries: this.facetQueries,\n                facetFields: this.facetFields,\n                sort: this.sort\n            };\n\n            result['facetFormat'] = 'V2';\n            return result;\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets the primary sorting definition.\n     * @returns The primary sorting definition\n     */\n    getPrimarySorting(): SearchSortingDefinition {\n        if (this.sorting && this.sorting.length > 0) {\n            return this.sorting[0];\n        }\n        return null;\n    }\n\n    /**\n     * Gets all pre-configured sorting options that users can choose from.\n     * @returns Pre-configured sorting options\n     */\n    getSortingOptions(): SearchSortingDefinition[] {\n        if (this.config && this.config.sorting) {\n            return this.config.sorting.options || [];\n        }\n        return [];\n    }\n\n    /**\n     * Gets the query group.\n     * @param query Target query\n     * @returns Query group\n     */\n    getQueryGroup(query) {\n        return query.group || this.config.facetQueries.label || 'Facet Queries';\n    }\n\n    /**\n     * Checks if FacetQueries has been defined\n     * @returns True if defined, false otherwise\n     */\n    get hasFacetQueries(): boolean {\n        if (this.config\n            && this.config.facetQueries\n            && this.config.facetQueries.queries\n            && this.config.facetQueries.queries.length > 0) {\n            return true;\n        }\n        return false;\n    }\n\n    protected get sort(): RequestSortDefinitionInner[] {\n        return this.sorting.map((def) => {\n            return new RequestSortDefinitionInner({\n                type: def.type,\n                field: def.field,\n                ascending: def.ascending\n            });\n        });\n    }\n\n    protected get facetQueries(): FacetQuery[] {\n        if (this.hasFacetQueries) {\n            return this.config.facetQueries.queries.map((query) => {\n                query.group = this.getQueryGroup(query);\n                return <FacetQuery> { ...query };\n            });\n        }\n\n        return null;\n    }\n\n    protected getFinalQuery(): string {\n        let query = '';\n\n        this.categories.forEach((facet) => {\n            const customQuery = this.queryFragments[facet.id];\n            if (customQuery) {\n                if (query.length > 0) {\n                    query += ' AND ';\n                }\n                query += `(${customQuery})`;\n            }\n        });\n\n        let result = [this.userQuery, query]\n            .filter((entry) => entry)\n            .join(' AND ');\n\n        if (this.userFacetBuckets) {\n            Object.keys(this.userFacetBuckets).forEach((key) => {\n                const subQuery = (this.userFacetBuckets[key] || [])\n                    .map((bucket) => bucket.filterQuery)\n                    .join(' OR ');\n                if (subQuery) {\n                    if (result.length > 0) {\n                        result += ' AND ';\n                    }\n                    result += `(${subQuery})`;\n                }\n            });\n        }\n\n        return result;\n    }\n\n    protected get facetFields(): RequestFacetFields {\n        const facetFields = this.config.facetFields && this.config.facetFields.fields;\n\n        if (facetFields && facetFields.length > 0) {\n            return {\n                facets: facetFields.map((facet) => <RequestFacetField> {\n                    field: facet.field,\n                    mincount: facet.mincount,\n                    label: facet.label,\n                    limit: facet.limit,\n                    offset: facet.offset,\n                    prefix: facet.prefix\n                })\n            };\n        }\n\n        return null;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SearchService } from '@alfresco/adf-core';\nimport {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NodePaging } from '@alfresco/js-api';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-search',\n    templateUrl: './search.component.html',\n    styleUrls: ['./search.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    exportAs: 'searchAutocomplete',\n    host: {\n        'class': 'adf-search'\n    }\n})\nexport class SearchComponent implements AfterContentInit, OnChanges {\n\n    @ViewChild('panel')\n    panel: ElementRef;\n\n    @ContentChild(TemplateRef)\n    template: TemplateRef<any>;\n\n    /** Function that maps an option's value to its display value in the trigger. */\n    @Input()\n    displayWith: ((value: any) => string) | null = null;\n\n    /** Maximum number of results to show in the search. */\n    @Input()\n    maxResults: number = 20;\n\n    /** Number of results to skip from the results pagination. */\n    @Input()\n    skipResults: number = 0;\n\n    /** Search term to use when executing the search. Updating this value will\n     * run a new search and update the results.\n     */\n    @Input()\n    searchTerm: string = '';\n\n    /** CSS class for display. */\n    @Input('class')\n    set classList(classList: string) {\n        if (classList && classList.length) {\n            classList.split(' ').forEach((className) => this._classList[className.trim()] = true);\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n\n    /** Emitted when search results have fully loaded. */\n    @Output()\n    resultLoaded: EventEmitter<NodePaging> = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    showPanel: boolean = false;\n    results: NodePaging;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    _isOpen: boolean = false;\n\n    keyPressedStream: Subject<string> = new Subject();\n\n    _classList: { [key: string]: boolean } = {};\n\n    constructor(private searchService: SearchService,\n                private _elementRef: ElementRef) {\n        this.keyPressedStream.asObservable()\n            .pipe(\n                debounceTime(200)\n            )\n            .subscribe((searchedWord: string) => {\n                this.loadSearchResults(searchedWord);\n            });\n\n        searchService.dataLoaded.subscribe(\n            (nodePaging: NodePaging) => this.onSearchDataLoaded(nodePaging),\n            (error) => this.onSearchDataError(error)\n        );\n    }\n\n    ngAfterContentInit() {\n        this.setVisibility();\n    }\n\n    ngOnChanges(changes) {\n        if (changes.searchTerm && changes.searchTerm.currentValue) {\n            this.loadSearchResults(changes.searchTerm.currentValue);\n        }\n    }\n\n    resetResults() {\n        this.cleanResults();\n        this.setVisibility();\n    }\n\n    reload() {\n        this.loadSearchResults(this.searchTerm);\n    }\n\n    private cleanResults() {\n        if (this.results) {\n            this.results = {};\n        }\n    }\n\n    private loadSearchResults(searchTerm?: string) {\n        this.resetResults();\n        if (searchTerm) {\n            this.searchService.search(searchTerm, this.maxResults, this.skipResults).subscribe(\n                (result) => this.onSearchDataLoaded(result),\n                (err) => this.onSearchDataError(err)\n            );\n        } else {\n            this.cleanResults();\n        }\n    }\n\n    onSearchDataLoaded(nodePaging: NodePaging) {\n        if (nodePaging) {\n            this.results = nodePaging;\n            this.resultLoaded.emit(this.results);\n            this.isOpen = true;\n            this.setVisibility();\n        }\n    }\n\n    onSearchDataError(error) {\n        if (error && error.status !== 400) {\n            this.results = null;\n            this.error.emit(error);\n        }\n    }\n\n    hidePanel() {\n        if (this.isOpen) {\n            this._classList['adf-search-show'] = false;\n            this._classList['adf-search-hide'] = true;\n            this.isOpen = false;\n        }\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.results && !!this.results.list;\n        this._classList['adf-search-show'] = this.showPanel;\n        this._classList['adf-search-hide'] = !this.showPanel;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'adf-empty-search-result',\n    templateUrl: './empty-search-result.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class EmptySearchResultComponent {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthenticationService, ThumbnailService } from '@alfresco/adf-core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output,\n         QueryList, ViewEncapsulation, ViewChild, ViewChildren, ElementRef, TemplateRef, ContentChild } from '@angular/core';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { Observable, Subject } from 'rxjs';\nimport { SearchComponent } from './search.component';\nimport { MatListItem } from '@angular/material';\nimport { EmptySearchResultComponent } from './empty-search-result.component';\nimport { debounceTime, filter } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-search-control',\n    templateUrl: './search-control.component.html',\n    styleUrls: ['./search-control.component.scss'],\n    animations: [\n        trigger('transitionMessages', [\n            state('active', style({ transform: 'translateX(0%)', 'margin-left': '13px' })),\n            state('inactive', style({ transform: 'translateX(82%)'})),\n            state('no-animation', style({ transform: 'translateX(0%)', width: '100%' })),\n            transition('inactive => active',\n                animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')),\n            transition('active => inactive',\n                animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n        ])\n    ],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-control' }\n})\nexport class SearchControlComponent implements OnInit, OnDestroy {\n\n    /** Toggles whether to use an expanding search control. If false\n     * then a regular input is used.\n     */\n    @Input()\n    expandable: boolean = true;\n\n    /** Toggles highlighting of the search term in the results. */\n    @Input()\n    highlight: boolean = false;\n\n    /** Type of the input field to render, e.g. \"search\" or \"text\" (default). */\n    @Input()\n    inputType: string = 'text';\n\n    /** Toggles auto-completion of the search input field. */\n    @Input()\n    autocomplete: boolean = false;\n\n    /** Toggles \"find-as-you-type\" suggestions for possible matches. */\n    @Input()\n    liveSearchEnabled: boolean = true;\n\n    /** Maximum number of results to show in the live search. */\n    @Input()\n    liveSearchMaxResults: number = 5;\n\n    /** Emitted when the search is submitted by pressing the ENTER key.\n     * The search term is provided as the value of the event.\n     */\n    @Output()\n    submit: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when the search term is changed. The search term is provided\n     * in the 'value' property of the returned object.  If the term is less\n     * than three characters in length then it is truncated to an empty\n     * string.\n     */\n    @Output()\n    searchChange: EventEmitter<string> = new EventEmitter();\n\n    /** Emitted when a file item from the list of \"find-as-you-type\" results is selected. */\n    @Output()\n    optionClicked: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('search')\n    searchAutocomplete: SearchComponent;\n\n    @ViewChild('searchInput')\n    searchInput: ElementRef;\n\n    @ViewChildren(MatListItem)\n    private listResultElement: QueryList<MatListItem>;\n\n    @ContentChild(EmptySearchResultComponent)\n    emptySearchTemplate: EmptySearchResultComponent;\n\n    searchTerm: string = '';\n    subscriptAnimationState: string;\n    noSearchResultTemplate: TemplateRef <any> = null;\n\n    private toggleSearch = new Subject<any>();\n    private focusSubject = new Subject<FocusEvent>();\n\n    constructor(public authService: AuthenticationService,\n                private thumbnailService: ThumbnailService) {\n\n        this.toggleSearch.asObservable().pipe(debounceTime(200)).subscribe(() => {\n            if (this.expandable) {\n                this.subscriptAnimationState = this.subscriptAnimationState === 'inactive' ? 'active' : 'inactive';\n\n                if (this.subscriptAnimationState === 'inactive') {\n                    this.searchTerm = '';\n                    this.searchAutocomplete.resetResults();\n                    if ( document.activeElement.id === this.searchInput.nativeElement.id) {\n                        this.searchInput.nativeElement.blur();\n                    }\n                }\n            }\n        });\n    }\n\n    applySearchFocus(animationDoneEvent) {\n        if (animationDoneEvent.toState === 'active') {\n            this.searchInput.nativeElement.focus();\n        }\n    }\n\n    ngOnInit() {\n        this.subscriptAnimationState = this.expandable ? 'inactive' : 'no-animation';\n        this.setupFocusEventHandlers();\n    }\n\n    isNoSearchTemplatePresent(): boolean {\n        return this.emptySearchTemplate ? true : false;\n    }\n\n    ngOnDestroy(): void {\n        if (this.focusSubject) {\n            this.focusSubject.complete();\n            this.focusSubject = null;\n        }\n\n        if (this.toggleSearch) {\n            this.toggleSearch.complete();\n            this.toggleSearch = null;\n        }\n    }\n\n    isLoggedIn(): boolean {\n        return this.authService.isEcmLoggedIn();\n    }\n\n    searchSubmit(event: any) {\n        this.submit.emit(event);\n        this.toggleSearchBar();\n    }\n\n    inputChange(event: any) {\n        this.searchChange.emit(event);\n    }\n\n    getAutoComplete(): string {\n        return this.autocomplete ? 'on' : 'off';\n    }\n\n    getMimeTypeIcon(node: NodeEntry): string {\n        let mimeType;\n\n        if (node.entry.content && node.entry.content.mimeType) {\n            mimeType = node.entry.content.mimeType;\n        }\n        if (node.entry.isFolder) {\n            mimeType = 'folder';\n        }\n\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n\n    isSearchBarActive() {\n        return this.subscriptAnimationState === 'active' && this.liveSearchEnabled;\n    }\n\n    toggleSearchBar() {\n        if (this.toggleSearch) {\n            this.toggleSearch.next();\n        }\n    }\n\n    elementClicked(item: any) {\n        if (item.entry) {\n            this.optionClicked.next(item);\n            this.toggleSearchBar();\n        }\n    }\n\n    onFocus($event): void {\n        this.focusSubject.next($event);\n    }\n\n    onBlur($event): void {\n        this.focusSubject.next($event);\n    }\n\n    activateToolbar() {\n        if (!this.isSearchBarActive()) {\n            this.toggleSearchBar();\n        }\n    }\n\n    selectFirstResult() {\n        if ( this.listResultElement && this.listResultElement.length > 0) {\n            let firstElement: MatListItem = <MatListItem> this.listResultElement.first;\n            firstElement._getHostElement().focus();\n        }\n    }\n\n    onRowArrowDown($event: KeyboardEvent): void {\n        let nextElement: any = this.getNextElementSibling(<Element> $event.target);\n        if (nextElement) {\n            nextElement.focus();\n        }\n    }\n\n    onRowArrowUp($event: KeyboardEvent): void {\n        let previousElement: any = this.getPreviousElementSibling(<Element> $event.target);\n        if (previousElement) {\n            previousElement.focus();\n        } else {\n            this.searchInput.nativeElement.focus();\n            this.focusSubject.next(new FocusEvent('focus'));\n        }\n    }\n\n    private setupFocusEventHandlers() {\n        const focusEvents: Observable<FocusEvent> = this.focusSubject\n            .asObservable()\n            .pipe(\n                debounceTime(50),\n                filter(($event: any) => {\n                    return this.isSearchBarActive() && ($event.type === 'blur' || $event.type === 'focusout');\n                })\n            );\n\n        focusEvents.subscribe(() => {\n            this.toggleSearchBar();\n        });\n    }\n\n    private getNextElementSibling(node: Element): Element {\n        return node.nextElementSibling;\n    }\n\n    private getPreviousElementSibling(node: Element): Element {\n        return node.previousElementSibling;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable: no-input-rename no-use-before-declare no-input-rename  */\n\nimport { ENTER, ESCAPE } from '@angular/cdk/keycodes';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\nimport { Observable, Subject, Subscription, merge, of, fromEvent } from 'rxjs';\nimport { SearchComponent } from './search.component';\nimport { filter, switchMap, takeUntil } from 'rxjs/operators';\n\nexport const SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SearchTriggerDirective),\n    multi: true\n};\n\n/**\n * Directive selectors without adf- prefix will be deprecated on 3.0.0\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: `input[searchAutocomplete], textarea[searchAutocomplete]`,\n    host: {\n        'role': 'combobox',\n        '[attr.autocomplete]': 'autocomplete',\n        'aria-autocomplete': 'list',\n        '[attr.aria-expanded]': 'panelOpen.toString()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)'\n    },\n    providers: [SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class SearchTriggerDirective implements ControlValueAccessor, OnDestroy {\n    private onDestroy$: Subject<boolean> = new Subject<boolean>();\n\n    @Input('searchAutocomplete')\n    searchPanel: SearchComponent;\n\n    @Input()\n    autocomplete: string = 'off';\n\n    private _panelOpen: boolean = false;\n    private closingActionsSubscription: Subscription;\n    private escapeEventStream = new Subject<void>();\n\n    onChange: (value: any) => void = () => { };\n\n    onTouched = () => { };\n\n    constructor(private element: ElementRef,\n                private ngZone: NgZone,\n                private changeDetectorRef: ChangeDetectorRef,\n                @Optional() @Inject(DOCUMENT) private document: any) { }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n\n        if (this.escapeEventStream) {\n            this.escapeEventStream = null;\n        }\n        if ( this.closingActionsSubscription ) {\n            this.closingActionsSubscription.unsubscribe();\n        }\n    }\n\n    get panelOpen(): boolean {\n        return this._panelOpen && this.searchPanel.showPanel;\n    }\n\n    openPanel(): void {\n        this.searchPanel.isOpen = this._panelOpen = true;\n        this.closingActionsSubscription = this.subscribeToClosingActions();\n    }\n\n    closePanel(): void {\n        if (this._panelOpen) {\n            this.closingActionsSubscription.unsubscribe();\n            this._panelOpen = false;\n            this.searchPanel.resetResults();\n            this.searchPanel.hidePanel();\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    get panelClosingActions(): Observable<any> {\n        return merge(\n            this.escapeEventStream,\n            this.outsideClickStream\n        );\n    }\n\n    private get outsideClickStream(): Observable<any> {\n        if (!this.document) {\n            return of(null);\n        }\n\n        return merge(\n            fromEvent(this.document, 'click'),\n            fromEvent(this.document, 'touchend')\n        ).pipe(\n            filter((event: MouseEvent | TouchEvent) => {\n                const clickTarget = event.target as HTMLElement;\n                return this._panelOpen && clickTarget !== this.element.nativeElement;\n            }),\n            takeUntil(this.onDestroy$)\n        );\n    }\n\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        if (keyCode === ESCAPE && this.panelOpen) {\n            this.escapeEventStream.next();\n            event.stopPropagation();\n        } else if (keyCode === ENTER) {\n            this.escapeEventStream.next();\n            event.preventDefault();\n        }\n\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        if (document.activeElement === event.target) {\n            let inputValue: string = (event.target as HTMLInputElement).value;\n            this.onChange(inputValue);\n            if (inputValue) {\n                this.searchPanel.keyPressedStream.next(inputValue);\n                this.openPanel();\n            } else {\n                this.searchPanel.resetResults();\n                this.closePanel();\n            }\n        }\n    }\n\n    private isPanelOptionClicked(event: MouseEvent) {\n        let isPanelOption: boolean = false;\n        if ( event ) {\n            let clickTarget = event.target as HTMLElement;\n            isPanelOption = !this.isNoResultOption(event) &&\n                            !!this.searchPanel.panel &&\n                            !!this.searchPanel.panel.nativeElement.contains(clickTarget);\n        }\n        return isPanelOption;\n    }\n\n    private isNoResultOption(event: MouseEvent) {\n        return this.searchPanel.results.list ? this.searchPanel.results.list.entries.length === 0 : true;\n    }\n\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.ngZone.onStable.asObservable();\n        const optionChanges = this.searchPanel.keyPressedStream.asObservable();\n\n        return merge(firstStable, optionChanges)\n            .pipe(\n                switchMap(() => {\n                    this.searchPanel.setVisibility();\n                    return this.panelClosingActions;\n                }),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.searchPanel && this.searchPanel.displayWith ?\n            this.searchPanel.displayWith(value) : value;\n        const inputValue = toDisplay != null ? toDisplay : '';\n        this.element.nativeElement.value = inputValue;\n    }\n\n    private setValueAndClose(event: any | null): void {\n        if (this.isPanelOptionClicked(event) && !event.defaultPrevented) {\n            this.setTriggerValue(event.target.textContent.trim());\n            this.onChange(event.target.textContent.trim());\n            this.element.nativeElement.focus();\n        }\n        this.closePanel();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst DEFAULT_PAGE_SIZE = 5;\n\nexport class SearchFilterList<T> implements Iterable<T> {\n\n    private filteredItems: T[] = [];\n    private _filterText: string = '';\n\n    items: T[] = [];\n    pageSize: number = DEFAULT_PAGE_SIZE;\n    currentPageSize: number = DEFAULT_PAGE_SIZE;\n\n    get filterText(): string {\n        return this._filterText;\n    }\n\n    set filterText(value: string) {\n        this._filterText = value;\n        this.applyFilter();\n    }\n\n    private _filter: (item: T) => boolean = () => true;\n\n    get filter(): (item: T) => boolean {\n        return this._filter;\n    }\n\n    set filter(value: (item: T) => boolean ) {\n        this._filter = value;\n        this.applyFilter();\n    }\n\n    private applyFilter() {\n        if (this.filter) {\n            this.filteredItems = this.items.filter(this.filter);\n        } else {\n            this.filteredItems = this.items;\n        }\n        this.currentPageSize = this.pageSize;\n    }\n\n    /** Returns visible portion of the items.  */\n    get visibleItems(): T[] {\n        return this.filteredItems.slice(0, this.currentPageSize);\n    }\n\n    /** Returns entire collection length including items not displayed on the page. */\n    get length(): number {\n        return this.items.length;\n    }\n\n    /** Detects whether more items can be displayed. */\n    get canShowMoreItems(): boolean {\n        return this.filteredItems.length > this.currentPageSize;\n    }\n\n    /** Detects whether less items can be displayed. */\n    get canShowLessItems(): boolean {\n        return this.currentPageSize > this.pageSize;\n    }\n\n    /** Detects whether content fits single page. */\n    get fitsPage(): boolean {\n        return this.pageSize >= this.filteredItems.length;\n    }\n\n    constructor(items: T[] = [], pageSize?: number) {\n        this.items = items;\n        this.filteredItems = items;\n        this.pageSize = pageSize || DEFAULT_PAGE_SIZE;\n        this.currentPageSize = pageSize || DEFAULT_PAGE_SIZE;\n    }\n\n    /** Display more items. */\n    showMoreItems() {\n        if (this.canShowMoreItems) {\n            this.currentPageSize += this.pageSize;\n        }\n    }\n\n    /** Display less items. */\n    showLessItems() {\n        if (this.canShowLessItems) {\n            this.currentPageSize -= this.pageSize;\n        }\n    }\n\n    /** Reset entire collection and page settings. */\n    clear() {\n        this.currentPageSize = this.pageSize;\n        this.items = [];\n        this.filteredItems = [];\n        this.filterText = '';\n    }\n\n    [Symbol.iterator](): Iterator<T> {\n        let pointer = 0;\n        let items = this.visibleItems;\n\n        return {\n            next(): IteratorResult<T> {\n                if (pointer < items.length) {\n                    return {\n                        done: false,\n                        value: items[pointer++]\n                    };\n                } else {\n                    return {\n                        done: true,\n                        value: null\n                    };\n                }\n            }\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, OnDestroy } from '@angular/core';\nimport { MatCheckboxChange } from '@angular/material';\nimport { SearchService, TranslationService } from '@alfresco/adf-core';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { FacetFieldBucket } from '../../facet-field-bucket.interface';\nimport { FacetField } from '../../facet-field.interface';\nimport { SearchFilterList } from './models/search-filter-list.model';\nimport { takeWhile } from 'rxjs/operators';\nimport { ResultSetPaging, GenericBucket, GenericFacetResponse, ResultSetContext } from '@alfresco/js-api';\n\n@Component({\n    selector: 'adf-search-filter',\n    templateUrl: './search-filter.component.html',\n    styleUrls: ['./search-filter.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-filter' }\n})\nexport class SearchFilterComponent implements OnInit, OnDestroy {\n\n    private DEFAULT_PAGE_SIZE = 5;\n\n    isAlive = true;\n    responseFacets: FacetField[] = null;\n\n    private facetQueriesPageSize = this.DEFAULT_PAGE_SIZE;\n    facetQueriesLabel: string = 'Facet Queries';\n    facetQueriesExpanded = false;\n    facetFieldsExpanded = false;\n\n    selectedBuckets: Array<{ field: FacetField, bucket: FacetFieldBucket }> = [];\n\n    constructor(public queryBuilder: SearchQueryBuilderService,\n                private searchService: SearchService,\n                private translationService: TranslationService) {\n        if (queryBuilder.config && queryBuilder.config.facetQueries) {\n            this.facetQueriesLabel = queryBuilder.config.facetQueries.label || 'Facet Queries';\n            this.facetQueriesPageSize = queryBuilder.config.facetQueries.pageSize || this.DEFAULT_PAGE_SIZE;\n            this.facetQueriesExpanded = queryBuilder.config.facetQueries.expanded;\n        }\n        if (queryBuilder.config && queryBuilder.config.facetFields) {\n            this.facetFieldsExpanded = queryBuilder.config.facetFields.expanded;\n        }\n\n        this.queryBuilder.updated.pipe(\n            takeWhile(() => this.isAlive)\n        ).subscribe(() => {\n            this.queryBuilder.execute();\n        });\n    }\n\n    ngOnInit() {\n        if (this.queryBuilder) {\n            this.queryBuilder.executed.pipe(\n                takeWhile(() => this.isAlive)\n            ).subscribe((resultSetPaging: ResultSetPaging) => {\n                this.onDataLoaded(resultSetPaging);\n                this.searchService.dataLoaded.next(resultSetPaging);\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.isAlive = false;\n    }\n\n    private updateSelectedBuckets() {\n        if (this.responseFacets) {\n            this.selectedBuckets = [];\n            for (let field of this.responseFacets) {\n                if (field.buckets) {\n                    this.selectedBuckets.push(\n                        ...this.queryBuilder.getUserFacetBuckets(field.field)\n                            .filter((bucket) => bucket.checked)\n                            .map((bucket) => {\n                                return { field, bucket };\n                            })\n                    );\n                }\n            }\n        } else {\n            this.selectedBuckets = [];\n        }\n    }\n\n    onToggleBucket(event: MatCheckboxChange, field: FacetField, bucket: FacetFieldBucket) {\n        if (event && bucket) {\n            if (event.checked) {\n                this.selectFacetBucket(field, bucket);\n            } else {\n                this.unselectFacetBucket(field, bucket);\n            }\n        }\n    }\n\n    selectFacetBucket(field: FacetField, bucket: FacetFieldBucket) {\n        if (bucket) {\n            bucket.checked = true;\n            this.queryBuilder.addUserFacetBucket(field, bucket);\n            this.updateSelectedBuckets();\n            this.queryBuilder.update();\n        }\n    }\n\n    unselectFacetBucket(field: FacetField, bucket: FacetFieldBucket) {\n        if (bucket) {\n            bucket.checked = false;\n            this.queryBuilder.removeUserFacetBucket(field, bucket);\n            this.updateSelectedBuckets();\n            this.queryBuilder.update();\n        }\n    }\n\n    canResetSelectedBuckets(field: FacetField): boolean {\n        if (field && field.buckets) {\n            return field.buckets.items.some((bucket) => bucket.checked);\n        }\n        return false;\n    }\n\n    resetSelectedBuckets(field: FacetField) {\n        if (field && field.buckets) {\n            for (let bucket of field.buckets.items) {\n                bucket.checked = false;\n                this.queryBuilder.removeUserFacetBucket(field, bucket);\n            }\n            this.updateSelectedBuckets();\n            this.queryBuilder.update();\n        }\n    }\n\n    shouldExpand(field: FacetField): boolean {\n        return field.type === 'query' ? this.facetQueriesExpanded : this.facetFieldsExpanded;\n    }\n\n    onDataLoaded(data: any) {\n        const context = data.list.context;\n\n        if (context) {\n            this.parseFacets(context);\n        } else {\n            this.responseFacets = null;\n        }\n    }\n\n    private parseFacets(context: ResultSetContext) {\n        if (!this.responseFacets) {\n            const responseFacetFields = this.parseFacetFields(context);\n            const responseGroupedFacetQueries = this.parseFacetQueries(context);\n            this.responseFacets = responseFacetFields.concat(...responseGroupedFacetQueries);\n\n        } else {\n            this.responseFacets = this.responseFacets\n                .map((field) => {\n\n                    let responseField = (context.facets || []).find((response) => response.label === field.label && response.type === field.type);\n\n                    (field && field.buckets && field.buckets.items || [])\n                        .map((bucket) => {\n                            const responseBucket = ((responseField && responseField.buckets) || []).find((respBucket) => respBucket.label === bucket.label);\n\n                            bucket.count = responseBucket ? this.getCountValue(responseBucket) : 0;\n                            return bucket;\n                        });\n\n                    return field;\n                });\n        }\n    }\n\n    private parseFacetFields(context: ResultSetContext): FacetField[] {\n        const configFacetFields = this.queryBuilder.config.facetFields && this.queryBuilder.config.facetFields.fields || [];\n\n        return configFacetFields.map((field) => {\n            const responseField = (context.facets || []).find((response) => response.type === 'field' && response.label === field.label) || {};\n            const responseBuckets = this.getResponseBuckets(responseField);\n\n            const bucketList = new SearchFilterList<FacetFieldBucket>(responseBuckets, field.pageSize);\n            bucketList.filter = (bucket: FacetFieldBucket): boolean => {\n                if (bucket && bucketList.filterText) {\n                    const pattern = (bucketList.filterText || '').toLowerCase();\n                    const label = (this.translationService.instant(bucket.display) || this.translationService.instant(bucket.label)).toLowerCase();\n                    return this.queryBuilder.config.filterWithContains ? label.indexOf(pattern) !== -1 : label.startsWith(pattern);\n                }\n                return true;\n            };\n\n            return <FacetField> {\n                ...field,\n                type: responseField.type,\n                label: field.label,\n                pageSize: field.pageSize | this.DEFAULT_PAGE_SIZE,\n                currentPageSize: field.pageSize | this.DEFAULT_PAGE_SIZE,\n                buckets: bucketList\n            };\n        });\n    }\n\n    private parseFacetQueries(context: ResultSetContext): FacetField[] {\n        const configFacetQueries = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.queries || [];\n        const configGroups = configFacetQueries.reduce((acc, query) => {\n            const group = this.queryBuilder.getQueryGroup(query);\n            if (acc[group]) {\n                acc[group].push(query);\n            } else {\n                acc[group] = [query];\n            }\n            return acc;\n        }, []);\n\n        const result = [];\n\n        Object.keys(configGroups).forEach((group) => {\n            const responseField = (context.facets || []).find((response) => response.type === 'query' && response.label === group) || {};\n            const responseBuckets = this.getResponseQueryBuckets(responseField, configGroups[group]);\n\n            const bucketList = new SearchFilterList<FacetFieldBucket>(responseBuckets, this.facetQueriesPageSize);\n            bucketList.filter = (bucket: FacetFieldBucket): boolean => {\n                if (bucket && bucketList.filterText) {\n                    const pattern = (bucketList.filterText || '').toLowerCase();\n                    const label = (this.translationService.instant(bucket.display) || this.translationService.instant(bucket.label)).toLowerCase();\n                    return this.queryBuilder.config.filterWithContains ? label.indexOf(pattern) !== -1 : label.startsWith(pattern);\n                }\n                return true;\n            };\n\n            result.push(<FacetField> {\n                field: group,\n                type: responseField.type,\n                label: group,\n                pageSize: this.DEFAULT_PAGE_SIZE,\n                currentPageSize: this.DEFAULT_PAGE_SIZE,\n                buckets: bucketList\n            });\n        });\n\n        return result;\n    }\n\n    private getResponseBuckets(responseField: GenericFacetResponse): FacetFieldBucket[] {\n        return ((responseField && responseField.buckets) || []).map((respBucket) => {\n\n            respBucket['count'] = this.getCountValue(respBucket);\n            return <FacetFieldBucket> {\n                ...respBucket,\n                checked: false,\n                display: respBucket.display,\n                label: respBucket.label\n            };\n        });\n    }\n\n    private getResponseQueryBuckets(responseField: GenericFacetResponse, configGroup: any): FacetFieldBucket[] {\n        return (configGroup || []).map((query) => {\n            const respBucket = ((responseField && responseField.buckets) || [])\n                .find((bucket) => bucket.label === query.label);\n\n            respBucket['count'] = this.getCountValue(respBucket);\n            return <FacetFieldBucket> {\n                ...respBucket,\n                checked: false,\n                display: respBucket.display,\n                label: respBucket.label\n            };\n        }).filter((bucket) => {\n            let mincount = this.queryBuilder.config.facetQueries.mincount;\n            if (mincount === undefined) {\n                    mincount = 1;\n            }\n            return bucket.count >= mincount;\n        });\n    }\n\n    private getCountValue(bucket: GenericBucket): number {\n        return (!!bucket && !!bucket.metrics && bucket.metrics[0] && bucket.metrics[0].value && bucket.metrics[0].value.count)\n            || 0;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, Input } from '@angular/core';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\n\n@Component({\n    selector: 'adf-search-text',\n    templateUrl: './search-text.component.html',\n    styleUrls: ['./search-text.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-text' }\n})\nexport class SearchTextComponent implements SearchWidget, OnInit {\n\n    /** The content of the text box. */\n    @Input()\n    value = '';\n\n    id: string;\n    settings: SearchWidgetSettings;\n    context: SearchQueryBuilderService;\n\n    ngOnInit() {\n        if (this.context && this.settings && this.settings.pattern) {\n            const pattern = new RegExp(this.settings.pattern, 'g');\n            const match = pattern.exec(this.context.queryFragments[this.id] || '');\n\n            if (match && match.length > 1) {\n                this.value = match[1];\n            }\n        }\n    }\n\n    reset() {\n        this.value = '';\n        this.updateQuery(null);\n    }\n\n    onChangedHandler(event) {\n        this.value = event.target.value;\n        this.updateQuery(this.value);\n    }\n\n    private updateQuery(value: string) {\n        if (this.context && this.settings && this.settings.field) {\n            this.context.queryFragments[this.id] = value ? `${this.settings.field}:'${value}'` : '';\n            this.context.update();\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, Input } from '@angular/core';\nimport { MatRadioChange } from '@angular/material';\n\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { SearchFilterList } from '../search-filter/models/search-filter-list.model';\n\nexport interface SearchRadioOption {\n    name: string;\n    value: string;\n}\n\n@Component({\n    selector: 'adf-search-radio',\n    templateUrl: './search-radio.component.html',\n    styleUrls: ['./search-radio.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-radio' }\n})\nexport class SearchRadioComponent implements SearchWidget, OnInit {\n\n    /** The value of the selected radio button. */\n    @Input()\n    value: string;\n\n    id: string;\n    settings: SearchWidgetSettings;\n    context: SearchQueryBuilderService;\n    options: SearchFilterList<SearchRadioOption>;\n    pageSize = 5;\n\n    constructor() {\n        this.options = new SearchFilterList<SearchRadioOption>();\n    }\n\n    ngOnInit() {\n        if (this.settings) {\n            this.pageSize = this.settings.pageSize || 5;\n\n            if (this.settings.options && this.settings.options.length > 0) {\n                this.options = new SearchFilterList<SearchRadioOption>(\n                    this.settings.options, this.pageSize\n                );\n            }\n        }\n\n        this.setValue(\n            this.getSelectedValue()\n        );\n    }\n\n    private getSelectedValue(): string {\n        const options: any[] = this.settings['options'] || [];\n        if (options && options.length > 0) {\n            let selected = options.find((opt) => opt.default);\n            if (!selected) {\n                selected = options[0];\n            }\n            return selected.value;\n        }\n        return null;\n    }\n\n    private setValue(newValue: string) {\n        this.value = newValue;\n        this.context.queryFragments[this.id] = newValue;\n        this.context.update();\n    }\n\n    changeHandler(event: MatRadioChange) {\n        this.setValue(event.value);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, Input } from '@angular/core';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { MatSliderChange } from '@angular/material';\n\n@Component({\n    selector: 'adf-search-slider',\n    templateUrl: './search-slider.component.html',\n    styleUrls: ['./search-slider.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-slider' }\n})\nexport class SearchSliderComponent implements SearchWidget, OnInit {\n\n    id: string;\n    settings: SearchWidgetSettings;\n    context: SearchQueryBuilderService;\n    step: number;\n    min: number;\n    max: number;\n    thumbLabel = false;\n\n    /** The numeric value represented by the slider. */\n    @Input()\n    value: number | null;\n\n    ngOnInit() {\n        if (this.settings) {\n            if (this.settings.hasOwnProperty('min')) {\n                this.min = this.settings['min'];\n            }\n\n            if (this.settings.hasOwnProperty('max')) {\n                this.max = this.settings['max'];\n            }\n\n            if (this.settings.hasOwnProperty('step')) {\n                this.step = this.settings['step'];\n            }\n\n            this.thumbLabel = this.settings['thumbLabel'] ? true : false;\n        }\n    }\n\n    reset() {\n        this.value = this.min || 0;\n        this.updateQuery(null);\n    }\n\n    onChangedHandler(event: MatSliderChange) {\n        this.value = event.value;\n        this.updateQuery(this.value);\n    }\n\n    private updateQuery(value: number | null) {\n        if (this.id && this.context && this.settings && this.settings.field) {\n            if (value === null) {\n                this.context.queryFragments[this.id] = '';\n            } else {\n                this.context.queryFragments[this.id] = `${this.settings.field}:[0 TO ${value}]`;\n            }\n            this.context.update();\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorStateMatcher } from '@angular/material';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\n\nexport class LiveErrorStateMatcher implements ErrorStateMatcher {\n\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        const isSubmitted = form && form.submitted;\n        return !!(control && control.invalid && (control.dirty || control.touched || (!control.pristine && isSubmitted)));\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnInit, Component, ViewEncapsulation } from '@angular/core';\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { LiveErrorStateMatcher } from '../../forms/live-error-state-matcher';\n\n@Component({\n    selector: 'adf-search-number-range',\n    templateUrl: './search-number-range.component.html',\n    styleUrls: ['./search-number-range.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-number-range' }\n})\nexport class SearchNumberRangeComponent implements SearchWidget, OnInit {\n\n    from: FormControl;\n    to: FormControl;\n\n    form: FormGroup;\n    matcher = new LiveErrorStateMatcher();\n\n    id: string;\n    settings?: SearchWidgetSettings;\n    context?: SearchQueryBuilderService;\n\n    field: string;\n    format = '[{FROM} TO {TO}]';\n\n    validators: Validators;\n\n    ngOnInit(): void {\n\n        if (this.settings) {\n            this.field = this.settings.field;\n            this.format = this.settings.format || '[{FROM} TO {TO}]';\n        }\n\n        this.validators = Validators.compose([\n            Validators.required,\n            Validators.pattern(/^-?(0|[1-9]\\d*)?$/),\n            Validators.min(0)\n        ]);\n\n        this.from = new FormControl('', this.validators);\n        this.to = new FormControl('', this.validators);\n\n        this.form = new FormGroup({\n            from: this.from,\n            to: this.to\n        }, this.formValidator);\n    }\n\n    formValidator(formGroup: FormGroup) {\n        return parseInt(formGroup.get('from').value, 10) < parseInt(formGroup.get('to').value, 10) ? null : {'mismatch': true};\n    }\n\n    apply(model: { from: string, to: string }, isValid: boolean) {\n        if (isValid && this.id && this.context && this.field) {\n            const map = new Map<string, string>();\n            map.set('FROM', model.from);\n            map.set('TO', model.to);\n\n            const value = this.formatString(this.format, map);\n\n            this.context.queryFragments[this.id] = `${this.field}:${value}`;\n            this.context.update();\n        }\n    }\n\n    private formatString(str: string, map: Map<string, string>): string {\n        let result = str;\n\n        map.forEach((value, key) => {\n            const expr = new RegExp('{' + key + '}', 'gm');\n            result = result.replace(expr, value);\n        });\n\n        return result;\n    }\n\n    reset() {\n        this.form.reset({\n            from: '',\n            to: ''\n        });\n\n        if (this.id && this.context) {\n            this.context.queryFragments[this.id] = '';\n            this.context.update();\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport { MatCheckboxChange } from '@angular/material';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { SearchFilterList } from '../search-filter/models/search-filter-list.model';\n\nexport interface SearchListOption {\n    name: string;\n    value: string;\n    checked: boolean;\n}\n\n@Component({\n    selector: 'adf-search-check-list',\n    templateUrl: './search-check-list.component.html',\n    styleUrls: ['./search-check-list.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-check-list' }\n})\nexport class SearchCheckListComponent implements SearchWidget, OnInit {\n\n    id: string;\n    settings?: SearchWidgetSettings;\n    context?: SearchQueryBuilderService;\n    options: SearchFilterList<SearchListOption>;\n    operator: string = 'OR';\n    pageSize = 5;\n\n    constructor() {\n        this.options = new SearchFilterList<SearchListOption>();\n    }\n\n    ngOnInit(): void {\n        if (this.settings) {\n            this.operator = this.settings.operator || 'OR';\n            this.pageSize = this.settings.pageSize || 5;\n\n            if (this.settings.options && this.settings.options.length > 0) {\n                this.options = new SearchFilterList(this.settings.options, this.pageSize);\n            }\n        }\n    }\n\n    reset() {\n        this.options.items.forEach((opt) => {\n            opt.checked = false;\n        });\n\n        if (this.id && this.context) {\n            this.context.queryFragments[this.id] = '';\n            this.context.update();\n        }\n    }\n\n    changeHandler(event: MatCheckboxChange, option: any) {\n        option.checked = event.checked;\n        this.flush();\n    }\n\n    flush() {\n        const checkedValues = this.options.items\n            .filter((option) => option.checked)\n            .map((option) => option.value);\n\n        const query = checkedValues.join(` ${this.operator} `);\n\n        if (this.id && this.context) {\n            this.context.queryFragments[this.id] = query;\n            this.context.update();\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnInit, Component, ViewEncapsulation } from '@angular/core';\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MomentDateAdapter, MOMENT_DATE_FORMATS } from '@alfresco/adf-core';\n\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { LiveErrorStateMatcher } from '../../forms/live-error-state-matcher';\nimport { Moment } from 'moment';\nimport { UserPreferencesService, UserPreferenceValues } from '@alfresco/adf-core';\n\ndeclare let moment: any;\n\nconst DEFAULT_FORMAT_DATE: string = 'DD/MM/YYYY';\n\n@Component({\n    selector: 'adf-search-date-range',\n    templateUrl: './search-date-range.component.html',\n    styleUrls: ['./search-date-range.component.scss'],\n    providers: [\n        {provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\n        {provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS}\n    ],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-date-range' }\n})\nexport class SearchDateRangeComponent implements SearchWidget, OnInit {\n\n    from: FormControl;\n    to: FormControl;\n\n    form: FormGroup;\n    matcher = new LiveErrorStateMatcher();\n\n    id: string;\n    settings?: SearchWidgetSettings;\n    context?: SearchQueryBuilderService;\n    maxDate: any;\n    datePickerDateFormat = DEFAULT_FORMAT_DATE;\n\n    constructor(private dateAdapter: DateAdapter<Moment>,\n                private userPreferencesService: UserPreferencesService) {\n    }\n\n    getFromValidationMessage(): string {\n        return this.from.hasError('invalidOnChange') || this.hasParseError(this.from) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :\n            this.from.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :\n            this.from.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :\n            '';\n    }\n\n    getToValidationMessage(): string {\n        return this.to.hasError('invalidOnChange') || this.hasParseError(this.to) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :\n            this.to.hasError('matDatepickerMin') ? 'SEARCH.FILTER.VALIDATION.NO-DAYS' :\n            this.to.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :\n            this.to.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :\n            '';\n    }\n\n    ngOnInit() {\n        if (this.settings) {\n            this.datePickerDateFormat = this.settings.dateFormat || DEFAULT_FORMAT_DATE;\n        }\n        const theCustomDateAdapter = <MomentDateAdapter> <any> this.dateAdapter;\n        theCustomDateAdapter.overrideDisplayFormat = this.datePickerDateFormat;\n\n        this.userPreferencesService.select(UserPreferenceValues.Locale).subscribe((locale) => {\n            this.setLocale(locale);\n        });\n\n        const validators = Validators.compose([\n            Validators.required\n        ]);\n\n        this.from = new FormControl('', validators);\n        this.to = new FormControl('', validators);\n\n        this.form = new FormGroup({\n            from: this.from,\n            to: this.to\n        });\n\n        this.maxDate = this.dateAdapter.today().startOf('day');\n    }\n\n    apply(model: { from: string, to: string }, isValid: boolean) {\n        if (isValid && this.id && this.context && this.settings && this.settings.field) {\n            const start = moment(model.from).startOf('day').format();\n            const end = moment(model.to).endOf('day').format();\n\n            this.context.queryFragments[this.id] = `${this.settings.field}:['${start}' TO '${end}']`;\n            this.context.update();\n        }\n    }\n\n    reset() {\n        this.form.reset({\n            from: '',\n            to: ''\n        });\n        if (this.id && this.context) {\n            this.context.queryFragments[this.id] = '';\n            this.context.update();\n        }\n    }\n\n    onChangedHandler(event: any, formControl: FormControl) {\n        const inputValue = event.srcElement.value;\n\n        const formatDate = this.dateAdapter.parse(inputValue, this.datePickerDateFormat);\n        if (formatDate && formatDate.isValid()) {\n            formControl.setValue(formatDate);\n        } else if (formatDate) {\n            formControl.setErrors({\n                'invalidOnChange': true\n            });\n        } else {\n            formControl.setErrors({\n                'required': true\n            });\n        }\n    }\n\n    setLocale(locale) {\n        this.dateAdapter.setLocale(locale);\n        moment.locale(locale);\n    }\n\n    hasParseError(formControl) {\n        return formControl.hasError('matDatepickerParse') && formControl.getError('matDatepickerParse').text;\n    }\n\n    forcePlaceholder(event: any) {\n        event.srcElement.click();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable, Type } from '@angular/core';\nimport { SearchTextComponent } from '../search-text/search-text.component';\nimport { SearchRadioComponent } from '../search-radio/search-radio.component';\nimport { SearchSliderComponent } from '../search-slider/search-slider.component';\nimport { SearchNumberRangeComponent } from '../search-number-range/search-number-range.component';\nimport { SearchCheckListComponent } from '../search-check-list/search-check-list.component';\nimport { SearchDateRangeComponent } from '../search-date-range/search-date-range.component';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SearchFilterService {\n\n    /**\n     * Contains string-to-type mappings for registered widgets.\n     */\n    widgets: { [id: string]: Type<{}> } = {\n        'text': SearchTextComponent,\n        'radio': SearchRadioComponent,\n        'slider': SearchSliderComponent,\n        'number-range': SearchNumberRangeComponent,\n        'check-list': SearchCheckListComponent,\n        'date-range': SearchDateRangeComponent\n    };\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Input } from '@angular/core';\nimport { SearchFilterComponent } from '../../components/search-filter/search-filter.component';\n\n@Component({\n    selector: 'adf-search-chip-list',\n    templateUrl: './search-chip-list.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-chip-list' }\n})\nexport class SearchChipListComponent {\n\n    /** Search filter to supply the data for the chips. */\n    @Input()\n    searchFilter: SearchFilterComponent;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { SearchSortingDefinition } from '../../search-sorting-definition.interface';\n\n@Component({\n    selector: 'adf-search-sorting-picker',\n    templateUrl: './search-sorting-picker.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-sorting-picker' }\n})\nexport class SearchSortingPickerComponent implements OnInit {\n\n    options: SearchSortingDefinition[] = [];\n    value: string;\n    ascending: boolean;\n\n    constructor(private queryBuilder: SearchQueryBuilderService) {}\n\n    ngOnInit() {\n        this.options = this.queryBuilder.getSortingOptions();\n\n        const primary = this.queryBuilder.getPrimarySorting();\n        if (primary) {\n            this.value = primary.key;\n            this.ascending = this.getSortingOrder();\n        }\n    }\n\n    onValueChanged(key: string) {\n        this.value = key;\n        this.ascending = this.getSortingOrder();\n        this.applySorting();\n    }\n\n    onSortingChanged(ascending: boolean) {\n        this.ascending = ascending;\n        this.applySorting();\n    }\n\n    private findOptionByKey(key: string): SearchSortingDefinition {\n        if (key) {\n            return this.options.find((opt) => opt.key === key);\n        }\n        return null;\n    }\n\n    private applySorting() {\n        const option = this.findOptionByKey(this.value);\n        if (option) {\n            this.queryBuilder.sorting = [{\n                ...option,\n                ascending: this.ascending\n            }];\n            this.queryBuilder.update();\n        }\n    }\n\n    private getSortingOrder(): boolean {\n        const option = this.findOptionByKey(this.value);\n        if (option) {\n            return option.ascending;\n        }\n\n        return this.queryBuilder.getPrimarySorting().ascending;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewChild, ViewContainerRef, OnInit, OnDestroy, ComponentRef, ComponentFactoryResolver } from '@angular/core';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { SearchFilterService } from '../search-filter/search-filter.service';\n\n@Component({\n    selector: 'adf-search-widget-container',\n    template: '<div #content></div>'\n})\nexport class SearchWidgetContainerComponent implements OnInit, OnDestroy {\n\n    @ViewChild('content', { read: ViewContainerRef })\n    content: ViewContainerRef;\n\n    @Input()\n    id: string;\n\n    @Input()\n    selector: string;\n\n    @Input()\n    settings: any;\n\n    @Input()\n    config: any;\n\n    private componentRef: ComponentRef<any>;\n\n    constructor(\n        private searchFilterService: SearchFilterService,\n        private queryBuilder: SearchQueryBuilderService,\n        private componentFactoryResolver: ComponentFactoryResolver) {\n    }\n\n    ngOnInit() {\n        const componentType = this.searchFilterService.widgets[this.selector];\n        if (componentType) {\n            const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n            if (factory) {\n                this.content.clear();\n                this.componentRef = this.content.createComponent(factory, 0);\n                this.setupWidget(this.componentRef);\n            }\n        }\n    }\n\n    private setupWidget(ref: ComponentRef<any>) {\n        if (ref && ref.instance) {\n            ref.instance.id = this.id;\n            ref.instance.settings = { ...this.settings };\n            ref.instance.context = this.queryBuilder;\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.componentRef) {\n            this.componentRef.destroy();\n            this.componentRef = null;\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\n\nimport { CoreModule } from '@alfresco/adf-core';\n\nimport { SearchTriggerDirective } from './components/search-trigger.directive';\n\nimport { SearchControlComponent } from './components/search-control.component';\nimport { SearchComponent } from './components/search.component';\nimport { EmptySearchResultComponent } from './components/empty-search-result.component';\nimport { SearchWidgetContainerComponent } from './components/search-widget-container/search-widget-container.component';\nimport { SearchFilterComponent } from './components/search-filter/search-filter.component';\nimport { SearchChipListComponent } from './components/search-chip-list/search-chip-list.component';\nimport { SearchTextComponent } from './components/search-text/search-text.component';\nimport { SearchRadioComponent } from './components/search-radio/search-radio.component';\nimport { SearchSliderComponent } from './components/search-slider/search-slider.component';\nimport { SearchNumberRangeComponent } from './components/search-number-range/search-number-range.component';\nimport { SearchCheckListComponent } from './components/search-check-list/search-check-list.component';\nimport { SearchDateRangeComponent } from './components/search-date-range/search-date-range.component';\nimport { SearchSortingPickerComponent } from './components/search-sorting-picker/search-sorting-picker.component';\n\nexport const ALFRESCO_SEARCH_DIRECTIVES: any[] = [\n    SearchComponent,\n    SearchControlComponent,\n    SearchTriggerDirective,\n    EmptySearchResultComponent,\n    SearchFilterComponent,\n    SearchChipListComponent\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        CoreModule.forChild()\n    ],\n    declarations: [\n        ...ALFRESCO_SEARCH_DIRECTIVES,\n        SearchWidgetContainerComponent,\n        SearchTextComponent,\n        SearchRadioComponent,\n        SearchSliderComponent,\n        SearchNumberRangeComponent,\n        SearchCheckListComponent,\n        SearchDateRangeComponent,\n        SearchSortingPickerComponent\n    ],\n    exports: [\n        ...ALFRESCO_SEARCH_DIRECTIVES,\n        SearchWidgetContainerComponent,\n        SearchTextComponent,\n        SearchRadioComponent,\n        SearchSliderComponent,\n        SearchNumberRangeComponent,\n        SearchCheckListComponent,\n        SearchDateRangeComponent,\n        SearchSortingPickerComponent\n    ],\n    entryComponents: [\n        SearchWidgetContainerComponent,\n        SearchTextComponent,\n        SearchRadioComponent,\n        SearchSliderComponent,\n        SearchNumberRangeComponent,\n        SearchCheckListComponent,\n        SearchDateRangeComponent\n    ]\n})\nexport class SearchModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { SitesService, LogService } from '@alfresco/adf-core';\nimport { SitePaging, SiteEntry } from '@alfresco/js-api';\n\nexport enum Relations {\n    Members = 'members',\n    Containers = 'containers'\n}\n\n@Component({\n    selector: 'adf-sites-dropdown',\n    styleUrls: ['./sites-dropdown.component.scss'],\n    templateUrl: './sites-dropdown.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-sites-dropdown' }\n})\nexport class DropdownSitesComponent implements OnInit {\n\n    /** Hide the \"My Files\" option. */\n    @Input()\n    hideMyFiles: boolean = false;\n\n    /** A custom list of sites to be displayed by the dropdown. If no value\n     * is given, the sites of the current user are displayed by default. A\n     * list of objects only with properties 'title' and 'guid' is enough to\n     * be able to display the dropdown.\n     */\n    @Input()\n    siteList: SitePaging = null;\n\n    /** Id of the selected site */\n    @Input()\n    value: string = null;\n\n    /** Text or a translation key to act as a placeholder. Default value is the\n     * key \"DROPDOWN.PLACEHOLDER_LABEL\".\n     */\n    @Input()\n    placeholder: string = 'DROPDOWN.PLACEHOLDER_LABEL';\n\n    /** Filter for the results of the sites query. Possible values are\n     * \"members\" and \"containers\". When \"members\" is used, the site list\n     * will be restricted to the sites that the user is a member of.\n     */\n    @Input()\n    relations: string;\n\n    /** Emitted when the user selects a site. When the default option is selected,\n     * an empty model is emitted.\n     */\n    @Output()\n    change: EventEmitter<SiteEntry> = new EventEmitter();\n\n    selected: SiteEntry = null;\n\n    public MY_FILES_VALUE = '-my-';\n\n    constructor(private sitesService: SitesService,\n                private logService: LogService) {\n    }\n\n    ngOnInit() {\n        if (!this.siteList) {\n            this.setDefaultSiteList();\n        }\n    }\n\n    selectedSite(event: any) {\n        this.change.emit(event.value);\n    }\n\n    private setDefaultSiteList() {\n        let extendedOptions = null;\n        if (this.relations) {\n            extendedOptions = { relations: [this.relations] };\n        }\n        this.sitesService.getSites(extendedOptions).subscribe((sitePaging: SitePaging) => {\n\n                this.siteList = this.relations === Relations.Members ? this.filteredResultsByMember(sitePaging) : sitePaging;\n\n                if (!this.hideMyFiles) {\n                    let siteEntry = new SiteEntry({\n                        entry: {\n                            id: '-my-',\n                            guid: '-my-',\n                            title: 'DROPDOWN.MY_FILES_OPTION'\n                        }\n                    });\n\n                    this.siteList.list.entries.unshift(siteEntry);\n\n                    if (!this.value) {\n                        this.value = '-my-';\n                    }\n                }\n\n                this.selected = this.siteList.list.entries.find((site: SiteEntry) => site.entry.id === this.value);\n            },\n            (error) => {\n                this.logService.error(error);\n            });\n    }\n\n    private filteredResultsByMember(sites: SitePaging): SitePaging {\n        const loggedUserName = this.sitesService.getEcmCurrentLoggedUserName();\n        sites.list.entries = sites.list.entries.filter((site) => this.isCurrentUserMember(site, loggedUserName));\n        return sites;\n    }\n\n    private isCurrentUserMember(site, loggedUserName): boolean {\n        return site.entry.visibility === 'PUBLIC' ||\n            !!site.relations.members.list.entries.find((member) => {\n                return member.entry.id.toLowerCase() === loggedUserName.toLowerCase();\n            });\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { DropdownSitesComponent } from './sites-dropdown.component';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        DropdownSitesComponent\n    ],\n    declarations: [\n        DropdownSitesComponent\n    ]\n})\nexport class SitesDropdownModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { MatSelect } from '@angular/material';\nimport { Node, PathElementEntity } from '@alfresco/js-api';\nimport { DocumentListComponent } from '../document-list';\n\n@Component({\n    selector: 'adf-breadcrumb',\n    templateUrl: './breadcrumb.component.html',\n    styleUrls: ['./breadcrumb.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-breadcrumb'\n    }\n})\nexport class BreadcrumbComponent implements OnInit, OnChanges {\n\n    /** Active node, builds UI based on folderNode.path.elements collection. */\n    @Input()\n    folderNode: Node = null;\n\n    /** (optional) Name of the root element of the breadcrumb. You can use\n     * this property to rename \"Company Home\" to \"Personal Files\" for\n     * example. You can use an i18n resource key for the property value.\n     */\n    @Input()\n    root: string = null;\n\n    /** (optional) The id of the root element. You can use this property\n     * to set a custom element the breadcrumb should start with.\n     */\n    @Input()\n    rootId: string = null;\n\n    /** (optional) Document List component to operate with. The list will\n     * update when the breadcrumb is clicked.\n     */\n    @Input()\n    target: DocumentListComponent;\n\n    /** Transformation to be performed on the chosen/folder node before building\n     * the breadcrumb UI. Can be useful when custom formatting is needed for the\n     * breadcrumb. You can change the path elements from the node that are used to\n     * build the breadcrumb using this function.\n     */\n    @Input()\n    transform: (node) => any;\n\n    @ViewChild('dropdown')\n    dropdown: MatSelect;\n\n    /** Maximum number of nodes to display before wrapping them with a dropdown element.  */\n    @Input()\n    maxItems: number;\n\n    previousNodes: PathElementEntity[];\n    lastNodes: PathElementEntity[];\n\n    route: PathElementEntity[] = [];\n\n    get hasRoot(): boolean {\n        return !!this.root;\n    }\n\n    /** Emitted when the user clicks on a breadcrumb. */\n    @Output()\n    navigate = new EventEmitter<PathElementEntity>();\n\n    ngOnInit() {\n        this.transform = this.transform ? this.transform : null;\n\n        if (this.target) {\n            this.target.$folderNode.subscribe((folderNode: Node) => {\n                this.folderNode = folderNode;\n                this.recalculateNodes();\n            });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        this.recalculateNodes();\n    }\n\n    protected recalculateNodes(): void {\n        let node: Node = this.transform ? this.transform(this.folderNode) : this.folderNode;\n\n        this.route = this.parseRoute(node);\n\n        if (this.maxItems && this.route.length > this.maxItems) {\n            this.lastNodes = this.route.slice(this.route.length - this.maxItems);\n            this.previousNodes = this.route.slice(0, this.route.length - this.maxItems);\n            this.previousNodes.reverse();\n        } else {\n            this.lastNodes = this.route;\n            this.previousNodes = null;\n        }\n    }\n\n    open(): void {\n        if (this.dropdown) {\n            this.dropdown.open();\n        }\n    }\n\n    hasPreviousNodes(): boolean {\n        return this.previousNodes ? true : false;\n    }\n\n    parseRoute(node: Node): PathElementEntity[] {\n        if (node && node.path) {\n            const route = <PathElementEntity[]> (node.path.elements || []).slice();\n\n            route.push(<PathElementEntity> {\n                id: node.id,\n                name: node.name,\n                node: node\n            });\n\n            const rootPos = this.getElementPosition(route, this.rootId);\n            if (rootPos > 0) {\n                route.splice(0, rootPos);\n            }\n\n            if (rootPos === -1 && this.rootId) {\n                route[0].id = this.rootId;\n            }\n\n            if (this.root) {\n                route[0].name = this.root;\n            }\n\n            return route;\n        }\n\n        return [];\n    }\n\n    private getElementPosition(route: PathElementEntity[], nodeId: string): number {\n        let position: number = -1;\n\n        if (route && route.length > 0 && nodeId) {\n            position = route.findIndex((el) => el.id === nodeId);\n        }\n\n        return position;\n    }\n\n    onRoutePathClick(route: PathElementEntity, event?: Event): void {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (route) {\n            this.navigate.emit(route);\n\n            if (this.target) {\n                this.target.navigateTo(route.id);\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnChanges, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { MatSelect } from '@angular/material';\nimport { PathElementEntity, Node } from '@alfresco/js-api';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@Component({\n    selector: 'adf-dropdown-breadcrumb',\n    templateUrl: './dropdown-breadcrumb.component.html',\n    styleUrls: ['./dropdown-breadcrumb.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-dropdown-breadcrumb'\n    }\n})\nexport class DropdownBreadcrumbComponent extends BreadcrumbComponent implements OnChanges {\n\n    @ViewChild('dropdown')\n    dropdown: MatSelect;\n\n    currentNode: PathElementEntity;\n    previousNodes: PathElementEntity[];\n\n    /**\n     * Calculate the current and previous nodes from the route array\n     */\n    protected recalculateNodes(): void {\n        let node: Node = this.transform ? this.transform(this.folderNode) : this.folderNode;\n\n        this.route = this.parseRoute(node);\n        this.currentNode = this.route[this.route.length - 1];\n        this.previousNodes = this.route.slice(0, this.route.length - 1).reverse();\n    }\n\n    /**\n     * Opens the node picker menu\n     */\n    open(): void {\n        if (this.dropdown) {\n            this.dropdown.open();\n        }\n    }\n\n    /**\n     * Return if route has more than one element (means: we are not in the root directory)\n     */\n    hasPreviousNodes(): boolean {\n        return this.previousNodes.length > 0;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { BreadcrumbComponent } from './breadcrumb.component';\nimport { DropdownBreadcrumbComponent } from './dropdown-breadcrumb.component';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        BreadcrumbComponent,\n        DropdownBreadcrumbComponent\n    ],\n    declarations: [\n        BreadcrumbComponent,\n        DropdownBreadcrumbComponent\n    ]\n})\nexport class BreadcrumbModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\n\n@Component({\n    selector: 'adf-confirm-dialog',\n    template: `\n        <h1 mat-dialog-title>{{ title | translate }}</h1>\n        <mat-dialog-content>\n            <p>{{ message | translate }}</p>\n        </mat-dialog-content>\n        <mat-dialog-actions>\n            <span class=\"spacer\"></span>\n            <button id=\"adf-confirm-accept\" mat-button color=\"primary\" [mat-dialog-close]=\"true\">{{ yesLabel | translate }}</button>\n            <button id=\"adf-confirm-cancel\" mat-button [mat-dialog-close]=\"false\" cdkFocusInitial>{{ noLabel | translate }}</button>\n        </mat-dialog-actions>\n    `,\n    styles: [`\n        .spacer { flex: 1 1 auto; }\n\n        .adf-confirm-dialog .mat-dialog-actions .mat-button-wrapper {\n            text-transform: uppercase;\n        }\n    `],\n    host: { 'class': 'adf-confirm-dialog' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ConfirmDialogComponent {\n\n    title: string;\n    message: string;\n    yesLabel: string;\n    noLabel: string;\n\n    constructor(@Inject(MAT_DIALOG_DATA) data) {\n        data = data || {};\n        this.title = data.title || 'ADF_CONFIRM_DIALOG.CONFIRM';\n        this.message = data.message || 'ADF_CONFIRM_DIALOG.MESSAGE';\n        this.yesLabel = data.yesLabel || 'ADF_CONFIRM_DIALOG.YES_LABEL';\n        this.noLabel = data.noLabel || 'ADF_CONFIRM_DIALOG.NO_LABEL';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, ContentService } from '@alfresco/adf-core';\nimport { Component, Input, OnChanges, ViewEncapsulation, EventEmitter, Output } from '@angular/core';\nimport { VersionsApi, Node, VersionEntry, VersionPaging } from '@alfresco/js-api';\nimport { MatDialog } from '@angular/material';\nimport { ConfirmDialogComponent } from '../dialogs/confirm.dialog';\n\n@Component({\n    selector: 'adf-version-list',\n    templateUrl: './version-list.component.html',\n    styleUrls: ['./version-list.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-version-list'\n    }\n})\nexport class VersionListComponent implements OnChanges {\n\n    private versionsApi: VersionsApi;\n    versions: VersionEntry[] = [];\n    isLoading = true;\n\n    /** The target node. */\n    @Input()\n    node: Node;\n\n    /** Toggles showing/hiding of comments */\n    @Input()\n    showComments = true;\n\n    /** Enable/disable downloading a version of the current node. */\n    @Input()\n    allowDownload = true;\n\n    /** Toggles showing/hiding of version actions */\n    @Input()\n    showActions = true;\n\n    /** Emitted when a version is restored */\n    @Output()\n    restored: EventEmitter<Node> = new EventEmitter<Node>();\n\n    /** Emitted when a version is deleted */\n    @Output()\n    deleted: EventEmitter<Node> = new EventEmitter<Node>();\n\n    constructor(private alfrescoApi: AlfrescoApiService,\n                private contentService: ContentService,\n                private dialog: MatDialog) {\n        this.versionsApi = this.alfrescoApi.versionsApi;\n    }\n\n    ngOnChanges() {\n        this.loadVersionHistory();\n    }\n\n    canUpdate(): boolean {\n        return this.contentService.hasAllowableOperations(this.node, 'update') && this.versions.length > 1;\n    }\n\n    canDelete(): boolean {\n        return this.contentService.hasAllowableOperations(this.node, 'delete') && this.versions.length > 1;\n    }\n\n    restore(versionId) {\n        if (this.canUpdate()) {\n            this.versionsApi\n                .revertVersion(this.node.id, versionId, { majorVersion: true, comment: '' })\n                .then(() => this.onVersionRestored(this.node));\n        }\n    }\n\n    loadVersionHistory() {\n        this.isLoading = true;\n        this.versionsApi.listVersionHistory(this.node.id).then((versionPaging: VersionPaging) => {\n            this.versions = versionPaging.list.entries;\n            this.isLoading = false;\n        });\n    }\n\n    downloadVersion(versionId: string) {\n        if (this.allowDownload) {\n            const versionDownloadUrl = this.getVersionContentUrl(this.node.id, versionId, true);\n            this.downloadContent(versionDownloadUrl);\n        }\n    }\n\n    deleteVersion(versionId: string) {\n        if (this.canUpdate()) {\n            const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n                data: {\n                    title: 'ADF_VERSION_LIST.CONFIRM_DELETE.TITLE',\n                    message: 'ADF_VERSION_LIST.CONFIRM_DELETE.MESSAGE',\n                    yesLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.YES_LABEL',\n                    noLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.NO_LABEL'\n                },\n                minWidth: '250px'\n            });\n\n            dialogRef.afterClosed().subscribe((result) => {\n                if (result === true) {\n                    this.alfrescoApi.versionsApi\n                        .deleteVersion(this.node.id, versionId)\n                        .then(() => this.onVersionDeleted(this.node));\n                }\n            });\n        }\n    }\n\n    onVersionDeleted(node: any) {\n        this.loadVersionHistory();\n        this.deleted.emit(node);\n    }\n\n    onVersionRestored(node: any) {\n        this.loadVersionHistory();\n        this.restored.emit(node);\n    }\n\n    private getVersionContentUrl(nodeId: string, versionId: string, attachment?: boolean) {\n        const nodeDownloadUrl = this.alfrescoApi.contentApi.getContentUrl(nodeId, attachment);\n        return nodeDownloadUrl.replace('/content', '/versions/' + versionId + '/content');\n    }\n\n    downloadContent(url: string) {\n        if (url) {\n            const link = document.createElement('a');\n\n            link.style.display = 'none';\n            link.href = url;\n\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewEncapsulation, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { VersionListComponent } from './version-list.component';\nimport { AppConfigService, ContentService, AlfrescoApiService } from '@alfresco/adf-core';\nimport { trigger, state, style, animate, transition } from '@angular/animations';\n\n@Component({\n    selector: 'adf-version-manager',\n    templateUrl: './version-manager.component.html',\n    styleUrls: ['./version-manager.component.scss'],\n    animations: [\n        trigger('uploadToggle', [\n            state('open', style({ height: '175px', opacity: 1, visibility: 'visible' })),\n            state('close', style({ height: '0%', opacity: 0, visibility: 'hidden' })),\n            transition('open => close', [\n                style({ visibility: 'hidden' }),\n                animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')\n            ]),\n            transition('close => open', [\n                style({ visibility: 'visible' }),\n                animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')\n            ])\n        ])\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class VersionManagerComponent {\n\n    /** Target node to manage version history. */\n    @Input()\n    node: Node;\n\n    /** Toggles showing/hiding of comments. */\n    @Input()\n    showComments = true;\n\n    /** Enable/disable downloading a version of the current node. */\n    @Input()\n    allowDownload = true;\n\n    /** Emitted when a file is uploaded successfully. */\n    @Output()\n    uploadSuccess: EventEmitter<Node> = new EventEmitter<Node>();\n\n    /** Emitted when an error occurs during upload. */\n    @Output()\n    uploadError: EventEmitter<Node> = new EventEmitter<Node>();\n\n    @ViewChild('versionList')\n    versionListComponent: VersionListComponent;\n\n    uploadState: string = 'close';\n\n    constructor(config: AppConfigService,\n                private contentService: ContentService,\n                private alfrescoApiService: AlfrescoApiService) {\n    }\n\n    refresh(node: Node) {\n        this.alfrescoApiService.nodeUpdated.next(node);\n        this.versionListComponent.loadVersionHistory();\n        this.uploadSuccess.emit(node);\n        this.uploadState = 'close';\n    }\n\n    onUploadSuccess(event: any) {\n        this.alfrescoApiService.nodeUpdated.next(event.value.entry);\n        this.versionListComponent.loadVersionHistory();\n        this.uploadSuccess.emit(event.value.entry);\n        this.uploadState = 'close';\n    }\n\n    onUploadError(event: any) {\n        this.uploadError.emit(event);\n    }\n\n    onUploadCancel() {\n        this.uploadState = 'close';\n    }\n\n    toggleNewVersion() {\n        this.uploadState = this.uploadState === 'open' ? 'close' : 'open';\n    }\n\n    canUpdate(): boolean {\n        return this.contentService.hasAllowableOperations(this.node, 'update');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewEncapsulation, Output, EventEmitter } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { ContentService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-version-upload',\n    templateUrl: './version-upload.component.html',\n    styleUrls: ['./version-upload.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-version-upload' }\n})\nexport class VersionUploadComponent {\n\n    semanticVersion: string = 'minor';\n    comment: string;\n    uploadVersion: boolean = false;\n\n    @Input()\n    node: Node;\n\n    @Output()\n    success = new EventEmitter();\n\n    @Output()\n    error = new EventEmitter();\n\n    @Output()\n    cancel = new EventEmitter();\n\n    constructor(private contentService: ContentService) {\n    }\n\n    canUpload(): boolean {\n        return this.contentService.hasAllowableOperations(this.node, 'update');\n    }\n\n    isMajorVersion(): boolean {\n        return this.semanticVersion === 'minor' ? false : true;\n    }\n\n    cancelUpload() {\n        this.cancel.emit();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { VersionUploadComponent } from './version-upload.component';\nimport { VersionManagerComponent } from './version-manager.component';\nimport { VersionListComponent } from './version-list.component';\nimport { UploadModule } from '../upload/upload.module';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild(),\n        UploadModule,\n        FormsModule\n    ],\n    exports: [\n        VersionUploadComponent,\n        VersionManagerComponent,\n        VersionListComponent,\n        FormsModule\n    ],\n    declarations: [\n        VersionUploadComponent,\n        VersionManagerComponent,\n        VersionListComponent\n    ]\n})\nexport class VersionManagerModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Input, ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { DataRow } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-name-location-cell',\n    template: `\n        <div class=\"adf-name-location-cell-name\">{{ name }}</div>\n        <div class=\"adf-name-location-cell-location\" [title]=\"path\">{{ path }}</div>\n    `,\n    styleUrls: ['./name-location-cell.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'adf-name-location-cell' }\n})\nexport class NameLocationCellComponent implements OnInit {\n\n    name: string = '';\n    path: string = '';\n\n    @Input()\n    row: DataRow;\n\n    ngOnInit() {\n        if (this.row) {\n            this.name = this.row.getValue('name');\n\n            const fullPath = this.row.getValue('path');\n            if (fullPath) {\n                this.path = fullPath.name || '';\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SearchService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { NodePaging } from '@alfresco/js-api';\nimport { Observable } from 'rxjs';\n\n/**\n * Internal service used by ContentNodeSelector component.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ContentNodeSelectorService {\n\n    constructor(private searchService: SearchService) {\n    }\n\n    /**\n     * Performs a search for content node selection\n     *\n     * @param searchTerm    The term to search for\n     * @param rootNodeId    The root is to start the search from\n     * @param skipCount     From where to start the loading\n     * @param maxItems      How many items to load\n     * @param [extraNodeIds]  List of extra node ids to search from. This last parameter is necessary when\n     * the rootNodeId is one of the supported aliases (e.g. '-my-', '-root-', '-mysites-', etc.)\n     * and search is not supported for that alias, but can be performed on its corresponding nodes.\n     */\n    public search(searchTerm: string, rootNodeId: string = null, skipCount: number = 0, maxItems: number = 25, extraNodeIds?: string[]): Observable<NodePaging> {\n\n        let extraParentFiltering = '';\n\n        if (extraNodeIds && extraNodeIds.length) {\n            extraNodeIds\n                .filter((id) => id !== rootNodeId)\n                .forEach((extraId) => {\n                    extraParentFiltering += ` OR ANCESTOR:'workspace://SpacesStore/${extraId}'`;\n                });\n        }\n\n        const parentFiltering = rootNodeId ? [{ query: `ANCESTOR:'workspace://SpacesStore/${rootNodeId}'${extraParentFiltering}` }] : [];\n\n        let defaultSearchNode: any = {\n            query: {\n                query: `${searchTerm}* OR name:${searchTerm}*`\n            },\n            include: ['path', 'allowableOperations'],\n            paging: {\n                maxItems: maxItems,\n                skipCount: skipCount\n            },\n            filterQueries: [\n                { query: \"TYPE:'cm:folder'\" },\n                { query: 'NOT cm:creator:System' },\n                ...parentFiltering\n            ],\n            scope: {\n                locations: ['nodes']\n            }\n        };\n\n        return this.searchService.searchByQueryBody(defaultSearchNode);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport {\n    HighlightDirective,\n    UserPreferencesService,\n    PaginationModel,\n    UserPreferenceValues,\n    InfinitePaginationComponent, PaginatedComponent\n} from '@alfresco/adf-core';\nimport { FormControl } from '@angular/forms';\nimport { Node, NodePaging, Pagination, SiteEntry, SitePaging } from '@alfresco/js-api';\nimport { DocumentListComponent } from '../document-list/components/document-list.component';\nimport { RowFilter } from '../document-list/data/row-filter.model';\nimport { ImageResolver } from '../document-list/data/image-resolver.model';\nimport { ContentNodeSelectorService } from './content-node-selector.service';\nimport { debounceTime } from 'rxjs/operators';\nimport { CustomResourcesService } from '../document-list/services/custom-resources.service';\nimport { ShareDataRow } from '../document-list';\n\nexport type ValidationFunction = (entry: Node) => boolean;\n\nconst defaultValidation = () => true;\n\n@Component({\n    selector: 'adf-content-node-selector-panel',\n    styleUrls: ['./content-node-selector-panel.component.scss'],\n    templateUrl: './content-node-selector-panel.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-content-node-selector-panel' }\n})\nexport class ContentNodeSelectorPanelComponent implements OnInit {\n\n    DEFAULT_PAGINATION: Pagination = new Pagination({\n        maxItems: 25,\n        skipCount: 0,\n        totalItems: 0,\n        hasMoreItems: false\n    });\n\n    /** Node ID of the folder currently listed. */\n    @Input()\n    currentFolderId: string = null;\n\n    /** Hide the \"My Files\" option added to the site list by default.\n     * See the [Sites Dropdown component](sites-dropdown.component.md)\n     * for more information.\n     */\n    @Input()\n    dropdownHideMyFiles: boolean = false;\n\n    /** Custom site for site dropdown. This is the same as the `siteList`.\n     * property of the Sites Dropdown component (see its doc page\n     * for more information).\n     */\n    @Input()\n    dropdownSiteList: SitePaging = null;\n\n    _rowFilter: RowFilter = defaultValidation;\n\n    /** Custom *where* filter function. See the\n     * Document List component\n     * for more information.\n     */\n    @Input()\n    where: string;\n\n    /**\n     * Custom row filter function. See the\n     * [Row Filter Model](row-filter.model.md) page\n     * for more information.\n     */\n    @Input()\n    set rowFilter(rowFilter: RowFilter) {\n        this.createRowFilter(rowFilter);\n    }\n\n    get rowFilter(): RowFilter {\n        return this._rowFilter;\n    }\n\n    _excludeSiteContent: string[] = [];\n\n    /** Custom list of site content componentIds.\n     * Used to filter out the corresponding items from the displayed nodes\n     */\n    @Input()\n    set excludeSiteContent(excludeSiteContent: string[]) {\n        this._excludeSiteContent = excludeSiteContent;\n        this.createRowFilter(this._rowFilter);\n    }\n\n    get excludeSiteContent(): string[] {\n        return this._excludeSiteContent;\n    }\n\n    /**\n     * Custom image resolver function. See the\n     * [Image Resolver Model](image-resolver.model.md) page\n     * for more information.\n     */\n    @Input()\n    imageResolver: ImageResolver = null;\n\n    /** Number of items shown per page in the list. */\n    @Input()\n    pageSize: number = this.DEFAULT_PAGINATION.maxItems;\n\n    /** Function used to decide if the selected node has permission to be selected.\n     * Default value is a function that always returns true.\n     */\n    @Input()\n    isSelectionValid: ValidationFunction = defaultValidation;\n\n    /** Transformation to be performed on the chosen/folder node before building the\n     * breadcrumb UI. Can be useful when custom formatting is needed for the breadcrumb.\n     * You can change the path elements from the node that are used to build the\n     * breadcrumb using this function.\n     */\n    @Input()\n    breadcrumbTransform: (node) => any;\n\n    /** Emitted when the user has chosen an item. */\n    @Output()\n    select: EventEmitter<Node[]> = new EventEmitter<Node[]>();\n\n    @ViewChild('documentList')\n    documentList: DocumentListComponent;\n\n    @ViewChild(HighlightDirective)\n    highlighter: HighlightDirective;\n\n    nodePaging: NodePaging | null = null;\n    siteId: null | string;\n    searchTerm: string = '';\n    showingSearchResults: boolean = false;\n    loadingSearchResults: boolean = false;\n    inDialog: boolean = false;\n    _chosenNode: Node = null;\n    folderIdToShow: string | null = null;\n\n    pagination: PaginationModel = this.DEFAULT_PAGINATION;\n\n    @ViewChild(InfinitePaginationComponent)\n    infinitePaginationComponent: InfinitePaginationComponent;\n\n    infiniteScroll: boolean = false;\n    debounceSearch: number = 200;\n    searchInput: FormControl = new FormControl();\n\n    target: PaginatedComponent;\n\n    constructor(private contentNodeSelectorService: ContentNodeSelectorService,\n                private customResourcesService: CustomResourcesService,\n                private userPreferencesService: UserPreferencesService) {\n        this.searchInput.valueChanges\n            .pipe(\n                debounceTime(this.debounceSearch)\n            )\n            .subscribe((searchValue) => {\n                this.search(searchValue);\n            });\n\n        this.userPreferencesService.select(UserPreferenceValues.PaginationSize).subscribe((pagSize) => {\n            this.pageSize = pagSize;\n        });\n\n    }\n\n    set chosenNode(value: Node) {\n        this._chosenNode = value;\n        let valuesArray = null;\n        if (value) {\n            valuesArray = [value];\n        }\n        this.select.next(valuesArray);\n    }\n\n    get chosenNode() {\n        return this._chosenNode;\n    }\n\n    ngOnInit() {\n        this.target = this.documentList;\n        this.folderIdToShow = this.currentFolderId;\n\n        this.breadcrumbTransform = this.breadcrumbTransform ? this.breadcrumbTransform : null;\n        this.isSelectionValid = this.isSelectionValid ? this.isSelectionValid : defaultValidation;\n    }\n\n    private createRowFilter(filter?: RowFilter) {\n        if (!filter) {\n            filter = () => true;\n        }\n        this._rowFilter = (value: ShareDataRow, index: number, array: ShareDataRow[]) => {\n            return filter(value, index, array) &&\n                !this.isExcludedSiteContent(value);\n        };\n    }\n\n    private isExcludedSiteContent(row: ShareDataRow): boolean {\n        const entry = row.node.entry;\n        if (this._excludeSiteContent && this._excludeSiteContent.length &&\n            entry &&\n            entry.properties &&\n            entry.properties['st:componentId']) {\n            const excludedItem = this._excludeSiteContent.find(\n                (id: string) => entry.properties['st:componentId'] === id\n            );\n            return !!excludedItem;\n        }\n        return false;\n    }\n\n    /**\n     * Updates the site attribute and starts a new search\n     *\n     * @param chosenSite SiteEntry to search within\n     */\n    siteChanged(chosenSite: SiteEntry): void {\n        this.siteId = chosenSite.entry.guid;\n        this.updateResults();\n\n    }\n\n    /**\n     * Updates the searchTerm attribute and starts a new search\n     *\n     * @param searchTerm string value to search against\n     */\n    search(searchTerm: string): void {\n        this.searchTerm = searchTerm;\n        this.updateResults();\n    }\n\n    /**\n     * Returns the actually selected|entered folder node or null in case of searching for the breadcrumb\n     */\n    get breadcrumbFolderNode(): Node | null {\n        let folderNode: Node;\n\n        if (this.showingSearchResults && this.chosenNode) {\n            folderNode = this.chosenNode;\n        } else {\n            folderNode = this.documentList.folderNode;\n        }\n\n        return folderNode;\n    }\n\n    /**\n     * Clear the search input and reset to last folder node in which search was performed\n     */\n    clear(): void {\n        this.clearSearch();\n        this.folderIdToShow = this.siteId || this.currentFolderId;\n    }\n\n    /**\n     * Clear the search input and search related data\n     */\n    clearSearch() {\n        this.searchTerm = '';\n        this.nodePaging = null;\n        this.pagination.maxItems = this.pageSize;\n        this.chosenNode = null;\n        this.showingSearchResults = false;\n    }\n\n    /**\n     * Update the result list depending on the criteria\n     */\n    private updateResults(): void {\n        this.target = this.searchTerm.length > 0 ? null : this.documentList;\n\n        if (this.searchTerm.length === 0) {\n            this.clear();\n        } else {\n            this.startNewSearch();\n        }\n    }\n\n    /**\n     * Load the first page of a new search result\n     */\n    private startNewSearch(): void {\n        this.nodePaging = null;\n        this.pagination.maxItems = this.pageSize;\n        if (this.target) {\n            this.infinitePaginationComponent.reset();\n        }\n        this.chosenNode = null;\n        this.folderIdToShow = null;\n        this.querySearch();\n    }\n\n    /**\n     * Perform the call to searchService with the proper parameters\n     */\n    private querySearch(): void {\n        this.loadingSearchResults = true;\n\n        if (this.customResourcesService.hasCorrespondingNodeIds(this.siteId)) {\n            this.customResourcesService.getCorrespondingNodeIds(this.siteId)\n                .subscribe((nodeIds) => {\n                        this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.pagination.skipCount, this.pagination.maxItems, nodeIds)\n                            .subscribe(this.showSearchResults.bind(this));\n                    },\n                    () => {\n                        this.showSearchResults({ list: { entries: [] } });\n                    });\n        } else {\n            this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.pagination.skipCount, this.pagination.maxItems)\n                .subscribe(this.showSearchResults.bind(this));\n        }\n    }\n\n    /**\n     * Show the results of the search\n     *\n     * @param results Search results\n     */\n    private showSearchResults(nodePaging: NodePaging): void {\n        this.showingSearchResults = true;\n        this.loadingSearchResults = false;\n\n        this.nodePaging = nodePaging;\n    }\n\n    /**\n     * Sets showingSearchResults state to be able to differentiate between search results or folder results\n     */\n    onFolderChange(): void {\n        this.showingSearchResults = false;\n        this.infiniteScroll = false;\n        this.clearSearch();\n    }\n\n    /**\n     * Attempts to set the currently loaded node\n     */\n    onFolderLoaded(): void {\n        if (!this.showingSearchResults) {\n            this.attemptNodeSelection(this.documentList.folderNode);\n        }\n    }\n\n    /**\n     * Returns whether breadcrumb has to be shown or not\n     */\n    showBreadcrumbs() {\n        return !this.showingSearchResults || this.chosenNode;\n    }\n\n    /**\n     * Loads the next batch of search results\n     *\n     * @param event Pagination object\n     */\n    getNextPageOfSearch(pagination: Pagination): void {\n        this.infiniteScroll = true;\n        this.pagination = pagination;\n\n        if (this.searchTerm.length > 0) {\n            this.querySearch();\n        }\n    }\n\n    /**\n     * Selects node as chosen if it has the right permission, clears the selection otherwise\n     *\n     * @param entry\n     */\n    private attemptNodeSelection(entry: Node): void {\n        if (entry && this.isSelectionValid(entry)) {\n            this.chosenNode = entry;\n        } else {\n            this.resetChosenNode();\n        }\n    }\n\n    /**\n     * Clears the chosen node\n     */\n    resetChosenNode(): void {\n        this.chosenNode = null;\n    }\n\n    /**\n     * Invoked when user selects a node\n     *\n     * @param event CustomEvent for node-select\n     */\n    onNodeSelect(event: any): void {\n        this.attemptNodeSelection(event.detail.node.entry);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\n\nimport { ContentNodeSelectorPanelComponent } from './content-node-selector-panel.component';\nimport { ContentNodeSelectorComponent } from './content-node-selector.component';\nimport { SitesDropdownModule } from '../site-dropdown/sites-dropdown.module';\nimport { BreadcrumbModule } from '../breadcrumb/breadcrumb.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { DocumentListModule } from '../document-list/document-list.module';\nimport { NameLocationCellComponent } from './name-location-cell/name-location-cell.component';\n\n@NgModule({\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule.forChild(),\n        CommonModule,\n        MaterialModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        DocumentListModule\n    ],\n    exports: [\n        ContentNodeSelectorPanelComponent,\n        NameLocationCellComponent,\n        ContentNodeSelectorComponent\n    ],\n    entryComponents: [\n        ContentNodeSelectorPanelComponent,\n        ContentNodeSelectorComponent\n    ],\n    declarations: [\n        ContentNodeSelectorPanelComponent,\n        NameLocationCellComponent,\n        ContentNodeSelectorComponent\n    ]\n})\nexport class ContentNodeSelectorModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormControl } from '@angular/forms';\n\nconst I18N_ERRORS_PATH = 'CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS';\n\nexport function forbidSpecialCharacters({ value }: FormControl) {\n    const specialCharacters: RegExp = /([\\*\\\"\\<\\>\\\\\\/\\?\\:\\|])/;\n    const isValid: boolean = !specialCharacters.test(value);\n\n    return (isValid) ? null : {\n        message: `${I18N_ERRORS_PATH}.SPECIAL_CHARACTERS`\n    };\n}\n\nexport function forbidEndingDot({ value }: FormControl) {\n    const isValid: boolean = ((value || '').trim().split('').pop() !== '.');\n\n    return isValid ? null : {\n        message: `${I18N_ERRORS_PATH}.ENDING_DOT`\n    };\n}\n\nexport function forbidOnlySpaces({ value }: FormControl) {\n    const isValid: boolean = !!((value || '')).trim();\n\n    return isValid ? null : {\n        message: `${I18N_ERRORS_PATH}.ONLY_SPACES`\n    };\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observable } from 'rxjs';\n\nimport { Component, Inject, OnInit, Optional, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\n\nimport { Node } from '@alfresco/js-api';\nimport { NodesApiService, TranslationService } from '@alfresco/adf-core';\n\nimport { forbidEndingDot, forbidOnlySpaces, forbidSpecialCharacters } from './folder-name.validators';\n\n@Component({\n    selector: 'adf-folder-dialog',\n    styleUrls: ['./folder.dialog.scss'],\n    templateUrl: './folder.dialog.html'\n})\nexport class FolderDialogComponent implements OnInit {\n\n    form: FormGroup;\n\n    folder: Node = null;\n\n    /** Emitted when the edit/create folder give error for example a folder with same name already exist\n     */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the edit/create folder is successfully created/modified\n     */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<Node>();\n\n    editTitle = 'CORE.FOLDER_DIALOG.EDIT_FOLDER_TITLE';\n    createTitle = 'CORE.FOLDER_DIALOG.CREATE_FOLDER_TITLE';\n    nodeType = 'cm:folder';\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private dialog: MatDialogRef<FolderDialogComponent>,\n        private nodesApi: NodesApiService,\n        private translation: TranslationService,\n        @Optional()\n        @Inject(MAT_DIALOG_DATA)\n        public data: any\n    ) {\n        if (data) {\n            this.editTitle = data.editTitle || this.editTitle;\n            this.createTitle = data.createTitle || this.createTitle;\n            this.nodeType = data.nodeType || this.nodeType;\n        }\n    }\n\n    get editing(): boolean {\n        return !!this.data.folder;\n    }\n\n    ngOnInit() {\n        const { folder } = this.data;\n        let name = '';\n        let description = '';\n\n        if (folder) {\n            const { properties } = folder;\n\n            name = folder.name || '';\n            description = properties ? properties['cm:description'] : '';\n        }\n\n        const validators = {\n            name: [\n                Validators.required,\n                forbidSpecialCharacters,\n                forbidEndingDot,\n                forbidOnlySpaces\n            ]\n        };\n\n        this.form = this.formBuilder.group({\n            name: [ name, validators.name ],\n            description: [ description ]\n        });\n    }\n\n    get name(): string {\n        let { name } = this.form.value;\n\n        return (name || '').trim();\n    }\n\n    get description(): string {\n        let { description } = this.form.value;\n\n        return (description || '').trim();\n    }\n\n    private get properties(): any {\n        const { name: title, description } = this;\n\n        return {\n            'cm:title': title,\n            'cm:description': description\n        };\n    }\n\n    private create(): Observable<Node> {\n        const { name, properties, nodeType, nodesApi, data: { parentNodeId} } = this;\n        return nodesApi.createFolder(parentNodeId, { name, properties, nodeType });\n    }\n\n    private edit(): Observable<Node> {\n        const { name, properties, nodesApi, data: { folder: { id: nodeId }} } = this;\n        return nodesApi.updateNode(nodeId, { name, properties });\n    }\n\n    submit() {\n        const { form, dialog, editing } = this;\n\n        if (!form.valid) { return; }\n\n        (editing ? this.edit() : this.create())\n            .subscribe(\n                (folder: Node) => {\n                    this.success.emit(folder);\n                    dialog.close(folder);\n                },\n                (error) => this.handleError(error)\n            );\n    }\n\n    handleError(error: any): any {\n        let errorMessage = 'CORE.MESSAGES.ERRORS.GENERIC';\n\n        try {\n            const { error: { statusCode } } = JSON.parse(error.message);\n\n            if (statusCode === 409) {\n                errorMessage = 'CORE.MESSAGES.ERRORS.EXISTENT_FOLDER';\n            }\n        } catch (err) { /* Do nothing, keep the original message */ }\n\n        this.error.emit(this.translation.instant(errorMessage));\n\n        return error;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observable, Subject, from } from 'rxjs';\nimport {\n  Component,\n  OnInit,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormControl,\n  AbstractControl\n} from '@angular/forms';\nimport { MatDialogRef } from '@angular/material';\nimport { SiteBodyCreate, SiteEntry, SitePaging } from '@alfresco/js-api';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { debounceTime, mergeMap, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'adf-library-dialog',\n  styleUrls: ['./library.dialog.scss'],\n  templateUrl: './library.dialog.html',\n  encapsulation: ViewEncapsulation.None,\n  host: { class: 'adf-library-dialog' }\n})\nexport class LibraryDialogComponent implements OnInit, OnDestroy {\n  /** Emitted when an error occurs. */\n  @Output()\n  error: EventEmitter<any> = new EventEmitter<any>();\n\n  /** Emitted when the new library is created successfully. The\n   * event parameter is a SiteEntry object with the details of the\n   * newly-created library.\n   */\n  @Output()\n  success: EventEmitter<any> = new EventEmitter<any>();\n\n  onDestroy$: Subject<boolean> = new Subject<boolean>();\n\n  createTitle = 'LIBRARY.DIALOG.CREATE_TITLE';\n  libraryTitleExists = false;\n  form: FormGroup;\n  visibilityOption: any;\n  visibilityOptions = [\n    { value: 'PUBLIC', label: 'LIBRARY.VISIBILITY.PUBLIC', disabled: false },\n    { value: 'PRIVATE', label: 'LIBRARY.VISIBILITY.PRIVATE', disabled: false },\n    {\n      value: 'MODERATED',\n      label: 'LIBRARY.VISIBILITY.MODERATED',\n      disabled: false\n    }\n  ];\n\n  constructor(\n    private alfrescoApiService: AlfrescoApiService,\n    private formBuilder: FormBuilder,\n    private dialog: MatDialogRef<LibraryDialogComponent>\n  ) {}\n\n  ngOnInit() {\n    const validators = {\n      id: [\n        Validators.required,\n        Validators.maxLength(72),\n        this.forbidSpecialCharacters\n      ],\n      title: [\n        Validators.required,\n        this.forbidOnlySpaces,\n        Validators.minLength(2),\n        Validators.maxLength(256)\n      ],\n      description: [Validators.maxLength(512)]\n    };\n\n    this.form = this.formBuilder.group({\n      title: [null, validators.title],\n      id: [null, validators.id, this.createSiteIdValidator()],\n      description: ['', validators.description]\n    });\n\n    this.visibilityOption = this.visibilityOptions[0].value;\n\n    this.form.controls['title'].valueChanges\n      .pipe(\n        debounceTime(300),\n        mergeMap(\n            (title) => this.checkLibraryNameExists(title),\n            (title) => title\n        ),\n        takeUntil(this.onDestroy$)\n      )\n      .subscribe((title: string) => {\n        if (!this.form.controls['id'].dirty && this.canGenerateId(title)) {\n          this.form.patchValue({ id: this.sanitize(title.trim()) });\n          this.form.controls['id'].markAsTouched();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this.onDestroy$.next(true);\n    this.onDestroy$.complete();\n  }\n\n  get title(): string {\n    const { title } = this.form.value;\n\n    return (title || '').trim();\n  }\n\n  get id(): string {\n    const { id } = this.form.value;\n\n    return (id || '').trim();\n  }\n\n  get description(): string {\n    const { description } = this.form.value;\n\n    return (description || '').trim();\n  }\n\n  get visibility(): string {\n    return this.visibilityOption || '';\n  }\n\n  submit() {\n    const { form, dialog } = this;\n\n    if (!form.valid) {\n      return;\n    }\n\n    this.create().subscribe(\n      (node: SiteEntry) => {\n        this.success.emit(node);\n        dialog.close(node);\n      },\n      (error) => this.handleError(error)\n    );\n  }\n\n  visibilityChangeHandler(event) {\n    this.visibilityOption = event.value;\n  }\n\n  private create(): Observable<SiteEntry> {\n    const { title, id, description, visibility } = this;\n    const siteBody = <SiteBodyCreate> {\n      id,\n      title,\n      description,\n      visibility\n    };\n\n    return from(this.alfrescoApiService.sitesApi.createSite(siteBody));\n  }\n\n  private sanitize(input: string) {\n    return input.replace(/[\\s\\s]+/g, '-').replace(/[^A-Za-z0-9-]/g, '');\n  }\n\n  private canGenerateId(title) {\n    return Boolean(title.replace(/[^A-Za-z0-9-]/g, '').length);\n  }\n\n  private handleError(error: any): any {\n    const {\n      error: { statusCode }\n    } = JSON.parse(error.message);\n\n    if (statusCode === 409) {\n      this.form.controls['id'].setErrors({\n        message: 'LIBRARY.ERRORS.CONFLICT'\n      });\n    }\n\n    return error;\n  }\n\n  private async checkLibraryNameExists(libraryTitle: string) {\n    let entries = [];\n\n    try {\n        entries = (await this.findLibraryByTitle(libraryTitle)).list.entries;\n    } catch {\n        entries = [];\n    }\n\n    if (entries.length) {\n      this.libraryTitleExists = entries[0].entry.title.toLowerCase() === libraryTitle.toLowerCase();\n    } else {\n      this.libraryTitleExists = false;\n    }\n  }\n\n  private async findLibraryByTitle(libraryTitle: string): Promise<SitePaging> {\n    return this.alfrescoApiService\n      .getInstance()\n      .core.queriesApi.findSites(libraryTitle, {\n        maxItems: 1,\n        fields: ['title']\n      });\n  }\n\n  private forbidSpecialCharacters({ value }: FormControl) {\n    if (value === null || value.length === 0) {\n      return null;\n    }\n\n    const validCharacters: RegExp = /[^A-Za-z0-9-]/;\n    const isValid: boolean = !validCharacters.test(value);\n\n    return isValid\n      ? null\n      : {\n          message: 'LIBRARY.ERRORS.ILLEGAL_CHARACTERS'\n        };\n  }\n\n  private forbidOnlySpaces({ value }: FormControl) {\n    if (value === null || value.length === 0) {\n      return null;\n    }\n\n    const isValid: boolean = !!(value || '').trim();\n\n    return isValid\n      ? null\n      : {\n          message: 'LIBRARY.ERRORS.ONLY_SPACES'\n        };\n  }\n\n  private createSiteIdValidator() {\n    let timer;\n\n    return (control: AbstractControl) => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n\n      return new Promise((resolve) => {\n        timer = setTimeout(() => {\n          return from(\n            this.alfrescoApiService.sitesApi.getSite(control.value)\n          ).subscribe(\n            () => resolve({ message: 'LIBRARY.ERRORS.EXISTENT_SITE' }),\n            () => resolve(null)\n          );\n        }, 300);\n      });\n    };\n  }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule } from '@alfresco/adf-core';\n\nimport { MaterialModule } from '../material.module';\nimport { FolderDialogComponent } from './folder.dialog';\nimport { NodeLockDialogComponent } from './node-lock.dialog';\nimport { ConfirmDialogComponent } from './confirm.dialog';\nimport { MatDatetimepickerModule } from '@mat-datetimepicker/core';\nimport { MatMomentDatetimeModule } from '@mat-datetimepicker/moment';\nimport { LibraryDialogComponent } from './library/library.dialog';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild(),\n        FormsModule,\n        ReactiveFormsModule,\n        MatMomentDatetimeModule,\n        MatDatetimepickerModule\n    ],\n    declarations: [\n        FolderDialogComponent,\n        NodeLockDialogComponent,\n        ConfirmDialogComponent,\n        LibraryDialogComponent\n    ],\n    exports: [\n        FolderDialogComponent,\n        NodeLockDialogComponent,\n        ConfirmDialogComponent,\n        LibraryDialogComponent\n    ],\n    entryComponents: [\n        FolderDialogComponent,\n        NodeLockDialogComponent,\n        ConfirmDialogComponent,\n        LibraryDialogComponent\n    ]\n})\nexport class DialogModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\nimport { Node } from '@alfresco/js-api';\nimport { FolderDialogComponent } from '../dialogs/folder.dialog';\nimport { ContentService } from '@alfresco/adf-core';\n\nconst DEFAULT_FOLDER_PARENT_ID = '-my-';\n\n@Directive({\n    selector: '[adf-create-folder]'\n})\nexport class FolderCreateDirective {\n    static DIALOG_WIDTH: number = 400;\n\n    /** Parent folder where the new folder will be located after creation. */\n    @Input('adf-create-folder')\n    parentNodeId: string = DEFAULT_FOLDER_PARENT_ID;\n\n    /** Title of folder creation dialog. */\n    @Input()\n    title: string = null;\n\n    /** Type of node to create. */\n    @Input()\n    nodeType = 'cm:folder';\n\n    /** Emitted when an error occurs (eg, a folder with same name already exists). */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the folder is created successfully. */\n    @Output()\n    success: EventEmitter<Node> = new EventEmitter<Node>();\n\n    @HostListener('click', [ '$event' ])\n    onClick(event) {\n        event.preventDefault();\n        this.openDialog();\n    }\n\n    constructor(\n        public dialogRef: MatDialog,\n        public content: ContentService\n    ) {}\n\n    private get dialogConfig(): MatDialogConfig {\n        const { DIALOG_WIDTH: width } = FolderCreateDirective;\n        const { parentNodeId, title: createTitle, nodeType } = this;\n\n        return {\n            data: { parentNodeId, createTitle, nodeType },\n            width: `${width}px`\n        };\n    }\n\n    private openDialog(): void {\n        const { dialogRef, dialogConfig, content } = this;\n        const dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);\n\n        dialogInstance.componentInstance.error.subscribe((error) => {\n            this.error.emit(error);\n        });\n\n        dialogInstance.componentInstance.success.subscribe((node: Node) => {\n            this.success.emit(node);\n        });\n\n        dialogInstance.afterClosed().subscribe((node: Node) => {\n            if (node) {\n                content.folderCreate.next(node);\n            }\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Directive, ElementRef, HostListener, Input, Output, EventEmitter } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\n\nimport { Node } from '@alfresco/js-api';\n\nimport { FolderDialogComponent } from '../dialogs/folder.dialog';\nimport { ContentService } from '@alfresco/adf-core';\n\n@Directive({\n    selector: '[adf-edit-folder]'\n})\nexport class FolderEditDirective {\n    static DIALOG_WIDTH: number = 400;\n\n    /** Folder node to edit. */\n    @Input('adf-edit-folder')\n    folder: Node;\n\n    /** Emitted when an error occurs (eg, a folder with same name already exists). */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Title of folder edit dialog. */\n    @Input()\n    title: string = null;\n\n    /** Emitted when the folder has been edited successfully. */\n    @Output()\n    success: EventEmitter<Node> = new EventEmitter<Node>();\n\n    @HostListener('click', [ '$event' ])\n    onClick(event) {\n        event.preventDefault();\n        if (this.folder) {\n            this.openDialog();\n        }\n    }\n\n    constructor(\n        public dialogRef: MatDialog,\n        public elementRef: ElementRef,\n        public content: ContentService\n    ) {}\n\n    private get dialogConfig(): MatDialogConfig {\n        const { DIALOG_WIDTH: width } = FolderEditDirective;\n        const { folder } = this;\n\n        return {\n            data: {\n                folder,\n                editTitle: this.title\n            },\n            width: `${width}px`\n        };\n    }\n\n    private openDialog(): void {\n        const { dialogRef, dialogConfig, content } = this;\n        const dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);\n\n        dialogInstance.componentInstance.error.subscribe((error) => {\n            this.error.emit(error);\n        });\n\n        dialogInstance.componentInstance.success.subscribe((node: Node) => {\n            this.success.emit(node);\n        });\n\n        dialogInstance.afterClosed().subscribe((node: Node) => {\n            if (node) {\n                content.folderEdit.next(node);\n            }\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { FolderCreateDirective } from './folder-create.directive';\nimport { FolderEditDirective } from './folder-edit.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        FolderCreateDirective,\n        FolderEditDirective\n    ],\n    exports: [\n        FolderCreateDirective,\n        FolderEditDirective\n    ]\n})\nexport class FolderDirectiveModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-content-metadata-card',\n    templateUrl: './content-metadata-card.component.html',\n    styleUrls: ['./content-metadata-card.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-content-metadata-card' }\n})\nexport class ContentMetadataCardComponent {\n    /** (required) The node entity to fetch metadata about */\n    @Input()\n    node: Node;\n\n    /** (optional) This flag displays/hides empty metadata\n     * fields.\n     */\n    @Input()\n    displayEmpty: boolean = false;\n\n    /** (required) Name of the metadata preset, which defines aspects\n     * and their properties.\n     */\n    @Input()\n    preset: string;\n\n    /** (optional) This flag sets the metadata in read only mode\n     * preventing changes.\n     */\n    @Input()\n    readOnly = false;\n\n    /** (optional) This flag allows the component to display more\n     * than one accordion at a time.\n     */\n    @Input()\n    multi = false;\n\n    private _displayDefaultProperties: boolean = true;\n\n    /** (optional) This flag displays/hides the metadata\n     * properties.\n     */\n    @Input()\n    set displayDefaultProperties(value: boolean) {\n        this._displayDefaultProperties = value;\n        this.onDisplayDefaultPropertiesChange();\n    }\n\n    get displayDefaultProperties(): boolean {\n        return this._displayDefaultProperties;\n    }\n\n    editable: boolean = false;\n\n    expanded: boolean;\n\n    constructor(private contentService: ContentService) {\n    }\n\n    onDisplayDefaultPropertiesChange(): void {\n        this.expanded = !this._displayDefaultProperties;\n    }\n\n    toggleEdit(): void {\n        this.editable = !this.editable;\n    }\n\n    toggleExpanded(): void {\n        this.expanded = !this.expanded;\n    }\n\n    hasAllowableOperations() {\n        return this.contentService.hasAllowableOperations(this.node, AllowableOperationsEnum.UPDATE);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { CardViewDateItemModel, CardViewTextItemModel, FileSizePipe } from '@alfresco/adf-core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BasicPropertiesService {\n\n    constructor(private fileSizePipe: FileSizePipe) {\n    }\n\n    getProperties(node: Node) {\n\n        const sizeInBytes = node.content ? node.content.sizeInBytes : '',\n            mimeTypeName = node.content ? node.content.mimeTypeName : '',\n            author = node.properties ? node.properties['cm:author'] : '',\n            description = node.properties ? node.properties['cm:description'] : '',\n            title = node.properties ? node.properties['cm:title'] : '';\n\n        return [\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.NAME',\n                value: node.name,\n                key: 'name',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.TITLE',\n                value: title,\n                key: 'properties.cm:title',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.CREATOR',\n                value: node.createdByUser.displayName,\n                key: 'createdByUser.displayName',\n                editable: false\n            }),\n            new CardViewDateItemModel({\n                label: 'CORE.METADATA.BASIC.CREATED_DATE',\n                value: node.createdAt,\n                key: 'createdAt',\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.SIZE',\n                value: sizeInBytes,\n                key: 'content.sizeInBytes',\n                pipes: [{ pipe: this.fileSizePipe }],\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.MODIFIER',\n                value: node.modifiedByUser.displayName,\n                key: 'modifiedByUser.displayName',\n                editable: false\n            }),\n            new CardViewDateItemModel({\n                label: 'CORE.METADATA.BASIC.MODIFIED_DATE',\n                value: node.modifiedAt,\n                key: 'modifiedAt',\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.MIMETYPE',\n                value: mimeTypeName,\n                key: 'content.mimeTypeName',\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.AUTHOR',\n                value: author,\n                key: 'properties.cm:author',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.DESCRIPTION',\n                value: description,\n                key: 'properties.cm:description',\n                multiline: true,\n                editable: true\n            })\n        ];\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n    CardViewItemProperties,\n    CardViewItem,\n    CardViewTextItemModel,\n    CardViewBoolItemModel,\n    CardViewDateItemModel,\n    CardViewDatetimeItemModel,\n    CardViewIntItemModel,\n    CardViewFloatItemModel,\n    LogService\n} from '@alfresco/adf-core';\nimport { Property, CardViewGroup, OrganisedPropertyGroup } from '../interfaces/content-metadata.interfaces';\n\nconst D_TEXT = 'd:text';\nconst D_MLTEXT = 'd:mltext';\nconst D_DATE = 'd:date';\nconst D_DATETIME = 'd:datetime';\nconst D_INT = 'd:int';\nconst D_LONG = 'd:long';\nconst D_FLOAT = 'd:float';\nconst D_DOUBLE = 'd:double';\nconst D_BOOLEAN = 'd:boolean';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PropertyGroupTranslatorService {\n\n    static readonly RECOGNISED_ECM_TYPES = [D_TEXT, D_MLTEXT, D_DATE, D_DATETIME, D_INT, D_LONG, D_FLOAT, D_DOUBLE, D_BOOLEAN];\n\n    constructor(private logService: LogService) {\n    }\n\n    public translateToCardViewGroups(propertyGroups: OrganisedPropertyGroup[], propertyValues): CardViewGroup[] {\n        return propertyGroups.map((propertyGroup) => {\n            const translatedPropertyGroup: any = Object.assign({}, propertyGroup);\n            translatedPropertyGroup.properties = this.translateArray(propertyGroup.properties, propertyValues);\n            return translatedPropertyGroup;\n        });\n    }\n\n    private translateArray(properties: Property[], propertyValues: any): CardViewItem[] {\n        return properties.map((property) => {\n            return this.translate(property, propertyValues);\n        });\n    }\n\n    private translate(property: Property, propertyValues: any): CardViewItem {\n        let propertyValue;\n        if (propertyValues && propertyValues[property.name]) {\n            propertyValue = propertyValues[property.name];\n        }\n\n        this.checkECMTypeValidity(property.dataType);\n\n        const prefix = 'properties.';\n\n        let propertyDefinition: CardViewItemProperties = {\n            label: property.title || property.name,\n            value: propertyValue,\n            key: `${prefix}${property.name}`,\n            default: property.defaultValue,\n            editable: true\n        };\n        let cardViewItemProperty;\n\n        switch (property.dataType) {\n\n            case D_MLTEXT:\n                cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {\n                    multiline: true\n                }));\n                break;\n\n            case D_INT:\n            case D_LONG:\n                cardViewItemProperty = new CardViewIntItemModel(propertyDefinition);\n                break;\n\n            case D_FLOAT:\n            case D_DOUBLE:\n                cardViewItemProperty = new CardViewFloatItemModel(propertyDefinition);\n                break;\n\n            case D_DATE:\n                cardViewItemProperty = new CardViewDateItemModel(propertyDefinition);\n                break;\n\n            case D_DATETIME:\n                cardViewItemProperty = new CardViewDatetimeItemModel(propertyDefinition);\n                break;\n\n            case D_BOOLEAN:\n                cardViewItemProperty = new CardViewBoolItemModel(propertyDefinition);\n                break;\n\n            case D_TEXT:\n            default:\n                cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {\n                    multiline: false\n                }));\n        }\n\n        return cardViewItemProperty;\n    }\n\n    private checkECMTypeValidity(ecmPropertyType) {\n        if (PropertyGroupTranslatorService.RECOGNISED_ECM_TYPES.indexOf(ecmPropertyType) === -1) {\n            this.logService.error(`Unknown type for mapping: ${ecmPropertyType}`);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PropertyGroup, Property, PropertyGroupContainer } from '../../interfaces/content-metadata.interfaces';\n\nconst emptyGroup = {\n    properties: {}\n};\n\nfunction convertObjectToArray(object: any): Property[] {\n    return Object.keys(object).map((key) => object[key]);\n}\n\nexport function getGroup(propertyGroups: PropertyGroupContainer, groupName: string): PropertyGroup | undefined {\n    return propertyGroups[groupName];\n}\n\nexport function getProperty(propertyGroups: PropertyGroupContainer, groupName: string, propertyName: string): Property | Property[] | undefined {\n    const groupDefinition = getGroup(propertyGroups, groupName) || emptyGroup;\n    let propertyDefinitions;\n\n    if (propertyName === '*') {\n        propertyDefinitions = convertObjectToArray(groupDefinition.properties);\n    } else {\n        propertyDefinitions = groupDefinition.properties[propertyName];\n    }\n\n    return propertyDefinitions;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentMetadataConfig, OrganisedPropertyGroup, PropertyGroupContainer } from '../../interfaces/content-metadata.interfaces';\nimport { getGroup, getProperty } from './property-group-reader';\n\nexport class AspectOrientedConfigService implements ContentMetadataConfig {\n\n    constructor(private config: any) {}\n\n    public isGroupAllowed(groupName: string): boolean {\n        const groupNames = Object.keys(this.config);\n        return groupNames.indexOf(groupName) !== -1;\n    }\n\n    public reorganiseByConfig(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        const aspects = this.config,\n            aspectNames = Object.keys(aspects);\n\n        return aspectNames\n            .reduce((groupAccumulator, aspectName) => {\n                const newGroup = this.getOrganisedPropertyGroup(propertyGroups, aspectName);\n                return groupAccumulator.concat(newGroup);\n            }, [])\n            .filter((organisedPropertyGroup) => organisedPropertyGroup.properties.length > 0);\n    }\n\n    private getOrganisedPropertyGroup(propertyGroups, aspectName) {\n        const group = getGroup(propertyGroups, aspectName);\n        let newGroup = [];\n\n        if (group) {\n            const aspectProperties = this.config[aspectName];\n            let properties;\n\n            if (aspectProperties === '*') {\n                properties = getProperty(propertyGroups, aspectName, aspectProperties);\n            } else {\n                properties = (<string[]> aspectProperties)\n                    .map((propertyName) => getProperty(propertyGroups, aspectName, propertyName))\n                    .filter((props) => props !== undefined);\n            }\n\n            newGroup = [ { title: group.title, properties } ];\n        }\n\n        return newGroup;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentMetadataConfig, OrganisedPropertyGroup,\n    PropertyGroupContainer\n} from '../../interfaces/content-metadata.interfaces';\n\nexport class IndifferentConfigService implements ContentMetadataConfig {\n\n    constructor(config: any) {}\n\n    public isGroupAllowed(groupName: string): boolean {\n        return true;\n    }\n\n    public reorganiseByConfig(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        return Object.keys(propertyGroups)\n            .map((groupName) => {\n                const propertyGroup = propertyGroups[groupName],\n                    properties = propertyGroup.properties;\n\n                return Object.assign({}, propertyGroup, {\n                    properties: Object.keys(properties).map((propertyName) => properties[propertyName])\n                });\n            });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    ContentMetadataConfig,\n    LayoutOrientedConfigItem,\n    OrganisedPropertyGroup,\n    PropertyGroupContainer\n} from '../../interfaces/content-metadata.interfaces';\nimport { getProperty } from './property-group-reader';\n\nexport class LayoutOrientedConfigService implements ContentMetadataConfig {\n\n    constructor(private config: any) {}\n\n    public isGroupAllowed(groupName: string): boolean {\n        return this.getMatchingGroups(groupName).length > 0;\n    }\n\n    public reorganiseByConfig(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        const layoutBlocks = this.config;\n\n        return layoutBlocks.map((layoutBlock) => {\n            const flattenedItems = this.flattenItems(layoutBlock.items),\n                properties = flattenedItems.reduce((props, explodedItem) => {\n                    const property = getProperty(propertyGroups, explodedItem.groupName, explodedItem.propertyName) || [];\n                    return props.concat(property);\n                }, []);\n\n            return {\n                title: layoutBlock.title,\n                properties\n            };\n        });\n    }\n\n    private flattenItems(items) {\n        return items.reduce((accumulator, item) => {\n            const properties = Array.isArray(item.properties) ? item.properties : [item.properties];\n            const flattenedProperties = properties.map((propertyName) => {\n                return {\n                    groupName: item.aspect || item.type,\n                    propertyName\n                };\n            });\n\n            return accumulator.concat(flattenedProperties);\n        }, []);\n    }\n\n    private getMatchingGroups(groupName: string): LayoutOrientedConfigItem[] {\n        return this.config\n            .map((layoutBlock) => layoutBlock.items)\n            .reduce((accumulator, items) => accumulator.concat(items), [])\n            .filter((item) => item.aspect === groupName || item.type === groupName);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AppConfigService, LogService } from '@alfresco/adf-core';\nimport { AspectOrientedConfigService } from './aspect-oriented-config.service';\nimport { IndifferentConfigService } from './indifferent-config.service';\nimport { LayoutOrientedConfigService } from './layout-oriented-config.service';\nimport {\n    PresetConfig,\n    ContentMetadataConfig,\n    AspectOrientedConfig,\n    InDifferentConfig,\n    LayoutOrientedConfig\n} from '../../interfaces/content-metadata.interfaces';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ContentMetadataConfigFactory {\n\n    static readonly INDIFFERENT_PRESET = '*';\n    static readonly DEFAULT_PRESET_NAME = 'default';\n\n    constructor(private appConfigService: AppConfigService, private logService: LogService) {}\n\n    public get(presetName: string = 'default'): ContentMetadataConfig {\n        let presetConfig;\n        try {\n            presetConfig = this.appConfigService.config['content-metadata'].presets[presetName];\n        } catch {\n            if (presetName !== ContentMetadataConfigFactory.DEFAULT_PRESET_NAME) {\n                this.logService.error(`No content-metadata preset for: ${presetName}`);\n            }\n            presetConfig = ContentMetadataConfigFactory.INDIFFERENT_PRESET;\n        }\n\n        return this.createConfig(presetConfig);\n    }\n\n    private createConfig(presetConfig: PresetConfig): ContentMetadataConfig {\n        let config: ContentMetadataConfig;\n\n        if (this.isLayoutOrientedPreset(presetConfig)) {\n            config = new LayoutOrientedConfigService(<LayoutOrientedConfig> presetConfig);\n        } else if (this.isAspectOrientedPreset(presetConfig)) {\n            config = new AspectOrientedConfigService(<AspectOrientedConfig> presetConfig);\n        } else {\n            config = new IndifferentConfigService(<InDifferentConfig> presetConfig);\n        }\n\n        Object.freeze(config);\n        return config;\n    }\n\n    private isAspectOrientedPreset(presetConfig: PresetConfig): boolean {\n        return this.isObject(presetConfig);\n    }\n\n    private isLayoutOrientedPreset(presetConfig: PresetConfig): boolean {\n        return Array.isArray(presetConfig);\n    }\n\n    private isObject(x) {\n        return x != null && typeof x === 'object';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Observable, defer, forkJoin } from 'rxjs';\nimport { PropertyGroup, PropertyGroupContainer } from '../interfaces/content-metadata.interfaces';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PropertyDescriptorsService {\n\n    constructor(private alfrescoApiService: AlfrescoApiService) {}\n\n    load(groupNames: string[]): Observable<PropertyGroupContainer> {\n        const groupFetchStreams = groupNames\n            .map((groupName) => groupName.replace(':', '_'))\n            .map((groupName) => defer( () => this.alfrescoApiService.classesApi.getClass(groupName)) );\n\n        return forkJoin(groupFetchStreams).pipe(\n            map(this.convertToObject)\n        );\n    }\n\n    private convertToObject(propertyGroupsArray: PropertyGroup[]): PropertyGroupContainer {\n        return propertyGroupsArray.reduce((propertyGroups, propertyGroup) => {\n            return Object.assign({}, propertyGroups, {\n                [propertyGroup.name]: propertyGroup\n            });\n        }, {});\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { BasicPropertiesService } from './basic-properties.service';\nimport { Observable, of } from 'rxjs';\nimport { PropertyGroupTranslatorService } from './property-groups-translator.service';\nimport { CardViewItem } from '@alfresco/adf-core';\nimport { CardViewGroup, OrganisedPropertyGroup } from '../interfaces/content-metadata.interfaces';\nimport { ContentMetadataConfigFactory } from './config/content-metadata-config.factory';\nimport { PropertyDescriptorsService } from './property-descriptors.service';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ContentMetadataService {\n\n    constructor(private basicPropertiesService: BasicPropertiesService,\n                private contentMetadataConfigFactory: ContentMetadataConfigFactory,\n                private propertyGroupTranslatorService: PropertyGroupTranslatorService,\n                private propertyDescriptorsService: PropertyDescriptorsService) {\n    }\n\n    getBasicProperties(node: Node): Observable<CardViewItem[]> {\n        return of(this.basicPropertiesService.getProperties(node));\n    }\n\n    getGroupedProperties(node: Node, presetName: string = 'default'): Observable<CardViewGroup[]> {\n        let groupedProperties = of([]);\n\n        if (node.aspectNames) {\n            const config = this.contentMetadataConfigFactory.get(presetName),\n                groupNames = node.aspectNames\n                    .concat(node.nodeType)\n                    .filter((groupName) => config.isGroupAllowed(groupName));\n\n            if (groupNames.length > 0) {\n                groupedProperties = this.propertyDescriptorsService.load(groupNames).pipe(\n                    map((groups) => config.reorganiseByConfig(groups)),\n                    map((groups) => this.setTitleToNameIfNotSet(groups)),\n                    map((groups) => this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties))\n                );\n            }\n        }\n\n        return groupedProperties;\n    }\n\n    setTitleToNameIfNotSet(propertyGroups: OrganisedPropertyGroup[]): OrganisedPropertyGroup[] {\n        propertyGroups.map((propertyGroup) => {\n            propertyGroup.title = propertyGroup.title || propertyGroup.name;\n        });\n        return propertyGroups;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { Observable, Subscription } from 'rxjs';\nimport { CardViewItem, NodesApiService, LogService, CardViewUpdateService, AlfrescoApiService } from '@alfresco/adf-core';\nimport { ContentMetadataService } from '../../services/content-metadata.service';\nimport { CardViewGroup } from '../../interfaces/content-metadata.interfaces';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-content-metadata',\n    templateUrl: './content-metadata.component.html',\n    styleUrls: ['./content-metadata.component.scss'],\n    host: { 'class': 'adf-content-metadata' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ContentMetadataComponent implements OnChanges, OnInit, OnDestroy {\n    /** (required) The node entity to fetch metadata about */\n    @Input()\n    node: Node;\n\n    /** Toggles whether the edit button should be shown */\n    @Input()\n    editable: boolean = false;\n\n    /** Toggles whether to display empty values in the card view */\n    @Input()\n    displayEmpty: boolean = false;\n\n    /** Toggles between expanded (ie, full information) and collapsed\n     * (ie, reduced information) in the display\n     */\n    @Input()\n    expanded: boolean = false;\n\n    /** The multi parameter of the underlying material expansion panel, set to true to allow multi accordion to be expanded at the same time */\n    @Input()\n    multi = false;\n\n    /** Name of the metadata preset, which defines aspects and their properties */\n    @Input()\n    preset: string;\n\n    /** Toggles whether the metadata properties should be shown */\n    @Input()\n    displayDefaultProperties: boolean = true;\n\n    basicProperties$: Observable<CardViewItem[]>;\n    groupedProperties$: Observable<CardViewGroup[]>;\n    disposableNodeUpdate: Subscription;\n\n    constructor(\n        private contentMetadataService: ContentMetadataService,\n        private cardViewUpdateService: CardViewUpdateService,\n        private nodesApiService: NodesApiService,\n        private logService: LogService,\n        private alfrescoApiService: AlfrescoApiService\n    ) {}\n\n    ngOnInit() {\n        this.disposableNodeUpdate =  this.cardViewUpdateService.itemUpdated$\n            .pipe(\n                switchMap(this.saveNode.bind(this))\n            )\n            .subscribe(\n                (updatedNode) => {\n                    Object.assign(this.node, updatedNode);\n                    this.alfrescoApiService.nodeUpdated.next(this.node);\n                },\n                (error) => this.logService.error(error)\n            );\n\n        this.loadProperties(this.node);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.node && !changes.node.firstChange) {\n            this.loadProperties(changes.node.currentValue);\n        }\n    }\n\n    private loadProperties(node: Node) {\n        if (node) {\n            this.basicProperties$ = this.contentMetadataService.getBasicProperties(node);\n            this.groupedProperties$ = this.contentMetadataService.getGroupedProperties(node, this.preset);\n        }\n    }\n\n    private saveNode({ changed: nodeBody }): Observable<Node> {\n        return this.nodesApiService.updateNode(this.node.id, nodeBody);\n    }\n\n    ngOnDestroy() {\n        this.disposableNodeUpdate.unsubscribe();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { ContentMetadataComponent } from './components/content-metadata/content-metadata.component';\nimport { ContentMetadataCardComponent } from './components/content-metadata-card/content-metadata-card.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FlexLayoutModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        ContentMetadataComponent,\n        ContentMetadataCardComponent\n    ],\n    declarations: [\n        ContentMetadataComponent,\n        ContentMetadataCardComponent\n    ]\n})\nexport class ContentMetadataModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PermissionElement } from '@alfresco/js-api';\n\nexport class PermissionDisplayModel implements PermissionElement {\n\n    authorityId?: string;\n    name?: string;\n    accessStatus?: PermissionElement.AccessStatusEnum;\n    isInherited: boolean = false;\n    icon: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.authorityId = obj.authorityId;\n            this.name = obj.name;\n            this.accessStatus = obj.accessStatus;\n            this.isInherited = obj.isInherited !== null && obj.isInherited !== undefined ? obj.isInherited : false;\n            this.icon = obj.icon ? obj.icon : 'vpn_key';\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Observable, of, from, throwError } from 'rxjs';\nimport { AlfrescoApiService, SearchService, NodesApiService, TranslationService } from '@alfresco/adf-core';\nimport { QueryBody, Node, NodeEntry, PathElement, GroupMemberEntry, GroupMemberPaging, PermissionElement } from '@alfresco/js-api';\nimport { switchMap, map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NodePermissionService {\n\n    constructor(private apiService: AlfrescoApiService,\n                private searchApiService: SearchService,\n                private nodeService: NodesApiService,\n                private translation: TranslationService) {\n    }\n\n    /**\n     * Gets a list of roles for the current node.\n     * @param node The target node\n     * @returns Array of strings representing the roles\n     */\n    getNodeRoles(node: Node): Observable<string[]> {\n        const retrieveSiteQueryBody: QueryBody = this.buildRetrieveSiteQueryBody(node.path.elements);\n        return this.searchApiService.searchByQueryBody(retrieveSiteQueryBody)\n            .pipe(\n                switchMap((siteNodeList: any) => {\n                    if ( siteNodeList.list.entries.length > 0 ) {\n                        let siteName = siteNodeList.list.entries[0].entry.name;\n                        return this.getGroupMembersBySiteName(siteName);\n                    } else {\n                        return of(node.permissions.settable);\n                    }\n                })\n            );\n    }\n\n    /**\n     * Updates the permission role for a node.\n     * @param node Target node\n     * @param updatedPermissionRole Permission role to update or add\n     * @returns Node with updated permission\n     */\n    updatePermissionRole(node: Node, updatedPermissionRole: PermissionElement): Observable<Node> {\n        let permissionBody = { permissions: { locallySet: []} };\n        const index = node.permissions.locallySet.map((permission) => permission.authorityId).indexOf(updatedPermissionRole.authorityId);\n        permissionBody.permissions.locallySet = permissionBody.permissions.locallySet.concat(node.permissions.locallySet);\n        if (index !== -1) {\n            permissionBody.permissions.locallySet[index] = updatedPermissionRole;\n        } else {\n            permissionBody.permissions.locallySet.push(updatedPermissionRole);\n        }\n        return this.nodeService.updateNode(node.id, permissionBody);\n    }\n\n    /**\n     * Update permissions for a node.\n     * @param nodeId ID of the target node\n     * @param permissionList New permission settings\n     * @returns Node with updated permissions\n     */\n    updateNodePermissions(nodeId: string, permissionList: NodeEntry[]): Observable<Node> {\n       return this.nodeService.getNode(nodeId).pipe(\n           switchMap((node) => {\n                return this.getNodeRoles(node).pipe(\n                    switchMap((nodeRoles) => of({node, nodeRoles}) )\n                );\n            }),\n            switchMap(({node, nodeRoles}) => this.updateLocallySetPermissions(node, permissionList, nodeRoles))\n        );\n    }\n\n    /**\n     * Updates the locally set permissions for a node.\n     * @param node ID of the target node\n     * @param nodes Permission settings\n     * @param nodeRole Permission role\n     * @returns Node with updated permissions\n     */\n    updateLocallySetPermissions(node: Node, nodes: NodeEntry[], nodeRole: string[]): Observable<Node> {\n        let permissionBody = { permissions: { locallySet: []} };\n        const permissionList = this.transformNodeToPermissionElement(nodes, nodeRole[0]);\n        const duplicatedPermissions = this.getDuplicatedPermissions(node.permissions.locallySet, permissionList);\n        if (duplicatedPermissions.length > 0) {\n            const list = duplicatedPermissions.map((permission) => 'authority -> ' + permission.authorityId + ' / role -> ' + permission.name).join(', ');\n            const duplicatePermissionMessage: string = this.translation.instant('PERMISSION_MANAGER.ERROR.DUPLICATE-PERMISSION',  {list});\n            return throwError(duplicatePermissionMessage);\n        }\n        permissionBody.permissions.locallySet = node.permissions.locallySet ? node.permissions.locallySet.concat(permissionList) : permissionList;\n        return this.nodeService.updateNode(node.id, permissionBody);\n    }\n\n    private getDuplicatedPermissions(nodeLocallySet: PermissionElement[], permissionListAdded: PermissionElement[]): PermissionElement[] {\n        let duplicatePermissions: PermissionElement[] = [];\n        if (nodeLocallySet) {\n            permissionListAdded.forEach((permission: PermissionElement) => {\n                const duplicate = nodeLocallySet.find((localPermission) => this.isEqualPermission(localPermission, permission));\n                if (duplicate) {\n                    duplicatePermissions.push(duplicate);\n                }\n            });\n        }\n        return duplicatePermissions;\n    }\n\n    private isEqualPermission(oldPermission: PermissionElement, newPermission: PermissionElement): boolean {\n        return oldPermission.accessStatus === newPermission.accessStatus &&\n               oldPermission.authorityId === newPermission.authorityId &&\n               oldPermission.name === newPermission.name;\n    }\n\n    private transformNodeToPermissionElement(nodes: NodeEntry[], nodeRole: any): PermissionElement[] {\n        return nodes.map((node) => {\n            let newPermissionElement: PermissionElement = <PermissionElement> {\n                'authorityId': node.entry.properties['cm:authorityName'] ?\n                    node.entry.properties['cm:authorityName'] :\n                    node.entry.properties['cm:userName'],\n                'name': nodeRole,\n                'accessStatus': 'ALLOWED'\n            };\n            return newPermissionElement;\n        });\n    }\n\n    /**\n     * Removes a permission setting from a node.\n     * @param node ID of the target node\n     * @param permissionToRemove Permission setting to remove\n     * @returns Node with modified permissions\n     */\n    removePermission(node: Node, permissionToRemove: PermissionElement): Observable<Node> {\n        let permissionBody = { permissions: { locallySet: [] } };\n        const index = node.permissions.locallySet.map((permission) => permission.authorityId).indexOf(permissionToRemove.authorityId);\n        if (index !== -1) {\n            node.permissions.locallySet.splice(index, 1);\n            permissionBody.permissions.locallySet = node.permissions.locallySet;\n            return this.nodeService.updateNode(node.id, permissionBody);\n        }\n    }\n\n    private getGroupMembersBySiteName(siteName: string): Observable<string[]> {\n        const groupName = 'GROUP_site_' + siteName;\n        return this.getGroupMemberByGroupName(groupName)\n            .pipe(\n                map((groupMemberPaging: GroupMemberPaging) => {\n                    let displayResult: string[] = [];\n                    groupMemberPaging.list.entries.forEach((member: GroupMemberEntry) => {\n                        displayResult.push(this.formattedRoleName(member.entry.displayName, 'site_' + siteName));\n                    });\n                    return displayResult;\n                })\n            );\n    }\n\n    /**\n     * Gets all members related to a group name.\n     * @param groupName Name of group to look for members\n     * @param opts Extra options supported by JS-API\n     * @returns List of members\n     */\n    getGroupMemberByGroupName(groupName: string, opts?: any): Observable<GroupMemberPaging> {\n        return from<GroupMemberPaging>(this.apiService.groupsApi.getGroupMembers(groupName, opts));\n    }\n\n    private formattedRoleName(displayName, siteName): string {\n        return displayName.replace(siteName + '_', '');\n    }\n\n    private buildRetrieveSiteQueryBody(nodePath: PathElement[]): QueryBody {\n        const pathNames = nodePath.map((node: PathElement) => 'name: \"' + node.name + '\"');\n        const buildedPathNames = pathNames.join(' OR ');\n        return {\n            'query': {\n                'query': buildedPathNames\n            },\n            'paging': {\n                'maxItems': 100,\n                'skipCount': 0\n            },\n            'include': ['aspectNames', 'properties'],\n            'filterQueries': [\n                {\n                    'query':\n                        \"TYPE:'st:site'\"\n                }\n            ]\n        };\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { NodesApiService } from '@alfresco/adf-core';\nimport { Node, PermissionElement } from '@alfresco/js-api';\nimport { PermissionDisplayModel } from '../../models/permission.model';\nimport { NodePermissionService } from '../../services/node-permission.service';\n\n@Component({\n    selector: 'adf-permission-list',\n    templateUrl: './permission-list.component.html',\n    styleUrls: ['./permission-list.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class PermissionListComponent implements OnInit {\n\n    /** ID of the node whose permissions you want to show. */\n    @Input()\n    nodeId: string = '';\n\n    /** Emitted when the permission is updated. */\n    @Output()\n    update: EventEmitter<PermissionElement> = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    permissionList: PermissionDisplayModel[];\n    settableRoles: any[];\n    actualNode: Node;\n\n    constructor(private nodeService: NodesApiService,\n                private nodePermissionService: NodePermissionService) {\n\n    }\n\n    ngOnInit() {\n        this.fetchNodePermissions();\n    }\n\n    reload() {\n        this.fetchNodePermissions();\n    }\n\n    private fetchNodePermissions() {\n        this.nodeService.getNode(this.nodeId).subscribe((node: Node) => {\n            this.actualNode = node;\n            this.permissionList = this.getPermissionList(node);\n            this.nodePermissionService.getNodeRoles(node).subscribe((settableList: string[]) => {\n                this.settableRoles = settableList;\n            });\n        });\n    }\n\n    private getPermissionList(node: Node): PermissionDisplayModel[] {\n        let allPermissions: PermissionDisplayModel[] = [];\n        if (node.permissions.locallySet) {\n            node.permissions.locallySet.map((permissionElement: PermissionElement) => {\n                let permission = new PermissionDisplayModel(permissionElement);\n                allPermissions.push(permission);\n            });\n        }\n        if (node.permissions.inherited) {\n            node.permissions.inherited.map((permissionElement: PermissionElement) => {\n                let permissionInherited = new PermissionDisplayModel(permissionElement);\n                permissionInherited.isInherited = true;\n                allPermissions.push(permissionInherited);\n            });\n        }\n        return allPermissions;\n    }\n\n    saveNewRole(event: any, permissionRow: PermissionDisplayModel) {\n        let updatedPermissionRole: PermissionElement = this.buildUpdatedPermission(event.value, permissionRow);\n        this.nodePermissionService.updatePermissionRole(this.actualNode, updatedPermissionRole)\n            .subscribe((node: Node) => {\n                this.update.emit(updatedPermissionRole);\n            });\n    }\n\n    private buildUpdatedPermission(newRole: string, permissionRow: PermissionDisplayModel): PermissionElement {\n        let permissionRole: PermissionElement = {};\n        permissionRole.accessStatus = permissionRow.accessStatus;\n        permissionRole.name = newRole;\n        permissionRole.authorityId = permissionRow.authorityId;\n        return permissionRole;\n    }\n\n    removePermission(permissionRow: PermissionDisplayModel) {\n        this.nodePermissionService.removePermission(this.actualNode, permissionRow).subscribe((node) => {\n            this.update.emit(node);\n        }, (error) => this.error.emit(error));\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'adf-no-permission-template',\n    template: '<ng-content></ng-content>'\n})\nexport class NoPermissionTemplateComponent {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\nimport { Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { NodesApiService, ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';\nimport { Node } from '@alfresco/js-api';\n\n@Directive({\n    selector: 'button[adf-inherit-permission], mat-button-toggle[adf-inherit-permission]',\n    host: {\n        'role': 'button',\n        '(click)': 'onInheritPermissionClicked()'\n    }\n})\nexport class InheritPermissionDirective {\n\n    /** ID of the node to add/remove inherited permissions. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when the node is updated. */\n    @Output()\n    updated: EventEmitter<Node> = new EventEmitter<Node>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private nodeService: NodesApiService,\n                private contentService: ContentService) {\n    }\n\n    onInheritPermissionClicked() {\n        this.nodeService.getNode(this.nodeId).subscribe((node: Node) => {\n            if (this.contentService.hasAllowableOperations(node, AllowableOperationsEnum.UPDATEPERMISSIONS)) {\n                const nodeBody = { permissions: { isInheritanceEnabled: !node.permissions.isInheritanceEnabled } };\n                this.nodeService.updateNode(this.nodeId, nodeBody, { include: ['permissions'] }).subscribe((nodeUpdated: Node) => {\n                    this.updated.emit(nodeUpdated);\n                }, (error) => this.error.emit(error));\n            } else {\n                this.error.emit('PERMISSION_MANAGER.ERROR.NOT-ALLOWED');\n            }\n        });\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Inject, ViewChild } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { AddPermissionDialogData } from './add-permission-dialog-data.interface';\nimport { AddPermissionComponent } from '../add-permission/add-permission.component';\n\n@Component({\n    selector: 'adf-add-permission-dialog',\n    templateUrl: './add-permission-dialog.component.html',\n    styleUrls: ['./add-permission-dialog.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AddPermissionDialogComponent {\n\n    @ViewChild('addPermission')\n    addPermissionComponent: AddPermissionComponent;\n\n    currentSelection: NodeEntry[] = [];\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: AddPermissionDialogData) {\n    }\n\n    onSelect(items: NodeEntry[]) {\n        this.currentSelection = items;\n    }\n\n    onAddClicked() {\n        this.data.confirm.next(this.currentSelection);\n        this.data.confirm.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MatDialog } from '@angular/material';\nimport { Injectable } from '@angular/core';\nimport { Subject, Observable, throwError } from 'rxjs';\nimport { AddPermissionDialogComponent } from '../components/add-permission/add-permission-dialog.component';\nimport { AddPermissionDialogData } from '../components/add-permission/add-permission-dialog-data.interface';\nimport { NodeEntry, Node } from '@alfresco/js-api';\nimport { NodePermissionService } from './node-permission.service';\nimport { ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';\nimport { switchMap } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NodePermissionDialogService {\n\n    constructor(private dialog: MatDialog,\n                private nodePermissionService: NodePermissionService,\n                private contentService: ContentService) {\n    }\n\n    /**\n     * Opens a dialog to add permissions to a node.\n     * @param node ID of the target node\n     * @param title Dialog title\n     * @returns Node with updated permissions\n     */\n    openAddPermissionDialog(node: Node, title?: string): Observable<NodeEntry[]> {\n        if (this.contentService.hasAllowableOperations(node, AllowableOperationsEnum.UPDATEPERMISSIONS)) {\n            const confirm = new Subject<NodeEntry[]>();\n\n            confirm.subscribe({\n                complete: this.close.bind(this)\n            });\n\n            const data: AddPermissionDialogData = {\n                nodeId: node.id,\n                title: title,\n                confirm: confirm\n            };\n\n            this.openDialog(data, 'adf-add-permission-dialog', '630px');\n            return confirm;\n        } else {\n            let errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));\n            errors.message = 'PERMISSION_MANAGER.ERROR.NOT-ALLOWED';\n            return throwError(errors);\n        }\n    }\n\n    private openDialog(data: any, currentPanelClass: string, chosenWidth: string) {\n        this.dialog.open(AddPermissionDialogComponent, { data, panelClass: currentPanelClass, width: chosenWidth });\n    }\n\n    /**\n     * Closes the currently-open dialog.\n     */\n    close() {\n        this.dialog.closeAll();\n    }\n\n    /**\n     * Opens a dialog to update permissions for a node.\n     * @param nodeId ID of the target node\n     * @param title Dialog title\n     * @returns Node with updated permissions\n     */\n    updateNodePermissionByDialog(nodeId?: string, title?: string): Observable<Node> {\n        return this.contentService.getNode(nodeId, { include: ['allowableOperations'] })\n            .pipe(\n                switchMap((node) => {\n                    return this.openAddPermissionDialog(node.entry, title)\n                        .pipe(\n                            switchMap((selection) => {\n                                return this.nodePermissionService.updateNodePermissions(nodeId, selection);\n                            })\n                        );\n                })\n            );\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryBody } from '@alfresco/js-api';\nimport { SearchConfigurationInterface } from '@alfresco/adf-core';\n\nexport class SearchPermissionConfigurationService implements SearchConfigurationInterface {\n\n    constructor() {\n    }\n\n    public generateQueryBody(searchTerm: string, maxResults: number, skipCount: number): QueryBody {\n        const defaultQueryBody: QueryBody = {\n            query: {\n                query: searchTerm ? `authorityName:*${searchTerm}* OR userName:*${searchTerm}*` : searchTerm\n            },\n            include: ['properties', 'aspectNames'],\n            paging: {\n                maxItems: maxResults,\n                skipCount: skipCount\n            },\n            filterQueries: [\n                /*tslint:disable-next-line */\n                { query: \"TYPE:'cm:authority'\" }]\n        };\n\n        return defaultQueryBody;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, EventEmitter, Output, ViewChild } from '@angular/core';\nimport { SearchPermissionConfigurationService } from './search-config-permission.service';\nimport { SearchService, SearchConfigurationService } from '@alfresco/adf-core';\nimport { SearchComponent } from '../../../search/components/search.component';\nimport { FormControl } from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\nimport { NodeEntry } from '@alfresco/js-api';\n\n@Component({\n    selector: 'adf-add-permission-panel',\n    templateUrl: './add-permission-panel.component.html',\n    styleUrls: ['./add-permission-panel.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        { provide: SearchConfigurationService, useClass: SearchPermissionConfigurationService },\n        SearchService\n    ]\n})\nexport class AddPermissionPanelComponent {\n\n    @ViewChild('search')\n    search: SearchComponent;\n\n    /** Emitted when a permission list item is selected. */\n    @Output()\n    select: EventEmitter<any> = new EventEmitter();\n\n    searchInput: FormControl = new FormControl();\n    searchedWord = '';\n    debounceSearch: number = 200;\n\n    selectedItems: NodeEntry[] = [];\n\n    EVERYONE: NodeEntry = new NodeEntry({ entry: { properties: {'cm:authorityName': 'GROUP_EVERYONE'}}});\n\n    constructor() {\n        this.searchInput.valueChanges\n        .pipe(\n            debounceTime(this.debounceSearch)\n        )\n        .subscribe((searchValue) => {\n            this.searchedWord = searchValue;\n            if (!searchValue) {\n                this.search.resetResults();\n            }\n        });\n    }\n\n    elementClicked(item: NodeEntry) {\n        if (this.isAlreadySelected(item)) {\n            this.selectedItems.splice(this.selectedItems.indexOf(item), 1);\n        } else {\n            this.selectedItems.push(item);\n        }\n        this.select.emit(this.selectedItems);\n    }\n\n    private isAlreadySelected(item: NodeEntry): boolean {\n        return this.selectedItems.indexOf(item) >= 0;\n    }\n\n    clearSearch() {\n        this.searchedWord = '';\n        this.selectedItems.splice(0, this.selectedItems.length);\n        this.search.resetResults();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, EventEmitter, Input, Output } from '@angular/core';\nimport { NodeEntry, Node } from '@alfresco/js-api';\nimport { NodePermissionService } from '../../services/node-permission.service';\nimport { NodesApiService, ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-add-permission',\n    templateUrl: './add-permission.component.html',\n    styleUrls: ['./add-permission.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AddPermissionComponent {\n\n    /** ID of the target node. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when the node is updated successfully. */\n    @Output()\n    success: EventEmitter<Node> = new EventEmitter();\n\n    /** Emitted when an error occurs during the update. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    selectedItems: NodeEntry[] = [];\n    currentNode: Node;\n    currentNodeRoles: string[];\n\n    constructor(private nodePermissionService: NodePermissionService,\n                private nodeApiService: NodesApiService,\n                private contentService: ContentService) {\n        this.nodeApiService.getNode(this.nodeId).subscribe((node) => this.currentNode = node);\n    }\n\n    onSelect(selection: NodeEntry[]) {\n        this.selectedItems = selection;\n    }\n\n    isAddEnabled(): boolean {\n        return this.contentService.hasAllowableOperations(this.currentNode, AllowableOperationsEnum.UPDATEPERMISSIONS) &&\n                this.selectedItems.length !== 0;\n    }\n\n    applySelection() {\n        if (this.contentService.hasAllowableOperations(this.currentNode, AllowableOperationsEnum.UPDATEPERMISSIONS)) {\n            this.nodePermissionService.updateNodePermissions(this.nodeId, this.selectedItems)\n                .subscribe(\n                    (node) => {\n                        this.success.emit(node);\n                    },\n                    (error) => {\n                        this.error.emit(error);\n                    });\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\nimport { PermissionListComponent } from './components/permission-list/permission-list.component';\nimport { AddPermissionComponent } from './components/add-permission/add-permission.component';\nimport { AddPermissionDialogComponent } from './components/add-permission/add-permission-dialog.component';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { InheritPermissionDirective } from './components/inherited-button.directive';\nimport { NoPermissionTemplateComponent } from './components/permission-list/no-permission.component';\nimport { AddPermissionPanelComponent } from './components/add-permission/add-permission-panel.component';\nimport { SearchModule } from '../search/search.module';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        SearchModule\n    ],\n    declarations: [\n        PermissionListComponent,\n        NoPermissionTemplateComponent,\n        AddPermissionPanelComponent,\n        InheritPermissionDirective,\n        AddPermissionComponent,\n        AddPermissionDialogComponent\n    ],\n    entryComponents: [\n        AddPermissionPanelComponent,\n        AddPermissionComponent,\n        AddPermissionDialogComponent\n    ],\n    exports: [\n        PermissionListComponent,\n        NoPermissionTemplateComponent,\n        AddPermissionPanelComponent,\n        InheritPermissionDirective,\n        AddPermissionComponent,\n        AddPermissionDialogComponent\n    ]\n})\nexport class PermissionManagerModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    Inject,\n    OnInit,\n    ViewEncapsulation,\n    ViewChild,\n    ElementRef,\n    OnDestroy\n} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef,  MatDialog } from '@angular/material';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Subscription, Observable } from 'rxjs';\nimport { tap, skip } from 'rxjs/operators';\nimport {\n    SharedLinksApiService,\n    NodesApiService,\n    ContentService,\n    RenditionsService\n} from '@alfresco/adf-core';\nimport { SharedLinkEntry, Node } from '@alfresco/js-api';\nimport { ConfirmDialogComponent } from '../dialogs/confirm.dialog';\nimport moment from 'moment-es6';\n\n@Component({\n    selector: 'adf-share-dialog',\n    templateUrl: './content-node-share.dialog.html',\n    styleUrls: ['./content-node-share.dialog.scss'],\n    host: { 'class': 'adf-share-dialog' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ShareDialogComponent implements OnInit, OnDestroy {\n    private subscriptions: Subscription[] = [];\n\n    minDate = moment().add(1, 'd');\n    sharedId: string;\n    fileName: string;\n    baseShareUrl: string;\n    isFileShared: boolean = false;\n    isDisabled: boolean = false;\n    form: FormGroup = new FormGroup({\n        'sharedUrl': new FormControl(''),\n        'time': new FormControl({value: '', disabled: false})\n    });\n\n    @ViewChild('sharedLinkInput') sharedLinkInput: ElementRef;\n\n    constructor(\n        private sharedLinksApiService: SharedLinksApiService,\n        private dialogRef: MatDialogRef<ShareDialogComponent>,\n        private dialog: MatDialog,\n        private nodesApiService: NodesApiService,\n        private contentService: ContentService,\n        private renditionService: RenditionsService,\n        @Inject(MAT_DIALOG_DATA) public data: any) {\n    }\n\n    ngOnInit() {\n\n        if (!this.canUpdate) {\n            this.form.controls['time'].disable();\n        }\n\n        this.subscriptions.push(\n            this.form.valueChanges\n                .pipe(\n                    skip(1),\n                    tap((updates) => {\n                        this.updateNode(updates);\n                    })\n                )\n                .subscribe((updates) => this.updateEntryExpiryDate(updates))\n        );\n\n        if (this.data.node && this.data.node.entry) {\n            this.fileName = this.data.node.entry.name;\n            this.baseShareUrl = this.data.baseShareUrl;\n            const properties = this.data.node.entry.properties;\n\n            if (properties && !properties['qshare:sharedId']) {\n\n                this.createSharedLinks(this.data.node.entry.id);\n\n            } else {\n                this.sharedId = properties['qshare:sharedId'];\n                this.isFileShared = true;\n\n                this.updateForm();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach((subscription) => subscription.unsubscribe);\n    }\n\n    removeShare() {\n        this.deleteSharedLink(this.sharedId);\n    }\n\n    onSlideShareChange(event: any) {\n        if (event.checked) {\n            this.createSharedLinks(this.data.node.entry.id);\n        } else {\n            this.openConfirmationDialog();\n        }\n    }\n\n    get canUpdate() {\n        return this.contentService.hasAllowableOperations(this.data.node.entry, 'update');\n    }\n\n    private openConfirmationDialog() {\n        this.isFileShared = false;\n\n        this.dialog\n            .open(ConfirmDialogComponent, {\n                data: {\n                    title: 'SHARE.CONFIRMATION.DIALOG-TITLE',\n                    message: 'SHARE.CONFIRMATION.MESSAGE',\n                    yesLabel: 'SHARE.CONFIRMATION.REMOVE',\n                    noLabel: 'SHARE.CONFIRMATION.CANCEL'\n                },\n                minWidth: '250px',\n                closeOnNavigation: true\n            })\n            .beforeClose().subscribe((deleteSharedLink) => {\n                if (deleteSharedLink) {\n                    this.deleteSharedLink(this.sharedId);\n                } else {\n                    this.isFileShared = true;\n                }\n            });\n    }\n\n    private createSharedLinks(nodeId: string) {\n        this.isDisabled = true;\n\n        this.sharedLinksApiService.createSharedLinks(nodeId)\n            .subscribe((sharedLink: SharedLinkEntry) => {\n\n                if (sharedLink.entry) {\n                    this.sharedId = sharedLink.entry.id;\n                    this.data.node.entry.properties['qshare:sharedId'] = this.sharedId;\n                    this.isDisabled = false;\n                    this.isFileShared = true;\n                    this.renditionService.generateRenditionForNode(this.data.node.entry.id).subscribe(() => {});\n\n                    this.updateForm();\n                }\n            },\n            () => {\n                this.isDisabled = false;\n                this.isFileShared = false;\n            });\n    }\n\n    private deleteSharedLink(sharedId: string) {\n        this.isDisabled = true;\n\n        this.sharedLinksApiService.deleteSharedLink(sharedId).subscribe(() => {\n                this.data.node.entry.properties['qshare:sharedId'] = null;\n                this.data.node.entry.properties['qshare:expiryDate'] = null;\n                this.dialogRef.close(false);\n            },\n            () => {\n                this.isDisabled = false;\n                this.isFileShared = false;\n            });\n    }\n\n    private updateForm() {\n        const { entry } = this.data.node;\n        const expiryDate = entry.properties['qshare:expiryDate'];\n\n        this.form.setValue({\n            'sharedUrl': `${this.baseShareUrl}${this.sharedId}`,\n            'time': expiryDate ? expiryDate : null\n        });\n    }\n\n    private updateNode(updates): Observable<Node> {\n        return this.nodesApiService.updateNode(\n            this.data.node.entry.id,\n            {\n                properties: {\n                    'qshare:expiryDate': updates.time ? updates.time.utc().format() : null\n                }\n            }\n        );\n    }\n\n    private updateEntryExpiryDate(updates) {\n        const { properties } = this.data.node.entry;\n\n        properties['qshare:expiryDate'] = updates.time\n            ? updates.time.local()\n            : null;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Directive, Input, HostListener, OnChanges, NgZone } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { NodeEntry } from '@alfresco/js-api';\n\nimport { ShareDialogComponent } from './content-node-share.dialog';\n\n@Directive({\n    selector: '[adf-share]',\n    exportAs: 'adfShare'\n})\nexport class NodeSharedDirective implements OnChanges {\n\n    isFile: boolean = false;\n    isShared: boolean = false;\n\n    /** Node to share. */\n    // tslint:disable-next-line:no-input-rename\n    @Input('adf-share')\n    node: NodeEntry;\n\n    /** Prefix to add to the generated link. */\n    @Input()\n    baseShareUrl: string;\n\n    @HostListener('click')\n    onClick() {\n        if (this.node) {\n            this.shareNode(this.node);\n        }\n    }\n\n    constructor(private dialog: MatDialog, private zone: NgZone) {}\n\n    shareNode(nodeEntry: NodeEntry) {\n        if (nodeEntry && nodeEntry.entry && nodeEntry.entry.isFile) {\n            this.dialog.open(ShareDialogComponent, {\n                width: '600px',\n                panelClass: 'adf-share-link-dialog',\n                data: {\n                    node: nodeEntry,\n                    baseShareUrl: this.baseShareUrl\n                }\n            });\n        }\n    }\n\n    ngOnChanges() {\n        this.zone.onStable.subscribe(() => {\n            if (this.node && this.node.entry) {\n                this.isFile = this.node.entry.isFile;\n                this.isShared = this.node.entry.properties['qshare:sharedId'];\n            }\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { MaterialModule } from '../material.module';\nimport { ShareDialogComponent } from './content-node-share.dialog';\nimport { NodeSharedDirective } from './content-node-share.directive';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        ShareDialogComponent,\n        NodeSharedDirective\n    ],\n    exports: [\n        ShareDialogComponent,\n        NodeSharedDirective\n    ],\n    entryComponents: [\n        ShareDialogComponent\n    ]\n})\nexport class ContentNodeShareModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ContentNodeShareModule\n        };\n    }\n\n    static forChild(): ModuleWithProviders {\n        return {\n            ngModule: ContentNodeShareModule\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NodeEntry } from '@alfresco/js-api';\n\nexport class TreeBaseNode {\n\n    name: string;\n    nodeId: string;\n    level: number;\n    expandable = true;\n    node: NodeEntry;\n\n    constructor(nodeEntry: NodeEntry, level?: number, expandable?: boolean) {\n        this.name = nodeEntry.entry.name;\n        this.nodeId = nodeEntry.entry.id;\n        this.level = level ? level : 0;\n        this.expandable = expandable ? expandable : true;\n        this.node = nodeEntry ? new NodeEntry(nodeEntry) : undefined;\n\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NodesApiService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TreeBaseNode } from '../models/tree-view.model';\nimport { NodePaging, NodeEntry } from '@alfresco/js-api';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TreeViewService {\n\n    constructor(private nodeApi: NodesApiService) {\n    }\n\n    getTreeNodes(nodeId): Observable<TreeBaseNode[]> {\n        return this.nodeApi.getNodeChildren(nodeId)\n            .pipe(\n                map((nodePage: NodePaging) => {\n                    return nodePage.list.entries.filter((node) => node.entry.isFolder ? node : null);\n                }),\n                map((nodes: NodeEntry[]) => nodes.map((node) => new TreeBaseNode(node)))\n            );\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { CollectionViewer, SelectionChange } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { TreeBaseNode } from '../models/tree-view.model';\nimport { TreeViewService } from '../services/tree-view.service';\n\n@Injectable()\nexport class TreeViewDataSource {\n\n    treeNodes: TreeBaseNode[];\n    dataChange = new BehaviorSubject<TreeBaseNode[]>([]);\n    childrenSubscription = null;\n    changeSubscription = null;\n\n    get data(): TreeBaseNode[] {\n        return this.treeNodes;\n    }\n\n    set data(value: TreeBaseNode[]) {\n        this.treeControl.dataNodes = value;\n        this.dataChange.next(value);\n    }\n\n    constructor(private treeControl: FlatTreeControl<TreeBaseNode>,\n                private treeViewService: TreeViewService) {\n        this.dataChange.subscribe((treeNodes) => this.treeNodes = treeNodes);\n    }\n\n    connect(collectionViewer: CollectionViewer): Observable<TreeBaseNode[]> {\n        this.changeSubscription = this.treeControl.expansionModel.onChange.subscribe((change) => {\n            if ((change as SelectionChange<TreeBaseNode>).added &&\n                (change as SelectionChange<TreeBaseNode>).added.length > 0) {\n                this.expandTreeNodes(change as SelectionChange<TreeBaseNode>);\n            } else if ((change as SelectionChange<TreeBaseNode>).removed) {\n                this.reduceTreeNodes(change as SelectionChange<TreeBaseNode>);\n            }\n        });\n        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        if (this.childrenSubscription) {\n            this.childrenSubscription.unsubscribe();\n        }\n        if (this.changeSubscription) {\n            this.changeSubscription.unsubscribe();\n        }\n    }\n\n    private expandTreeNodes(change: SelectionChange<TreeBaseNode>) {\n        change.added.forEach((node) => this.expandNode(node));\n    }\n\n    private reduceTreeNodes(change: SelectionChange<TreeBaseNode>) {\n        change.removed.slice().reverse().forEach((node) => this.toggleNode(node));\n    }\n\n    private expandNode(node: TreeBaseNode) {\n        this.childrenSubscription = this.treeViewService.getTreeNodes(node.nodeId)\n            .subscribe((children) => {\n                const index = this.data.indexOf(node);\n                if (!children || index < 0) {\n                    node.expandable = false;\n                    return;\n                }\n                const nodes = children.map((actualNode) => {\n                    actualNode.level = node.level + 1;\n                    return actualNode;\n                });\n                this.data.splice(index + 1, 0, ...nodes);\n                this.dataChange.next(this.data);\n            });\n    }\n\n    toggleNode(node: TreeBaseNode) {\n        const index = this.data.indexOf(node);\n        let count = 0;\n        for (let i = index + 1; i < this.data.length\n            && this.data[i].level > node.level; i++ , count++) { }\n        this.data.splice(index + 1, count);\n        this.dataChange.next(this.data);\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { Component, Input, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { TreeBaseNode } from '../models/tree-view.model';\nimport { TreeViewDataSource } from '../data/tree-view-datasource';\nimport { TreeViewService } from '../services/tree-view.service';\nimport { NodeEntry } from '@alfresco/js-api';\n\n@Component({\n    selector: 'adf-tree-view-list',\n    templateUrl: 'tree-view.component.html',\n    styleUrls: ['tree-view.component.scss']\n})\n\nexport class TreeViewComponent implements OnChanges {\n\n    /** Identifier of the node to display. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when a node in the tree view is clicked. */\n    @Output()\n    nodeClicked: EventEmitter<NodeEntry> = new EventEmitter();\n\n    /** Emitted when an invalid node id is given. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    treeControl: FlatTreeControl<TreeBaseNode>;\n    dataSource: TreeViewDataSource;\n\n    constructor(private treeViewService: TreeViewService) {\n        this.treeControl = new FlatTreeControl<TreeBaseNode>(this.getLevel, this.isExpandable);\n        this.dataSource = new TreeViewDataSource(this.treeControl, this.treeViewService);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['nodeId'] && changes['nodeId'].currentValue &&\n            changes['nodeId'].currentValue !== changes['nodeId'].previousValue) {\n            this.loadTreeNode();\n        } else {\n            this.dataSource.data = [];\n        }\n    }\n\n    onNodeClicked(node: NodeEntry) {\n        this.nodeClicked.emit(node);\n    }\n\n    getLevel = (node: TreeBaseNode) => node.level;\n\n    isExpandable = (node: TreeBaseNode) => node.expandable;\n\n    hasChild = (level: number, nodeData: TreeBaseNode) => nodeData.expandable;\n\n    private loadTreeNode() {\n        this.treeViewService.getTreeNodes(this.nodeId)\n            .subscribe(\n                (treeNode: TreeBaseNode[]) => {\n                    this.dataSource.data = treeNode;\n                },\n                (error) => this.error.emit(error)\n            );\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MaterialModule } from '../material.module';\nimport { TreeViewComponent } from './components/tree-view.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule.forChild()\n    ],\n    declarations: [\n        TreeViewComponent\n    ],\n    exports: [\n        TreeViewComponent\n    ]\n})\nexport class TreeViewModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule, TRANSLATION_PROVIDER } from '@alfresco/adf-core';\n\nimport { MaterialModule } from './material.module';\n\nimport { SocialModule } from './social/social.module';\nimport { TagModule } from './tag/tag.module';\nimport { WebScriptModule } from './webscript/webscript.module';\nimport { DocumentListModule } from './document-list/document-list.module';\nimport { UploadModule } from './upload/upload.module';\nimport { SearchModule } from './search/search.module';\nimport { SitesDropdownModule } from './site-dropdown/sites-dropdown.module';\nimport { BreadcrumbModule } from './breadcrumb/breadcrumb.module';\nimport { VersionManagerModule } from './version-manager/version-manager.module';\nimport { ContentNodeSelectorModule } from './content-node-selector/content-node-selector.module';\nimport { ContentNodeShareModule } from './content-node-share/content-node-share.module';\nimport { ContentDirectiveModule } from './directives/content-directive.module';\nimport { DialogModule } from './dialogs/dialog.module';\nimport { FolderDirectiveModule } from './folder-directive/folder-directive.module';\nimport { ContentMetadataModule } from './content-metadata/content-metadata.module';\nimport { PermissionManagerModule } from './permission-manager/permission-manager.module';\nimport { TreeViewModule } from './tree-view/tree-view.module';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        SocialModule,\n        TagModule,\n        CommonModule,\n        WebScriptModule,\n        FormsModule,\n        ReactiveFormsModule,\n        DialogModule,\n        SearchModule,\n        DocumentListModule,\n        UploadModule,\n        MaterialModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentNodeShareModule,\n        ContentMetadataModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule,\n        TreeViewModule\n    ],\n    exports: [\n        SocialModule,\n        TagModule,\n        WebScriptModule,\n        DocumentListModule,\n        UploadModule,\n        SearchModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentNodeShareModule,\n        ContentMetadataModule,\n        DialogModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule,\n        TreeViewModule\n    ]\n})\nexport class ContentModuleLazy {}\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        SocialModule,\n        TagModule,\n        CommonModule,\n        WebScriptModule,\n        FormsModule,\n        ReactiveFormsModule,\n        DialogModule,\n        SearchModule,\n        DocumentListModule,\n        UploadModule,\n        MaterialModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentNodeShareModule,\n        ContentMetadataModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule,\n        TreeViewModule\n    ],\n    providers: [\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'adf-content-services',\n                source: 'assets/adf-content-services'\n            }\n        }\n    ],\n    exports: [\n        SocialModule,\n        TagModule,\n        WebScriptModule,\n        DocumentListModule,\n        UploadModule,\n        SearchModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentNodeShareModule,\n        ContentMetadataModule,\n        DialogModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule,\n        TreeViewModule\n    ]\n})\nexport class ContentModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ContentModule,\n            providers: [\n                {\n                    provide: TRANSLATION_PROVIDER,\n                    multi: true,\n                    useValue: {\n                        name: 'adf-content-services',\n                        source: 'assets/adf-content-services'\n                    }\n                }\n            ]\n        };\n    }\n\n    static forChild(): ModuleWithProviders {\n        return {\n            ngModule: ContentModuleLazy\n        };\n    }\n}\n"]}
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { SearchService, TranslationService } from '@alfresco/adf-core';
import { SearchQueryBuilderService } from '../../search-query-builder.service';
import { SearchFilterList } from './models/search-filter-list.model';
import { takeWhile } from 'rxjs/operators';
export class SearchFilterComponent {
    /**
     * @param {?} queryBuilder
     * @param {?} searchService
     * @param {?} translationService
     */
    constructor(queryBuilder, searchService, translationService) {
        this.queryBuilder = queryBuilder;
        this.searchService = searchService;
        this.translationService = translationService;
        this.DEFAULT_PAGE_SIZE = 5;
        this.isAlive = true;
        this.responseFacets = null;
        this.facetQueriesPageSize = this.DEFAULT_PAGE_SIZE;
        this.facetQueriesLabel = 'Facet Queries';
        this.facetQueriesExpanded = false;
        this.facetFieldsExpanded = false;
        this.selectedBuckets = [];
        if (queryBuilder.config && queryBuilder.config.facetQueries) {
            this.facetQueriesLabel = queryBuilder.config.facetQueries.label || 'Facet Queries';
            this.facetQueriesPageSize = queryBuilder.config.facetQueries.pageSize || this.DEFAULT_PAGE_SIZE;
            this.facetQueriesExpanded = queryBuilder.config.facetQueries.expanded;
        }
        if (queryBuilder.config && queryBuilder.config.facetFields) {
            this.facetFieldsExpanded = queryBuilder.config.facetFields.expanded;
        }
        this.queryBuilder.updated.pipe(takeWhile(() => this.isAlive)).subscribe(() => {
            this.queryBuilder.execute();
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.queryBuilder) {
            this.queryBuilder.executed.pipe(takeWhile(() => this.isAlive)).subscribe((resultSetPaging) => {
                this.onDataLoaded(resultSetPaging);
                this.searchService.dataLoaded.next(resultSetPaging);
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.isAlive = false;
    }
    /**
     * @private
     * @return {?}
     */
    updateSelectedBuckets() {
        if (this.responseFacets) {
            this.selectedBuckets = [];
            for (let field of this.responseFacets) {
                if (field.buckets) {
                    this.selectedBuckets.push(...this.queryBuilder.getUserFacetBuckets(field.field)
                        .filter((bucket) => bucket.checked)
                        .map((bucket) => {
                        return { field, bucket };
                    }));
                }
            }
        }
        else {
            this.selectedBuckets = [];
        }
    }
    /**
     * @param {?} event
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    onToggleBucket(event, field, bucket) {
        if (event && bucket) {
            if (event.checked) {
                this.selectFacetBucket(field, bucket);
            }
            else {
                this.unselectFacetBucket(field, bucket);
            }
        }
    }
    /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    selectFacetBucket(field, bucket) {
        if (bucket) {
            bucket.checked = true;
            this.queryBuilder.addUserFacetBucket(field, bucket);
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    }
    /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    unselectFacetBucket(field, bucket) {
        if (bucket) {
            bucket.checked = false;
            this.queryBuilder.removeUserFacetBucket(field, bucket);
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    canResetSelectedBuckets(field) {
        if (field && field.buckets) {
            return field.buckets.items.some((bucket) => bucket.checked);
        }
        return false;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    resetSelectedBuckets(field) {
        if (field && field.buckets) {
            for (let bucket of field.buckets.items) {
                bucket.checked = false;
                this.queryBuilder.removeUserFacetBucket(field, bucket);
            }
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    shouldExpand(field) {
        return field.type === 'query' ? this.facetQueriesExpanded : this.facetFieldsExpanded;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onDataLoaded(data) {
        /** @type {?} */
        const context = data.list.context;
        if (context) {
            this.parseFacets(context);
        }
        else {
            this.responseFacets = null;
        }
    }
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    parseFacets(context) {
        if (!this.responseFacets) {
            /** @type {?} */
            const responseFacetFields = this.parseFacetFields(context);
            /** @type {?} */
            const responseGroupedFacetQueries = this.parseFacetQueries(context);
            this.responseFacets = responseFacetFields.concat(...responseGroupedFacetQueries);
        }
        else {
            this.responseFacets = this.responseFacets
                .map((field) => {
                /** @type {?} */
                let responseField = (context.facets || []).find((response) => response.label === field.label && response.type === field.type);
                (field && field.buckets && field.buckets.items || [])
                    .map((bucket) => {
                    /** @type {?} */
                    const responseBucket = ((responseField && responseField.buckets) || []).find((respBucket) => respBucket.label === bucket.label);
                    bucket.count = responseBucket ? this.getCountValue(responseBucket) : 0;
                    return bucket;
                });
                return field;
            });
        }
    }
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    parseFacetFields(context) {
        /** @type {?} */
        const configFacetFields = this.queryBuilder.config.facetFields && this.queryBuilder.config.facetFields.fields || [];
        return configFacetFields.map((field) => {
            /** @type {?} */
            const responseField = (context.facets || []).find((response) => response.type === 'field' && response.label === field.label) || {};
            /** @type {?} */
            const responseBuckets = this.getResponseBuckets(responseField);
            /** @type {?} */
            const bucketList = new SearchFilterList(responseBuckets, field.pageSize);
            bucketList.filter = (bucket) => {
                if (bucket && bucketList.filterText) {
                    /** @type {?} */
                    const pattern = (bucketList.filterText || '').toLowerCase();
                    /** @type {?} */
                    const label = (this.translationService.instant(bucket.display) || this.translationService.instant(bucket.label)).toLowerCase();
                    return this.queryBuilder.config.filterWithContains ? label.indexOf(pattern) !== -1 : label.startsWith(pattern);
                }
                return true;
            };
            return (/** @type {?} */ (Object.assign({}, field, { type: responseField.type, label: field.label, pageSize: field.pageSize | this.DEFAULT_PAGE_SIZE, currentPageSize: field.pageSize | this.DEFAULT_PAGE_SIZE, buckets: bucketList })));
        });
    }
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    parseFacetQueries(context) {
        /** @type {?} */
        const configFacetQueries = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.queries || [];
        /** @type {?} */
        const configGroups = configFacetQueries.reduce((acc, query) => {
            /** @type {?} */
            const group = this.queryBuilder.getQueryGroup(query);
            if (acc[group]) {
                acc[group].push(query);
            }
            else {
                acc[group] = [query];
            }
            return acc;
        }, []);
        /** @type {?} */
        const result = [];
        Object.keys(configGroups).forEach((group) => {
            /** @type {?} */
            const responseField = (context.facets || []).find((response) => response.type === 'query' && response.label === group) || {};
            /** @type {?} */
            const responseBuckets = this.getResponseQueryBuckets(responseField, configGroups[group]);
            /** @type {?} */
            const bucketList = new SearchFilterList(responseBuckets, this.facetQueriesPageSize);
            bucketList.filter = (bucket) => {
                if (bucket && bucketList.filterText) {
                    /** @type {?} */
                    const pattern = (bucketList.filterText || '').toLowerCase();
                    /** @type {?} */
                    const label = (this.translationService.instant(bucket.display) || this.translationService.instant(bucket.label)).toLowerCase();
                    return this.queryBuilder.config.filterWithContains ? label.indexOf(pattern) !== -1 : label.startsWith(pattern);
                }
                return true;
            };
            result.push((/** @type {?} */ ({
                field: group,
                type: responseField.type,
                label: group,
                pageSize: this.DEFAULT_PAGE_SIZE,
                currentPageSize: this.DEFAULT_PAGE_SIZE,
                buckets: bucketList
            })));
        });
        return result;
    }
    /**
     * @private
     * @param {?} responseField
     * @return {?}
     */
    getResponseBuckets(responseField) {
        return ((responseField && responseField.buckets) || []).map((respBucket) => {
            respBucket['count'] = this.getCountValue(respBucket);
            return (/** @type {?} */ (Object.assign({}, respBucket, { checked: false, display: respBucket.display, label: respBucket.label })));
        });
    }
    /**
     * @private
     * @param {?} responseField
     * @param {?} configGroup
     * @return {?}
     */
    getResponseQueryBuckets(responseField, configGroup) {
        return (configGroup || []).map((query) => {
            /** @type {?} */
            const respBucket = ((responseField && responseField.buckets) || [])
                .find((bucket) => bucket.label === query.label);
            respBucket['count'] = this.getCountValue(respBucket);
            return (/** @type {?} */ (Object.assign({}, respBucket, { checked: false, display: respBucket.display, label: respBucket.label })));
        }).filter((bucket) => {
            /** @type {?} */
            let mincount = this.queryBuilder.config.facetQueries.mincount;
            if (mincount === undefined) {
                mincount = 1;
            }
            return bucket.count >= mincount;
        });
    }
    /**
     * @private
     * @param {?} bucket
     * @return {?}
     */
    getCountValue(bucket) {
        return (!!bucket && !!bucket.metrics && bucket.metrics[0] && bucket.metrics[0].value && bucket.metrics[0].value.count)
            || 0;
    }
}
SearchFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search-filter',
                template: "<mat-accordion multi=\"true\" displayMode=\"flat\">\n\n    <mat-expansion-panel\n        *ngFor=\"let category of queryBuilder.categories\"\n        [attr.data-automation-id]=\"'expansion-panel-'+category.name\"\n        [(expanded)]=\"category.expanded\">\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                {{ category.name | translate }}\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <adf-search-widget-container\n            [id]=\"category.id\"\n            [selector]=\"category.component.selector\"\n            [settings]=\"category.component.settings\">\n        </adf-search-widget-container>\n    </mat-expansion-panel>\n\n    <ng-container *ngIf=\"responseFacets\">\n        <mat-expansion-panel [attr.data-automation-id]=\"'expansion-panel-'+field.label\" *ngFor=\"let field of responseFacets\"\n                             [expanded]=\"shouldExpand(field)\">\n            <mat-expansion-panel-header>\n                <mat-panel-title>{{ field.label | translate }}</mat-panel-title>\n            </mat-expansion-panel-header>\n\n            <div class=\"adf-facet-result-filter\">\n                <mat-form-field>\n                    <input\n                        matInput\n                        placeholder=\"{{ 'SEARCH.FILTER.ACTIONS.FILTER-CATEGORY' | translate }}\"\n                        [attr.data-automation-id]=\"'facet-result-filter-'+field.label\"\n                        [(ngModel)]=\"field.buckets.filterText\">\n                    <button *ngIf=\"field.buckets.filterText\"\n                        mat-button matSuffix mat-icon-button\n                        (click)=\"field.buckets.filterText = ''\">\n                        <mat-icon>close</mat-icon>\n                    </button>\n                </mat-form-field>\n            </div>\n\n            <div class=\"adf-checklist\">\n                <mat-checkbox\n                    *ngFor=\"let bucket of field.buckets\"\n                    [checked]=\"bucket.checked\"\n                    [attr.data-automation-id]=\"'checkbox-'+field.label+'-'+(bucket.display || bucket.label)\"\n                    (change)=\"onToggleBucket($event, field, bucket)\">\n                    <div \n                        matTooltip=\"{{ bucket.display || bucket.label | translate }}\"\n                        matTooltipPosition=\"right\"\n                        class=\"adf-facet-label\">\n                        {{ bucket.display || bucket.label | translate }} \n                        <span *ngIf=\"bucket.count!==null\">(</span>\n                        {{ bucket.count }}\n                        <span *ngIf=\"bucket.count!==null\">)</span>\n                    </div>\n                </mat-checkbox>\n            </div>\n\n            <div class=\"adf-facet-buttons\" *ngIf=\"field.buckets.fitsPage\">\n                <button *ngIf=\"canResetSelectedBuckets(field)\"\n                    mat-button\n                    color=\"primary\"\n                    (click)=\"resetSelectedBuckets(field)\">\n                    {{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\n                </button>\n            </div>\n\n            <div class=\"adf-facet-buttons\" *ngIf=\"!field.buckets.fitsPage\">\n                <button mat-icon-button\n                    *ngIf=\"canResetSelectedBuckets(field)\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\"\n                    (click)=\"resetSelectedBuckets(field)\">\n                    <mat-icon>clear</mat-icon>\n                </button>\n                <button mat-icon-button\n                    *ngIf=\"field.buckets.canShowLessItems\"\n                    (click)=\"field.buckets.showLessItems()\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\">\n                    <mat-icon>keyboard_arrow_up</mat-icon>\n                </button>\n                <button mat-icon-button\n                    *ngIf=\"field.buckets.canShowMoreItems\"\n                    (click)=\"field.buckets.showMoreItems()\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\">\n                    <mat-icon>keyboard_arrow_down</mat-icon>\n                </button>\n            </div>\n        </mat-expansion-panel>\n    </ng-container>\n</mat-accordion>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-filter' },
                styles: [".adf-search-filter .adf-checklist{display:flex;flex-direction:column}.adf-search-filter .adf-checklist .mat-checkbox-label{text-overflow:ellipsis;overflow:hidden;width:100%}.adf-search-filter .adf-checklist .mat-checkbox-layout{width:100%}.adf-search-filter .adf-checklist .adf-facet-label{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.adf-search-filter .adf-checklist .mat-checkbox{margin:5px}.adf-search-filter .adf-checklist .mat-checkbox.mat-checkbox-checked .mat-checkbox-label{font-weight:700}.adf-search-filter .adf-facet-result-filter{display:flex;flex-direction:column}.adf-search-filter .adf-facet-result-filter>*{width:100%}.adf-search-filter .adf-facet-buttons{text-align:right}.adf-search-filter .adf-facet-buttons .mat-button{text-transform:uppercase}.adf-search-filter .adf-facet-buttons--topSpace{padding-top:15px}"]
            }] }
];
/** @nocollapse */
SearchFilterComponent.ctorParameters = () => [
    { type: SearchQueryBuilderService },
    { type: SearchService },
    { type: TranslationService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.DEFAULT_PAGE_SIZE;
    /** @type {?} */
    SearchFilterComponent.prototype.isAlive;
    /** @type {?} */
    SearchFilterComponent.prototype.responseFacets;
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.facetQueriesPageSize;
    /** @type {?} */
    SearchFilterComponent.prototype.facetQueriesLabel;
    /** @type {?} */
    SearchFilterComponent.prototype.facetQueriesExpanded;
    /** @type {?} */
    SearchFilterComponent.prototype.facetFieldsExpanded;
    /** @type {?} */
    SearchFilterComponent.prototype.selectedBuckets;
    /** @type {?} */
    SearchFilterComponent.prototype.queryBuilder;
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.searchService;
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.translationService;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Output, ViewEncapsulation } from '@angular/core';
import { TagService } from './services/tag.service';
/**
 * This component provide a list of all the tag inside the ECM
 */
export class TagListComponent {
    /**
     * Constructor
     * @param {?} tagService
     */
    constructor(tagService) {
        this.tagService = tagService;
        /**
         * Emitted when a tag is selected.
         */
        this.result = new EventEmitter();
        /**
         * Array of tags that are displayed
         */
        this.tagsEntries = [];
        /**
         * Number of items per iteration
         */
        this.size = 10;
        this.isLoading = false;
        this.isSizeMinimum = true;
        this.defaultPagination = {
            skipCount: 0,
            maxItems: this.size,
            hasMoreItems: false
        };
        this.pagination = this.defaultPagination;
        this.tagService.refresh.subscribe(() => {
            this.tagsEntries = [];
            this.refreshTag(this.defaultPagination);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        return this.refreshTag(this.defaultPagination);
    }
    /**
     * @param {?=} opts
     * @return {?}
     */
    refreshTag(opts) {
        this.tagService.getAllTheTags(opts).subscribe((tags) => {
            this.tagsEntries = this.tagsEntries.concat(tags.list.entries);
            this.pagination = tags.list.pagination;
            this.result.emit(this.tagsEntries);
            this.isLoading = false;
        });
    }
    /**
     * @return {?}
     */
    loadMoreTags() {
        if (this.pagination.hasMoreItems) {
            this.isLoading = true;
            this.isSizeMinimum = false;
            this.refreshTag({
                skipCount: this.pagination.skipCount + this.pagination.count,
                maxItems: this.size
            });
        }
    }
    /**
     * @return {?}
     */
    loadLessTags() {
        this.isSizeMinimum = false;
        this.tagsEntries = this.tagsEntries.slice(0, this.tagsEntries.length - this.pagination.count);
        this.pagination.skipCount = this.pagination.skipCount - this.pagination.count;
        this.pagination.hasMoreItems = true;
        if (this.tagsEntries.length <= this.size) {
            this.isSizeMinimum = true;
        }
    }
}
TagListComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-tag-list',
                template: "<mat-chip-list class=\"adf-tag-chips-list\">\n    <div class=\"adf-list-tag\" *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <mat-chip class=\"adf-primary-background-color\">\n            <span id=\"tag_name_{{idx}}\">{{currentEntry.entry.tag}}</span>\n        </mat-chip>\n    </div>\n</mat-chip-list>\n\n<div class=\"adf-tag-list-controls\">\n    <button\n        *ngIf=\"!isSizeMinimum\"\n        [disabled]=\"isLoading\"\n        data-automation-id=\"show-fewer-tags\"\n        mat-icon-button\n        (click)=\"loadLessTags()\">\n        <mat-icon>keyboard_arrow_up</mat-icon>\n    </button>\n    <button\n        *ngIf=\"pagination.hasMoreItems\"\n        [disabled]=\"isLoading\"\n        data-automation-id=\"show-more-tags\"\n        mat-icon-button\n        (click)=\"loadMoreTags()\">\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-tag-chips-list,.adf-tag-chips-list div{display:flex;flex-direction:column}.adf-list-tag{display:block;font-size:16px}.adf-tag-list-controls{margin-top:30px;display:flex;justify-content:center}"]
            }] }
];
/** @nocollapse */
TagListComponent.ctorParameters = () => [
    { type: TagService }
];
TagListComponent.propDecorators = {
    result: [{ type: Output }]
};
if (false) {
    /**
     * Emitted when a tag is selected.
     * @type {?}
     */
    TagListComponent.prototype.result;
    /**
     * Array of tags that are displayed
     * @type {?}
     */
    TagListComponent.prototype.tagsEntries;
    /**
     * Number of items per iteration
     * @type {?}
     */
    TagListComponent.prototype.size;
    /** @type {?} */
    TagListComponent.prototype.defaultPagination;
    /** @type {?} */
    TagListComponent.prototype.pagination;
    /** @type {?} */
    TagListComponent.prototype.isLoading;
    /** @type {?} */
    TagListComponent.prototype.isSizeMinimum;
    /**
     * @type {?}
     * @private
     */
    TagListComponent.prototype.tagService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsidGFnL3RhZy1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBVSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDOzs7O0FBWXBELE1BQU0sT0FBTyxnQkFBZ0I7Ozs7O0lBMEJ6QixZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZOzs7O1FBdEIxQyxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7OztRQUs1QixnQkFBVyxHQUFRLEVBQUUsQ0FBQzs7OztRQUt0QixTQUFJLEdBQVcsRUFBRSxDQUFDO1FBS2xCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbEIsa0JBQWEsR0FBRyxJQUFJLENBQUM7UUFRakIsSUFBSSxDQUFDLGlCQUFpQixHQUFHO1lBQ3JCLFNBQVMsRUFBRSxDQUFDO1lBQ1osUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ25CLFlBQVksRUFBRSxLQUFLO1NBQ3RCLENBQUM7UUFFRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUV6QyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ25DLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNKLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNuRCxDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxJQUFVO1FBQ2pCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFO1lBQ3hELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM5RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Ozs7SUFFRCxZQUFZO1FBQ1IsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRTtZQUM5QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztZQUN0QixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztZQUUzQixJQUFJLENBQUMsVUFBVSxDQUFDO2dCQUNaLFNBQVMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUs7Z0JBQzVELFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSTthQUN0QixDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7Ozs7SUFFRCxZQUFZO1FBQ1IsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5RixJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUM5RSxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFFcEMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3RDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1NBQzdCO0lBQ0wsQ0FBQzs7O1lBbEZKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsY0FBYztnQkFDeEIsMDRCQUF3QztnQkFFeEMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2FBQ3hDOzs7O1lBWFEsVUFBVTs7O3FCQWVkLE1BQU07Ozs7Ozs7SUFBUCxrQ0FDNEI7Ozs7O0lBSzVCLHVDQUFzQjs7Ozs7SUFLdEIsZ0NBQWtCOztJQUVsQiw2Q0FBbUM7O0lBQ25DLHNDQUE0Qjs7SUFFNUIscUNBQWtCOztJQUNsQix5Q0FBcUI7Ozs7O0lBTVQsc0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgT3V0cHV0LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGFnU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvdGFnLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGFnaW5hdGlvbk1vZGVsIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCBwcm92aWRlIGEgbGlzdCBvZiBhbGwgdGhlIHRhZyBpbnNpZGUgdGhlIEVDTVxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi10YWctbGlzdCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3RhZy1saXN0LmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi90YWctbGlzdC5jb21wb25lbnQuc2NzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgVGFnTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGEgdGFnIGlzIHNlbGVjdGVkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHJlc3VsdCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIC8qKlxuICAgICAqIEFycmF5IG9mIHRhZ3MgdGhhdCBhcmUgZGlzcGxheWVkXG4gICAgICovXG4gICAgdGFnc0VudHJpZXM6IGFueSA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIGl0ZW1zIHBlciBpdGVyYXRpb25cbiAgICAgKi9cbiAgICBzaXplOiBudW1iZXIgPSAxMDtcblxuICAgIGRlZmF1bHRQYWdpbmF0aW9uOiBQYWdpbmF0aW9uTW9kZWw7XG4gICAgcGFnaW5hdGlvbjogUGFnaW5hdGlvbk1vZGVsO1xuXG4gICAgaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgaXNTaXplTWluaW11bSA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB0YWdTZXJ2aWNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB0YWdTZXJ2aWNlOiBUYWdTZXJ2aWNlKSB7XG5cbiAgICAgICAgdGhpcy5kZWZhdWx0UGFnaW5hdGlvbiA9IHtcbiAgICAgICAgICAgIHNraXBDb3VudDogMCxcbiAgICAgICAgICAgIG1heEl0ZW1zOiB0aGlzLnNpemUsXG4gICAgICAgICAgICBoYXNNb3JlSXRlbXM6IGZhbHNlXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5wYWdpbmF0aW9uID0gdGhpcy5kZWZhdWx0UGFnaW5hdGlvbjtcblxuICAgICAgICB0aGlzLnRhZ1NlcnZpY2UucmVmcmVzaC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50YWdzRW50cmllcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVGFnKHRoaXMuZGVmYXVsdFBhZ2luYXRpb24pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmcmVzaFRhZyh0aGlzLmRlZmF1bHRQYWdpbmF0aW9uKTtcbiAgICB9XG5cbiAgICByZWZyZXNoVGFnKG9wdHM/OiBhbnkpIHtcbiAgICAgICAgdGhpcy50YWdTZXJ2aWNlLmdldEFsbFRoZVRhZ3Mob3B0cykuc3Vic2NyaWJlKCh0YWdzOiBhbnkpID0+IHtcbiAgICAgICAgICAgIHRoaXMudGFnc0VudHJpZXMgPSB0aGlzLnRhZ3NFbnRyaWVzLmNvbmNhdCh0YWdzLmxpc3QuZW50cmllcyk7XG4gICAgICAgICAgICB0aGlzLnBhZ2luYXRpb24gPSB0YWdzLmxpc3QucGFnaW5hdGlvbjtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0LmVtaXQodGhpcy50YWdzRW50cmllcyk7XG4gICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsb2FkTW9yZVRhZ3MoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhZ2luYXRpb24uaGFzTW9yZUl0ZW1zKSB7XG4gICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmlzU2l6ZU1pbmltdW0gPSBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVGFnKHtcbiAgICAgICAgICAgICAgICBza2lwQ291bnQ6IHRoaXMucGFnaW5hdGlvbi5za2lwQ291bnQgKyB0aGlzLnBhZ2luYXRpb24uY291bnQsXG4gICAgICAgICAgICAgICAgbWF4SXRlbXM6IHRoaXMuc2l6ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb2FkTGVzc1RhZ3MoKSB7XG4gICAgICAgIHRoaXMuaXNTaXplTWluaW11bSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRhZ3NFbnRyaWVzID0gdGhpcy50YWdzRW50cmllcy5zbGljZSgwLCB0aGlzLnRhZ3NFbnRyaWVzLmxlbmd0aCAtIHRoaXMucGFnaW5hdGlvbi5jb3VudCk7XG4gICAgICAgIHRoaXMucGFnaW5hdGlvbi5za2lwQ291bnQgPSB0aGlzLnBhZ2luYXRpb24uc2tpcENvdW50IC0gdGhpcy5wYWdpbmF0aW9uLmNvdW50O1xuICAgICAgICB0aGlzLnBhZ2luYXRpb24uaGFzTW9yZUl0ZW1zID0gdHJ1ZTtcblxuICAgICAgICBpZiAodGhpcy50YWdzRW50cmllcy5sZW5ndGggPD0gdGhpcy5zaXplKSB7XG4gICAgICAgICAgICB0aGlzLmlzU2l6ZU1pbmltdW0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
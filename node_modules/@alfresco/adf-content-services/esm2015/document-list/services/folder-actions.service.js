/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentService, TranslationService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Subject, throwError } from 'rxjs';
import { PermissionModel } from '../models/permissions.model';
import { DocumentListService } from './document-list.service';
import { NodeActionsService } from './node-actions.service';
import * as i0 from "@angular/core";
import * as i1 from "./node-actions.service";
import * as i2 from "./document-list.service";
import * as i3 from "@alfresco/adf-core";
export class FolderActionsService {
    /**
     * @param {?} nodeActionsService
     * @param {?} documentListService
     * @param {?} contentService
     * @param {?} translation
     */
    constructor(nodeActionsService, documentListService, contentService, translation) {
        this.nodeActionsService = nodeActionsService;
        this.documentListService = documentListService;
        this.contentService = contentService;
        this.translation = translation;
        this.permissionEvent = new Subject();
        this.error = new Subject();
        this.success = new Subject();
        this.handlers = {};
        this.setupActionHandlers();
    }
    /**
     * Gets the handler function for an action.
     * @param {?} key Identifier for the action
     * @return {?} The handler function
     */
    getHandler(key) {
        if (key) {
            /** @type {?} */
            let lKey = key.toLowerCase();
            return this.handlers[lKey] || null;
        }
        return null;
    }
    /**
     * Sets a new handler function for an action.
     * @param {?} key Identifier for the action
     * @param {?} handler The new handler function
     * @return {?} True if the key was a valid action identifier, false otherwise
     */
    setHandler(key, handler) {
        if (key) {
            /** @type {?} */
            let lKey = key.toLowerCase();
            this.handlers[lKey] = handler;
            return true;
        }
        return false;
    }
    /**
     * Checks if an action is available for a particular item.
     * @param {?} nodeEntry Item to check
     * @return {?} True if the action is available, false otherwise
     */
    canExecuteAction(nodeEntry) {
        return this.documentListService && nodeEntry && nodeEntry.entry.isFolder === true;
    }
    /**
     * @private
     * @return {?}
     */
    setupActionHandlers() {
        this.handlers['copy'] = this.copyNode.bind(this);
        this.handlers['move'] = this.moveNode.bind(this);
        this.handlers['delete'] = this.deleteNode.bind(this);
        this.handlers['download'] = this.downloadNode.bind(this);
    }
    /**
     * @private
     * @param {?} nodeEntry
     * @return {?}
     */
    downloadNode(nodeEntry) {
        this.nodeActionsService.downloadNode(nodeEntry);
    }
    /**
     * @private
     * @param {?} nodeEntry
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    copyNode(nodeEntry, target, permission) {
        /** @type {?} */
        const actionObservable = this.nodeActionsService.copyFolder(nodeEntry.entry, permission);
        this.prepareHandlers(actionObservable, 'folder', 'copy', target, permission);
        return actionObservable;
    }
    /**
     * @private
     * @param {?} nodeEntry
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    moveNode(nodeEntry, target, permission) {
        /** @type {?} */
        const actionObservable = this.nodeActionsService.moveFolder(nodeEntry.entry, permission);
        this.prepareHandlers(actionObservable, 'folder', 'move', target, permission);
        return actionObservable;
    }
    /**
     * @private
     * @param {?} actionObservable
     * @param {?} type
     * @param {?} action
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    prepareHandlers(actionObservable, type, action, target, permission) {
        actionObservable.subscribe((fileOperationMessage) => {
            if (target && typeof target.reload === 'function') {
                target.reload();
            }
            this.success.next(fileOperationMessage);
        }, this.error.next.bind(this.error));
    }
    /**
     * @private
     * @param {?} node
     * @param {?=} target
     * @param {?=} permission
     * @return {?}
     */
    deleteNode(node, target, permission) {
        /** @type {?} */
        let handlerObservable;
        if (this.canExecuteAction(node)) {
            if (this.contentService.hasAllowableOperations(node.entry, permission)) {
                handlerObservable = this.documentListService.deleteNode(node.entry.id);
                handlerObservable.subscribe(() => {
                    if (target && typeof target.reload === 'function') {
                        target.reload();
                    }
                    /** @type {?} */
                    let message = this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });
                    this.success.next(message);
                }, () => {
                    /** @type {?} */
                    let message = this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });
                    this.error.next(message);
                });
                return handlerObservable;
            }
            else {
                this.permissionEvent.next(new PermissionModel({ type: 'folder', action: 'delete', permission: permission }));
                return throwError(new Error('No permission to delete'));
            }
        }
    }
}
FolderActionsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FolderActionsService.ctorParameters = () => [
    { type: NodeActionsService },
    { type: DocumentListService },
    { type: ContentService },
    { type: TranslationService }
];
/** @nocollapse */ FolderActionsService.ngInjectableDef = i0.defineInjectable({ factory: function FolderActionsService_Factory() { return new FolderActionsService(i0.inject(i1.NodeActionsService), i0.inject(i2.DocumentListService), i0.inject(i3.ContentService), i0.inject(i3.TranslationService)); }, token: FolderActionsService, providedIn: "root" });
if (false) {
    /** @type {?} */
    FolderActionsService.prototype.permissionEvent;
    /** @type {?} */
    FolderActionsService.prototype.error;
    /** @type {?} */
    FolderActionsService.prototype.success;
    /**
     * @type {?}
     * @private
     */
    FolderActionsService.prototype.handlers;
    /**
     * @type {?}
     * @private
     */
    FolderActionsService.prototype.nodeActionsService;
    /**
     * @type {?}
     * @private
     */
    FolderActionsService.prototype.documentListService;
    /**
     * @type {?}
     * @private
     */
    FolderActionsService.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    FolderActionsService.prototype.translation;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9sZGVyLWFjdGlvbnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImRvY3VtZW50LWxpc3Qvc2VydmljZXMvZm9sZGVyLWFjdGlvbnMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQWMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV2RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7Ozs7O0FBSzVELE1BQU0sT0FBTyxvQkFBb0I7Ozs7Ozs7SUFRN0IsWUFBb0Isa0JBQXNDLEVBQ3RDLG1CQUF3QyxFQUN4QyxjQUE4QixFQUM5QixXQUErQjtRQUgvQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3RDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLGdCQUFXLEdBQVgsV0FBVyxDQUFvQjtRQVRuRCxvQkFBZSxHQUE2QixJQUFJLE9BQU8sRUFBbUIsQ0FBQztRQUMzRSxVQUFLLEdBQW1CLElBQUksT0FBTyxFQUFTLENBQUM7UUFDN0MsWUFBTyxHQUFvQixJQUFJLE9BQU8sRUFBVSxDQUFDO1FBRXpDLGFBQVEsR0FBNEMsRUFBRSxDQUFDO1FBTTNELElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQy9CLENBQUM7Ozs7OztJQU9ELFVBQVUsQ0FBQyxH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RSxRQUFRLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0csT0FBTyxVQUFVLENBQUMsSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDO2FBQzNEO1NBQ0o7SUFDTCxDQUFDOzs7WUFsSEosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7O1lBSlEsa0JBQWtCO1lBRGxCLG1CQUFtQjtZQU5uQixjQUFjO1lBQUUsa0JBQWtCOzs7OztJQWN2QywrQ0FBMkU7O0lBQzNFLHFDQUE2Qzs7SUFDN0MsdUNBQWlEOzs7OztJQUVqRCx3Q0FBK0Q7Ozs7O0lBRW5ELGtEQUE4Qzs7Ozs7SUFDOUMsbURBQWdEOzs7OztJQUNoRCw4Q0FBc0M7Ozs7O0lBQ3RDLDJDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbnRlbnRTZXJ2aWNlLCBUcmFuc2xhdGlvblNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZUVudHJ5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0LCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDb250ZW50QWN0aW9uSGFuZGxlciB9IGZyb20gJy4uL21vZGVscy9jb250ZW50LWFjdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBQZXJtaXNzaW9uTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvcGVybWlzc2lvbnMubW9kZWwnO1xuaW1wb3J0IHsgRG9jdW1lbnRMaXN0U2VydmljZSB9IGZyb20gJy4vZG9jdW1lbnQtbGlzdC5zZXJ2aWNlJztcbmltcG9ydCB7IE5vZGVBY3Rpb25zU2VydmljZSB9IGZyb20gJy4vbm9kZS1hY3Rpb25zLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEZvbGRlckFjdGlvbnNTZXJ2aWNlIHtcblxuICAgIHBlcm1pc3Npb25FdmVudDogU3ViamVjdDxQZXJtaXNzaW9uTW9kZWw+ID0gbmV3IFN1YmplY3Q8UGVybWlzc2lvbk1vZGVsPigpO1xuICAgIGVycm9yOiBTdWJqZWN0PEVycm9yPiA9IG5ldyBTdWJqZWN0PEVycm9yPigpO1xuICAgIHN1Y2Nlc3M6IFN1YmplY3Q8c3RyaW5nPiA9IG5ldyBTdWJqZWN0PHN0cmluZz4oKTtcblxuICAgIHByaXZhdGUgaGFuZGxlcnM6IHsgW2lkOiBzdHJpbmddOiBDb250ZW50QWN0aW9uSGFuZGxlcjsgfSA9IHt9O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBub2RlQWN0aW9uc1NlcnZpY2U6IE5vZGVBY3Rpb25zU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGRvY3VtZW50TGlzdFNlcnZpY2U6IERvY3VtZW50TGlzdFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjb250ZW50U2VydmljZTogQ29udGVudFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB0cmFuc2xhdGlvbjogVHJhbnNsYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMuc2V0dXBBY3Rpb25IYW5kbGVycygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGhhbmRsZXIgZnVuY3Rpb24gZm9yIGFuIGFjdGlvbi5cbiAgICAgKiBAcGFyYW0ga2V5IElkZW50aWZpZXIgZm9yIHRoZSBhY3Rpb25cbiAgICAgKiBAcmV0dXJucyBUaGUgaGFuZGxlciBmdW5jdGlvblxuICAgICAqL1xuICAgIGdldEhhbmRsZXIoa2V5OiBzdHJpbmcpOiBDb250ZW50QWN0aW9uSGFuZGxlciB7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGxldCBsS2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVyc1tsS2V5XSB8fCBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBuZXcgaGFuZGxlciBmdW5jdGlvbiBmb3IgYW4gYWN0aW9uLlxuICAgICAqIEBwYXJhbSBrZXkgSWRlbnRpZmllciBmb3IgdGhlIGFjdGlvblxuICAgICAqIEBwYXJhbSBoYW5kbGVyIFRoZSBuZXcgaGFuZGxlciBmdW5jdGlvblxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGtleSB3YXMgYSB2YWxpZCBhY3Rpb24gaWRlbnRpZmllciwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgc2V0SGFuZGxlcihrZXk6IHN0cmluZywgaGFuZGxlcjogQ29udGVudEFjdGlvbkhhbmRsZXIpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgbGV0IGxLZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlcnNbbEtleV0gPSBoYW5kbGVyO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhbiBhY3Rpb24gaXMgYXZhaWxhYmxlIGZvciBhIHBhcnRpY3VsYXIgaXRlbS5cbiAgICAgKiBAcGFyYW0gbm9kZUVudHJ5IEl0ZW0gdG8gY2hlY2tcbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBhY3Rpb24gaXMgYXZhaWxhYmxlLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBjYW5FeGVjdXRlQWN0aW9uKG5vZGVFbnRyeTogTm9kZUVudHJ5KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50TGlzdFNlcnZpY2UgJiYgbm9kZUVudHJ5ICYmIG5vZGVFbnRyeS5lbnRyeS5pc0ZvbGRlciA9PT0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldHVwQWN0aW9uSGFuZGxlcnMoKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlcnNbJ2NvcHknXSA9IHRoaXMuY29weU5vZGUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVyc1snbW92ZSddID0gdGhpcy5tb3ZlTm9kZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZXJzWydkZWxldGUnXSA9IHRoaXMuZGVsZXRlTm9kZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZXJzWydkb3dubG9hZCddID0gdGhpcy5kb3dubG9hZE5vZGUuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRvd25sb2FkTm9kZShub2RlRW50cnk6IE5vZGVFbnRyeSkge1xuICAgICAgICB0aGlzLm5vZGVBY3Rpb25zU2VydmljZS5kb3dubG9hZE5vZGUobm9kZUVudHJ5KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNvcHlOb2RlKG5vZGVFbnRyeTogTm9kZUVudHJ5LCB0YXJnZXQ/OiBhbnksIHBlcm1pc3Npb24/OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgYWN0aW9uT2JzZXJ2YWJsZSA9IHRoaXMubm9kZUFjdGlvbnNTZXJ2aWNlLmNvcHlGb2xkZXIobm9kZUVudHJ5LmVudHJ5LCBwZXJtaXNzaW9uKTtcbiAgICAgICAgdGhpcy5wcmVwYXJlSGFuZGxlcnMoYWN0aW9uT2JzZXJ2YWJsZSwgJ2ZvbGRlcicsICdjb3B5JywgdGFyZ2V0LCBwZXJtaXNzaW9uKTtcbiAgICAgICAgcmV0dXJuIGFjdGlvbk9ic2VydmFibGU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtb3ZlTm9kZShub2RlRW50cnk6IE5vZGVFbnRyeSwgdGFyZ2V0PzogYW55LCBwZXJtaXNzaW9uPzogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGFjdGlvbk9ic2VydmFibGUgPSB0aGlzLm5vZGVBY3Rpb25zU2VydmljZS5tb3ZlRm9sZGVyKG5vZGVFbnRyeS5lbnRyeSwgcGVybWlzc2lvbik7XG4gICAgICAgIHRoaXMucHJlcGFyZUhhbmRsZXJzKGFjdGlvbk9ic2VydmFibGUsICdmb2xkZXInLCAnbW92ZScsIHRhcmdldCwgcGVybWlzc2lvbik7XG4gICAgICAgIHJldHVybiBhY3Rpb25PYnNlcnZhYmxlO1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJlcGFyZUhhbmRsZXJzKGFjdGlvbk9ic2VydmFibGUsIHR5cGU6IHN0cmluZywgYWN0aW9uOiBzdHJpbmcsIHRhcmdldD86IGFueSwgcGVybWlzc2lvbj86IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBhY3Rpb25PYnNlcnZhYmxlLnN1YnNjcmliZShcbiAgICAgICAgICAgIChmaWxlT3BlcmF0aW9uTWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgdHlwZW9mIHRhcmdldC5yZWxvYWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnN1Y2Nlc3MubmV4dChmaWxlT3BlcmF0aW9uTWVzc2FnZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhpcy5lcnJvci5uZXh0LmJpbmQodGhpcy5lcnJvcilcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRlbGV0ZU5vZGUobm9kZTogTm9kZUVudHJ5LCB0YXJnZXQ/OiBhbnksIHBlcm1pc3Npb24/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgICAgICBsZXQgaGFuZGxlck9ic2VydmFibGU6IE9ic2VydmFibGU8YW55PjtcblxuICAgICAgICBpZiAodGhpcy5jYW5FeGVjdXRlQWN0aW9uKG5vZGUpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZW50U2VydmljZS5oYXNBbGxvd2FibGVPcGVyYXRpb25zKG5vZGUuZW50cnksIHBlcm1pc3Npb24pKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlck9ic2VydmFibGUgPSB0aGlzLmRvY3VtZW50TGlzdFNlcnZpY2UuZGVsZXRlTm9kZShub2RlLmVudHJ5LmlkKTtcbiAgICAgICAgICAgICAgICBoYW5kbGVyT2JzZXJ2YWJsZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICYmIHR5cGVvZiB0YXJnZXQucmVsb2FkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9IHRoaXMudHJhbnNsYXRpb24uaW5zdGFudCgnQ09SRS5ERUxFVEVfTk9ERS5TSU5HVUxBUicsIHsgbmFtZTogbm9kZS5lbnRyeS5uYW1lIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Y2Nlc3MubmV4dChtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID0gdGhpcy50cmFuc2xhdGlvbi5pbnN0YW50KCdDT1JFLkRFTEVURV9OT0RFLkVSUk9SX1NJTkdVTEFSJywgeyBuYW1lOiBub2RlLmVudHJ5Lm5hbWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IubmV4dChtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyT2JzZXJ2YWJsZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wZXJtaXNzaW9uRXZlbnQubmV4dChuZXcgUGVybWlzc2lvbk1vZGVsKHt0eXBlOiAnZm9sZGVyJywgYWN0aW9uOiAnZGVsZXRlJywgcGVybWlzc2lvbjogcGVybWlzc2lvbn0pKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihuZXcgRXJyb3IoJ05vIHBlcm1pc3Npb24gdG8gZGVsZXRlJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl19
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, AuthenticationService, ContentService, LogService, ThumbnailService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { from, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class DocumentListService {
    /**
     * @param {?} authService
     * @param {?} contentService
     * @param {?} apiService
     * @param {?} logService
     * @param {?} thumbnailService
     */
    constructor(authService, contentService, apiService, logService, thumbnailService) {
        this.contentService = contentService;
        this.apiService = apiService;
        this.logService = logService;
        this.thumbnailService = thumbnailService;
    }
    /**
     * Deletes a node.
     * @param {?} nodeId ID of the node to delete
     * @return {?} Empty response when the operation is complete
     */
    deleteNode(nodeId) {
        return from(this.apiService.getInstance().nodes.deleteNode(nodeId));
    }
    /**
     * Copy a node to destination node
     *
     * @param {?} nodeId The id of the node to be copied
     * @param {?} targetParentId The id of the folder where the node will be copied
     * @return {?} NodeEntry for the copied node
     */
    copyNode(nodeId, targetParentId) {
        return from(this.apiService.getInstance().nodes.copyNode(nodeId, { targetParentId })).pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Moves a node to destination node.
     *
     * @param {?} nodeId The id of the node to be moved
     * @param {?} targetParentId The id of the folder where the node will be moved
     * @return {?} NodeEntry for the moved node
     */
    moveNode(nodeId, targetParentId) {
        return from(this.apiService.getInstance().nodes.moveNode(nodeId, { targetParentId })).pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Gets the folder node with the specified relative name path below the root node.
     * @param {?} folder Path to folder.
     * @param {?=} opts Options.
     * @param {?=} includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @return {?} Details of the folder
     */
    getFolder(folder, opts, includeFields = []) {
        /** @type {?} */
        let rootNodeId = DocumentListService.ROOT_ID;
        if (opts && opts.rootFolderId) {
            rootNodeId = opts.rootFolderId;
        }
        /** @type {?} */
        let includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]
            .filter((element, index, array) => index === array.indexOf(element));
        /** @type {?} */
        let params = {
            includeSource: true,
            include: includeFieldsRequest
        };
        if (folder) {
            params.relativePath = folder;
        }
        if (opts) {
            if (opts.maxItems) {
                params.maxItems = opts.maxItems;
            }
            if (opts.skipCount) {
                params.skipCount = opts.skipCount;
            }
            if (opts.where) {
                params.where = opts.where;
            }
        }
        return from(this.apiService.getInstance().nodes.getNodeChildren(rootNodeId, params)).pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Gets a node via its node ID.
     * @param {?} nodeId ID of the target node
     * @param {?=} includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @return {?} Details of the folder
     */
    getNode(nodeId, includeFields = []) {
        /** @type {?} */
        let includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', ...includeFields]
            .filter((element, index, array) => index === array.indexOf(element));
        /** @type {?} */
        let opts = {
            includeSource: true,
            include: includeFieldsRequest
        };
        return this.contentService.getNode(nodeId, opts);
    }
    /**
     * Gets a folder node via its node ID.
     * @param {?} nodeId ID of the folder node
     * @param {?=} includeFields Extra information to include (available options are "aspectNames", "isLink" and "association")
     * @return {?} Details of the folder
     */
    getFolderNode(nodeId, includeFields = []) {
        /** @type {?} */
        let includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]
            .filter((element, index, array) => index === array.indexOf(element));
        /** @type {?} */
        let opts = {
            includeSource: true,
            include: includeFieldsRequest
        };
        return from(this.apiService.getInstance().nodes.getNode(nodeId, opts)).pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Get thumbnail URL for the given document node.
     * @param {?} node Node to get URL for.
     * @return {?} Thumbnail URL string
     */
    getDocumentThumbnailUrl(node) {
        return this.thumbnailService.getDocumentThumbnailUrl(node);
    }
    /**
     * Gets the icon that represents a MIME type.
     * @param {?} mimeType MIME type to get the icon for
     * @return {?} Path to the icon file
     */
    getMimeTypeIcon(mimeType) {
        return this.thumbnailService.getMimeTypeIcon(mimeType);
    }
    /**
     * Gets a default icon for MIME types with no specific icon.
     * @return {?} Path to the icon file
     */
    getDefaultMimeTypeIcon() {
        return this.thumbnailService.getDefaultMimeTypeIcon();
    }
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
DocumentListService.ROOT_ID = '-root-';
DocumentListService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DocumentListService.ctorParameters = () => [
    { type: AuthenticationService },
    { type: ContentService },
    { type: AlfrescoApiService },
    { type: LogService },
    { type: ThumbnailService }
];
/** @nocollapse */ DocumentListService.ngInjectableDef = i0.defineInjectable({ factory: function DocumentListService_Factory() { return new DocumentListService(i0.inject(i1.AuthenticationService), i0.inject(i1.ContentService), i0.inject(i1.AlfrescoApiService), i0.inject(i1.LogService), i0.inject(i1.ThumbnailService)); }, token: DocumentListService, providedIn: "root" });
if (false) {
    /** @type {?} */
    DocumentListService.ROOT_ID;
    /**
     * @type {?}
     * @private
     */
    DocumentListService.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    DocumentListService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    DocumentListService.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    DocumentListService.prototype.thumbnailService;
}
//# sourceMappingURL=data:application/json;base64,
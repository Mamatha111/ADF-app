/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataSorting } from '@alfresco/adf-core';
import { ShareDataRow } from './share-data-row.model';
export class ShareDataTableAdapter {
    /**
     * @param {?} documentListService
     * @param {?} thumbnailService
     * @param {?} contentService
     * @param {?=} schema
     * @param {?=} sorting
     * @param {?=} sortingMode
     */
    constructor(documentListService, thumbnailService, contentService, schema = [], sorting, sortingMode = 'client') {
        this.documentListService = documentListService;
        this.thumbnailService = thumbnailService;
        this.contentService = contentService;
        this.ERR_ROW_NOT_FOUND = 'Row not found';
        this.ERR_COL_NOT_FOUND = 'Column not found';
        this.thumbnails = false;
        this.rows = [];
        this.columns = schema || [];
        this.sorting = sorting;
        this.sortingMode = sortingMode;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set sortingMode(value) {
        /** @type {?} */
        let newValue = (value || 'client').toLowerCase();
        if (newValue !== 'client' && newValue !== 'server') {
            newValue = 'client';
        }
        this._sortingMode = newValue;
    }
    /**
     * @return {?}
     */
    get sortingMode() {
        return this._sortingMode;
    }
    /**
     * @return {?}
     */
    getRows() {
        return this.rows;
    }
    // TODO: disable this api
    /**
     * @param {?} rows
     * @return {?}
     */
    setRows(rows) {
        this.rows = rows || [];
        this.sort();
    }
    /**
     * @return {?}
     */
    getColumns() {
        return this.columns;
    }
    /**
     * @param {?} columns
     * @return {?}
     */
    setColumns(columns) {
        this.columns = columns || [];
    }
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    getValue(row, col) {
        if (!row) {
            throw new Error(this.ERR_ROW_NOT_FOUND);
        }
        if (!col) {
            throw new Error(this.ERR_COL_NOT_FOUND);
        }
        /** @type {?} */
        let dataRow = (/** @type {?} */ (row));
        /** @type {?} */
        let value = row.getValue(col.key);
        if (dataRow.cache[col.key] !== undefined) {
            return dataRow.cache[col.key];
        }
        if (col.key === '$thumbnail') {
            if (this.imageResolver) {
                /** @type {?} */
                let resolved = this.imageResolver(row, col);
                if (resolved) {
                    return resolved;
                }
            }
            /** @type {?} */
            const node = ((/** @type {?} */ (row))).node;
            if (node.entry.isFolder) {
                return this.getFolderIcon(node);
            }
            if (node.entry.isFile) {
                if (this.thumbnails) {
                    return this.documentListService.getDocumentThumbnailUrl(node);
                }
            }
            if (node.entry.content) {
                /** @type {?} */
                const mimeType = node.entry.content.mimeType;
                if (mimeType) {
                    return this.documentListService.getMimeTypeIcon(mimeType);
                }
            }
            return this.documentListService.getDefaultMimeTypeIcon();
        }
        if (col.type === 'image') {
            if (this.imageResolver) {
                /** @type {?} */
                let resolved = this.imageResolver(row, col);
                if (resolved) {
                    return resolved;
                }
            }
        }
        return dataRow.cacheValue(col.key, value);
    }
    /**
     * @return {?}
     */
    getSorting() {
        return this.sorting;
    }
    /**
     * @param {?} sorting
     * @return {?}
     */
    setSorting(sorting) {
        this.sorting = sorting;
        this.sortRows(this.rows, this.sorting);
    }
    /**
     * @param {?=} key
     * @param {?=} direction
     * @return {?}
     */
    sort(key, direction) {
        /** @type {?} */
        let sorting = this.sorting || new DataSorting();
        if (key) {
            sorting.key = key;
            sorting.direction = direction || 'asc';
        }
        this.setSorting(sorting);
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    setFilter(filter) {
        this.filter = filter;
    }
    /**
     * @param {?} resolver
     * @return {?}
     */
    setImageResolver(resolver) {
        this.imageResolver = resolver;
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    getFolderIcon(node) {
        if (this.isSmartFolder(node)) {
            return this.documentListService.getMimeTypeIcon('smartFolder');
        }
        else if (this.isRuleFolder(node)) {
            return this.documentListService.getMimeTypeIcon('ruleFolder');
        }
        else if (this.isALinkFolder(node)) {
            return this.documentListService.getMimeTypeIcon('linkFolder');
        }
        else {
            return this.documentListService.getMimeTypeIcon('folder');
        }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isSmartFolder(node) {
        /** @type {?} */
        let nodeAspects = this.getNodeAspectNames(node);
        return nodeAspects.indexOf('smf:customConfigSmartFolder') > -1 ||
            (nodeAspects.indexOf('smf:systemConfigSmartFolder') > -1);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isRuleFolder(node) {
        /** @type {?} */
        let nodeAspects = this.getNodeAspectNames(node);
        return nodeAspects.indexOf('rule:rules') > -1 ||
            (nodeAspects.indexOf('rule:rules') > -1);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isALinkFolder(node) {
        /** @type {?} */
        const nodeType = node.entry ? node.entry.nodeType : node.nodeType;
        return nodeType === 'app:folderlink';
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    getNodeAspectNames(node) {
        return node.entry && node.entry.aspectNames ? node.entry.aspectNames : node.aspectNames ? node.aspectNames : [];
    }
    /**
     * @private
     * @param {?} rows
     * @param {?} sorting
     * @return {?}
     */
    sortRows(rows, sorting) {
        if (this.sortingMode === 'server') {
            return;
        }
        /** @type {?} */
        const options = {};
        if (sorting && sorting.key && rows && rows.length > 0) {
            if (sorting.key.includes('sizeInBytes') || sorting.key === 'name') {
                options.numeric = true;
            }
            rows.sort((a, b) => {
                if (a.node.entry.isFolder !== b.node.entry.isFolder) {
                    return a.node.entry.isFolder ? -1 : 1;
                }
                /** @type {?} */
                let left = a.getValue(sorting.key);
                if (left) {
                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();
                }
                else {
                    left = '';
                }
                /** @type {?} */
                let right = b.getValue(sorting.key);
                if (right) {
                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();
                }
                else {
                    right = '';
                }
                return sorting.direction === 'asc'
                    ? left.localeCompare(right, undefined, options)
                    : right.localeCompare(left, undefined, options);
            });
        }
    }
    /**
     * @param {?} nodePaging
     * @param {?=} merge
     * @return {?}
     */
    loadPage(nodePaging, merge = false) {
        /** @type {?} */
        let shareDataRows = [];
        if (nodePaging && nodePaging.list) {
            /** @type {?} */
            let nodeEntries = nodePaging.list.entries;
            if (nodeEntries && nodeEntries.length > 0) {
                shareDataRows = nodeEntries.map((item) => new ShareDataRow(item, this.contentService, this.permissionsStyle, this.thumbnailService));
                if (this.filter) {
                    shareDataRows = shareDataRows.filter(this.filter);
                }
                if (this.sortingMode !== 'server') {
                    // Sort by first sortable or just first column
                    if (this.columns && this.columns.length > 0) {
                        /** @type {?} */
                        let sorting = this.getSorting();
                        if (sorting) {
                            this.sortRows(shareDataRows, sorting);
                        }
                        else {
                            /** @type {?} */
                            let sortable = this.columns.filter((c) => c.sortable);
                            if (sortable.length > 0) {
                                this.sort(sortable[0].key, 'asc');
                            }
                            else {
                                this.sort(this.columns[0].key, 'asc');
                            }
                        }
                    }
                }
            }
        }
        if (merge) {
            /** @type {?} */
            let listPrunedDuplicate = shareDataRows.filter((elementToFilter) => {
                /** @type {?} */
                let isPresent = this.rows.find((currentRow) => {
                    return currentRow.obj.entry.id === elementToFilter.obj.entry.id;
                });
                return !isPresent;
            });
            this.rows = this.rows.concat(listPrunedDuplicate);
        }
        else {
            this.rows = shareDataRows;
        }
    }
}
if (false) {
    /** @type {?} */
    ShareDataTableAdapter.prototype.ERR_ROW_NOT_FOUND;
    /** @type {?} */
    ShareDataTableAdapter.prototype.ERR_COL_NOT_FOUND;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype._sortingMode;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype.sorting;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype.rows;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype.columns;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype.filter;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype.imageResolver;
    /** @type {?} */
    ShareDataTableAdapter.prototype.thumbnails;
    /** @type {?} */
    ShareDataTableAdapter.prototype.permissionsStyle;
    /** @type {?} */
    ShareDataTableAdapter.prototype.selectedRow;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype.documentListService;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype.thumbnailService;
    /**
     * @type {?}
     * @private
     */
    ShareDataTableAdapter.prototype.contentService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtZGF0YXRhYmxlLWFkYXB0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJkb2N1bWVudC1saXN0L2RhdGEvc2hhcmUtZGF0YXRhYmxlLWFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUdILFdBQVcsRUFJZCxNQUFNLG9CQUFvQixDQUFDO0FBSTVCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUl0RCxNQUFNLE9BQU8scUJBQXFCOzs7Ozs7Ozs7SUE2QjlCLFlBQW9CLG1CQUF3QyxFQUN4QyxnQkFBa0MsRUFDbEMsY0FBOEIsRUFDdEMsU0FBdUIsRUFBRSxFQUN6QixPQUFxQixFQUNyQixjQUFzQixRQUFRO1FBTHRCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUE3QmxELHNCQUFpQixHQUFXLGVBQWUsQ0FBQztRQUM1QyxzQkFBaUIsR0FBVyxrQkFBa0IsQ0FBQztRQVUvQyxlQUFVLEdBQVksS0FBSyxDQUFDO1FBc0J4QixJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUNuQyxDQUFDOzs7OztJQXRCRCxJQUFJLFdBQVcsQ0FBQyxLQUFhOztZQUNyQixRQUFRLEdBQUcsQ0FBQyxLQUFLLElBQUksUUFBUSxDQUFDLENBQUMsV0FBVyxFQUFFO1FBQ2hELElBQUksUUFBUSxLQUFLLFFBQVEsSUFBSSxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ2hELFFB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Q0FBQyxDQUFDO1lBRUYsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ3JEO2FBQU07WUFDSCxJQUFJLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztTQUM3QjtJQUNMLENBQUM7Q0FFSjs7O0lBblFHLGtEQUE0Qzs7SUFDNUMsa0RBQStDOzs7OztJQUUvQyw2Q0FBNkI7Ozs7O0lBQzdCLHdDQUE2Qjs7Ozs7SUFDN0IscUNBQXdCOzs7OztJQUN4Qix3Q0FBOEI7Ozs7O0lBRTlCLHVDQUEwQjs7Ozs7SUFDMUIsOENBQTJCOztJQUUzQiwyQ0FBNEI7O0lBQzVCLGlEQUF5Qzs7SUFDekMsNENBQXFCOzs7OztJQWNULG9EQUFnRDs7Ozs7SUFDaEQsaURBQTBDOzs7OztJQUMxQywrQ0FBc0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICAgIERhdGFDb2x1bW4sXG4gICAgRGF0YVJvdyxcbiAgICBEYXRhU29ydGluZyxcbiAgICBEYXRhVGFibGVBZGFwdGVyLFxuICAgIFRodW1ibmFpbFNlcnZpY2UsXG4gICAgQ29udGVudFNlcnZpY2Vcbn0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IE5vZGVQYWdpbmcgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IFBlcm1pc3Npb25TdHlsZU1vZGVsIH0gZnJvbSAnLi8uLi9tb2RlbHMvcGVybWlzc2lvbnMtc3R5bGUubW9kZWwnO1xuaW1wb3J0IHsgRG9jdW1lbnRMaXN0U2VydmljZSB9IGZyb20gJy4vLi4vc2VydmljZXMvZG9jdW1lbnQtbGlzdC5zZXJ2aWNlJztcbmltcG9ydCB7IFNoYXJlRGF0YVJvdyB9IGZyb20gJy4vc2hhcmUtZGF0YS1yb3cubW9kZWwnO1xuaW1wb3J0IHsgTm9kZUVudHJ5IH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaS9zcmMvYXBpL2NvbnRlbnQtcmVzdC1hcGkvbW9kZWwvbm9kZUVudHJ5JztcbmltcG9ydCB7IFJvd0ZpbHRlciB9IGZyb20gJy4vcm93LWZpbHRlci5tb2RlbCc7XG5cbmV4cG9ydCBjbGFzcyBTaGFyZURhdGFUYWJsZUFkYXB0ZXIgaW1wbGVtZW50cyBEYXRhVGFibGVBZGFwdGVyIHtcblxuICAgIEVSUl9ST1dfTk9UX0ZPVU5EOiBzdHJpbmcgPSAnUm93IG5vdCBmb3VuZCc7XG4gICAgRVJSX0NPTF9OT1RfRk9VTkQ6IHN0cmluZyA9ICdDb2x1bW4gbm90IGZvdW5kJztcblxuICAgIHByaXZhdGUgX3NvcnRpbmdNb2RlOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBzb3J0aW5nOiBEYXRhU29ydGluZztcbiAgICBwcml2YXRlIHJvd3M6IERhdGFSb3dbXTtcbiAgICBwcml2YXRlIGNvbHVtbnM6IERhdGFDb2x1bW5bXTtcblxuICAgIHByaXZhdGUgZmlsdGVyOiBSb3dGaWx0ZXI7XG4gICAgcHJpdmF0ZSBpbWFnZVJlc29sdmVyOiBhbnk7XG5cbiAgICB0aHVtYm5haWxzOiBib29sZWFuID0gZmFsc2U7XG4gICAgcGVybWlzc2lvbnNTdHlsZTogUGVybWlzc2lvblN0eWxlTW9kZWxbXTtcbiAgICBzZWxlY3RlZFJvdzogRGF0YVJvdztcblxuICAgIHNldCBzb3J0aW5nTW9kZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGxldCBuZXdWYWx1ZSA9ICh2YWx1ZSB8fCAnY2xpZW50JykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSAnY2xpZW50JyAmJiBuZXdWYWx1ZSAhPT0gJ3NlcnZlcicpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gJ2NsaWVudCc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc29ydGluZ01vZGUgPSBuZXdWYWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgc29ydGluZ01vZGUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvcnRpbmdNb2RlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZG9jdW1lbnRMaXN0U2VydmljZTogRG9jdW1lbnRMaXN0U2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHRodW1ibmFpbFNlcnZpY2U6IFRodW1ibmFpbFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBjb250ZW50U2VydmljZTogQ29udGVudFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgc2NoZW1hOiBEYXRhQ29sdW1uW10gPSBbXSxcbiAgICAgICAgICAgICAgICBzb3J0aW5nPzogRGF0YVNvcnRpbmcsXG4gICAgICAgICAgICAgICAgc29ydGluZ01vZGU6IHN0cmluZyA9ICdjbGllbnQnKSB7XG4gICAgICAgIHRoaXMucm93cyA9IFtdO1xuICAgICAgICB0aGlzLmNvbHVtbnMgPSBzY2hlbWEgfHwgW107XG4gICAgICAgIHRoaXMuc29ydGluZyA9IHNvcnRpbmc7XG4gICAgICAgIHRoaXMuc29ydGluZ01vZGUgPSBzb3J0aW5nTW9kZTtcbiAgICB9XG5cbiAgICBnZXRSb3dzKCk6IEFycmF5PERhdGFSb3c+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm93cztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBkaXNhYmxlIHRoaXMgYXBpXG4gICAgc2V0Um93cyhyb3dzOiBBcnJheTxEYXRhUm93Pikge1xuICAgICAgICB0aGlzLnJvd3MgPSByb3dzIHx8IFtdO1xuICAgICAgICB0aGlzLnNvcnQoKTtcbiAgICB9XG5cbiAgICBnZXRDb2x1bW5zKCk6IEFycmF5PERhdGFDb2x1bW4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1ucztcbiAgICB9XG5cbiAgICBzZXRDb2x1bW5zKGNvbHVtbnM6IEFycmF5PERhdGFDb2x1bW4+KSB7XG4gICAgICAgIHRoaXMuY29sdW1ucyA9IGNvbHVtbnMgfHwgW107XG4gICAgfVxuXG4gICAgZ2V0VmFsdWUocm93OiBEYXRhUm93LCBjb2w6IERhdGFDb2x1bW4pOiBhbnkge1xuICAgICAgICBpZiAoIXJvdykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuRVJSX1JPV19OT1RfRk9VTkQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29sKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5FUlJfQ09MX05PVF9GT1VORCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRhdGFSb3c6IFNoYXJlRGF0YVJvdyA9IDxTaGFyZURhdGFSb3c+IHJvdztcbiAgICAgICAgbGV0IHZhbHVlOiBhbnkgPSByb3cuZ2V0VmFsdWUoY29sLmtleSk7XG4gICAgICAgIGlmIChkYXRhUm93LmNhY2hlW2NvbC5rZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhUm93LmNhY2hlW2NvbC5rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbC5rZXkgPT09ICckdGh1bWJuYWlsJykge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pbWFnZVJlc29sdmVyKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc29sdmVkID0gdGhpcy5pbWFnZVJlc29sdmVyKHJvdywgY29sKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgbm9kZSA9ICg8U2hhcmVEYXRhUm93PiByb3cpLm5vZGU7XG5cbiAgICAgICAgICAgIGlmIChub2RlLmVudHJ5LmlzRm9sZGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rm9sZGVySWNvbihub2RlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5vZGUuZW50cnkuaXNGaWxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGh1bWJuYWlscykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudExpc3RTZXJ2aWNlLmdldERvY3VtZW50VGh1bWJuYWlsVXJsKG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5vZGUuZW50cnkuY29udGVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pbWVUeXBlID0gbm9kZS5lbnRyeS5jb250ZW50Lm1pbWVUeXBlO1xuICAgICAgICAgICAgICAgIGlmIChtaW1lVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudExpc3RTZXJ2aWNlLmdldE1pbWVUeXBlSWNvbihtaW1lVHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudExpc3RTZXJ2aWNlLmdldERlZmF1bHRNaW1lVHlwZUljb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb2wudHlwZSA9PT0gJ2ltYWdlJykge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pbWFnZVJlc29sdmVyKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc29sdmVkID0gdGhpcy5pbWFnZVJlc29sdmVyKHJvdywgY29sKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhUm93LmNhY2hlVmFsdWUoY29sLmtleSwgdmFsdWUpO1xuICAgIH1cblxuICAgIGdldFNvcnRpbmcoKTogRGF0YVNvcnRpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3J0aW5nO1xuICAgIH1cblxuICAgIHNldFNvcnRpbmcoc29ydGluZzogRGF0YVNvcnRpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zb3J0aW5nID0gc29ydGluZztcblxuICAgICAgICB0aGlzLnNvcnRSb3dzKHRoaXMucm93cywgdGhpcy5zb3J0aW5nKTtcbiAgICB9XG5cbiAgICBzb3J0KGtleT86IHN0cmluZywgZGlyZWN0aW9uPzogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGxldCBzb3J0aW5nID0gdGhpcy5zb3J0aW5nIHx8IG5ldyBEYXRhU29ydGluZygpO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBzb3J0aW5nLmtleSA9IGtleTtcbiAgICAgICAgICAgIHNvcnRpbmcuZGlyZWN0aW9uID0gZGlyZWN0aW9uIHx8ICdhc2MnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U29ydGluZyhzb3J0aW5nKTtcbiAgICB9XG5cbiAgICBzZXRGaWx0ZXIoZmlsdGVyOiBSb3dGaWx0ZXIpIHtcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgfVxuXG4gICAgc2V0SW1hZ2VSZXNvbHZlcihyZXNvbHZlcjogYW55KSB7XG4gICAgICAgIHRoaXMuaW1hZ2VSZXNvbHZlciA9IHJlc29sdmVyO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Rm9sZGVySWNvbihub2RlOiBhbnkpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTbWFydEZvbGRlcihub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRMaXN0U2VydmljZS5nZXRNaW1lVHlwZUljb24oJ3NtYXJ0Rm9sZGVyJyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1J1bGVGb2xkZXIobm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50TGlzdFNlcnZpY2UuZ2V0TWltZVR5cGVJY29uKCdydWxlRm9sZGVyJyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0FMaW5rRm9sZGVyKG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudExpc3RTZXJ2aWNlLmdldE1pbWVUeXBlSWNvbignbGlua0ZvbGRlcicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRMaXN0U2VydmljZS5nZXRNaW1lVHlwZUljb24oJ2ZvbGRlcicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNTbWFydEZvbGRlcihub2RlOiBhbnkpIHtcbiAgICAgICAgbGV0IG5vZGVBc3BlY3RzID0gdGhpcy5nZXROb2RlQXNwZWN0TmFtZXMobm9kZSk7XG4gICAgICAgIHJldHVybiBub2RlQXNwZWN0cy5pbmRleE9mKCdzbWY6Y3VzdG9tQ29uZmlnU21hcnRGb2xkZXInKSA+IC0xIHx8XG4gICAgICAgICAgICAobm9kZUFzcGVjdHMuaW5kZXhPZignc21mOnN5c3RlbUNvbmZpZ1NtYXJ0Rm9sZGVyJykgPiAtMSk7XG4gICAgfVxuXG4gICAgaXNSdWxlRm9sZGVyKG5vZGU6IGFueSkge1xuICAgICAgICBsZXQgbm9kZUFzcGVjdHMgPSB0aGlzLmdldE5vZGVBc3BlY3ROYW1lcyhub2RlKTtcbiAgICAgICAgcmV0dXJuIG5vZGVBc3BlY3RzLmluZGV4T2YoJ3J1bGU6cnVsZXMnKSA+IC0xIHx8XG4gICAgICAgICAgICAobm9kZUFzcGVjdHMuaW5kZXhPZigncnVsZTpydWxlcycpID4gLTEpO1xuICAgIH1cblxuICAgIGlzQUxpbmtGb2xkZXIobm9kZTogYW55KSB7XG4gICAgICAgIGNvbnN0IG5vZGVUeXBlID0gbm9kZS5lbnRyeSA/IG5vZGUuZW50cnkubm9kZVR5cGUgOiBub2RlLm5vZGVUeXBlO1xuICAgICAgICByZXR1cm4gbm9kZVR5cGUgPT09ICdhcHA6Zm9sZGVybGluayc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXROb2RlQXNwZWN0TmFtZXMobm9kZTogYW55KTogYW55W10ge1xuICAgICAgICByZXR1cm4gbm9kZS5lbnRyeSAmJiBub2RlLmVudHJ5LmFzcGVjdE5hbWVzID8gbm9kZS5lbnRyeS5hc3BlY3ROYW1lcyA6IG5vZGUuYXNwZWN0TmFtZXMgPyBub2RlLmFzcGVjdE5hbWVzIDogW107XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzb3J0Um93cyhyb3dzOiBEYXRhUm93W10sIHNvcnRpbmc6IERhdGFTb3J0aW5nKSB7XG4gICAgICAgIGlmICh0aGlzLnNvcnRpbmdNb2RlID09PSAnc2VydmVyJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgb3B0aW9uczogSW50bC5Db2xsYXRvck9wdGlvbnMgPSB7fTtcblxuICAgICAgICBpZiAoc29ydGluZyAmJiBzb3J0aW5nLmtleSAmJiByb3dzICYmIHJvd3MubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgICBpZiAoc29ydGluZy5rZXkuaW5jbHVkZXMoJ3NpemVJbkJ5dGVzJykgfHwgc29ydGluZy5rZXkgPT09ICduYW1lJykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubnVtZXJpYyA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJvd3Muc29ydCgoYTogU2hhcmVEYXRhUm93LCBiOiBTaGFyZURhdGFSb3cpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYS5ub2RlLmVudHJ5LmlzRm9sZGVyICE9PSBiLm5vZGUuZW50cnkuaXNGb2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEubm9kZS5lbnRyeS5pc0ZvbGRlciA/IC0xIDogMTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgbGVmdCA9IGEuZ2V0VmFsdWUoc29ydGluZy5rZXkpO1xuICAgICAgICAgICAgICAgIGlmIChsZWZ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSAobGVmdCBpbnN0YW5jZW9mIERhdGUpID8gbGVmdC52YWx1ZU9mKCkudG9TdHJpbmcoKSA6IGxlZnQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHJpZ2h0ID0gYi5nZXRWYWx1ZShzb3J0aW5nLmtleSk7XG4gICAgICAgICAgICAgICAgaWYgKHJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gKHJpZ2h0IGluc3RhbmNlb2YgRGF0ZSkgPyByaWdodC52YWx1ZU9mKCkudG9TdHJpbmcoKSA6IHJpZ2h0LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSAnJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc29ydGluZy5kaXJlY3Rpb24gPT09ICdhc2MnXG4gICAgICAgICAgICAgICAgICAgID8gbGVmdC5sb2NhbGVDb21wYXJlKHJpZ2h0LCB1bmRlZmluZWQsIG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgIDogcmlnaHQubG9jYWxlQ29tcGFyZShsZWZ0LCB1bmRlZmluZWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgbG9hZFBhZ2Uobm9kZVBhZ2luZzogTm9kZVBhZ2luZywgbWVyZ2U6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBsZXQgc2hhcmVEYXRhUm93czogU2hhcmVEYXRhUm93W10gPSBbXTtcblxuICAgICAgICBpZiAobm9kZVBhZ2luZyAmJiBub2RlUGFnaW5nLmxpc3QpIHtcbiAgICAgICAgICAgIGxldCBub2RlRW50cmllczogTm9kZUVudHJ5W10gPSBub2RlUGFnaW5nLmxpc3QuZW50cmllcztcbiAgICAgICAgICAgIGlmIChub2RlRW50cmllcyAmJiBub2RlRW50cmllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgc2hhcmVEYXRhUm93cyA9IG5vZGVFbnRyaWVzLm1hcCgoaXRlbSkgPT4gbmV3IFNoYXJlRGF0YVJvdyhpdGVtLCB0aGlzLmNvbnRlbnRTZXJ2aWNlLCB0aGlzLnBlcm1pc3Npb25zU3R5bGUsIHRoaXMudGh1bWJuYWlsU2VydmljZSkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHNoYXJlRGF0YVJvd3MgPSBzaGFyZURhdGFSb3dzLmZpbHRlcih0aGlzLmZpbHRlcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc29ydGluZ01vZGUgIT09ICdzZXJ2ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNvcnQgYnkgZmlyc3Qgc29ydGFibGUgb3IganVzdCBmaXJzdCBjb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29sdW1ucyAmJiB0aGlzLmNvbHVtbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNvcnRpbmcgPSB0aGlzLmdldFNvcnRpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3J0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3J0Um93cyhzaGFyZURhdGFSb3dzLCBzb3J0aW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNvcnRhYmxlID0gdGhpcy5jb2x1bW5zLmZpbHRlcigoYykgPT4gYy5zb3J0YWJsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvcnRhYmxlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3J0KHNvcnRhYmxlWzBdLmtleSwgJ2FzYycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc29ydCh0aGlzLmNvbHVtbnNbMF0ua2V5LCAnYXNjJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1lcmdlKSB7XG4gICAgICAgICAgICBsZXQgbGlzdFBydW5lZER1cGxpY2F0ZSA9IHNoYXJlRGF0YVJvd3MuZmlsdGVyKChlbGVtZW50VG9GaWx0ZXI6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBpc1ByZXNlbnQgPSB0aGlzLnJvd3MuZmluZCgoY3VycmVudFJvdzogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50Um93Lm9iai5lbnRyeS5pZCA9PT0gZWxlbWVudFRvRmlsdGVyLm9iai5lbnRyeS5pZDtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAhaXNQcmVzZW50O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMucm93cyA9IHRoaXMucm93cy5jb25jYXQobGlzdFBydW5lZER1cGxpY2F0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJvd3MgPSBzaGFyZURhdGFSb3dzO1xuICAgICAgICB9XG4gICAgfVxuXG59XG4iXX0=
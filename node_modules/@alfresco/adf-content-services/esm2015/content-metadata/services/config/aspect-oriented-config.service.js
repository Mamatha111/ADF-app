/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { getGroup, getProperty } from './property-group-reader';
export class AspectOrientedConfigService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
    }
    /**
     * @param {?} groupName
     * @return {?}
     */
    isGroupAllowed(groupName) {
        /** @type {?} */
        const groupNames = Object.keys(this.config);
        return groupNames.indexOf(groupName) !== -1;
    }
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    reorganiseByConfig(propertyGroups) {
        /** @type {?} */
        const aspects = this.config;
        /** @type {?} */
        const aspectNames = Object.keys(aspects);
        return aspectNames
            .reduce((groupAccumulator, aspectName) => {
            /** @type {?} */
            const newGroup = this.getOrganisedPropertyGroup(propertyGroups, aspectName);
            return groupAccumulator.concat(newGroup);
        }, [])
            .filter((organisedPropertyGroup) => organisedPropertyGroup.properties.length > 0);
    }
    /**
     * @private
     * @param {?} propertyGroups
     * @param {?} aspectName
     * @return {?}
     */
    getOrganisedPropertyGroup(propertyGroups, aspectName) {
        /** @type {?} */
        const group = getGroup(propertyGroups, aspectName);
        /** @type {?} */
        let newGroup = [];
        if (group) {
            /** @type {?} */
            const aspectProperties = this.config[aspectName];
            /** @type {?} */
            let properties;
            if (aspectProperties === '*') {
                properties = getProperty(propertyGroups, aspectName, aspectProperties);
            }
            else {
                properties = ((/** @type {?} */ (aspectProperties)))
                    .map((propertyName) => getProperty(propertyGroups, aspectName, propertyName))
                    .filter((props) => props !== undefined);
            }
            newGroup = [{ title: group.title, properties }];
        }
        return newGroup;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    AspectOrientedConfigService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNwZWN0LW9yaWVudGVkLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiY29udGVudC1tZXRhZGF0YS9zZXJ2aWNlcy9jb25maWcvYXNwZWN0LW9yaWVudGVkLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFaEUsTUFBTSxPQUFPLDJCQUEyQjs7OztJQUVwQyxZQUFvQixNQUFXO1FBQVgsV0FBTSxHQUFOLE1BQU0sQ0FBSztJQUFHLENBQUM7Ozs7O0lBRTVCLGNBQWMsQ0FBQyxTQUFpQjs7Y0FDN0IsVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMzQyxPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7Ozs7SUFFTSxrQkFBa0IsQ0FBQyxjQUFzQzs7Y0FDdEQsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNOztjQUN2QixXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFFdEMsT0FBTyxXQUFXO2FBQ2IsTUFBTSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLEVBQUU7O2tCQUMvQixRQUFRLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUM7WUFDM0UsT0FBTyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0MsQ0FBQyxFQUFFLEVBQUUsQ0FBQzthQUNMLE1BQU0sQ0FBQyxDQUFDLHNCQUFzQixFQUFFLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzFGLENBQUM7Ozs7Ozs7SUFFTyx5QkFBeUIsQ0FBQyxjQUFjLEVBQUUsVUFBVTs7Y0FDbEQsS0FBSyxHQUFHLFFBQVEsQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDOztZQUM5QyxRQUFRLEdBQUcsRUFBRTtRQUVqQixJQUFJLEtBQUssRUFBRTs7a0JBQ0QsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7O2dCQUM1QyxVQUFVO1lBRWQsSUFBSSxnQkFBZ0IsS0FBSyxHQUFHLEVBQUU7Z0JBQzFCLFVBQVUsR0FBRyxXQUFXLENBQUMsY0FBYyxFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO2FBQzFFO2lCQUFNO2dCQUNILFVBQVUsR0FBRyxDQUFDLG1CQUFXLGdCQUFnQixFQUFBLENBQUM7cUJBQ3JDLEdBQUcsQ0FBQyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUM7cUJBQzVFLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDO2FBQy9DO1lBRUQsUUFBUSxHQUFHLENBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsQ0FBRSxDQUFDO1NBQ3JEO1FBRUQsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztDQUNKOzs7Ozs7SUF4Q2UsNkNBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQ29udGVudE1ldGFkYXRhQ29uZmlnLCBPcmdhbmlzZWRQcm9wZXJ0eUdyb3VwLCBQcm9wZXJ0eUdyb3VwQ29udGFpbmVyIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jb250ZW50LW1ldGFkYXRhLmludGVyZmFjZXMnO1xuaW1wb3J0IHsgZ2V0R3JvdXAsIGdldFByb3BlcnR5IH0gZnJvbSAnLi9wcm9wZXJ0eS1ncm91cC1yZWFkZXInO1xuXG5leHBvcnQgY2xhc3MgQXNwZWN0T3JpZW50ZWRDb25maWdTZXJ2aWNlIGltcGxlbWVudHMgQ29udGVudE1ldGFkYXRhQ29uZmlnIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY29uZmlnOiBhbnkpIHt9XG5cbiAgICBwdWJsaWMgaXNHcm91cEFsbG93ZWQoZ3JvdXBOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgZ3JvdXBOYW1lcyA9IE9iamVjdC5rZXlzKHRoaXMuY29uZmlnKTtcbiAgICAgICAgcmV0dXJuIGdyb3VwTmFtZXMuaW5kZXhPZihncm91cE5hbWUpICE9PSAtMTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVvcmdhbmlzZUJ5Q29uZmlnKHByb3BlcnR5R3JvdXBzOiBQcm9wZXJ0eUdyb3VwQ29udGFpbmVyKTogT3JnYW5pc2VkUHJvcGVydHlHcm91cFtdIHtcbiAgICAgICAgY29uc3QgYXNwZWN0cyA9IHRoaXMuY29uZmlnLFxuICAgICAgICAgICAgYXNwZWN0TmFtZXMgPSBPYmplY3Qua2V5cyhhc3BlY3RzKTtcblxuICAgICAgICByZXR1cm4gYXNwZWN0TmFtZXNcbiAgICAgICAgICAgIC5yZWR1Y2UoKGdyb3VwQWNjdW11bGF0b3IsIGFzcGVjdE5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdHcm91cCA9IHRoaXMuZ2V0T3JnYW5pc2VkUHJvcGVydHlHcm91cChwcm9wZXJ0eUdyb3VwcywgYXNwZWN0TmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdyb3VwQWNjdW11bGF0b3IuY29uY2F0KG5ld0dyb3VwKTtcbiAgICAgICAgICAgIH0sIFtdKVxuICAgICAgICAgICAgLmZpbHRlcigob3JnYW5pc2VkUHJvcGVydHlHcm91cCkgPT4gb3JnYW5pc2VkUHJvcGVydHlHcm91cC5wcm9wZXJ0aWVzLmxlbmd0aCA+IDApO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0T3JnYW5pc2VkUHJvcGVydHlHcm91cChwcm9wZXJ0eUdyb3VwcywgYXNwZWN0TmFtZSkge1xuICAgICAgICBjb25zdCBncm91cCA9IGdldEdyb3VwKHByb3BlcnR5R3JvdXBzLCBhc3BlY3ROYW1lKTtcbiAgICAgICAgbGV0IG5ld0dyb3VwID0gW107XG5cbiAgICAgICAgaWYgKGdyb3VwKSB7XG4gICAgICAgICAgICBjb25zdCBhc3BlY3RQcm9wZXJ0aWVzID0gdGhpcy5jb25maWdbYXNwZWN0TmFtZV07XG4gICAgICAgICAgICBsZXQgcHJvcGVydGllcztcblxuICAgICAgICAgICAgaWYgKGFzcGVjdFByb3BlcnRpZXMgPT09ICcqJykge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgPSBnZXRQcm9wZXJ0eShwcm9wZXJ0eUdyb3VwcywgYXNwZWN0TmFtZSwgYXNwZWN0UHJvcGVydGllcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgPSAoPHN0cmluZ1tdPiBhc3BlY3RQcm9wZXJ0aWVzKVxuICAgICAgICAgICAgICAgICAgICAubWFwKChwcm9wZXJ0eU5hbWUpID0+IGdldFByb3BlcnR5KHByb3BlcnR5R3JvdXBzLCBhc3BlY3ROYW1lLCBwcm9wZXJ0eU5hbWUpKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChwcm9wcykgPT4gcHJvcHMgIT09IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5ld0dyb3VwID0gWyB7IHRpdGxlOiBncm91cC50aXRsZSwgcHJvcGVydGllcyB9IF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3R3JvdXA7XG4gICAgfVxufVxuIl19
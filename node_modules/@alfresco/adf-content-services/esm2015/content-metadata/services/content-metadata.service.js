/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { BasicPropertiesService } from './basic-properties.service';
import { of } from 'rxjs';
import { PropertyGroupTranslatorService } from './property-groups-translator.service';
import { ContentMetadataConfigFactory } from './config/content-metadata-config.factory';
import { PropertyDescriptorsService } from './property-descriptors.service';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./basic-properties.service";
import * as i2 from "./config/content-metadata-config.factory";
import * as i3 from "./property-groups-translator.service";
import * as i4 from "./property-descriptors.service";
export class ContentMetadataService {
    /**
     * @param {?} basicPropertiesService
     * @param {?} contentMetadataConfigFactory
     * @param {?} propertyGroupTranslatorService
     * @param {?} propertyDescriptorsService
     */
    constructor(basicPropertiesService, contentMetadataConfigFactory, propertyGroupTranslatorService, propertyDescriptorsService) {
        this.basicPropertiesService = basicPropertiesService;
        this.contentMetadataConfigFactory = contentMetadataConfigFactory;
        this.propertyGroupTranslatorService = propertyGroupTranslatorService;
        this.propertyDescriptorsService = propertyDescriptorsService;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getBasicProperties(node) {
        return of(this.basicPropertiesService.getProperties(node));
    }
    /**
     * @param {?} node
     * @param {?=} presetName
     * @return {?}
     */
    getGroupedProperties(node, presetName = 'default') {
        /** @type {?} */
        let groupedProperties = of([]);
        if (node.aspectNames) {
            /** @type {?} */
            const config = this.contentMetadataConfigFactory.get(presetName);
            /** @type {?} */
            const groupNames = node.aspectNames
                .concat(node.nodeType)
                .filter((groupName) => config.isGroupAllowed(groupName));
            if (groupNames.length > 0) {
                groupedProperties = this.propertyDescriptorsService.load(groupNames).pipe(map((groups) => config.reorganiseByConfig(groups)), map((groups) => this.setTitleToNameIfNotSet(groups)), map((groups) => this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties)));
            }
        }
        return groupedProperties;
    }
    /**
     * @param {?} propertyGroups
     * @return {?}
     */
    setTitleToNameIfNotSet(propertyGroups) {
        propertyGroups.map((propertyGroup) => {
            propertyGroup.title = propertyGroup.title || propertyGroup.name;
        });
        return propertyGroups;
    }
}
ContentMetadataService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ContentMetadataService.ctorParameters = () => [
    { type: BasicPropertiesService },
    { type: ContentMetadataConfigFactory },
    { type: PropertyGroupTranslatorService },
    { type: PropertyDescriptorsService }
];
/** @nocollapse */ ContentMetadataService.ngInjectableDef = i0.defineInjectable({ factory: function ContentMetadataService_Factory() { return new ContentMetadataService(i0.inject(i1.BasicPropertiesService), i0.inject(i2.ContentMetadataConfigFactory), i0.inject(i3.PropertyGroupTranslatorService), i0.inject(i4.PropertyDescriptorsService)); }, token: ContentMetadataService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.basicPropertiesService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.contentMetadataConfigFactory;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.propertyGroupTranslatorService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataService.prototype.propertyDescriptorsService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1tZXRhZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiY29udGVudC1tZXRhZGF0YS9zZXJ2aWNlcy9jb250ZW50LW1ldGFkYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBR3RGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7O0FBS3JDLE1BQU0sT0FBTyxzQkFBc0I7Ozs7Ozs7SUFFL0IsWUFBb0Isc0JBQThDLEVBQzlDLDRCQUEwRCxFQUMxRCw4QkFBOEQsRUFDOUQsMEJBQXNEO1FBSHRELDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFDOUMsaUNBQTRCLEdBQTVCLDRCQUE0QixDQUE4QjtRQUMxRCxtQ0FBOEIsR0FBOUIsOEJBQThCLENBQWdDO1FBQzlELCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBNEI7SUFDMUUsQ0FBQzs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxJQUFVO1FBQ3pCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDOzs7Ozs7SUFFRCxvQkFBb0IsQ0FBQyxJQUFVLEVBQUUsYUFBcUIsU0FBUzs7WUFDdkQsaUJBQWlCLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUU5QixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7O2tCQUNaLE1BQU0sR0FBRyxJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQzs7a0JBQzVELFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVztpQkFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7aUJBQ3JCLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUVoRSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QixpQkFBaUIsR0FBRyxJQUFJLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FDckUsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDbEQsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDcEQsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUMseUJBQXlCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUMxRyxDQUFDO2FBQ0w7U0FDSjtRQUVELE9BQU8saUJBQWlCLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFFRCxzQkFBc0IsQ0FBQyxjQUF3QztRQUMzRCxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDakMsYUFBYSxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsS0FBSyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUM7UUFDcEUsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLGNBQWMsQ0FBQztJQUMxQixDQUFDOzs7WUF6Q0osVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7O1lBWFEsc0JBQXNCO1lBS3RCLDRCQUE0QjtZQUg1Qiw4QkFBOEI7WUFJOUIsMEJBQTBCOzs7Ozs7OztJQVFuQix3REFBc0Q7Ozs7O0lBQ3RELDhEQUFrRTs7Ozs7SUFDbEUsZ0VBQXNFOzs7OztJQUN0RSw0REFBOEQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBCYXNpY1Byb3BlcnRpZXNTZXJ2aWNlIH0gZnJvbSAnLi9iYXNpYy1wcm9wZXJ0aWVzLnNlcnZpY2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFByb3BlcnR5R3JvdXBUcmFuc2xhdG9yU2VydmljZSB9IGZyb20gJy4vcHJvcGVydHktZ3JvdXBzLXRyYW5zbGF0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBDYXJkVmlld0l0ZW0gfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgQ2FyZFZpZXdHcm91cCwgT3JnYW5pc2VkUHJvcGVydHlHcm91cCB9IGZyb20gJy4uL2ludGVyZmFjZXMvY29udGVudC1tZXRhZGF0YS5pbnRlcmZhY2VzJztcbmltcG9ydCB7IENvbnRlbnRNZXRhZGF0YUNvbmZpZ0ZhY3RvcnkgfSBmcm9tICcuL2NvbmZpZy9jb250ZW50LW1ldGFkYXRhLWNvbmZpZy5mYWN0b3J5JztcbmltcG9ydCB7IFByb3BlcnR5RGVzY3JpcHRvcnNTZXJ2aWNlIH0gZnJvbSAnLi9wcm9wZXJ0eS1kZXNjcmlwdG9ycy5zZXJ2aWNlJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDb250ZW50TWV0YWRhdGFTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFzaWNQcm9wZXJ0aWVzU2VydmljZTogQmFzaWNQcm9wZXJ0aWVzU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGNvbnRlbnRNZXRhZGF0YUNvbmZpZ0ZhY3Rvcnk6IENvbnRlbnRNZXRhZGF0YUNvbmZpZ0ZhY3RvcnksXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBwcm9wZXJ0eUdyb3VwVHJhbnNsYXRvclNlcnZpY2U6IFByb3BlcnR5R3JvdXBUcmFuc2xhdG9yU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHByb3BlcnR5RGVzY3JpcHRvcnNTZXJ2aWNlOiBQcm9wZXJ0eURlc2NyaXB0b3JzU2VydmljZSkge1xuICAgIH1cblxuICAgIGdldEJhc2ljUHJvcGVydGllcyhub2RlOiBOb2RlKTogT2JzZXJ2YWJsZTxDYXJkVmlld0l0ZW1bXT4ge1xuICAgICAgICByZXR1cm4gb2YodGhpcy5iYXNpY1Byb3BlcnRpZXNTZXJ2aWNlLmdldFByb3BlcnRpZXMobm9kZSkpO1xuICAgIH1cblxuICAgIGdldEdyb3VwZWRQcm9wZXJ0aWVzKG5vZGU6IE5vZGUsIHByZXNldE5hbWU6IHN0cmluZyA9ICdkZWZhdWx0Jyk6IE9ic2VydmFibGU8Q2FyZFZpZXdHcm91cFtdPiB7XG4gICAgICAgIGxldCBncm91cGVkUHJvcGVydGllcyA9IG9mKFtdKTtcblxuICAgICAgICBpZiAobm9kZS5hc3BlY3ROYW1lcykge1xuICAgICAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jb250ZW50TWV0YWRhdGFDb25maWdGYWN0b3J5LmdldChwcmVzZXROYW1lKSxcbiAgICAgICAgICAgICAgICBncm91cE5hbWVzID0gbm9kZS5hc3BlY3ROYW1lc1xuICAgICAgICAgICAgICAgICAgICAuY29uY2F0KG5vZGUubm9kZVR5cGUpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKGdyb3VwTmFtZSkgPT4gY29uZmlnLmlzR3JvdXBBbGxvd2VkKGdyb3VwTmFtZSkpO1xuXG4gICAgICAgICAgICBpZiAoZ3JvdXBOYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXBlZFByb3BlcnRpZXMgPSB0aGlzLnByb3BlcnR5RGVzY3JpcHRvcnNTZXJ2aWNlLmxvYWQoZ3JvdXBOYW1lcykucGlwZShcbiAgICAgICAgICAgICAgICAgICAgbWFwKChncm91cHMpID0+IGNvbmZpZy5yZW9yZ2FuaXNlQnlDb25maWcoZ3JvdXBzKSksXG4gICAgICAgICAgICAgICAgICAgIG1hcCgoZ3JvdXBzKSA9PiB0aGlzLnNldFRpdGxlVG9OYW1lSWZOb3RTZXQoZ3JvdXBzKSksXG4gICAgICAgICAgICAgICAgICAgIG1hcCgoZ3JvdXBzKSA9PiB0aGlzLnByb3BlcnR5R3JvdXBUcmFuc2xhdG9yU2VydmljZS50cmFuc2xhdGVUb0NhcmRWaWV3R3JvdXBzKGdyb3Vwcywgbm9kZS5wcm9wZXJ0aWVzKSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdyb3VwZWRQcm9wZXJ0aWVzO1xuICAgIH1cblxuICAgIHNldFRpdGxlVG9OYW1lSWZOb3RTZXQocHJvcGVydHlHcm91cHM6IE9yZ2FuaXNlZFByb3BlcnR5R3JvdXBbXSk6IE9yZ2FuaXNlZFByb3BlcnR5R3JvdXBbXSB7XG4gICAgICAgIHByb3BlcnR5R3JvdXBzLm1hcCgocHJvcGVydHlHcm91cCkgPT4ge1xuICAgICAgICAgICAgcHJvcGVydHlHcm91cC50aXRsZSA9IHByb3BlcnR5R3JvdXAudGl0bGUgfHwgcHJvcGVydHlHcm91cC5uYW1lO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5R3JvdXBzO1xuICAgIH1cbn1cbiJdfQ==
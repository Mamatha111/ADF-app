/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { MatSelect } from '@angular/material';
import { Node } from '@alfresco/js-api';
import { DocumentListComponent } from '../document-list';
export class BreadcrumbComponent {
    constructor() {
        /**
         * Active node, builds UI based on folderNode.path.elements collection.
         */
        this.folderNode = null;
        /**
         * (optional) Name of the root element of the breadcrumb. You can use
         * this property to rename "Company Home" to "Personal Files" for
         * example. You can use an i18n resource key for the property value.
         */
        this.root = null;
        /**
         * (optional) The id of the root element. You can use this property
         * to set a custom element the breadcrumb should start with.
         */
        this.rootId = null;
        this.route = [];
        /**
         * Emitted when the user clicks on a breadcrumb.
         */
        this.navigate = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get hasRoot() {
        return !!this.root;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.transform = this.transform ? this.transform : null;
        if (this.target) {
            this.target.$folderNode.subscribe((folderNode) => {
                this.folderNode = folderNode;
                this.recalculateNodes();
            });
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.recalculateNodes();
    }
    /**
     * @protected
     * @return {?}
     */
    recalculateNodes() {
        /** @type {?} */
        let node = this.transform ? this.transform(this.folderNode) : this.folderNode;
        this.route = this.parseRoute(node);
        if (this.maxItems && this.route.length > this.maxItems) {
            this.lastNodes = this.route.slice(this.route.length - this.maxItems);
            this.previousNodes = this.route.slice(0, this.route.length - this.maxItems);
            this.previousNodes.reverse();
        }
        else {
            this.lastNodes = this.route;
            this.previousNodes = null;
        }
    }
    /**
     * @return {?}
     */
    open() {
        if (this.dropdown) {
            this.dropdown.open();
        }
    }
    /**
     * @return {?}
     */
    hasPreviousNodes() {
        return this.previousNodes ? true : false;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    parseRoute(node) {
        if (node && node.path) {
            /** @type {?} */
            const route = (/** @type {?} */ ((node.path.elements || []).slice()));
            route.push((/** @type {?} */ ({
                id: node.id,
                name: node.name,
                node: node
            })));
            /** @type {?} */
            const rootPos = this.getElementPosition(route, this.rootId);
            if (rootPos > 0) {
                route.splice(0, rootPos);
            }
            if (rootPos === -1 && this.rootId) {
                route[0].id = this.rootId;
            }
            if (this.root) {
                route[0].name = this.root;
            }
            return route;
        }
        return [];
    }
    /**
     * @private
     * @param {?} route
     * @param {?} nodeId
     * @return {?}
     */
    getElementPosition(route, nodeId) {
        /** @type {?} */
        let position = -1;
        if (route && route.length > 0 && nodeId) {
            position = route.findIndex((el) => el.id === nodeId);
        }
        return position;
    }
    /**
     * @param {?} route
     * @param {?=} event
     * @return {?}
     */
    onRoutePathClick(route, event) {
        if (event) {
            event.preventDefault();
        }
        if (route) {
            this.navigate.emit(route);
            if (this.target) {
                this.target.navigateTo(route.id);
            }
        }
    }
}
BreadcrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-breadcrumb',
                template: "<nav *ngIf=\"folderNode\" data-automation-id=\"breadcrumb\" class=\"adf-breadcrumb-container\" role=\"list\">\n    <button\n        *ngIf=\"hasPreviousNodes()\"\n        tabindex=\"0\"\n        class=\"adf-breadcrumb-dropdown-trigger\"\n        (click)=\"open()\">\n        <div class=\"adf-breadcrumb-dropdown-trigger-icon\">\n            <mat-icon [class.adf-isRoot]=\"!hasPreviousNodes()\">folder</mat-icon>\n            <mat-icon [class.adf-isRoot]=\"!hasPreviousNodes()\" class=\"adf-breadcrumb-dropdown-trigger-arrow\">arrow_drop_down</mat-icon>\n        </div>\n    </button>\n\n    <mat-select\n        #dropdown\n        *ngIf=\"hasPreviousNodes()\"\n        class=\"adf-breadcrumb-dropdown-path\"\n        tabindex=\"0\">\n\n        <mat-option\n            *ngFor=\"let node of previousNodes;\"\n            (click)=\"onRoutePathClick(node, $event)\"\n            class=\"adf-breadcrumb-path-option\"\n            tabindex=\"0\">\n            {{ node.name | translate }}\n        </mat-option>\n    </mat-select>\n\n    <div *ngFor=\"let item of lastNodes; let last = last\"\n        [class.adf-active]=\"last\"\n        [ngSwitch]=\"last\"\n        title=\"{{ item.name | translate }}\"\n        class=\"adf-breadcrumb-item\"\n        role=\"listitem\">\n\n        <a *ngSwitchDefault href=\"#\" [attr.data-automation-id]=\"'breadcrumb_' + item.name\"\n            class=\"adf-breadcrumb-item-anchor\"\n            (click)=\"onRoutePathClick(item, $event)\">\n            {{ item.name | translate }}\n        </a>\n\n        <div *ngSwitchCase=\"true\" class=\"adf-breadcrumb-item-current\">\n            {{ item.name | translate }}\n        </div>\n\n        <mat-icon class=\"adf-breadcrumb-item-chevron\" *ngIf=\"!last\">\n            chevron_right\n        </mat-icon>\n    </div>\n</nav>\n\n<nav *ngIf=\"!folderNode && hasRoot\" data-automation-id=\"breadcrumb\" role=\"navigation\">\n    <div class=\"adf-breadcrumb-item adf-active\" role=\"listitem\">\n        <div class=\"adf-breadcrumb-item-current\">\n            {{ root | translate }}\n        </div>\n    </div>\n</nav>\n",
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'adf-breadcrumb'
                },
                styles: [""]
            }] }
];
BreadcrumbComponent.propDecorators = {
    folderNode: [{ type: Input }],
    root: [{ type: Input }],
    rootId: [{ type: Input }],
    target: [{ type: Input }],
    transform: [{ type: Input }],
    dropdown: [{ type: ViewChild, args: ['dropdown',] }],
    maxItems: [{ type: Input }],
    navigate: [{ type: Output }]
};
if (false) {
    /**
     * Active node, builds UI based on folderNode.path.elements collection.
     * @type {?}
     */
    BreadcrumbComponent.prototype.folderNode;
    /**
     * (optional) Name of the root element of the breadcrumb. You can use
     * this property to rename "Company Home" to "Personal Files" for
     * example. You can use an i18n resource key for the property value.
     * @type {?}
     */
    BreadcrumbComponent.prototype.root;
    /**
     * (optional) The id of the root element. You can use this property
     * to set a custom element the breadcrumb should start with.
     * @type {?}
     */
    BreadcrumbComponent.prototype.rootId;
    /**
     * (optional) Document List component to operate with. The list will
     * update when the breadcrumb is clicked.
     * @type {?}
     */
    BreadcrumbComponent.prototype.target;
    /**
     * Transformation to be performed on the chosen/folder node before building
     * the breadcrumb UI. Can be useful when custom formatting is needed for the
     * breadcrumb. You can change the path elements from the node that are used to
     * build the breadcrumb using this function.
     * @type {?}
     */
    BreadcrumbComponent.prototype.transform;
    /** @type {?} */
    BreadcrumbComponent.prototype.dropdown;
    /**
     * Maximum number of nodes to display before wrapping them with a dropdown element.
     * @type {?}
     */
    BreadcrumbComponent.prototype.maxItems;
    /** @type {?} */
    BreadcrumbComponent.prototype.previousNodes;
    /** @type {?} */
    BreadcrumbComponent.prototype.lastNodes;
    /** @type {?} */
    BreadcrumbComponent.prototype.route;
    /**
     * Emitted when the user clicks on a breadcrumb.
     * @type {?}
     */
    BreadcrumbComponent.prototype.navigate;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJicmVhZGNydW1iL2JyZWFkY3J1bWIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFHTCxNQUFNLEVBRU4sU0FBUyxFQUNULGlCQUFpQixFQUNwQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUFFLElBQUksRUFBcUIsTUFBTSxrQkFBa0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQVd6RCxNQUFNLE9BQU8sbUJBQW1CO0lBVGhDOzs7O1FBYUksZUFBVSxHQUFTLElBQUksQ0FBQzs7Ozs7O1FBT3hCLFNBQUksR0FBVyxJQUFJLENBQUM7Ozs7O1FBTXBCLFdBQU0sR0FBVyxJQUFJLENBQUM7UUEwQnRCLFVBQUssR0FBd0IsRUFBRSxDQUFDOzs7O1FBUWhDLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBcUIsQ0FBQztJQThGckQsQ0FBQzs7OztJQXBHRyxJQUFJLE9BQU87UUFDUCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFNRCxRQUFRO1FBQ0osSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFeEQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsVUFBZ0IsRUFBRSxFQUFFO2dCQUNuRCxJQUFJ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Q0FDaUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSW5wdXQsXG4gICAgT25DaGFuZ2VzLFxuICAgIE9uSW5pdCxcbiAgICBPdXRwdXQsXG4gICAgU2ltcGxlQ2hhbmdlcyxcbiAgICBWaWV3Q2hpbGQsXG4gICAgVmlld0VuY2Fwc3VsYXRpb25cbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRTZWxlY3QgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBOb2RlLCBQYXRoRWxlbWVudEVudGl0eSB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgRG9jdW1lbnRMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi4vZG9jdW1lbnQtbGlzdCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWJyZWFkY3J1bWInLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9icmVhZGNydW1iLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9icmVhZGNydW1iLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICBob3N0OiB7XG4gICAgICAgICdjbGFzcyc6ICdhZGYtYnJlYWRjcnVtYidcbiAgICB9XG59KVxuZXhwb3J0IGNsYXNzIEJyZWFkY3J1bWJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG5cbiAgICAvKiogQWN0aXZlIG5vZGUsIGJ1aWxkcyBVSSBiYXNlZCBvbiBmb2xkZXJOb2RlLnBhdGguZWxlbWVudHMgY29sbGVjdGlvbi4gKi9cbiAgICBASW5wdXQoKVxuICAgIGZvbGRlck5vZGU6IE5vZGUgPSBudWxsO1xuXG4gICAgLyoqIChvcHRpb25hbCkgTmFtZSBvZiB0aGUgcm9vdCBlbGVtZW50IG9mIHRoZSBicmVhZGNydW1iLiBZb3UgY2FuIHVzZVxuICAgICAqIHRoaXMgcHJvcGVydHkgdG8gcmVuYW1lIFwiQ29tcGFueSBIb21lXCIgdG8gXCJQZXJzb25hbCBGaWxlc1wiIGZvclxuICAgICAqIGV4YW1wbGUuIFlvdSBjYW4gdXNlIGFuIGkxOG4gcmVzb3VyY2Uga2V5IGZvciB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICByb290OiBzdHJpbmcgPSBudWxsO1xuXG4gICAgLyoqIChvcHRpb25hbCkgVGhlIGlkIG9mIHRoZSByb290IGVsZW1lbnQuIFlvdSBjYW4gdXNlIHRoaXMgcHJvcGVydHlcbiAgICAgKiB0byBzZXQgYSBjdXN0b20gZWxlbWVudCB0aGUgYnJlYWRjcnVtYiBzaG91bGQgc3RhcnQgd2l0aC5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHJvb3RJZDogc3RyaW5nID0gbnVsbDtcblxuICAgIC8qKiAob3B0aW9uYWwpIERvY3VtZW50IExpc3QgY29tcG9uZW50IHRvIG9wZXJhdGUgd2l0aC4gVGhlIGxpc3Qgd2lsbFxuICAgICAqIHVwZGF0ZSB3aGVuIHRoZSBicmVhZGNydW1iIGlzIGNsaWNrZWQuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICB0YXJnZXQ6IERvY3VtZW50TGlzdENvbXBvbmVudDtcblxuICAgIC8qKiBUcmFuc2Zvcm1hdGlvbiB0byBiZSBwZXJmb3JtZWQgb24gdGhlIGNob3Nlbi9mb2xkZXIgbm9kZSBiZWZvcmUgYnVpbGRpbmdcbiAgICAgKiB0aGUgYnJlYWRjcnVtYiBVSS4gQ2FuIGJlIHVzZWZ1bCB3aGVuIGN1c3RvbSBmb3JtYXR0aW5nIGlzIG5lZWRlZCBmb3IgdGhlXG4gICAgICogYnJlYWRjcnVtYi4gWW91IGNhbiBjaGFuZ2UgdGhlIHBhdGggZWxlbWVudHMgZnJvbSB0aGUgbm9kZSB0aGF0IGFyZSB1c2VkIHRvXG4gICAgICogYnVpbGQgdGhlIGJyZWFkY3J1bWIgdXNpbmcgdGhpcyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHRyYW5zZm9ybTogKG5vZGUpID0+IGFueTtcblxuICAgIEBWaWV3Q2hpbGQoJ2Ryb3Bkb3duJylcbiAgICBkcm9wZG93bjogTWF0U2VsZWN0O1xuXG4gICAgLyoqIE1heGltdW0gbnVtYmVyIG9mIG5vZGVzIHRvIGRpc3BsYXkgYmVmb3JlIHdyYXBwaW5nIHRoZW0gd2l0aCBhIGRyb3Bkb3duIGVsZW1lbnQuICAqL1xuICAgIEBJbnB1dCgpXG4gICAgbWF4SXRlbXM6IG51bWJlcjtcblxuICAgIHByZXZpb3VzTm9kZXM6IFBhdGhFbGVtZW50RW50aXR5W107XG4gICAgbGFzdE5vZGVzOiBQYXRoRWxlbWVudEVudGl0eVtdO1xuXG4gICAgcm91dGU6IFBhdGhFbGVtZW50RW50aXR5W10gPSBbXTtcblxuICAgIGdldCBoYXNSb290KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLnJvb3Q7XG4gICAgfVxuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgdXNlciBjbGlja3Mgb24gYSBicmVhZGNydW1iLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIG5hdmlnYXRlID0gbmV3IEV2ZW50RW1pdHRlcjxQYXRoRWxlbWVudEVudGl0eT4oKTtcblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IHRoaXMudHJhbnNmb3JtID8gdGhpcy50cmFuc2Zvcm0gOiBudWxsO1xuXG4gICAgICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgdGhpcy50YXJnZXQuJGZvbGRlck5vZGUuc3Vic2NyaWJlKChmb2xkZXJOb2RlOiBOb2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2xkZXJOb2RlID0gZm9sZGVyTm9kZTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlY2FsY3VsYXRlTm9kZXMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlY2FsY3VsYXRlTm9kZXMoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVjYWxjdWxhdGVOb2RlcygpOiB2b2lkIHtcbiAgICAgICAgbGV0IG5vZGU6IE5vZGUgPSB0aGlzLnRyYW5zZm9ybSA/IHRoaXMudHJhbnNmb3JtKHRoaXMuZm9sZGVyTm9kZSkgOiB0aGlzLmZvbGRlck5vZGU7XG5cbiAgICAgICAgdGhpcy5yb3V0ZSA9IHRoaXMucGFyc2VSb3V0ZShub2RlKTtcblxuICAgICAgICBpZiAodGhpcy5tYXhJdGVtcyAmJiB0aGlzLnJvdXRlLmxlbmd0aCA+IHRoaXMubWF4SXRlbXMpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdE5vZGVzID0gdGhpcy5yb3V0ZS5zbGljZSh0aGlzLnJvdXRlLmxlbmd0aCAtIHRoaXMubWF4SXRlbXMpO1xuICAgICAgICAgICAgdGhpcy5wcmV2aW91c05vZGVzID0gdGhpcy5yb3V0ZS5zbGljZSgwLCB0aGlzLnJvdXRlLmxlbmd0aCAtIHRoaXMubWF4SXRlbXMpO1xuICAgICAgICAgICAgdGhpcy5wcmV2aW91c05vZGVzLnJldmVyc2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGFzdE5vZGVzID0gdGhpcy5yb3V0ZTtcbiAgICAgICAgICAgIHRoaXMucHJldmlvdXNOb2RlcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvcGVuKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5kcm9wZG93bikge1xuICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5vcGVuKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYXNQcmV2aW91c05vZGVzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmV2aW91c05vZGVzID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cblxuICAgIHBhcnNlUm91dGUobm9kZTogTm9kZSk6IFBhdGhFbGVtZW50RW50aXR5W10ge1xuICAgICAgICBpZiAobm9kZSAmJiBub2RlLnBhdGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvdXRlID0gPFBhdGhFbGVtZW50RW50aXR5W10+IChub2RlLnBhdGguZWxlbWVudHMgfHwgW10pLnNsaWNlKCk7XG5cbiAgICAgICAgICAgIHJvdXRlLnB1c2goPFBhdGhFbGVtZW50RW50aXR5PiB7XG4gICAgICAgICAgICAgICAgaWQ6IG5vZGUuaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxuICAgICAgICAgICAgICAgIG5vZGU6IG5vZGVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCByb290UG9zID0gdGhpcy5nZXRFbGVtZW50UG9zaXRpb24ocm91dGUsIHRoaXMucm9vdElkKTtcbiAgICAgICAgICAgIGlmIChyb290UG9zID4gMCkge1xuICAgICAgICAgICAgICAgIHJvdXRlLnNwbGljZSgwLCByb290UG9zKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJvb3RQb3MgPT09IC0xICYmIHRoaXMucm9vdElkKSB7XG4gICAgICAgICAgICAgICAgcm91dGVbMF0uaWQgPSB0aGlzLnJvb3RJZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMucm9vdCkge1xuICAgICAgICAgICAgICAgIHJvdXRlWzBdLm5hbWUgPSB0aGlzLnJvb3Q7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByb3V0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEVsZW1lbnRQb3NpdGlvbihyb3V0ZTogUGF0aEVsZW1lbnRFbnRpdHlbXSwgbm9kZUlkOiBzdHJpbmcpOiBudW1iZXIge1xuICAgICAgICBsZXQgcG9zaXRpb246IG51bWJlciA9IC0xO1xuXG4gICAgICAgIGlmIChyb3V0ZSAmJiByb3V0ZS5sZW5ndGggPiAwICYmIG5vZGVJZCkge1xuICAgICAgICAgICAgcG9zaXRpb24gPSByb3V0ZS5maW5kSW5kZXgoKGVsKSA9PiBlbC5pZCA9PT0gbm9kZUlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwb3NpdGlvbjtcbiAgICB9XG5cbiAgICBvblJvdXRlUGF0aENsaWNrKHJvdXRlOiBQYXRoRWxlbWVudEVudGl0eSwgZXZlbnQ/OiBFdmVudCk6IHZvaWQge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocm91dGUpIHtcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGUuZW1pdChyb3V0ZSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0Lm5hdmlnYXRlVG8ocm91dGUuaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl19
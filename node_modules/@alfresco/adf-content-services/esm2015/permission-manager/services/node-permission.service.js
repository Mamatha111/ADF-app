/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { of, from, throwError } from 'rxjs';
import { AlfrescoApiService, SearchService, NodesApiService, TranslationService } from '@alfresco/adf-core';
import { switchMap, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class NodePermissionService {
    /**
     * @param {?} apiService
     * @param {?} searchApiService
     * @param {?} nodeService
     * @param {?} translation
     */
    constructor(apiService, searchApiService, nodeService, translation) {
        this.apiService = apiService;
        this.searchApiService = searchApiService;
        this.nodeService = nodeService;
        this.translation = translation;
    }
    /**
     * Gets a list of roles for the current node.
     * @param {?} node The target node
     * @return {?} Array of strings representing the roles
     */
    getNodeRoles(node) {
        /** @type {?} */
        const retrieveSiteQueryBody = this.buildRetrieveSiteQueryBody(node.path.elements);
        return this.searchApiService.searchByQueryBody(retrieveSiteQueryBody)
            .pipe(switchMap((siteNodeList) => {
            if (siteNodeList.list.entries.length > 0) {
                /** @type {?} */
                let siteName = siteNodeList.list.entries[0].entry.name;
                return this.getGroupMembersBySiteName(siteName);
            }
            else {
                return of(node.permissions.settable);
            }
        }));
    }
    /**
     * Updates the permission role for a node.
     * @param {?} node Target node
     * @param {?} updatedPermissionRole Permission role to update or add
     * @return {?} Node with updated permission
     */
    updatePermissionRole(node, updatedPermissionRole) {
        /** @type {?} */
        let permissionBody = { permissions: { locallySet: [] } };
        /** @type {?} */
        const index = node.permissions.locallySet.map((permission) => permission.authorityId).indexOf(updatedPermissionRole.authorityId);
        permissionBody.permissions.locallySet = permissionBody.permissions.locallySet.concat(node.permissions.locallySet);
        if (index !== -1) {
            permissionBody.permissions.locallySet[index] = updatedPermissionRole;
        }
        else {
            permissionBody.permissions.locallySet.push(updatedPermissionRole);
        }
        return this.nodeService.updateNode(node.id, permissionBody);
    }
    /**
     * Update permissions for a node.
     * @param {?} nodeId ID of the target node
     * @param {?} permissionList New permission settings
     * @return {?} Node with updated permissions
     */
    updateNodePermissions(nodeId, permissionList) {
        return this.nodeService.getNode(nodeId).pipe(switchMap((node) => {
            return this.getNodeRoles(node).pipe(switchMap((nodeRoles) => of({ node, nodeRoles })));
        }), switchMap(({ node, nodeRoles }) => this.updateLocallySetPermissions(node, permissionList, nodeRoles)));
    }
    /**
     * Updates the locally set permissions for a node.
     * @param {?} node ID of the target node
     * @param {?} nodes Permission settings
     * @param {?} nodeRole Permission role
     * @return {?} Node with updated permissions
     */
    updateLocallySetPermissions(node, nodes, nodeRole) {
        /** @type {?} */
        let permissionBody = { permissions: { locallySet: [] } };
        /** @type {?} */
        const permissionList = this.transformNodeToPermissionElement(nodes, nodeRole[0]);
        /** @type {?} */
        const duplicatedPermissions = this.getDuplicatedPermissions(node.permissions.locallySet, permissionList);
        if (duplicatedPermissions.length > 0) {
            /** @type {?} */
            const list = duplicatedPermissions.map((permission) => 'authority -> ' + permission.authorityId + ' / role -> ' + permission.name).join(', ');
            /** @type {?} */
            const duplicatePermissionMessage = this.translation.instant('PERMISSION_MANAGER.ERROR.DUPLICATE-PERMISSION', { list });
            return throwError(duplicatePermissionMessage);
        }
        permissionBody.permissions.locallySet = node.permissions.locallySet ? node.permissions.locallySet.concat(permissionList) : permissionList;
        return this.nodeService.updateNode(node.id, permissionBody);
    }
    /**
     * @private
     * @param {?} nodeLocallySet
     * @param {?} permissionListAdded
     * @return {?}
     */
    getDuplicatedPermissions(nodeLocallySet, permissionListAdded) {
        /** @type {?} */
        let duplicatePermissions = [];
        if (nodeLocallySet) {
            permissionListAdded.forEach((permission) => {
                /** @type {?} */
                const duplicate = nodeLocallySet.find((localPermission) => this.isEqualPermission(localPermission, permission));
                if (duplicate) {
                    duplicatePermissions.push(duplicate);
                }
            });
        }
        return duplicatePermissions;
    }
    /**
     * @private
     * @param {?} oldPermission
     * @param {?} newPermission
     * @return {?}
     */
    isEqualPermission(oldPermission, newPermission) {
        return oldPermission.accessStatus === newPermission.accessStatus &&
            oldPermission.authorityId === newPermission.authorityId &&
            oldPermission.name === newPermission.name;
    }
    /**
     * @private
     * @param {?} nodes
     * @param {?} nodeRole
     * @return {?}
     */
    transformNodeToPermissionElement(nodes, nodeRole) {
        return nodes.map((node) => {
            /** @type {?} */
            let newPermissionElement = (/** @type {?} */ ({
                'authorityId': node.entry.properties['cm:authorityName'] ?
                    node.entry.properties['cm:authorityName'] :
                    node.entry.properties['cm:userName'],
                'name': nodeRole,
                'accessStatus': 'ALLOWED'
            }));
            return newPermissionElement;
        });
    }
    /**
     * Removes a permission setting from a node.
     * @param {?} node ID of the target node
     * @param {?} permissionToRemove Permission setting to remove
     * @return {?} Node with modified permissions
     */
    removePermission(node, permissionToRemove) {
        /** @type {?} */
        let permissionBody = { permissions: { locallySet: [] } };
        /** @type {?} */
        const index = node.permissions.locallySet.map((permission) => permission.authorityId).indexOf(permissionToRemove.authorityId);
        if (index !== -1) {
            node.permissions.locallySet.splice(index, 1);
            permissionBody.permissions.locallySet = node.permissions.locallySet;
            return this.nodeService.updateNode(node.id, permissionBody);
        }
    }
    /**
     * @private
     * @param {?} siteName
     * @return {?}
     */
    getGroupMembersBySiteName(siteName) {
        /** @type {?} */
        const groupName = 'GROUP_site_' + siteName;
        return this.getGroupMemberByGroupName(groupName)
            .pipe(map((groupMemberPaging) => {
            /** @type {?} */
            let displayResult = [];
            groupMemberPaging.list.entries.forEach((member) => {
                displayResult.push(this.formattedRoleName(member.entry.displayName, 'site_' + siteName));
            });
            return displayResult;
        }));
    }
    /**
     * Gets all members related to a group name.
     * @param {?} groupName Name of group to look for members
     * @param {?=} opts Extra options supported by JS-API
     * @return {?} List of members
     */
    getGroupMemberByGroupName(groupName, opts) {
        return from(this.apiService.groupsApi.getGroupMembers(groupName, opts));
    }
    /**
     * @private
     * @param {?} displayName
     * @param {?} siteName
     * @return {?}
     */
    formattedRoleName(displayName, siteName) {
        return displayName.replace(siteName + '_', '');
    }
    /**
     * @private
     * @param {?} nodePath
     * @return {?}
     */
    buildRetrieveSiteQueryBody(nodePath) {
        /** @type {?} */
        const pathNames = nodePath.map((node) => 'name: "' + node.name + '"');
        /** @type {?} */
        const buildedPathNames = pathNames.join(' OR ');
        return {
            'query': {
                'query': buildedPathNames
            },
            'paging': {
                'maxItems': 100,
                'skipCount': 0
            },
            'include': ['aspectNames', 'properties'],
            'filterQueries': [
                {
                    'query': "TYPE:'st:site'"
                }
            ]
        };
    }
}
NodePermissionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NodePermissionService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: SearchService },
    { type: NodesApiService },
    { type: TranslationService }
];
/** @nocollapse */ NodePermissionService.ngInjectableDef = i0.defineInjectable({ factory: function NodePermissionService_Factory() { return new NodePermissionService(i0.inject(i1.AlfrescoApiService), i0.inject(i1.SearchService), i0.inject(i1.NodesApiService), i0.inject(i1.TranslationService)); }, token: NodePermissionService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NodePermissionService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    NodePermissionService.prototype.searchApiService;
    /**
     * @type {?}
     * @private
     */
    NodePermissionService.prototype.nodeService;
    /**
     * @type {?}
     * @private
     */
    NodePermissionService.prototype.translation;
}
//# sourceMappingURL=data:application/json;base64,
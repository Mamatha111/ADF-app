/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ObjectDataTableAdapter } from '@alfresco/adf-core';
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output } from '@angular/core';
/**
 * <adf-webscript-get [scriptPath]="string"
 *                         [scriptArgs]="Object"
 *                         [contextRoot]="string"
 *                         [servicePath]="string"
 *                         [contentType]="JSON|HTML|DATATABLE"
 *                         (success)="customMethod($event)>
 * </adf-webscript-get>
 *
 * This component, provide a get webscript viewer
 *
 * \@InputParam {string} scriptPath path to Web Script (as defined by Web Script)
 * \@InputParam {Object} scriptArgs arguments to pass to Web Script
 * \@InputParam {string} contextRoot path where application is deployed default value 'alfresco'
 * \@InputParam {string} servicePath path where Web Script service is mapped default value 'service'
 * \@InputParam {string} contentType JSON | HTML | DATATABLE | TEXT
 *
 * \@Output - success - The event is emitted when the data are received
 *
 */
export class WebscriptComponent {
    /**
     * @param {?} apiService
     * @param {?} logService
     */
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
        /**
         * Toggles whether to show or hide the data.
         */
        this.showData = true;
        /**
         * Path where the application is deployed
         */
        this.contextRoot = 'alfresco';
        /**
         * Path that the webscript service is mapped to.
         */
        this.servicePath = 'service';
        /**
         * Content type to interpret the data received from the webscript.
         * Can be "JSON" , "HTML" , "DATATABLE" or "TEXT"
         */
        this.contentType = 'TEXT';
        /**
         * Emitted when the operation succeeds. You can get the plain data from
         * the webscript through the **success** event parameter and use it as you
         * need in your application.
         */
        this.success = new EventEmitter();
        this.data = undefined;
        this.showError = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.showData) {
            this.clean();
        }
        return new Promise((resolve, reject) => {
            this.apiService.getInstance().webScript.executeWebScript('GET', this.scriptPath, this.scriptArgs, this.contextRoot, this.servicePath).then((webScriptData) => {
                this.data = webScriptData;
                if (this.showData) {
                    if (this.contentType === 'DATATABLE') {
                        this.data = this.showDataAsDataTable(webScriptData);
                    }
                }
                this.success.emit(this.data);
                resolve();
            }, (error) => {
                this.logService.log('Error' + error);
                reject();
            });
        });
    }
    /**
     * show the data in a ng2-alfresco-datatable
     *
     * @param {?} data
     *
     * @return {?} the data as datatable
     */
    showDataAsDataTable(data) {
        /** @type {?} */
        let datatableData = null;
        try {
            if (!data.schema) {
                data.schema = ObjectDataTableAdapter.generateSchema(data.data);
            }
            if (data.schema && data.schema.length > 0) {
                this.data = new ObjectDataTableAdapter(data.data, data.schema);
            }
        }
        catch (error) {
            this.logService.error('error during the cast as datatable');
        }
        return datatableData;
    }
    /**
     * @return {?}
     */
    clean() {
        this.data = undefined;
    }
    /**
     * @return {?}
     */
    isDataTableContent() {
        return this.contentType === 'DATATABLE';
    }
}
WebscriptComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-webscript-get',
                template: "<div *ngIf=\"showData\">\n    <div *ngIf=\"contentType === 'JSON'\" id=\"webscript-data-JSON\">{{data | json}}</div>\n    <div *ngIf=\"contentType === 'HTML'\" id=\"webscript-data-HTML\" [innerHTML]=\"data\"></div>\n    <div *ngIf=\"contentType === 'TEXT'\" id=\"webscript-data-TEXT\">{{data}}</div>\n    <div *ngIf=\"isDataTableContent()\">\n        <adf-datatable id=\"webscript-datatable-wrapper\" [data]=\"data\"></adf-datatable>\n        <div>\n            <div *ngIf=\"showError\" id=\"error\">{{'WEBSCRIPT.ERROR' | translate: {\n                data: data,\n                contentType: contentType\n                }\n                }}\n            </div>\n        </div>\n    </div>\n</div>\n"
            }] }
];
/** @nocollapse */
WebscriptComponent.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
WebscriptComponent.propDecorators = {
    scriptPath: [{ type: Input }],
    scriptArgs: [{ type: Input }],
    showData: [{ type: Input }],
    contextRoot: [{ type: Input }],
    servicePath: [{ type: Input }],
    contentType: [{ type: Input }],
    success: [{ type: Output }]
};
if (false) {
    /**
     * (required) Path to the webscript (as defined by webscript).
     * @type {?}
     */
    WebscriptComponent.prototype.scriptPath;
    /**
     * Arguments to pass to the webscript.
     * @type {?}
     */
    WebscriptComponent.prototype.scriptArgs;
    /**
     * Toggles whether to show or hide the data.
     * @type {?}
     */
    WebscriptComponent.prototype.showData;
    /**
     * Path where the application is deployed
     * @type {?}
     */
    WebscriptComponent.prototype.contextRoot;
    /**
     * Path that the webscript service is mapped to.
     * @type {?}
     */
    WebscriptComponent.prototype.servicePath;
    /**
     * Content type to interpret the data received from the webscript.
     * Can be "JSON" , "HTML" , "DATATABLE" or "TEXT"
     * @type {?}
     */
    WebscriptComponent.prototype.contentType;
    /**
     * Emitted when the operation succeeds. You can get the plain data from
     * the webscript through the **success** event parameter and use it as you
     * need in your application.
     * @type {?}
     */
    WebscriptComponent.prototype.success;
    /** @type {?} */
    WebscriptComponent.prototype.data;
    /** @type {?} */
    WebscriptComponent.prototype.showError;
    /**
     * @type {?}
     * @private
     */
    WebscriptComponent.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    WebscriptComponent.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vic2NyaXB0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29udGVudC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbIndlYnNjcmlwdC93ZWJzY3JpcHQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzVELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQmxGLE1BQU0sT0FBTyxrQkFBa0I7Ozs7O0lBc0MzQixZQUFvQixVQUE4QixFQUM5QixVQUFzQjtRQUR0QixlQUFVLEdBQVYsVUFBVSxDQUFvQjtRQUM5QixlQUFVLEdBQVYsVUFBVSxDQUFZOzs7O1FBM0IxQyxhQUFRLEdBQVksSUFBSSxDQUFDOzs7O1FBSXpCLGdCQUFXLEdBQVcsVUFBVSxDQUFDOzs7O1FBSWpDLGdCQUFXLEdBQVcsU0FBUyxDQUFDOzs7OztRQU1oQyxnQkFBVyxHQUFXLE1BQU0sQ0FBQzs7Ozs7O1FBTzdCLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTdCLFNBQUksR0FBUSxTQUFTLENBQUM7UUFDdEIsY0FBUyxHQUFZLEtBQUssQ0FBQztJQUkzQixDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFPO1FBQ2YsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2hCO1FBRUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNuQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsRUFBRSxFQUFFO2dCQUV6SixJQUFJLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztnQkFFMUIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO29CQUNmLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxXQUFXLEVBQUU7d0JBQ2xDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDO3FCQUN2RDtpQkFDSjtnQkFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBRTdCLE9BQU8sRUFBRSxDQUFDO1lBQ2QsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ1QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxDQUFDO2dCQUNyQyxNQUFNLEVBQUUsQ0FBQztZQUNiLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzs7Ozs7OztJQVNELG1CQUFtQixDQUFDLElBQVM7O1lBQ3JCLGFBQWEsR0FBUSxJQUFJO1FBQzdCLElBQUk7WUFFQSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDZCxJQUFJLENBQUMsTUFBTSxHQUFHLHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDbEU7WUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDbEU7U0FFSjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ1osSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztTQUMvRDtRQUVELE9BQU8sYUFBYSxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7SUFDMUIsQ0FBQzs7OztJQUVELGtCQUFrQjtRQUNkLE9BQU8sSUFBSSxDQUFDLFdBQVcsS0FBSyxXQUFXLENBQUM7SUFDNUMsQ0FBQzs7O1lBeEdKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3Qiwwc0JBQXVDO2FBQzFDOzs7O1lBMUJRLGtCQUFrQjtZQUFFLFVBQVU7Ozt5QkE4QmxDLEtBQUs7eUJBSUwsS0FBSzt1QkFJTCxLQUFLOzBCQUlMLEtBQUs7MEJBSUwsS0FBSzswQkFNTCxLQUFLO3NCQU9MLE1BQU07Ozs7Ozs7SUE3QlAsd0NBQ21COzs7OztJQUduQix3Q0FDZ0I7Ozs7O0lBR2hCLHNDQUN5Qjs7Ozs7SUFHekIseUNBQ2lDOzs7OztJQUdqQyx5Q0FDZ0M7Ozs7OztJQUtoQyx5Q0FDNkI7Ozs7Ozs7SUFNN0IscUNBQzZCOztJQUU3QixrQ0FBc0I7O0lBQ3RCLHVDQUEyQjs7Ozs7SUFFZix3Q0FBc0M7Ozs7O0lBQ3RDLHdDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IE9iamVjdERhdGFUYWJsZUFkYXB0ZXIgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgQWxmcmVzY29BcGlTZXJ2aWNlLCBMb2dTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiA8YWRmLXdlYnNjcmlwdC1nZXQgW3NjcmlwdFBhdGhdPVwic3RyaW5nXCJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIFtzY3JpcHRBcmdzXT1cIk9iamVjdFwiXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBbY29udGV4dFJvb3RdPVwic3RyaW5nXCJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIFtzZXJ2aWNlUGF0aF09XCJzdHJpbmdcIlxuICogICAgICAgICAgICAgICAgICAgICAgICAgW2NvbnRlbnRUeXBlXT1cIkpTT058SFRNTHxEQVRBVEFCTEVcIlxuICogICAgICAgICAgICAgICAgICAgICAgICAgKHN1Y2Nlc3MpPVwiY3VzdG9tTWV0aG9kKCRldmVudCk+XG4gKiA8L2FkZi13ZWJzY3JpcHQtZ2V0PlxuICpcbiAqIFRoaXMgY29tcG9uZW50LCBwcm92aWRlIGEgZ2V0IHdlYnNjcmlwdCB2aWV3ZXJcbiAqXG4gKiBASW5wdXRQYXJhbSB7c3RyaW5nfSBzY3JpcHRQYXRoIHBhdGggdG8gV2ViIFNjcmlwdCAoYXMgZGVmaW5lZCBieSBXZWIgU2NyaXB0KVxuICogQElucHV0UGFyYW0ge09iamVjdH0gc2NyaXB0QXJncyBhcmd1bWVudHMgdG8gcGFzcyB0byBXZWIgU2NyaXB0XG4gKiBASW5wdXRQYXJhbSB7c3RyaW5nfSBjb250ZXh0Um9vdCBwYXRoIHdoZXJlIGFwcGxpY2F0aW9uIGlzIGRlcGxveWVkIGRlZmF1bHQgdmFsdWUgJ2FsZnJlc2NvJ1xuICogQElucHV0UGFyYW0ge3N0cmluZ30gc2VydmljZVBhdGggcGF0aCB3aGVyZSBXZWIgU2NyaXB0IHNlcnZpY2UgaXMgbWFwcGVkIGRlZmF1bHQgdmFsdWUgJ3NlcnZpY2UnXG4gKiBASW5wdXRQYXJhbSB7c3RyaW5nfSBjb250ZW50VHlwZSBKU09OIHwgSFRNTCB8IERBVEFUQUJMRSB8IFRFWFRcbiAqXG4gKiBAT3V0cHV0IC0gc3VjY2VzcyAtIFRoZSBldmVudCBpcyBlbWl0dGVkIHdoZW4gdGhlIGRhdGEgYXJlIHJlY2VpdmVkXG4gKlxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi13ZWJzY3JpcHQtZ2V0JyxcbiAgICB0ZW1wbGF0ZVVybDogJ3dlYnNjcmlwdC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgV2Vic2NyaXB0Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICAgIC8qKiAocmVxdWlyZWQpIFBhdGggdG8gdGhlIHdlYnNjcmlwdCAoYXMgZGVmaW5lZCBieSB3ZWJzY3JpcHQpLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2NyaXB0UGF0aDogc3RyaW5nO1xuXG4gICAgLyoqIEFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSB3ZWJzY3JpcHQuICovXG4gICAgQElucHV0KClcbiAgICBzY3JpcHRBcmdzOiBhbnk7XG5cbiAgICAvKiogVG9nZ2xlcyB3aGV0aGVyIHRvIHNob3cgb3IgaGlkZSB0aGUgZGF0YS4gKi9cbiAgICBASW5wdXQoKVxuICAgIHNob3dEYXRhOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiBQYXRoIHdoZXJlIHRoZSBhcHBsaWNhdGlvbiBpcyBkZXBsb3llZCAqL1xuICAgIEBJbnB1dCgpXG4gICAgY29udGV4dFJvb3Q6IHN0cmluZyA9ICdhbGZyZXNjbyc7XG5cbiAgICAvKiogUGF0aCB0aGF0IHRoZSB3ZWJzY3JpcHQgc2VydmljZSBpcyBtYXBwZWQgdG8uICovXG4gICAgQElucHV0KClcbiAgICBzZXJ2aWNlUGF0aDogc3RyaW5nID0gJ3NlcnZpY2UnO1xuXG4gICAgLyoqIENvbnRlbnQgdHlwZSB0byBpbnRlcnByZXQgdGhlIGRhdGEgcmVjZWl2ZWQgZnJvbSB0aGUgd2Vic2NyaXB0LlxuICAgICAqIENhbiBiZSBcIkpTT05cIiAsIFwiSFRNTFwiICwgXCJEQVRBVEFCTEVcIiBvciBcIlRFWFRcIlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgY29udGVudFR5cGU6IHN0cmluZyA9ICdURVhUJztcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIG9wZXJhdGlvbiBzdWNjZWVkcy4gWW91IGNhbiBnZXQgdGhlIHBsYWluIGRhdGEgZnJvbVxuICAgICAqIHRoZSB3ZWJzY3JpcHQgdGhyb3VnaCB0aGUgKipzdWNjZXNzKiogZXZlbnQgcGFyYW1ldGVyIGFuZCB1c2UgaXQgYXMgeW91XG4gICAgICogbmVlZCBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHN1Y2Nlc3MgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBkYXRhOiBhbnkgPSB1bmRlZmluZWQ7XG4gICAgc2hvd0Vycm9yOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGxvZ1NlcnZpY2U6IExvZ1NlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgICAgIGlmICh0aGlzLnNob3dEYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFuKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkud2ViU2NyaXB0LmV4ZWN1dGVXZWJTY3JpcHQoJ0dFVCcsIHRoaXMuc2NyaXB0UGF0aCwgdGhpcy5zY3JpcHRBcmdzLCB0aGlzLmNvbnRleHRSb290LCB0aGlzLnNlcnZpY2VQYXRoKS50aGVuKCh3ZWJTY3JpcHREYXRhKSA9PiB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSB3ZWJTY3JpcHREYXRhO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hvd0RhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudFR5cGUgPT09ICdEQVRBVEFCTEUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLnNob3dEYXRhQXNEYXRhVGFibGUod2ViU2NyaXB0RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnN1Y2Nlc3MuZW1pdCh0aGlzLmRhdGEpO1xuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmxvZygnRXJyb3InICsgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNob3cgdGhlIGRhdGEgaW4gYSBuZzItYWxmcmVzY28tZGF0YXRhYmxlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqXG4gICAgICogQHJldHVybnMgdGhlIGRhdGEgYXMgZGF0YXRhYmxlXG4gICAgICovXG4gICAgc2hvd0RhdGFBc0RhdGFUYWJsZShkYXRhOiBhbnkpIHtcbiAgICAgICAgbGV0IGRhdGF0YWJsZURhdGE6IGFueSA9IG51bGw7XG4gICAgICAgIHRyeSB7XG5cbiAgICAgICAgICAgIGlmICghZGF0YS5zY2hlbWEpIHtcbiAgICAgICAgICAgICAgICBkYXRhLnNjaGVtYSA9IE9iamVjdERhdGFUYWJsZUFkYXB0ZXIuZ2VuZXJhdGVTY2hlbWEoZGF0YS5kYXRhKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGEuc2NoZW1hICYmIGRhdGEuc2NoZW1hLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBuZXcgT2JqZWN0RGF0YVRhYmxlQWRhcHRlcihkYXRhLmRhdGEsIGRhdGEuc2NoZW1hKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5sb2dTZXJ2aWNlLmVycm9yKCdlcnJvciBkdXJpbmcgdGhlIGNhc3QgYXMgZGF0YXRhYmxlJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0YXRhYmxlRGF0YTtcbiAgICB9XG5cbiAgICBjbGVhbigpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlzRGF0YVRhYmxlQ29udGVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudFR5cGUgPT09ICdEQVRBVEFCTEUnO1xuICAgIH1cbn1cbiJdfQ==
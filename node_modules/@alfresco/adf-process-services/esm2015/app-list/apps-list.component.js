/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AppsProcessService, TranslationService, CustomEmptyContentTemplateDirective } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, ContentChild } from '@angular/core';
import { Observable, of } from 'rxjs';
import { IconModel } from './icon.model';
import { share } from 'rxjs/operators';
export class AppsListComponent {
    /**
     * @param {?} appsProcessService
     * @param {?} translationService
     */
    constructor(appsProcessService, translationService) {
        this.appsProcessService = appsProcessService;
        this.translationService = translationService;
        /**
         * (**required**) Defines the layout of the apps. There are two possible
         * values, "GRID" and "LIST".
         */
        this.layoutType = AppsListComponent.LAYOUT_GRID;
        /**
         * Emitted when an app entry is clicked.
         */
        this.appClick = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        this.appList = [];
        this.loading = false;
        this.hasEmptyCustomContentTemplate = false;
        this.apps$ = new Observable((observer) => this.appsObserver = observer)
            .pipe(share());
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.isValidType()) {
            this.setDefaultLayoutType();
        }
        this.apps$.subscribe((app) => {
            this.appList.push(app);
        });
        this.iconsMDL = new IconModel();
        this.load();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.emptyCustomContent) {
            this.hasEmptyCustomContentTemplate = true;
        }
    }
    /**
     * @private
     * @return {?}
     */
    load() {
        this.loading = true;
        this.appsProcessService.getDeployedApplications()
            .subscribe((res) => {
            this.filterApps(res).forEach((app) => {
                if (this.isDefaultApp(app)) {
                    app.theme = AppsListComponent.DEFAULT_TASKS_APP_THEME;
                    app.icon = AppsListComponent.DEFAULT_TASKS_APP_ICON;
                    this.appsObserver.next(app);
                }
                else if (app.deploymentId) {
                    this.appsObserver.next(app);
                }
                this.loading = false;
            });
        }, (err) => {
            this.error.emit(err);
            this.loading = false;
        });
    }
    /**
     * @param {?} app
     * @return {?}
     */
    isDefaultApp(app) {
        return app.defaultAppId === AppsListComponent.DEFAULT_TASKS_APP;
    }
    /**
     * @param {?} app
     * @return {?}
     */
    getAppName(app) {
        return this.isDefaultApp(app)
            ? this.translationService.get(AppsListComponent.DEFAULT_TASKS_APP_NAME)
            : of(app.name);
    }
    /**
     * Pass the selected app as next
     * @param {?} app
     * @return {?}
     */
    selectApp(app) {
        this.currentApp = app;
        this.appClick.emit(app);
    }
    /**
     * Return true if the appId is the current app
     * @param {?} appId
     * @return {?}
     */
    isSelected(appId) {
        return (this.currentApp !== undefined && appId === this.currentApp.id);
    }
    /**
     * @private
     * @param {?} apps
     * @return {?}
     */
    filterApps(apps) {
        /** @type {?} */
        let filteredApps = [];
        if (this.filtersAppId) {
            apps.filter((app) => {
                this.filtersAppId.forEach((filter) => {
                    if (app.defaultAppId === filter.defaultAppId ||
                        app.deploymentId === filter.deploymentId ||
                        app.name === filter.name ||
                        app.id === filter.id ||
                        app.modelId === filter.modelId ||
                        app.tenantId === filter.tenantId) {
                        filteredApps.push(app);
                    }
                });
            });
        }
        else {
            return apps;
        }
        return filteredApps;
    }
    /**
     * Check if the value of the layoutType property is an allowed value
     * @return {?}
     */
    isValidType() {
        if (this.layoutType && (this.layoutType === AppsListComponent.LAYOUT_LIST || this.layoutType === AppsListComponent.LAYOUT_GRID)) {
            return true;
        }
        return false;
    }
    /**
     * Assign the default value to LayoutType
     * @return {?}
     */
    setDefaultLayoutType() {
        this.layoutType = AppsListComponent.LAYOUT_GRID;
    }
    /**
     * Return true if the layout type is LIST
     * @return {?}
     */
    isList() {
        return this.layoutType === AppsListComponent.LAYOUT_LIST;
    }
    /**
     * Return true if the layout type is GRID
     * @return {?}
     */
    isGrid() {
        return this.layoutType === AppsListComponent.LAYOUT_GRID;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return this.appList.length === 0;
    }
    /**
     * @return {?}
     */
    isLoading() {
        return this.loading;
    }
    /**
     * @param {?} app
     * @return {?}
     */
    getTheme(app) {
        return app.theme ? app.theme : '';
    }
    /**
     * @param {?} app
     * @return {?}
     */
    getBackgroundIcon(app) {
        return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(app.icon);
    }
}
AppsListComponent.LAYOUT_LIST = 'LIST';
AppsListComponent.LAYOUT_GRID = 'GRID';
AppsListComponent.DEFAULT_TASKS_APP = 'tasks';
AppsListComponent.DEFAULT_TASKS_APP_NAME = 'ADF_TASK_LIST.APPS.TASK_APP_NAME';
AppsListComponent.DEFAULT_TASKS_APP_THEME = 'theme-2';
AppsListComponent.DEFAULT_TASKS_APP_ICON = 'glyphicon-asterisk';
AppsListComponent.DEFAULT_TASKS_APP_MATERIAL_ICON = 'favorite_border';
AppsListComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-apps',
                template: "<div class=\"menu-container\" *ngIf=\"!isEmpty()\">\n    <mat-list *ngIf=\"isList()\" class=\"adf-app-list\">\n        <mat-list-item class=\"adf-app-list-item\" (click)=\"selectApp(app)\" (keyup.enter)=\"selectApp(app)\" *ngFor=\"let app of appList\" tabindex=\"0\" role=\"button\" title=\"{{app.name}}\">\n            <mat-icon matListIcon>touch_app</mat-icon>\n            <span matLine>{{getAppName(app) | async}}</span>\n        </mat-list-item>\n    </mat-list>\n    <div fxLayout=\"row wrap\" *ngIf=\"isGrid()\" class=\"adf-app-listgrid\">\n        <div *ngFor=\"let app of appList\"\n            class=\"adf-app-listgrid-item\"\n            fxFlex=\"33.33333%\" fxFlex.lt-md=\"50%\" fxFlex.lt-sm=\"100%\">\n                <mat-card tabindex=\"0\"\n                    fxLayout=\"column\"\n                    role=\"button\"\n                    class=\"adf-app-listgrid-item-card\"\n                    title=\"{{getAppName(app) | async}}\"\n                    [ngClass]=\"[getTheme(app)]\"\n                    (click)=\"selectApp(app)\"\n                    (keyup.enter)=\"selectApp(app)\">\n                        <div class=\"adf-app-listgrid-item-card-logo\">\n                            <mat-icon class=\"adf-app-listgrid-item-card-logo-icon\">{{getBackgroundIcon(app)}}</mat-icon>\n                        </div>\n                        <div mat-card-title class=\"adf-app-listgrid-item-card-title\">\n                            <h1>{{getAppName(app) | async}}</h1>\n                        </div>\n                        <mat-card-subtitle class=\"adf-app-listgrid-item-card-subtitle\" fxFlex=\"1 0 auto\">\n                            <div class=\"adf-line-clamp\">{{app.description}}</div>\n                        </mat-card-subtitle>\n\n                        <mat-card-actions class=\"adf-app-listgrid-item-card-actions\">\n                            <mat-icon class=\"adf-app-listgrid-item-card-actions-icon\" *ngIf=\"isSelected(app.id)\">done</mat-icon>\n                        </mat-card-actions>\n                </mat-card>\n        </div>\n    </div>\n</div>\n\n<ng-container *ngIf=\"isLoading(); else empty\">\n    <div class=\"adf-app-list-spinner\">\n        <mat-spinner></mat-spinner>\n    </div>\n</ng-container>\n\n<ng-template #empty>\n    <div class=\"adf-app-list-empty\" *ngIf=\"isEmpty()\">\n        <ng-content select=\"adf-custom-empty-content\" *ngIf=\"hasEmptyCustomContentTemplate; else defaultEmptyTemplate\" class=\"adf-custom-empty-template\"></ng-content>\n\n        <ng-template #defaultEmptyTemplate>\n            <adf-empty-content\n                icon=\"apps\"\n                [title]=\"'ADF_TASK_LIST.APPS.TITLE' | translate\"\n                [subtitle]=\"'ADF_TASK_LIST.APPS.SUBTITLE' | translate\">\n            </adf-empty-content>\n        </ng-template>\n    </div>\n</ng-template>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
AppsListComponent.ctorParameters = () => [
    { type: AppsProcessService },
    { type: TranslationService }
];
AppsListComponent.propDecorators = {
    emptyCustomContent: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
    layoutType: [{ type: Input }],
    filtersAppId: [{ type: Input }],
    appClick: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    AppsListComponent.LAYOUT_LIST;
    /** @type {?} */
    AppsListComponent.LAYOUT_GRID;
    /** @type {?} */
    AppsListComponent.DEFAULT_TASKS_APP;
    /** @type {?} */
    AppsListComponent.DEFAULT_TASKS_APP_NAME;
    /** @type {?} */
    AppsListComponent.DEFAULT_TASKS_APP_THEME;
    /** @type {?} */
    AppsListComponent.DEFAULT_TASKS_APP_ICON;
    /** @type {?} */
    AppsListComponent.DEFAULT_TASKS_APP_MATERIAL_ICON;
    /** @type {?} */
    AppsListComponent.prototype.emptyCustomContent;
    /**
     * (**required**) Defines the layout of the apps. There are two possible
     * values, "GRID" and "LIST".
     * @type {?}
     */
    AppsListComponent.prototype.layoutType;
    /**
     * Provides a way to filter the apps to show.
     * @type {?}
     */
    AppsListComponent.prototype.filtersAppId;
    /**
     * Emitted when an app entry is clicked.
     * @type {?}
     */
    AppsListComponent.prototype.appClick;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    AppsListComponent.prototype.error;
    /**
     * @type {?}
     * @private
     */
    AppsListComponent.prototype.appsObserver;
    /** @type {?} */
    AppsListComponent.prototype.apps$;
    /** @type {?} */
    AppsListComponent.prototype.currentApp;
    /** @type {?} */
    AppsListComponent.prototype.appList;
    /**
     * @type {?}
     * @private
     */
    AppsListComponent.prototype.iconsMDL;
    /** @type {?} */
    AppsListComponent.prototype.loading;
    /** @type {?} */
    AppsListComponent.prototype.hasEmptyCustomContentTemplate;
    /**
     * @type {?}
     * @private
     */
    AppsListComponent.prototype.appsProcessService;
    /**
     * @type {?}
     * @private
     */
    AppsListComponent.prototype.translationService;
}
//# sourceMappingURL=data:application/json;base64,
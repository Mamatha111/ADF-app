/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { from, forkJoin, throwError, of } from 'rxjs';
import { map, catchError, switchMap, flatMap, filter } from 'rxjs/operators';
import { TaskQueryRequestRepresentationModel } from '../models/filter.model';
import { Form } from '../models/form.model';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListModel } from '../models/task-list.model';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class TaskListService {
    /**
     * @param {?} apiService
     * @param {?} logService
     */
    constructor(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    /**
     * Gets all the filters in the list that belong to a task.
     * @param {?} taskId ID of the target task
     * @param {?} filterList List of filters to search through
     * @return {?} Filters belonging to the task
     */
    getFilterForTaskById(taskId, filterList) {
        return from(filterList)
            .pipe(flatMap((data) => this.isTaskRelatedToFilter(taskId, data)), filter((data) => data != null));
    }
    /**
     * Gets the search query for a task based on the supplied filter.
     * @private
     * @param {?} filterModel
     * @return {?} The search query
     */
    generateTaskRequestNodeFromFilter(filterModel) {
        /** @type {?} */
        let requestNode = {
            appDefinitionId: filterModel.appId,
            assignment: filterModel.filter.assignment,
            state: filterModel.filter.state,
            sort: filterModel.filter.sort
        };
        return new TaskQueryRequestRepresentationModel(requestNode);
    }
    /**
     * Checks if a taskId is filtered with the given filter.
     * @param {?} taskId ID of the target task
     * @param {?} filterModel The filter you want to check
     * @return {?} The filter if it is related or null otherwise
     */
    isTaskRelatedToFilter(taskId, filterModel) {
        /** @type {?} */
        let requestNodeForFilter = this.generateTaskRequestNodeFromFilter(filterModel);
        return from(this.callApiTasksFiltered(requestNodeForFilter))
            .pipe(map((res) => {
            return res.data.find((element) => element.id === taskId) ? filterModel : null;
        }), catchError((err) => this.handleError(err)));
    }
    /**
     * Gets all the tasks matching the supplied query.
     * @param {?} requestNode Query to search for tasks
     * @return {?} List of tasks
     */
    getTasks(requestNode) {
        return from(this.callApiTasksFiltered(requestNode))
            .pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Gets tasks matching a query and state value.
     * @param {?} requestNode Query to search for tasks
     * @param {?=} state Task state. Can be "open" or "completed".
     * @return {?} List of tasks
     */
    findTasksByState(requestNode, state) {
        if (state) {
            requestNode.state = state;
        }
        return this.getTasks(requestNode)
            .pipe(catchError(() => of(new TaskListModel())));
    }
    /**
     * Gets all tasks matching a query and state value.
     * @param {?} requestNode Query to search for tasks.
     * @param {?=} state Task state. Can be "open" or "completed".
     * @return {?} List of tasks
     */
    findAllTaskByState(requestNode, state) {
        if (state) {
            requestNode.state = state;
        }
        return this.getTotalTasks(requestNode)
            .pipe(switchMap((res) => {
            requestNode.size = res.total;
            return this.getTasks(requestNode);
        }));
    }
    /**
     * Gets all tasks matching the supplied query but ignoring the task state.
     * @param {?} requestNode Query to search for tasks
     * @return {?} List of tasks
     */
    findAllTasksWithoutState(requestNode) {
        return forkJoin(this.findTasksByState(requestNode, 'open'), this.findAllTaskByState(requestNode, 'completed'), (activeTasks, completedTasks) => {
            /** @type {?} */
            const tasks = Object.assign({}, activeTasks);
            tasks.total += completedTasks.total;
            tasks.data = tasks.data.concat(completedTasks.data);
            return tasks;
        });
    }
    /**
     * Gets details for a task.
     * @param {?} taskId ID of the target task.
     * @return {?} Task details
     */
    getTaskDetails(taskId) {
        return from(this.callApiTaskDetails(taskId))
            .pipe(map((details) => {
            return new TaskDetailsModel(details);
        }), catchError((err) => this.handleError(err)));
    }
    /**
     * Gets the checklist for a task.
     * @param {?} id ID of the target task
     * @return {?} Array of checklist task details
     */
    getTaskChecklist(id) {
        return from(this.callApiTaskChecklist(id))
            .pipe(map((response) => {
            /** @type {?} */
            const checklists = [];
            response.data.forEach((checklist) => {
                checklists.push(new TaskDetailsModel(checklist));
            });
            return checklists;
        }), catchError((err) => this.handleError(err)));
    }
    /**
     * Gets all available reusable forms.
     * @return {?} Array of form details
     */
    getFormList() {
        /** @type {?} */
        let opts = {
            'filter': 'myReusableForms',
            // String | filter
            'sort': 'modifiedDesc',
            // String | sort
            'modelType': 2 // Integer | modelType
        };
        return from(this.apiService.getInstance().activiti.modelsApi.getModels(opts))
            .pipe(map((response) => {
            /** @type {?} */
            let forms = [];
            response.data.forEach((form) => {
                forms.push(new Form(form.id, form.name));
            });
            return forms;
        }), catchError((err) => this.handleError(err)));
    }
    /**
     * Attaches a form to a task.
     * @param {?} taskId ID of the target task
     * @param {?} formId ID of the form to add
     * @return {?} Null response notifying when the operation is complete
     */
    attachFormToATask(taskId, formId) {
        return from(this.apiService.taskApi.attachForm(taskId, { 'formId': formId }))
            .pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Adds a subtask (ie, a checklist task) to a parent task.
     * @param {?} task The task to add
     * @return {?} The subtask that was added
     */
    addTask(task) {
        return from(this.callApiAddTask(task))
            .pipe(map((response) => {
            return new TaskDetailsModel(response);
        }), catchError((err) => this.handleError(err)));
    }
    /**
     * Deletes a subtask (ie, a checklist task) from a parent task.
     * @param {?} taskId The task to delete
     * @return {?} Null response notifying when the operation is complete
     */
    deleteTask(taskId) {
        return from(this.callApiDeleteTask(taskId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Deletes a form from a task.
     * @param {?} taskId Task id related to form
     * @return {?} Null response notifying when the operation is complete
     */
    deleteForm(taskId) {
        return from(this.callApiDeleteForm(taskId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Gives completed status to a task.
     * @param {?} taskId ID of the target task
     * @return {?} Null response notifying when the operation is complete
     */
    completeTask(taskId) {
        return from(this.apiService.taskApi.completeTask(taskId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Gets the total number of the tasks found by a query.
     * @param {?} requestNode Query to search for tasks
     * @return {?} Number of tasks
     */
    getTotalTasks(requestNode) {
        requestNode.size = 0;
        return from(this.callApiTasksFiltered(requestNode))
            .pipe(map((res) => {
            return res;
        }), catchError((err) => this.handleError(err)));
    }
    /**
     * Creates a new standalone task.
     * @param {?} task Details of the new task
     * @return {?} Details of the newly created task
     */
    createNewTask(task) {
        return from(this.callApiCreateTask(task))
            .pipe(map((response) => {
            return new TaskDetailsModel(response);
        }), catchError((err) => this.handleError(err)));
    }
    /**
     * Assigns a task to a user or group.
     * @param {?} taskId The task to assign
     * @param {?} requestNode User or group to assign the task to
     * @return {?} Details of the assigned task
     */
    assignTask(taskId, requestNode) {
        /** @type {?} */
        let assignee = { assignee: requestNode.id };
        return from(this.callApiAssignTask(taskId, assignee))
            .pipe(map((response) => {
            return new TaskDetailsModel(response);
        }), catchError((err) => this.handleError(err)));
    }
    /**
     * Assigns a task to a user.
     * @param {?} taskId ID of the task to assign
     * @param {?} userId ID of the user to assign the task to
     * @return {?} Details of the assigned task
     */
    assignTaskByUserId(taskId, userId) {
        /** @type {?} */
        const assignee = (/** @type {?} */ ({ assignee: userId }));
        return from(this.callApiAssignTask(taskId, assignee))
            .pipe(map((response) => {
            return new TaskDetailsModel(response);
        }), catchError((err) => this.handleError(err)));
    }
    /**
     * Claims a task for the current user.
     * @param {?} taskId ID of the task to claim
     * @return {?} Details of the claimed task
     */
    claimTask(taskId) {
        return from(this.apiService.taskApi.claimTask(taskId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Un-claims a task for the current user.
     * @param {?} taskId ID of the task to unclaim
     * @return {?} Null response notifying when the operation is complete
     */
    unclaimTask(taskId) {
        return from(this.apiService.taskApi.unclaimTask(taskId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * Updates the details (name, description, due date) for a task.
     * @param {?} taskId ID of the task to update
     * @param {?} updated Data to update the task (as a `TaskUpdateRepresentation` instance).
     * @return {?} Updated task details
     */
    updateTask(taskId, updated) {
        return from(this.apiService.taskApi.updateTask(taskId, updated))
            .pipe(map((result) => (/** @type {?} */ (result))), catchError((err) => this.handleError(err)));
    }
    /**
     * Fetches the Task Audit information in PDF format.
     * @param {?} taskId ID of the target task
     * @return {?} Binary PDF data
     */
    fetchTaskAuditPdfById(taskId) {
        return from(this.apiService.taskApi.getTaskAuditPdf(taskId))
            .pipe(map((data) => (/** @type {?} */ (data))), catchError((err) => this.handleError(err)));
    }
    /**
     * Fetch the Task Audit information in JSON format
     * @param {?} taskId ID of the target task
     * @return {?} JSON data
     */
    fetchTaskAuditJsonById(taskId) {
        return from(this.apiService.taskApi.getTaskAuditJson(taskId))
            .pipe(catchError((err) => this.handleError(err)));
    }
    /**
     * @private
     * @param {?} requestNode
     * @return {?}
     */
    callApiTasksFiltered(requestNode) {
        return this.apiService.taskApi.listTasks(requestNode);
    }
    /**
     * @private
     * @param {?} taskId
     * @return {?}
     */
    callApiTaskDetails(taskId) {
        return this.apiService.taskApi.getTask(taskId);
    }
    /**
     * @private
     * @param {?} task
     * @return {?}
     */
    callApiAddTask(task) {
        return this.apiService.taskApi.addSubtask(task.parentTaskId, task);
    }
    /**
     * @private
     * @param {?} taskId
     * @return {?}
     */
    callApiDeleteTask(taskId) {
        return this.apiService.taskApi.deleteTask(taskId);
    }
    /**
     * @private
     * @param {?} taskId
     * @return {?}
     */
    callApiDeleteForm(taskId) {
        return this.apiService.taskApi.removeForm(taskId);
    }
    /**
     * @private
     * @param {?} taskId
     * @return {?}
     */
    callApiTaskChecklist(taskId) {
        return this.apiService.taskApi.getChecklist(taskId);
    }
    /**
     * @private
     * @param {?} task
     * @return {?}
     */
    callApiCreateTask(task) {
        return this.apiService.taskApi.createNewTask(task);
    }
    /**
     * @private
     * @param {?} taskId
     * @param {?} requestNode
     * @return {?}
     */
    callApiAssignTask(taskId, requestNode) {
        return this.apiService.taskApi.assignTask(taskId, requestNode);
    }
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    }
}
TaskListService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TaskListService.ctorParameters = () => [
    { type: AlfrescoApiService },
    { type: LogService }
];
/** @nocollapse */ TaskListService.ngInjectableDef = i0.defineInjectable({ factory: function TaskListService_Factory() { return new TaskListService(i0.inject(i1.AlfrescoApiService), i0.inject(i1.LogService)); }, token: TaskListService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaskListService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    TaskListService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,
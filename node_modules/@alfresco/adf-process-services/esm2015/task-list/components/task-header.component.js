/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { BpmUserService, CardViewDateItemModel, CardViewMapItemModel, CardViewTextItemModel, LogService, TranslationService, AppConfigService } from '@alfresco/adf-core';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListService } from './../services/tasklist.service';
export class TaskHeaderComponent {
    /**
     * @param {?} activitiTaskService
     * @param {?} bpmUserService
     * @param {?} translationService
     * @param {?} logService
     * @param {?} appConfig
     */
    constructor(activitiTaskService, bpmUserService, translationService, logService, appConfig) {
        this.activitiTaskService = activitiTaskService;
        this.bpmUserService = bpmUserService;
        this.translationService = translationService;
        this.logService = logService;
        this.appConfig = appConfig;
        /**
         * The name of the form.
         */
        this.formName = null;
        /**
         * Emitted when the task is claimed.
         */
        this.claim = new EventEmitter();
        /**
         * Emitted when the task is unclaimed (ie, requeued).
         */
        this.unclaim = new EventEmitter();
        this.inEdit = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.loadCurrentBpmUserId();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.refreshData();
    }
    /**
     * @private
     * @param {?} parentInfoMap
     * @return {?}
     */
    initDefaultProperties(parentInfoMap) {
        return [
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.ASSIGNEE',
                value: this.taskDetails.getFullName(),
                key: 'assignee',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.ASSIGNEE_DEFAULT'),
                clickable: !this.isCompleted(),
                icon: 'create'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.STATUS',
                value: this.getTaskStatus(),
                key: 'status'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.PRIORITY',
                value: this.taskDetails.priority,
                key: 'priority',
                editable: true
            }),
            new CardViewDateItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.DUE_DATE',
                value: this.taskDetails.dueDate,
                key: 'dueDate',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.DUE_DATE_DEFAULT'),
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.CATEGORY',
                value: this.taskDetails.category,
                key: 'category',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.CATEGORY_DEFAULT')
            }),
            new CardViewMapItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.PARENT_NAME',
                value: parentInfoMap,
                key: 'parentName',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.PARENT_NAME_DEFAULT'),
                clickable: true
            }),
            new CardViewDateItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.CREATED',
                value: this.taskDetails.created,
                key: 'created'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.DURATION',
                value: this.getTaskDuration(),
                key: 'duration'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.PARENT_TASK_ID',
                value: this.taskDetails.parentTaskId,
                key: 'parentTaskId'
            }),
            new CardViewDateItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.END_DATE',
                value: this.taskDetails.endDate,
                key: 'endDate'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.ID',
                value: this.taskDetails.id,
                key: 'id'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.DESCRIPTION',
                value: this.taskDetails.description,
                key: 'description',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.DESCRIPTION_DEFAULT'),
                multiline: true,
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.FORM_NAME',
                value: this.formName,
                key: 'formName',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.FORM_NAME_DEFAULT'),
                clickable: !!this.formName,
                icon: 'create'
            })
        ];
    }
    /**
     * Refresh the card data
     * @return {?}
     */
    refreshData() {
        if (this.taskDetails) {
            /** @type {?} */
            const parentInfoMap = this.getParentInfo();
            /** @type {?} */
            const defaultProperties = this.initDefaultProperties(parentInfoMap);
            /** @type {?} */
            const filteredProperties = this.appConfig.get('adf-task-header.presets.properties');
            this.properties = defaultProperties.filter((cardItem) => this.isValidSelection(filteredProperties, cardItem));
        }
    }
    /**
     * @private
     * @param {?} filteredProperties
     * @param {?} cardItem
     * @return {?}
     */
    isValidSelection(filteredProperties, cardItem) {
        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;
    }
    /**
     * Loads current bpm userId
     * @private
     * @return {?}
     */
    loadCurrentBpmUserId() {
        this.bpmUserService.getCurrentUserInfo().subscribe((res) => {
            this.currentUserId = res ? +res.id : null;
        });
    }
    /**
     * Return the process parent information
     * @return {?}
     */
    getParentInfo() {
        if (this.taskDetails.processInstanceId && this.taskDetails.processDefinitionName) {
            return new Map([[this.taskDetails.processInstanceId, this.taskDetails.processDefinitionName]]);
        }
    }
    /**
     * Does the task have an assignee
     * @return {?}
     */
    hasAssignee() {
        return !!this.taskDetails.assignee ? true : false;
    }
    /**
     * Returns true if the task is assigned to logged in user
     * @param {?} userId
     * @return {?}
     */
    isAssignedTo(userId) {
        return this.hasAssignee() ? this.taskDetails.assignee.id === userId : false;
    }
    /**
     * Return true if the task assigned
     * @return {?}
     */
    isAssignedToCurrentUser() {
        return this.hasAssignee() && this.isAssignedTo(this.currentUserId);
    }
    /**
     * Return true if the user is a candidate member
     * @return {?}
     */
    isCandidateMember() {
        return this.taskDetails.managerOfCandidateGroup || this.taskDetails.memberOfCandidateGroup || this.taskDetails.memberOfCandidateUsers;
    }
    /**
     * Return true if the task claimable
     * @return {?}
     */
    isTaskClaimable() {
        return !this.hasAssignee() && this.isCandidateMember();
    }
    /**
     * Return true if the task claimed by candidate member.
     * @return {?}
     */
    isTaskClaimedByCandidateMember() {
        return this.isCandidateMember() && this.isAssignedToCurrentUser() && !this.isCompleted();
    }
    /**
     * Returns task's status
     * @return {?}
     */
    getTaskStatus() {
        return (this.taskDetails && this.taskDetails.isCompleted()) ? 'Completed' : 'Running';
    }
    /**
     * Claim task
     *
     * @param {?} taskId
     * @return {?}
     */
    claimTask(taskId) {
        this.activitiTaskService.claimTask(taskId).subscribe((res) => {
            this.logService.info('Task claimed');
            this.claim.emit(taskId);
        });
    }
    /**
     * Unclaim task
     *
     * @param {?} taskId
     * @return {?}
     */
    unclaimTask(taskId) {
        this.activitiTaskService.unclaimTask(taskId).subscribe((res) => {
            this.logService.info('Task unclaimed');
            this.unclaim.emit(taskId);
        });
    }
    /**
     * Returns true if the task is completed
     * @return {?}
     */
    isCompleted() {
        return this.taskDetails && !!this.taskDetails.endDate;
    }
    /**
     * @return {?}
     */
    getTaskDuration() {
        return this.taskDetails.duration ? `${this.taskDetails.duration} ms` : '';
    }
}
TaskHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-task-header',
                template: "<mat-card *ngIf=\"taskDetails\" class=\"adf-card-container\">\n    <mat-card-content>\n        <adf-card-view [properties]=\"properties\" [editable]=\"!isCompleted()\"></adf-card-view>\n    </mat-card-content>\n\n    <mat-card-actions class=\"adf-controls\">\n        <button *ngIf=\"isTaskClaimedByCandidateMember()\" mat-button data-automation-id=\"header-unclaim-button\" id=\"unclaim-task\" (click)=\"unclaimTask(taskDetails.id)\" class=\"adf-claim-controls\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.UNCLAIM' | translate }}\n        </button>\n        <button *ngIf=\"isTaskClaimable()\" mat-button data-automation-id=\"header-claim-button\" id=\"claim-task\" (click)=\"claimTask(taskDetails.id)\" class=\"adf-claim-controls\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.CLAIM' | translate }}\n        </button>\n    </mat-card-actions>\n</mat-card>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
TaskHeaderComponent.ctorParameters = () => [
    { type: TaskListService },
    { type: BpmUserService },
    { type: TranslationService },
    { type: LogService },
    { type: AppConfigService }
];
TaskHeaderComponent.propDecorators = {
    formName: [{ type: Input }],
    taskDetails: [{ type: Input }],
    claim: [{ type: Output }],
    unclaim: [{ type: Output }]
};
if (false) {
    /**
     * The name of the form.
     * @type {?}
     */
    TaskHeaderComponent.prototype.formName;
    /**
     * (required) Details related to the task.
     * @type {?}
     */
    TaskHeaderComponent.prototype.taskDetails;
    /**
     * Emitted when the task is claimed.
     * @type {?}
     */
    TaskHeaderComponent.prototype.claim;
    /**
     * Emitted when the task is unclaimed (ie, requeued).
     * @type {?}
     */
    TaskHeaderComponent.prototype.unclaim;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.currentUserId;
    /** @type {?} */
    TaskHeaderComponent.prototype.properties;
    /** @type {?} */
    TaskHeaderComponent.prototype.inEdit;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.activitiTaskService;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.bpmUserService;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.translationService;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.appConfig;
}
//# sourceMappingURL=data:application/json;base64,
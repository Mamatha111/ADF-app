/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataTableSchema, CustomEmptyContentTemplateDirective, CustomLoadingContentTemplateDirective } from '@alfresco/adf-core';
import { AppConfigService, PaginationComponent, UserPreferencesService } from '@alfresco/adf-core';
import { DatePipe } from '@angular/common';
import { Component, ContentChild, EventEmitter, Input, Output } from '@angular/core';
import { ProcessFilterParamRepresentationModel } from '../models/filter-process.model';
import { processPresetsDefaultModel } from '../models/process-preset.model';
import { ProcessService } from '../services/process.service';
import { BehaviorSubject } from 'rxjs';
import moment from 'moment-es6';
export class ProcessInstanceListComponent extends DataTableSchema {
    /**
     * @param {?} processService
     * @param {?} userPreferences
     * @param {?} appConfig
     */
    constructor(processService, userPreferences, appConfig) {
        super(appConfig, ProcessInstanceListComponent.PRESET_KEY, processPresetsDefaultModel);
        this.processService = processService;
        this.userPreferences = userPreferences;
        this.FORMAT_DATE = 'll';
        /**
         * The page number of the processes to fetch.
         */
        this.page = 0;
        /**
         * The number of processes to fetch in each page.
         */
        this.size = PaginationComponent.DEFAULT_PAGINATION.maxItems;
        /**
         * Toggles multiple row selection, which renders checkboxes at the beginning of each row
         */
        this.multiselect = false;
        /**
         * Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,
         * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for
         * multiple rows.
         */
        this.selectionMode = 'single'; // none|single|multiple
        // none|single|multiple
        /**
         * Toggles default selection of the first row
         */
        this.selectFirstRow = true;
        /**
         * Emitted when a row in the process list is clicked.
         */
        this.rowClick = new EventEmitter();
        /**
         * Emitted when the list of process instances has been loaded successfully from the server.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when an error occurs while loading the list of process instances from the server.
         */
        this.error = new EventEmitter();
        this.isLoading = true;
        this.rows = [];
        this.sorting = ['created', 'desc'];
        this.size = this.userPreferences.paginationSize;
        this.pagination = new BehaviorSubject((/** @type {?} */ ({
            maxItems: this.size,
            skipCount: 0,
            totalItems: 0
        })));
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.createDatatableSchema();
        if (this.data && this.data.getColumns().length === 0) {
            this.data.setColumns(this.columns);
        }
        if (this.appId != null) {
            this.reload();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.isPropertyChanged(changes)) {
            if (this.isSortChanged(changes)) {
                this.sorting = this.sort ? this.sort.split('-') : this.sorting;
            }
            this.reload();
        }
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    isSortChanged(changes) {
        /** @type {?} */
        const actualSort = changes['sort'];
        return actualSort && actualSort.currentValue && actualSort.currentValue !== actualSort.previousValue;
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    isPropertyChanged(changes) {
        /** @type {?} */
        let changed = false;
        /** @type {?} */
        let appId = changes['appId'];
        /** @type {?} */
        let processDefinitionId = changes['processDefinitionId'];
        /** @type {?} */
        let processInstanceId = changes['processInstanceId'];
        /** @type {?} */
        let state = changes['state'];
        /** @type {?} */
        let sort = changes['sort'];
        /** @type {?} */
        let page = changes['page'];
        /** @type {?} */
        let size = changes['size'];
        if (appId && appId.currentValue) {
            changed = true;
        }
        else if (processDefinitionId) {
            changed = true;
        }
        else if (processInstanceId) {
            changed = true;
        }
        else if (state && state.currentValue) {
            changed = true;
        }
        else if (sort && sort.currentValue) {
            changed = true;
        }
        else if (page && page.currentValue !== page.previousValue) {
            changed = true;
        }
        else if (size && size.currentValue !== size.previousValue) {
            changed = true;
        }
        return changed;
    }
    /**
     * @return {?}
     */
    reload() {
        this.requestNode = this.createRequestNode();
        this.load(this.requestNode);
    }
    /**
     * @private
     * @param {?} requestNode
     * @return {?}
     */
    load(requestNode) {
        this.isLoading = true;
        this.processService.getProcesses(requestNode)
            .subscribe((response) => {
            this.rows = this.optimizeProcessDetails(response.data);
            this.selectFirst();
            this.success.emit(response);
            this.isLoading = false;
            this.pagination.next({
                count: response.data.length,
                maxItems: this.size,
                skipCount: this.page * this.size,
                totalItems: response.total
            });
        }, (error) => {
            this.error.emit(error);
            this.isLoading = false;
        });
    }
    /**
     * Select the first instance of a list if present
     * @return {?}
     */
    selectFirst() {
        if (this.selectFirstRow) {
            if (!this.isListEmpty()) {
                /** @type {?} */
                let dataRow = this.rows[0];
                dataRow.isSelected = true;
                this.currentInstanceId = dataRow['id'];
            }
            else {
                this.currentInstanceId = null;
            }
        }
    }
    /**
     * Return the current id
     * @return {?}
     */
    getCurrentId() {
        return this.currentInstanceId;
    }
    /**
     * Check if the list is empty
     * @return {?}
     */
    isListEmpty() {
        return !this.rows || this.rows.length === 0;
    }
    /**
     * Emit the event rowClick passing the current task id when the row is clicked
     * @param {?} event
     * @return {?}
     */
    onRowClick(event) {
        /** @type {?} */
        let item = event;
        this.currentInstanceId = item.value.getValue('id');
        this.rowClick.emit(this.currentInstanceId);
    }
    /**
     * Emit the event rowClick passing the current task id when pressed the Enter key on the selected row
     * @param {?} event
     * @return {?}
     */
    onRowKeyUp(event) {
        if (event.detail.keyboardEvent.key === 'Enter') {
            event.preventDefault();
            this.currentInstanceId = event.detail.row.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        }
    }
    /**
     * Optimize name field
     * @private
     * @param {?} instances
     * @return {?}
     */
    optimizeProcessDetails(instances) {
        instances = instances.map((instance) => {
            instance.name = this.getProcessNameOrDescription(instance, 'medium');
            if (instance.started) {
                instance.started = moment(instance.started).format(this.FORMAT_DATE);
            }
            return instance;
        });
        return instances;
    }
    /**
     * @param {?} processInstance
     * @param {?} dateFormat
     * @return {?}
     */
    getProcessNameOrDescription(processInstance, dateFormat) {
        /** @type {?} */
        let name = '';
        if (processInstance) {
            name = processInstance.name ||
                processInstance.processDefinitionName + ' - ' + this.getFormatDate(processInstance.started, dateFormat);
        }
        return name;
    }
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    getFormatDate(value, format) {
        /** @type {?} */
        let datePipe = new DatePipe('en-US');
        try {
            return datePipe.transform(value, format);
        }
        catch (err) {
            return '';
        }
    }
    /**
     * @private
     * @return {?}
     */
    createRequestNode() {
        /** @type {?} */
        let requestNode = {
            appDefinitionId: this.appId,
            processDefinitionId: this.processDefinitionId,
            processInstanceId: this.processInstanceId,
            state: this.state,
            sort: this.sort,
            page: this.page,
            size: this.size,
            start: 0
        };
        return new ProcessFilterParamRepresentationModel(requestNode);
    }
    /**
     * @param {?} params
     * @return {?}
     */
    updatePagination(params) {
        /** @type {?} */
        const needsReload = params.maxItems || params.skipCount;
        this.size = params.maxItems;
        this.page = this.currentPage(params.skipCount, params.maxItems);
        if (needsReload) {
            this.reload();
        }
    }
    /**
     * @param {?} skipCount
     * @param {?} maxItems
     * @return {?}
     */
    currentPage(skipCount, maxItems) {
        return (skipCount && maxItems) ? Math.floor(skipCount / maxItems) : 0;
    }
}
ProcessInstanceListComponent.PRESET_KEY = 'adf-process-list.presets';
ProcessInstanceListComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-process-instance-list',
                template: "<adf-datatable #dataTable\n    [data]=\"data\"\n    [rows]=\"rows\"\n    [columns]=\"columns\"\n    [sorting]=\"sorting\"\n    [loading]=\"isLoading\"\n    [selectionMode]=\"selectionMode\"\n    [multiselect]=\"multiselect\"\n    (rowClick)=\"onRowClick($event)\"\n    (row-keyup)=\"onRowKeyUp($event)\">\n    <adf-loading-content-template>\n        <ng-template>\n            <!--Add your custom loading template here-->\n            <mat-progress-spinner\n                *ngIf=\"!customLoadingContent\"\n                class=\"adf-process-list-loading-margin\"\n                [color]=\"'primary'\"\n                [mode]=\"'indeterminate'\">\n            </mat-progress-spinner>\n            <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n        </ng-template>\n    </adf-loading-content-template>\n    <adf-no-content-template>\n        <ng-template>\n                <adf-empty-content *ngIf=\"!customEmptyContent\"\n                    icon=\"assessment\"\n                    [title]=\"(requestNode ? 'ADF_PROCESS_LIST.LIST.TITLE' : 'ADF_PROCESS_LIST.FILTERS.MESSAGES.NONE') | translate \"\n                    [subtitle]=\"'ADF_PROCESS_LIST.LIST.SUBTITLE'| translate\">\n                </adf-empty-content>\n            <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n        </ng-template>\n    </adf-no-content-template>\n</adf-datatable>\n",
                styles: [".adf-process-list-loading-margin{margin-left:calc((100% - 100px)/ 2);margin-right:calc((100% - 100px)/ 2)}.no-content-message{font-size:16px;font-weight:700;text-align:center;opacity:.54;color:#000}"]
            }] }
];
/** @nocollapse */
ProcessInstanceListComponent.ctorParameters = () => [
    { type: ProcessService },
    { type: UserPreferencesService },
    { type: AppConfigService }
];
ProcessInstanceListComponent.propDecorators = {
    customEmptyContent: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
    customLoadingContent: [{ type: ContentChild, args: [CustomLoadingContentTemplateDirective,] }],
    appId: [{ type: Input }],
    processDefinitionId: [{ type: Input }],
    processInstanceId: [{ type: Input }],
    state: [{ type: Input }],
    sort: [{ type: Input }],
    page: [{ type: Input }],
    size: [{ type: Input }],
    data: [{ type: Input }],
    multiselect: [{ type: Input }],
    selectionMode: [{ type: Input }],
    selectFirstRow: [{ type: Input }],
    rowClick: [{ type: Output }],
    success: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ProcessInstanceListComponent.PRESET_KEY;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.FORMAT_DATE;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.customEmptyContent;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.customLoadingContent;
    /**
     * The id of the app.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.appId;
    /**
     * The Definition Id of the process.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.processDefinitionId;
    /**
     * The id of the process instance.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.processInstanceId;
    /**
     * Defines the state of the processes. Possible values are `running`, `completed` and `all`
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.state;
    /**
     * Defines the sort ordering of the list. Possible values are `created-desc`, `created-asc`,
     * `ended-desc`, `ended-asc`.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.sort;
    /**
     * The page number of the processes to fetch.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.page;
    /**
     * The number of processes to fetch in each page.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.size;
    /**
     * Data source to define the datatable.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.data;
    /**
     * Toggles multiple row selection, which renders checkboxes at the beginning of each row
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.multiselect;
    /**
     * Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,
     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for
     * multiple rows.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.selectionMode;
    /**
     * Toggles default selection of the first row
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.selectFirstRow;
    /**
     * Emitted when a row in the process list is clicked.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.rowClick;
    /**
     * Emitted when the list of process instances has been loaded successfully from the server.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.success;
    /**
     * Emitted when an error occurs while loading the list of process instances from the server.
     * @type {?}
     */
    ProcessInstanceListComponent.prototype.error;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.requestNode;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.currentInstanceId;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.isLoading;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.rows;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.sorting;
    /** @type {?} */
    ProcessInstanceListComponent.prototype.pagination;
    /**
     * @type {?}
     * @private
     */
    ProcessInstanceListComponent.prototype.processService;
    /**
     * @type {?}
     * @private
     */
    ProcessInstanceListComponent.prototype.userPreferences;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtcHJvY2Vzcy1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInByb2Nlc3MtbGlzdC9jb21wb25lbnRzL3Byb2Nlc3MtbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUNILGVBQWUsRUFHZixtQ0FBbUMsRUFDbkMscUNBQXFDLEVBQ3hDLE1BQU0sb0JBQW9CLENBQUM7QUFDNUIsT0FBTyxFQUNILGdCQUFnQixFQUVoQixtQkFBbUIsRUFFbkIsc0JBQXNCLEVBQ3pCLE1BQU0sb0JBQW9CLENBQUM7QUFDNUIsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFFSCxTQUFTLEVBQ1QsWUFBWSxFQUNaLFlBQVksRUFDWixLQUFLLEVBRUwsTUFBTSxFQUVULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXZDLE9BQU8sTUFBTSxNQUFNLFlBQVksQ0FBQztBQU9oQyxNQUFNLE9BQU8sNEJBQTZCLFNBQVEsZUFBZTs7Ozs7O0lBZ0Y3RCxZQUFvQixjQUE4QixFQUM5QixlQUF1QyxFQUMvQyxTQUEyQjtRQUNuQyxLQUFLLENBQUMsU0FBUyxFQUFFLDRCQUE0QixDQUFDLFVBQVUsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO1FBSHRFLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixvQkFBZSxHQUFmLGVBQWUsQ0FBd0I7UUE5RXBELGdCQUFXLEdBQVcsSUFB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dEMsdURBQStDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgICBEYXRhVGFibGVTY2hlbWEsXG4gICAgRGF0YVJvd0V2ZW50LFxuICAgIERhdGFUYWJsZUFkYXB0ZXIsXG4gICAgQ3VzdG9tRW1wdHlDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgQ3VzdG9tTG9hZGluZ0NvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZVxufSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHtcbiAgICBBcHBDb25maWdTZXJ2aWNlLFxuICAgIFBhZ2luYXRlZENvbXBvbmVudCxcbiAgICBQYWdpbmF0aW9uQ29tcG9uZW50LFxuICAgIFBhZ2luYXRpb25Nb2RlbCxcbiAgICBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlXG59IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBEYXRlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICAgIEFmdGVyQ29udGVudEluaXQsXG4gICAgQ29tcG9uZW50LFxuICAgIENvbnRlbnRDaGlsZCxcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSW5wdXQsXG4gICAgT25DaGFuZ2VzLFxuICAgIE91dHB1dCxcbiAgICBTaW1wbGVDaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJvY2Vzc0ZpbHRlclBhcmFtUmVwcmVzZW50YXRpb25Nb2RlbCB9IGZyb20gJy4uL21vZGVscy9maWx0ZXItcHJvY2Vzcy5tb2RlbCc7XG5pbXBvcnQgeyBwcm9jZXNzUHJlc2V0c0RlZmF1bHRNb2RlbCB9IGZyb20gJy4uL21vZGVscy9wcm9jZXNzLXByZXNldC5tb2RlbCc7XG5pbXBvcnQgeyBQcm9jZXNzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3Byb2Nlc3Muc2VydmljZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFByb2Nlc3NMaXN0TW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvcHJvY2Vzcy1saXN0Lm1vZGVsJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50LWVzNic7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLXByb2Nlc3MtaW5zdGFuY2UtbGlzdCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcHJvY2Vzcy1saXN0LmNvbXBvbmVudC5jc3MnXSxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcHJvY2Vzcy1saXN0LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQcm9jZXNzSW5zdGFuY2VMaXN0Q29tcG9uZW50IGV4dGVuZHMgRGF0YVRhYmxlU2NoZW1hICBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgQWZ0ZXJDb250ZW50SW5pdCwgUGFnaW5hdGVkQ29tcG9uZW50IHtcblxuICAgIHN0YXRpYyBQUkVTRVRfS0VZID0gJ2FkZi1wcm9jZXNzLWxpc3QucHJlc2V0cyc7XG4gICAgcHVibGljIEZPUk1BVF9EQVRFOiBzdHJpbmcgPSAnbGwnO1xuXG4gICAgQENvbnRlbnRDaGlsZChDdXN0b21FbXB0eUNvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZSlcbiAgICBjdXN0b21FbXB0eUNvbnRlbnQ6IEN1c3RvbUVtcHR5Q29udGVudFRlbXBsYXRlRGlyZWN0aXZlO1xuXG4gICAgQENvbnRlbnRDaGlsZChDdXN0b21Mb2FkaW5nQ29udGVudFRlbXBsYXRlRGlyZWN0aXZlKVxuICAgIGN1c3RvbUxvYWRpbmdDb250ZW50OiBDdXN0b21Mb2FkaW5nQ29udGVudFRlbXBsYXRlRGlyZWN0aXZlO1xuXG4gICAgLyoqIFRoZSBpZCBvZiB0aGUgYXBwLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgYXBwSWQ6IG51bWJlcjtcblxuICAgIC8qKiBUaGUgRGVmaW5pdGlvbiBJZCBvZiB0aGUgcHJvY2Vzcy4gKi9cbiAgICBASW5wdXQoKVxuICAgIHByb2Nlc3NEZWZpbml0aW9uSWQ6IHN0cmluZztcblxuICAgIC8qKiBUaGUgaWQgb2YgdGhlIHByb2Nlc3MgaW5zdGFuY2UuICovXG4gICAgQElucHV0KClcbiAgICBwcm9jZXNzSW5zdGFuY2VJZDogbnVtYmVyfHN0cmluZztcblxuICAgIC8qKiBEZWZpbmVzIHRoZSBzdGF0ZSBvZiB0aGUgcHJvY2Vzc2VzLiBQb3NzaWJsZSB2YWx1ZXMgYXJlIGBydW5uaW5nYCwgYGNvbXBsZXRlZGAgYW5kIGBhbGxgICovXG4gICAgQElucHV0KClcbiAgICBzdGF0ZTogc3RyaW5nO1xuXG4gICAgLyoqIERlZmluZXMgdGhlIHNvcnQgb3JkZXJpbmcgb2YgdGhlIGxpc3QuIFBvc3NpYmxlIHZhbHVlcyBhcmUgYGNyZWF0ZWQtZGVzY2AsIGBjcmVhdGVkLWFzY2AsXG4gICAgICogYGVuZGVkLWRlc2NgLCBgZW5kZWQtYXNjYC5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHNvcnQ6IHN0cmluZztcblxuICAgIC8qKiBUaGUgcGFnZSBudW1iZXIgb2YgdGhlIHByb2Nlc3NlcyB0byBmZXRjaC4gKi9cbiAgICBASW5wdXQoKVxuICAgIHBhZ2U6IG51bWJlciA9IDA7XG5cbiAgICAvKiogVGhlIG51bWJlciBvZiBwcm9jZXNzZXMgdG8gZmV0Y2ggaW4gZWFjaCBwYWdlLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2l6ZTogbnVtYmVyID0gUGFnaW5hdGlvbkNvbXBvbmVudC5ERUZBVUxUX1BBR0lOQVRJT04ubWF4SXRlbXM7XG5cbiAgICAvKiogRGF0YSBzb3VyY2UgdG8gZGVmaW5lIHRoZSBkYXRhdGFibGUuICovXG4gICAgQElucHV0KClcbiAgICBkYXRhOiBEYXRhVGFibGVBZGFwdGVyO1xuXG4gICAgLyoqIFRvZ2dsZXMgbXVsdGlwbGUgcm93IHNlbGVjdGlvbiwgd2hpY2ggcmVuZGVycyBjaGVja2JveGVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgZWFjaCByb3cgKi9cbiAgICBASW5wdXQoKVxuICAgIG11bHRpc2VsZWN0OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogUm93IHNlbGVjdGlvbiBtb2RlLiBDYW4gYmUgbm9uZSwgYHNpbmdsZWAgb3IgYG11bHRpcGxlYC4gRm9yIGBtdWx0aXBsZWAgbW9kZSxcbiAgICAgKiB5b3UgY2FuIHVzZSBDbWQgKG1hY09TKSBvciBDdHJsIChXaW4pIG1vZGlmaWVyIGtleSB0byB0b2dnbGUgc2VsZWN0aW9uIGZvclxuICAgICAqIG11bHRpcGxlIHJvd3MuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBzZWxlY3Rpb25Nb2RlOiBzdHJpbmcgPSAnc2luZ2xlJzsgLy8gbm9uZXxzaW5nbGV8bXVsdGlwbGVcblxuICAgIC8qKiBUb2dnbGVzIGRlZmF1bHQgc2VsZWN0aW9uIG9mIHRoZSBmaXJzdCByb3cgKi9cbiAgICBASW5wdXQoKVxuICAgIHNlbGVjdEZpcnN0Um93OiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYSByb3cgaW4gdGhlIHByb2Nlc3MgbGlzdCBpcyBjbGlja2VkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHJvd0NsaWNrOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgbGlzdCBvZiBwcm9jZXNzIGluc3RhbmNlcyBoYXMgYmVlbiBsb2FkZWQgc3VjY2Vzc2Z1bGx5IGZyb20gdGhlIHNlcnZlci4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBzdWNjZXNzOiBFdmVudEVtaXR0ZXI8UHJvY2Vzc0xpc3RNb2RlbD4gPSBuZXcgRXZlbnRFbWl0dGVyPFByb2Nlc3NMaXN0TW9kZWw+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3VycyB3aGlsZSBsb2FkaW5nIHRoZSBsaXN0IG9mIHByb2Nlc3MgaW5zdGFuY2VzIGZyb20gdGhlIHNlcnZlci4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIHJlcXVlc3ROb2RlOiBQcm9jZXNzRmlsdGVyUGFyYW1SZXByZXNlbnRhdGlvbk1vZGVsO1xuICAgIGN1cnJlbnRJbnN0YW5jZUlkOiBzdHJpbmc7XG4gICAgaXNMb2FkaW5nOiBib29sZWFuID0gdHJ1ZTtcbiAgICByb3dzOiBhbnlbXSA9IFtdO1xuICAgIHNvcnRpbmc6IGFueVtdID0gWydjcmVhdGVkJywgJ2Rlc2MnXTtcblxuICAgIHBhZ2luYXRpb246IEJlaGF2aW9yU3ViamVjdDxQYWdpbmF0aW9uTW9kZWw+O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwcm9jZXNzU2VydmljZTogUHJvY2Vzc1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB1c2VyUHJlZmVyZW5jZXM6IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgYXBwQ29uZmlnOiBBcHBDb25maWdTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGFwcENvbmZpZywgUHJvY2Vzc0luc3RhbmNlTGlzdENvbXBvbmVudC5QUkVTRVRfS0VZLCBwcm9jZXNzUHJlc2V0c0RlZmF1bHRNb2RlbCk7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMudXNlclByZWZlcmVuY2VzLnBhZ2luYXRpb25TaXplO1xuXG4gICAgICAgIHRoaXMucGFnaW5hdGlvbiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8UGFnaW5hdGlvbk1vZGVsPig8UGFnaW5hdGlvbk1vZGVsPiB7XG4gICAgICAgICAgICBtYXhJdGVtczogdGhpcy5zaXplLFxuICAgICAgICAgICAgc2tpcENvdW50OiAwLFxuICAgICAgICAgICAgdG90YWxJdGVtczogMFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlRGF0YXRhYmxlU2NoZW1hKCk7XG4gICAgICAgIGlmICh0aGlzLmRhdGEgJiYgdGhpcy5kYXRhLmdldENvbHVtbnMoKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zZXRDb2x1bW5zKHRoaXMuY29sdW1ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5hcHBJZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICBpZiAodGhpcy5pc1Byb3BlcnR5Q2hhbmdlZChjaGFuZ2VzKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNTb3J0Q2hhbmdlZChjaGFuZ2VzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc29ydGluZyA9IHRoaXMuc29ydCA/IHRoaXMuc29ydC5zcGxpdCgnLScpIDogdGhpcy5zb3J0aW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZWxvYWQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaXNTb3J0Q2hhbmdlZChjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGFjdHVhbFNvcnQgPSBjaGFuZ2VzWydzb3J0J107XG4gICAgICAgIHJldHVybiBhY3R1YWxTb3J0ICYmIGFjdHVhbFNvcnQuY3VycmVudFZhbHVlICYmIGFjdHVhbFNvcnQuY3VycmVudFZhbHVlICE9PSBhY3R1YWxTb3J0LnByZXZpb3VzVmFsdWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc1Byb3BlcnR5Q2hhbmdlZChjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBjaGFuZ2VkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAgICAgbGV0IGFwcElkID0gY2hhbmdlc1snYXBwSWQnXTtcbiAgICAgICAgbGV0IHByb2Nlc3NEZWZpbml0aW9uSWQgPSBjaGFuZ2VzWydwcm9jZXNzRGVmaW5pdGlvbklkJ107XG4gICAgICAgIGxldCBwcm9jZXNzSW5zdGFuY2VJZCA9IGNoYW5nZXNbJ3Byb2Nlc3NJbnN0YW5jZUlkJ107XG4gICAgICAgIGxldCBzdGF0ZSA9IGNoYW5nZXNbJ3N0YXRlJ107XG4gICAgICAgIGxldCBzb3J0ID0gY2hhbmdlc1snc29ydCddO1xuICAgICAgICBsZXQgcGFnZSA9IGNoYW5nZXNbJ3BhZ2UnXTtcbiAgICAgICAgbGV0IHNpemUgPSBjaGFuZ2VzWydzaXplJ107XG5cbiAgICAgICAgaWYgKGFwcElkICYmIGFwcElkLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzc0RlZmluaXRpb25JZCkge1xuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzc0luc3RhbmNlSWQpIHtcbiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlICYmIHN0YXRlLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoc29ydCAmJiBzb3J0LmN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAocGFnZSAmJiBwYWdlLmN1cnJlbnRWYWx1ZSAhPT0gcGFnZS5wcmV2aW91c1ZhbHVlKSB7XG4gICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChzaXplICYmIHNpemUuY3VycmVudFZhbHVlICE9PSBzaXplLnByZXZpb3VzVmFsdWUpIHtcbiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH1cblxuICAgIHB1YmxpYyByZWxvYWQoKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdE5vZGUgPSB0aGlzLmNyZWF0ZVJlcXVlc3ROb2RlKCk7XG4gICAgICAgIHRoaXMubG9hZCh0aGlzLnJlcXVlc3ROb2RlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWQocmVxdWVzdE5vZGU6IFByb2Nlc3NGaWx0ZXJQYXJhbVJlcHJlc2VudGF0aW9uTW9kZWwpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnByb2Nlc3NTZXJ2aWNlLmdldFByb2Nlc3NlcyhyZXF1ZXN0Tm9kZSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm93cyA9IHRoaXMub3B0aW1pemVQcm9jZXNzRGV0YWlscyhyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RGaXJzdCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Y2Nlc3MuZW1pdChyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFnaW5hdGlvbi5uZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiByZXNwb25zZS5kYXRhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heEl0ZW1zOiB0aGlzLnNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICBza2lwQ291bnQ6IHRoaXMucGFnZSAqIHRoaXMuc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsSXRlbXM6IHJlc3BvbnNlLnRvdGFsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VsZWN0IHRoZSBmaXJzdCBpbnN0YW5jZSBvZiBhIGxpc3QgaWYgcHJlc2VudFxuICAgICAqL1xuICAgIHNlbGVjdEZpcnN0KCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RGaXJzdFJvdykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzTGlzdEVtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgZGF0YVJvdyA9IHRoaXMucm93c1swXTtcbiAgICAgICAgICAgICAgICBkYXRhUm93LmlzU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEluc3RhbmNlSWQgPSBkYXRhUm93WydpZCddO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRJbnN0YW5jZUlkID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgY3VycmVudCBpZFxuICAgICAqL1xuICAgIGdldEN1cnJlbnRJZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50SW5zdGFuY2VJZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgbGlzdCBpcyBlbXB0eVxuICAgICAqL1xuICAgIGlzTGlzdEVtcHR5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMucm93cyB8fCB0aGlzLnJvd3MubGVuZ3RoID09PSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVtaXQgdGhlIGV2ZW50IHJvd0NsaWNrIHBhc3NpbmcgdGhlIGN1cnJlbnQgdGFzayBpZCB3aGVuIHRoZSByb3cgaXMgY2xpY2tlZFxuICAgICAqIEBwYXJhbSBldmVudFxuICAgICAqL1xuICAgIG9uUm93Q2xpY2soZXZlbnQ6IERhdGFSb3dFdmVudCkge1xuICAgICAgICBsZXQgaXRlbSA9IGV2ZW50O1xuICAgICAgICB0aGlzLmN1cnJlbnRJbnN0YW5jZUlkID0gaXRlbS52YWx1ZS5nZXRWYWx1ZSgnaWQnKTtcbiAgICAgICAgdGhpcy5yb3dDbGljay5lbWl0KHRoaXMuY3VycmVudEluc3RhbmNlSWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVtaXQgdGhlIGV2ZW50IHJvd0NsaWNrIHBhc3NpbmcgdGhlIGN1cnJlbnQgdGFzayBpZCB3aGVuIHByZXNzZWQgdGhlIEVudGVyIGtleSBvbiB0aGUgc2VsZWN0ZWQgcm93XG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICovXG4gICAgb25Sb3dLZXlVcChldmVudDogQ3VzdG9tRXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmRldGFpbC5rZXlib2FyZEV2ZW50LmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEluc3RhbmNlSWQgPSBldmVudC5kZXRhaWwucm93LmdldFZhbHVlKCdpZCcpO1xuICAgICAgICAgICAgdGhpcy5yb3dDbGljay5lbWl0KHRoaXMuY3VycmVudEluc3RhbmNlSWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3B0aW1pemUgbmFtZSBmaWVsZFxuICAgICAqIEBwYXJhbSBpbnN0YW5jZXNcbiAgICAgKi9cbiAgICBwcml2YXRlIG9wdGltaXplUHJvY2Vzc0RldGFpbHMoaW5zdGFuY2VzOiBhbnlbXSk6IGFueVtdIHtcbiAgICAgICAgaW5zdGFuY2VzID0gaW5zdGFuY2VzLm1hcCgoaW5zdGFuY2UpID0+IHtcbiAgICAgICAgICAgIGluc3RhbmNlLm5hbWUgPSB0aGlzLmdldFByb2Nlc3NOYW1lT3JEZXNjcmlwdGlvbihpbnN0YW5jZSwgJ21lZGl1bScpO1xuICAgICAgICAgICAgaWYgKGluc3RhbmNlLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5zdGFydGVkID0gbW9tZW50KGluc3RhbmNlLnN0YXJ0ZWQpLmZvcm1hdCh0aGlzLkZPUk1BVF9EQVRFKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZXM7XG4gICAgfVxuXG4gICAgZ2V0UHJvY2Vzc05hbWVPckRlc2NyaXB0aW9uKHByb2Nlc3NJbnN0YW5jZSwgZGF0ZUZvcm1hdCk6IHN0cmluZyB7XG4gICAgICAgIGxldCBuYW1lID0gJyc7XG4gICAgICAgIGlmIChwcm9jZXNzSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIG5hbWUgPSBwcm9jZXNzSW5zdGFuY2UubmFtZSB8fFxuICAgICAgICAgICAgICAgIHByb2Nlc3NJbnN0YW5jZS5wcm9jZXNzRGVmaW5pdGlvbk5hbWUgKyAnIC0gJyArIHRoaXMuZ2V0Rm9ybWF0RGF0ZShwcm9jZXNzSW5zdGFuY2Uuc3RhcnRlZCwgZGF0ZUZvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuXG4gICAgZ2V0Rm9ybWF0RGF0ZSh2YWx1ZSwgZm9ybWF0OiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IGRhdGVQaXBlID0gbmV3IERhdGVQaXBlKCdlbi1VUycpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGVQaXBlLnRyYW5zZm9ybSh2YWx1ZSwgZm9ybWF0KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVJlcXVlc3ROb2RlKCkge1xuICAgICAgICBsZXQgcmVxdWVzdE5vZGUgPSB7XG4gICAgICAgICAgICBhcHBEZWZpbml0aW9uSWQ6IHRoaXMuYXBwSWQsXG4gICAgICAgICAgICBwcm9jZXNzRGVmaW5pdGlvbklkOiB0aGlzLnByb2Nlc3NEZWZpbml0aW9uSWQsXG4gICAgICAgICAgICBwcm9jZXNzSW5zdGFuY2VJZDogdGhpcy5wcm9jZXNzSW5zdGFuY2VJZCxcbiAgICAgICAgICAgIHN0YXRlOiB0aGlzLnN0YXRlLFxuICAgICAgICAgICAgc29ydDogdGhpcy5zb3J0LFxuICAgICAgICAgICAgcGFnZTogdGhpcy5wYWdlLFxuICAgICAgICAgICAgc2l6ZTogdGhpcy5zaXplLFxuICAgICAgICAgICAgc3RhcnQ6IDBcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9jZXNzRmlsdGVyUGFyYW1SZXByZXNlbnRhdGlvbk1vZGVsKHJlcXVlc3ROb2RlKTtcbiAgICB9XG5cbiAgICB1cGRhdGVQYWdpbmF0aW9uKHBhcmFtczogUGFnaW5hdGlvbk1vZGVsKSB7XG4gICAgICAgIGNvbnN0IG5lZWRzUmVsb2FkID0gcGFyYW1zLm1heEl0ZW1zIHx8IHBhcmFtcy5za2lwQ291bnQ7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHBhcmFtcy5tYXhJdGVtcztcbiAgICAgICAgdGhpcy5wYWdlID0gdGhpcy5jdXJyZW50UGFnZShwYXJhbXMuc2tpcENvdW50LCBwYXJhbXMubWF4SXRlbXMpO1xuICAgICAgICBpZiAobmVlZHNSZWxvYWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjdXJyZW50UGFnZShza2lwQ291bnQ6IG51bWJlciwgbWF4SXRlbXM6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAoc2tpcENvdW50ICYmIG1heEl0ZW1zKSA/IE1hdGguZmxvb3Ioc2tpcENvdW50IC8gbWF4SXRlbXMpIDogMDtcbiAgICB9XG59XG4iXX0=
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Observable, from, forkJoin, throwError } from 'rxjs';
import { FilterProcessRepresentationModel } from '../models/filter-process.model';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
export class ProcessFilterService {
    /**
     * @param {?} alfrescoApiService
     */
    constructor(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    /**
     * Gets all filters defined for a Process App.
     * @param {?} appId ID of the target app
     * @return {?} Array of filter details
     */
    getProcessFilters(appId) {
        return from(this.callApiProcessFilters(appId))
            .pipe(map((response) => {
            /** @type {?} */
            let filters = [];
            response.data.forEach((filter) => {
                /** @type {?} */
                let filterModel = new FilterProcessRepresentationModel(filter);
                filters.push(filterModel);
            });
            return filters;
        }), catchError((err) => this.handleProcessError(err)));
    }
    /**
     * Retrieves the process filter by ID.
     * @param {?} filterId ID of the filter
     * @param {?=} appId ID of the target app
     * @return {?} Details of the filter
     */
    getProcessFilterById(filterId, appId) {
        return from(this.callApiProcessFilters(appId))
            .pipe(map((response) => {
            return response.data.find((filter) => filter.id === filterId);
        }), catchError((err) => this.handleProcessError(err)));
    }
    /**
     * Retrieves the process filter by name.
     * @param {?} filterName Name of the filter
     * @param {?=} appId ID of the target app
     * @return {?} Details of the filter
     */
    getProcessFilterByName(filterName, appId) {
        return from(this.callApiProcessFilters(appId))
            .pipe(map((response) => {
            return response.data.find((filter) => filter.name === filterName);
        }), catchError((err) => this.handleProcessError(err)));
    }
    /**
     * Creates and returns the default filters for an app.
     * @param {?} appId ID of the target app
     * @return {?} Default filters just created
     */
    createDefaultFilters(appId) {
        /** @type {?} */
        let runningFilter = this.getRunningFilterInstance(appId);
        /** @type {?} */
        let runningObservable = this.addProcessFilter(runningFilter);
        /** @type {?} */
        let completedFilter = this.getCompletedFilterInstance(appId);
        /** @type {?} */
        let completedObservable = this.addProcessFilter(completedFilter);
        /** @type {?} */
        let allFilter = this.getAllFilterInstance(appId);
        /** @type {?} */
        let allObservable = this.addProcessFilter(allFilter);
        return new Observable((observer) => {
            forkJoin(runningObservable, completedObservable, allObservable).subscribe((res) => {
                /** @type {?} */
                let filters = [];
                res.forEach((filter) => {
                    if (filter.name === runningFilter.name) {
                        runningFilter.id = filter.id;
                        filters.push(runningFilter);
                    }
                    else if (filter.name === completedFilter.name) {
                        completedFilter.id = filter.id;
                        filters.push(completedFilter);
                    }
                    else if (filter.name === allFilter.name) {
                        allFilter.id = filter.id;
                        filters.push(allFilter);
                    }
                });
                observer.next(filters);
                observer.complete();
            }, (err) => {
                this.handleProcessError(err);
            });
        });
    }
    /**
     * Creates and returns a filter that matches "running" process instances.
     * @param {?} appId ID of the target app
     * @return {?} Filter just created
     */
    getRunningFilterInstance(appId) {
        return new FilterProcessRepresentationModel({
            'name': 'Running',
            'appId': appId,
            'recent': true,
            'icon': 'glyphicon-random',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'running' }
        });
    }
    /**
     * Returns a static Completed filter instance.
     * @private
     * @param {?} appId ID of the target app
     * @return {?} Details of the filter
     */
    getCompletedFilterInstance(appId) {
        return new FilterProcessRepresentationModel({
            'name': 'Completed',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-ok-sign',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed' }
        });
    }
    /**
     * Returns a static All filter instance.
     * @private
     * @param {?} appId ID of the target app
     * @return {?} Details of the filter
     */
    getAllFilterInstance(appId) {
        return new FilterProcessRepresentationModel({
            'name': 'All',
            'appId': appId,
            'recent': true,
            'icon': 'glyphicon-th',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'all' }
        });
    }
    /**
     * Adds a filter.
     * @param {?} filter The filter to add
     * @return {?} The filter just added
     */
    addProcessFilter(filter) {
        return from(this.alfrescoApiService.getInstance().activiti.userFiltersApi.createUserProcessInstanceFilter(filter))
            .pipe(map((response) => {
            return response;
        }), catchError((err) => this.handleProcessError(err)));
    }
    /**
     * Calls `getUserProcessInstanceFilters` from the Alfresco JS API.
     * @param {?=} appId ID of the target app
     * @return {?} List of filter details
     */
    callApiProcessFilters(appId) {
        if (appId) {
            return this.alfrescoApiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters({ appId: appId });
        }
        else {
            return this.alfrescoApiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters();
        }
    }
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    handleProcessError(error) {
        return throwError(error || 'Server error');
    }
}
ProcessFilterService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ProcessFilterService.ctorParameters = () => [
    { type: AlfrescoApiService }
];
/** @nocollapse */ ProcessFilterService.ngInjectableDef = i0.defineInjectable({ factory: function ProcessFilterService_Factory() { return new ProcessFilterService(i0.inject(i1.AlfrescoApiService)); }, token: ProcessFilterService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProcessFilterService.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,
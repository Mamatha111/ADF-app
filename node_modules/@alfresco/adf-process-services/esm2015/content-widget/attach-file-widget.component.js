/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector */
import { Component, ViewEncapsulation } from '@angular/core';
import { UploadWidgetComponent, FormService, LogService, ThumbnailService, ProcessContentService, ActivitiContentService, ContentService, AppConfigValues, AppConfigService } from '@alfresco/adf-core';
import { ContentNodeDialogService } from '@alfresco/adf-content-services';
import { from, zip, of } from 'rxjs';
import { mergeMap } from 'rxjs/operators';
import { AttachFileWidgetDialogService } from './attach-file-widget-dialog.service';
export class AttachFileWidgetComponent extends UploadWidgetComponent {
    /**
     * @param {?} formService
     * @param {?} logger
     * @param {?} thumbnails
     * @param {?} processContentService
     * @param {?} activitiContentService
     * @param {?} contentService
     * @param {?} contentDialog
     * @param {?} appConfigService
     * @param {?} attachDialogService
     */
    constructor(formService, logger, thumbnails, processContentService, activitiContentService, contentService, contentDialog, appConfigService, attachDialogService) {
        super(formService, logger, thumbnails, processContentService);
        this.formService = formService;
        this.logger = logger;
        this.thumbnails = thumbnails;
        this.processContentService = processContentService;
        this.activitiContentService = activitiContentService;
        this.contentService = contentService;
        this.contentDialog = contentDialog;
        this.appConfigService = appConfigService;
        this.attachDialogService = attachDialogService;
        this.repositoryList = [];
        this.tempFilesList = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.field &&
            this.field.value &&
            this.field.value.length > 0) {
            this.hasFile = true;
        }
        this.getMultipleFileParam();
        this.activitiContentService.getAlfrescoRepositories(null, true).subscribe((repoList) => {
            this.repositoryList = repoList;
        });
        this.formService.taskSaved.subscribe((formSaved) => {
            if (formSaved.form.id === this.field.form.id) {
                this.tempFilesList = [];
            }
        });
    }
    /**
     * @return {?}
     */
    isFileSourceConfigured() {
        return !!this.field.params && !!this.field.params.fileSource;
    }
    /**
     * @return {?}
     */
    isMultipleSourceUpload() {
        return !this.field.readOnly && this.isFileSourceConfigured() && !this.isOnlyLocalSourceSelected();
    }
    /**
     * @return {?}
     */
    isAllFileSourceSelected() {
        return this.field.params &&
            this.field.params.fileSource &&
            this.field.params.fileSource.serviceId === 'all-file-sources';
    }
    /**
     * @return {?}
     */
    isOnlyLocalSourceSelected() {
        return this.field.params &&
            this.field.params.fileSource &&
            this.field.params.fileSource.serviceId === 'local-file';
    }
    /**
     * @return {?}
     */
    isSimpleUploadButton() {
        return this.isUploadButtonVisible() &&
            !this.isFileSourceConfigured() ||
            this.isOnlyLocalSourceSelected();
    }
    /**
     * @return {?}
     */
    isUploadButtonVisible() {
        return (!this.hasFile || this.multipleOption) && !this.field.readOnly;
    }
    /**
     * @return {?}
     */
    isDefinedSourceFolder() {
        return !!this.field.params &&
            !!this.field.params.fileSource &&
            !!this.field.params.fileSource.selectedFolder;
    }
    /**
     * @param {?} file
     * @return {?}
     */
    isTemporaryFile(file) {
        return this.tempFilesList.findIndex((elem) => elem.name === file.name) >= 0;
    }
    /**
     * @return {?}
     */
    openSelectDialogFromFileSource() {
        /** @type {?} */
        let params = this.field.params;
        if (this.isDefinedSourceFolder()) {
            this.contentDialog.openFileBrowseDialogByFolderId(params.fileSource.selectedFolder.pathId).subscribe((selections) => {
                this.tempFilesList.push(...selections);
                this.uploadFileFromCS(selections, this.field.params.fileSource.selectedFolder.accountId, this.field.params.fileSource.selectedFolder.siteId);
            });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onAttachFileChanged(event) {
        this.tempFilesList.push(...Array.from(event.target.files));
        this.onFileChanged(event);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    onRemoveAttachFile(file) {
        if (this.isTemporaryFile(file)) {
            this.tempFilesList.splice(this.tempFilesList.indexOf(((/** @type {?} */ (file))).contentBlob), 1);
        }
        this.removeFile(file);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    onAttachFileClicked(file) {
        if (file.isExternal) {
            this.logger.info(`The file ${file.name} comes from an external source and cannot be showed at this moment`);
            return;
        }
        if (this.isTemporaryFile(file)) {
            this.formService.formContentClicked.next(file);
        }
        else {
            this.fileClicked(file);
        }
    }
    /**
     * @param {?} file
     * @return {?}
     */
    downloadContent(file) {
        if (this.isTemporaryFile(file)) {
            this.contentService.downloadBlob(((/** @type {?} */ (file))).contentBlob, file.name);
        }
        else {
            this.processContentService.getFileRawContent(((/** @type {?} */ (file))).id).subscribe((blob) => {
                this.contentService.downloadBlob(blob, ((/** @type {?} */ (file))).name);
            }, (err) => {
                this.logger.error('Impossible retrieve content for download');
            });
        }
    }
    /**
     * @param {?} repository
     * @return {?}
     */
    openSelectDialog(repository) {
        /** @type {?} */
        const accountIdentifier = 'alfresco-' + repository.id + '-' + repository.name;
        /** @type {?} */
        let currentECMHost = this.getDomainHost(this.appConfigService.get(AppConfigValues.ECMHOST));
        /** @type {?} */
        let chosenRepositoryHost = this.getDomainHost(repository.repositoryUrl);
        if (chosenRepositoryHost !== currentECMHost) {
            /** @type {?} */
            let formattedRepositoryHost = repository.repositoryUrl.replace('/alfresco', '');
            this.attachDialogService.openLogin(formattedRepositoryHost).subscribe((selections) => {
                selections.forEach((node) => node.isExternal = true);
                this.tempFilesList.push(...selections);
                this.uploadFileFromCS(selections, accountIdentifier);
            });
        }
        else {
            this.contentDialog.openFileBrowseDialogBySite().subscribe((selections) => {
                this.tempFilesList.push(...selections);
                this.uploadFileFromCS(selections, accountIdentifier);
            });
        }
    }
    /**
     * @private
     * @param {?} fileNodeList
     * @param {?} accountId
     * @param {?=} siteId
     * @return {?}
     */
    uploadFileFromCS(fileNodeList, accountId, siteId) {
        /** @type {?} */
        const filesSaved = [];
        from(fileNodeList).pipe(mergeMap((node) => zip(of(node.content.mimeType), this.activitiContentService.applyAlfrescoNode(node, siteId, accountId), of(node.isExternal))))
            .subscribe(([mimeType, res, isExternal]) => {
            res.mimeType = mimeType;
            res.isExternal = isExternal;
            filesSaved.push(res);
        }, (error) => {
            this.logger.error(error);
        }, () => {
            this.field.value = filesSaved;
            this.field.json.value = filesSaved;
            this.hasFile = true;
        });
    }
    /**
     * @private
     * @param {?} urlToCheck
     * @return {?}
     */
    getDomainHost(urlToCheck) {
        /** @type {?} */
        let result = urlToCheck.match('^(?:https?:\/\/)?(?:[^@\/\n]+@)?(?:www\.)?([^:\/?\n]+)');
        return result[1];
    }
}
AttachFileWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'attach-widget',
                template: "<div class=\"adf-attach-widget {{field.className}}\"\n    [class.adf-invalid]=\"!field.isValid\"\n    [class.adf-readonly]=\"field.readOnly\">\n    <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name}}\n        <span *ngIf=\"isRequired()\">*</span>\n    </label>\n    <div class=\"adf-attach-widget-container\">\n        <div id=\"adf-attach-widget-simple-upload\" *ngIf=\"isSimpleUploadButton() && isUploadButtonVisible()\">\n            <a mat-raised-button color=\"primary\">\n                {{ 'FORM.FIELD.UPLOAD' | translate }}\n                <mat-icon>file_upload</mat-icon>\n                <input #uploadFiles\n                        [multiple]=\"multipleOption\"\n                        type=\"file\"\n                        [id]=\"field.id\"\n                        (change)=\"onAttachFileChanged($event)\" />\n            </a>\n        </div>\n        <div class=\"adf-attach-widget__menu-upload\" *ngIf=\"isUploadButtonVisible() && isMultipleSourceUpload()\">\n            <button mat-raised-button color=\"primary\" [matMenuTriggerFor]=\"menu\" [id]=\"field.id\">\n                    {{ 'FORM.FIELD.UPLOAD' | translate }}\n                    <mat-icon>attach_file</mat-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\" class=\"adf-attach-widget__menu-content\">\n                <button mat-menu-item (click)=\"uploadFile.click()\"\n                        id=\"attach-local-file\"\n                        *ngIf=\"isAllFileSourceSelected()\">\n                    {{ 'FORM.FIELD.LOCALSTORAGE' | translate }}\n                    <mat-icon>file_upload</mat-icon>\n                    <input #uploadFile\n                            class=\"adf-attach-widget__input-type\"\n                            [multiple]=\"multipleOption\"\n                            type=\"file\"\n                            [id]=\"field.id\"\n                            (change)=\"onAttachFileChanged($event)\" />\n                </button>\n                <button mat-menu-item\n                        *ngIf=\"isDefinedSourceFolder()\"\n                        id=\"attach-{{field.params?.fileSource?.name}}\"\n                        (click)=\"openSelectDialogFromFileSource()\">\n                        {{field.params?.fileSource?.name}}\n                        <mat-icon>\n                            <img class=\"adf-attach-widget__image-logo\" src=\"../assets/images/alfresco-flower.svg\">\n                        </mat-icon>\n                </button>\n                <div *ngIf=\"!isDefinedSourceFolder()\">\n                    <button mat-menu-item *ngFor=\"let repo of repositoryList\"\n                            id=\"attach-{{repo?.name}}\"\n                           (click)=\"openSelectDialog(repo)\">\n                            {{repo.name}}\n                            <mat-icon>\n                                <img class=\"adf-attach-widget__image-logo\" src=\"../assets/images/alfresco-flower.svg\">\n                            </mat-icon>\n                    </button>\n                </div>\n            </mat-menu>\n        </div>\n    </div>\n</div>\n\n<div id=\"adf-attach-widget-readonly-list\">\n    <mat-list *ngIf=\"hasFile\">\n        <mat-list-item class=\"adf-attach-files-row\" *ngFor=\"let file of field.value\">\n            <img mat-list-icon class=\"adf-attach-widget__icon\"\n                 [id]=\"'file-'+file.id+'-icon'\"\n                 [src]=\"file.content ? getIcon(file.content.mimeType) : getIcon(file.mimeType)\"\n                 [alt]=\"mimeTypeIcon\"\n                 (click)=\"onAttachFileClicked(file)\"\n                 (keyup.enter)=\"onAttachFileClicked(file)\"\n                 role=\"button\"\n                 tabindex=\"0\"/>\n            <span matLine id=\"{{'file-'+file.id}}\" (click)=\"onAttachFileClicked(file)\" (keyup.enter)=\"onAttachFileClicked(file)\"\n                  role=\"button\" tabindex=\"0\" class=\"adf-file\">{{file.name}}</span>\n            <button id=\"{{'file-'+file.id+'-option-menu'}}\" mat-icon-button [matMenuTriggerFor]=\"fileActionMenu\">\n                <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #fileActionMenu=\"matMenu\" xPosition=\"before\">\n                <button id=\"{{'file-'+file.id+'-show-file'}}\"\n                    [disabled]=\"file.isExternal\"\n                    mat-menu-item (click)=\"onAttachFileClicked(file)\">\n                    <mat-icon>image</mat-icon>\n                    <span>{{ 'FORM.FIELD.SHOW_FILE' | translate }}</span>\n                </button>\n                <button id=\"{{'file-'+file.id+'-download-file'}}\"\n                    mat-menu-item (click)=\"downloadContent(file)\">\n                    <mat-icon>file_download</mat-icon>\n                    <span>{{ 'FORM.FIELD.DOWNLOAD_FILE' | translate }}</span>\n                </button>\n                <button *ngIf=\"!field.readOnly\" id=\"{{'file-'+file.id+'-remove-file'}}\"\n                        mat-menu-item [id]=\"'file-'+file.id+'-remove'\"\n                        (click)=\"onRemoveAttachFile(file);\" (keyup.enter)=\"onRemoveAttachFile(file);\">\n                    <mat-icon class=\"mat-24\">highlight_off</mat-icon>\n                    <span>{{ 'FORM.FIELD.REMOVE_FILE' | translate }}</span>\n                </button>\n            </mat-menu>\n        </mat-list-item>\n    </mat-list>\n</div>\n\n<error-widget [error]=\"field.validationSummary\"></error-widget>\n<error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n",
                host: {
                    '(click)': 'event($event)',
                    '(blur)': 'event($event)',
                    '(change)': 'event($event)',
                    '(focus)': 'event($event)',
                    '(focusin)': 'event($event)',
                    '(focusout)': 'event($event)',
                    '(input)': 'event($event)',
                    '(invalid)': 'event($event)',
                    '(select)': 'event($event)'
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-attach-widget-container{margin-bottom:15px;display:flex;align-items:center}.adf-attach-widget-container input{cursor:pointer;height:100%;right:0;opacity:0;position:absolute;top:0;width:300px;z-index:4}.adf-attach-widget__menu-upload{display:flex;align-items:center}.adf-attach-widget__input-type{width:.1px;height:.1px;opacity:0;overflow:hidden;position:absolute;z-index:-1}.adf-attach-widget__image-logo{padding-left:5px}.adf-attach-widget-repo-button{padding-left:10px}.adf-attach-widget-repo-button .mat-button-wrapper{display:inline}.adf-attach-widget-repo-button .mat-mini-fab.mat-accent{background-color:inherit}.adf-attach-widget{width:100%;word-break:break-all;padding:.4375em 0;border-top:.84375em solid transparent}.adf-attach-widget__icon{padding:6px;float:left;cursor:pointer}.adf-attach-widget__reset{margin-top:-2px}.adf-attach-files-row .mat-line{margin-bottom:0}"]
            }] }
];
/** @nocollapse */
AttachFileWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: LogService },
    { type: ThumbnailService },
    { type: ProcessContentService },
    { type: ActivitiContentService },
    { type: ContentService },
    { type: ContentNodeDialogService },
    { type: AppConfigService },
    { type: AttachFileWidgetDialogService }
];
if (false) {
    /** @type {?} */
    AttachFileWidgetComponent.prototype.repositoryList;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetComponent.prototype.tempFilesList;
    /** @type {?} */
    AttachFileWidgetComponent.prototype.formService;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetComponent.prototype.logger;
    /** @type {?} */
    AttachFileWidgetComponent.prototype.thumbnails;
    /** @type {?} */
    AttachFileWidgetComponent.prototype.processContentService;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetComponent.prototype.activitiContentService;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetComponent.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetComponent.prototype.contentDialog;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetComponent.prototype.appConfigService;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetComponent.prototype.attachDialogService;
}
//# sourceMappingURL=data:application/json;base64,
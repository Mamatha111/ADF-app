/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { LogService } from '@alfresco/adf-core';
import { PeopleProcessService } from '@alfresco/adf-core';
import { Component, Input, ViewChild } from '@angular/core';
import { Observable } from 'rxjs';
import { PeopleSearchComponent } from '../people-search/people-search.component';
import { share } from 'rxjs/operators';
export class PeopleComponent {
    /**
     * @param {?} logService
     * @param {?} peopleProcessService
     */
    constructor(logService, peopleProcessService) {
        this.logService = logService;
        this.peopleProcessService = peopleProcessService;
        /**
         * The array of User objects to display.
         */
        this.people = [];
        /**
         * The numeric ID of the task.
         */
        this.taskId = '';
        /**
         * Should the data be read-only?
         */
        this.readOnly = false;
        this.showAssignment = false;
        this.peopleSearch$ = new Observable((observer) => this.peopleSearchObserver = observer)
            .pipe(share());
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    involveUserAndCloseSearch() {
        if (this.peopleSearch) {
            this.peopleSearch.involveUserAndClose();
        }
    }
    /**
     * @return {?}
     */
    involveUserWithoutCloseSearch() {
        if (this.peopleSearch) {
            this.peopleSearch.involveUser();
        }
    }
    /**
     * @param {?} searchedWord
     * @return {?}
     */
    searchUser(searchedWord) {
        this.peopleProcessService.getWorkflowUsers(this.taskId, searchedWord)
            .subscribe((users) => {
            this.peopleSearchObserver.next(users);
        }, (error) => this.logService.error(error));
    }
    /**
     * @param {?} user
     * @return {?}
     */
    involveUser(user) {
        this.peopleProcessService.involveUserWithTask(this.taskId, user.id.toString())
            .subscribe(() => {
            this.people = [...this.people, user];
        }, (error) => this.logService.error('Impossible to involve user with task'));
    }
    /**
     * @param {?} user
     * @return {?}
     */
    removeInvolvedUser(user) {
        this.peopleProcessService.removeInvolvedUser(this.taskId, user.id.toString())
            .subscribe(() => {
            this.people = this.people.filter((involvedUser) => {
                return involvedUser.id !== user.id;
            });
        }, (error) => this.logService.error('Impossible to remove involved user from task'));
    }
    /**
     * @param {?} firstName
     * @param {?} lastName
     * @param {?=} delimiter
     * @return {?}
     */
    getDisplayUser(firstName, lastName, delimiter = '-') {
        firstName = (firstName !== null ? firstName : '');
        lastName = (lastName !== null ? lastName : '');
        return firstName + delimiter + lastName;
    }
    /**
     * @param {?} firstName
     * @param {?} lastName
     * @return {?}
     */
    getInitialUserName(firstName, lastName) {
        firstName = (firstName !== null && firstName !== '' ? firstName[0] : '');
        lastName = (lastName !== null && lastName !== '' ? lastName[0] : '');
        return this.getDisplayUser(firstName, lastName, '');
    }
    /**
     * @return {?}
     */
    onAddAssignment() {
        this.showAssignment = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClickAction(event) {
        if (event.type === 'remove') {
            this.removeInvolvedUser(event.value);
        }
    }
    /**
     * @return {?}
     */
    hasPeople() {
        return this.people && this.people.length > 0;
    }
    /**
     * @return {?}
     */
    isEditMode() {
        return !this.readOnly;
    }
    /**
     * @return {?}
     */
    onCloseSearch() {
        this.showAssignment = false;
    }
}
PeopleComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-people',
                template: "<mat-card class=\"adf-assignment-top-container\">\n    <div mat-card-content class=\"adf-assignment-top-container-content\">\n        <div class=\"assignment-header\">\n                <div *ngIf=\"hasPeople()\" class=\"adf-assignment-count\" id=\"people-title\">\n                    {{ 'ADF_TASK_LIST.DETAILS.LABELS.PEOPLE' | translate }} {{ ' (' + people.length + ')' }}\n                </div>\n                <div *ngIf=\"!hasPeople()\" class=\"adf-assignment-count\" id=\"no-people-label\">\n                    {{ 'ADF_TASK_LIST.DETAILS.PEOPLE.NONE' | translate }}\n                </div>\n                <div *ngIf=\"isEditMode()\" class=\"adf-add-people\" (click)=\"onAddAssignment()\">\n                    <mat-icon class=\"adf-add-person-icon\">person_add</mat-icon>\n                </div>\n            </div>\n            <div class=\"adf-assignment-container\" *ngIf=\"showAssignment\">\n                <adf-people-search\n                    #peopleSearch\n                    (searchPeople)=\"searchUser($event)\"\n                    (success)=\"involveUser($event)\"\n                    (closeSearch)=\"onCloseSearch()\"\n                    [results]=\"peopleSearch$\">\n                    <ng-container adf-people-search-title>{{ 'ADF_TASK_LIST.DETAILS.LABELS.ADD_PEOPLE' | translate }}</ng-container>\n                    <ng-container adf-people-search-action-label>{{ 'ADF_TASK_LIST.PEOPLE.ADD_USER' | translate }}</ng-container>\n                </adf-people-search>\n            </div>\n            <div class=\"adf-assignment-list-container\" id=\"assignment-people-list\" *ngIf=\"hasPeople()\">\n                <adf-people-list\n                [users]=\"people\"\n                [actions]=\"isEditMode()\"\n                (clickAction)=\"onClickAction($event)\">\n                    <data-columns>\n                        <data-column key=\"firstName\">\n                            <ng-template let-entry=\"$implicit\">\n                                <div *ngIf=\"!entry.row.obj.pictureId\" class=\"adf-people-search-people-pic\">\n                                    {{getInitialUserName(entry.row.obj.firstName, entry.row.obj.lastName)}}</div>\n                                <div>\n                                    <img *ngIf=\"entry.row.obj.pictureId\" class=\"adf-people-img\"\n                                        [src]=\"peopleProcessService.getUserImage(entry.row.obj)\"/>\n                                </div>\n                            </ng-template>\n                        </data-column>\n                        <data-column key=\"email\" class=\"adf-full-width\">\n                            <ng-template let-entry=\"$implicit\">\n                                <div class=\"adf-people-full-name\">{{ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ') }}</div>\n                                <div class=\"adf-people-email\">{{ entry.row.obj.email }}</div>\n                                <div class=\"adf-people-edit-label\">can edit</div>\n                            </ng-template>\n                        </data-column>\n                    </data-columns>\n                </adf-people-list>\n            </div>\n    </div>\n</mat-card>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
PeopleComponent.ctorParameters = () => [
    { type: LogService },
    { type: PeopleProcessService }
];
PeopleComponent.propDecorators = {
    people: [{ type: Input }],
    taskId: [{ type: Input }],
    readOnly: [{ type: Input }],
    peopleSearch: [{ type: ViewChild, args: ['peopleSearch',] }]
};
if (false) {
    /**
     * The array of User objects to display.
     * @type {?}
     */
    PeopleComponent.prototype.people;
    /**
     * The numeric ID of the task.
     * @type {?}
     */
    PeopleComponent.prototype.taskId;
    /**
     * Should the data be read-only?
     * @type {?}
     */
    PeopleComponent.prototype.readOnly;
    /** @type {?} */
    PeopleComponent.prototype.peopleSearch;
    /** @type {?} */
    PeopleComponent.prototype.showAssignment;
    /**
     * @type {?}
     * @private
     */
    PeopleComponent.prototype.peopleSearchObserver;
    /** @type {?} */
    PeopleComponent.prototype.peopleSearch$;
    /**
     * @type {?}
     * @private
     */
    PeopleComponent.prototype.logService;
    /** @type {?} */
    PeopleComponent.prototype.peopleProcessService;
}
//# sourceMappingURL=data:application/json;base64,
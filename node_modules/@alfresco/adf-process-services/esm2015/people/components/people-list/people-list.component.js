/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataTableComponent } from '@alfresco/adf-core';
import { DataColumnListComponent } from '@alfresco/adf-core';
import { Component, ContentChild, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { UserEventModel } from '../../../task-list/models/user-event.model';
export class PeopleListComponent {
    constructor() {
        /**
         * Toggles whether or not actions should be visible, i.e. the 'Three-Dots' menu.
         */
        this.actions = false;
        /**
         * Emitted when the user clicks a row in the people list.
         */
        this.clickRow = new EventEmitter();
        /**
         * Emitted when the user clicks in the 'Three Dots' drop down menu for a row.
         */
        this.clickAction = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.peopleDataTable.columnList = this.columnList;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    selectUser(event) {
        this.user = event.value.obj;
        this.clickRow.emit(this.user);
    }
    /**
     * @return {?}
     */
    hasActions() {
        return this.actions;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onShowRowActionsMenu(event) {
        /** @type {?} */
        let removeAction = {
            title: 'Remove',
            name: 'remove'
        };
        event.value.actions = [
            removeAction
        ];
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onExecuteRowAction(event) {
        /** @type {?} */
        let args = event.value;
        /** @type {?} */
        let action = args.action;
        this.clickAction.emit(new UserEventModel({ type: action.name, value: args.row.obj }));
    }
}
PeopleListComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-people-list',
                template: "<adf-datatable\n    #dataTable\n    class=\"adf-task-people-list\"\n    [rows]=\"users\"\n    [actions]=\"hasActions()\"\n    [showHeader]=\"false\"\n    (rowClick)=\"selectUser($event)\"\n    (rowDblClick)=\"selectUser($event)\"\n    (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n    (executeRowAction)=\"onExecuteRowAction($event)\">\n</adf-datatable>\n",
                styles: [""]
            }] }
];
PeopleListComponent.propDecorators = {
    columnList: [{ type: ContentChild, args: [DataColumnListComponent,] }],
    peopleDataTable: [{ type: ViewChild, args: ['dataTable',] }],
    users: [{ type: Input }],
    actions: [{ type: Input }],
    clickRow: [{ type: Output }],
    clickAction: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    PeopleListComponent.prototype.columnList;
    /** @type {?} */
    PeopleListComponent.prototype.peopleDataTable;
    /**
     * The array of user data used to populate the people list.
     * @type {?}
     */
    PeopleListComponent.prototype.users;
    /**
     * Toggles whether or not actions should be visible, i.e. the 'Three-Dots' menu.
     * @type {?}
     */
    PeopleListComponent.prototype.actions;
    /**
     * Emitted when the user clicks a row in the people list.
     * @type {?}
     */
    PeopleListComponent.prototype.clickRow;
    /**
     * Emitted when the user clicks in the 'Three Dots' drop down menu for a row.
     * @type {?}
     */
    PeopleListComponent.prototype.clickAction;
    /** @type {?} */
    PeopleListComponent.prototype.user;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVvcGxlLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1wcm9jZXNzLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsicGVvcGxlL2NvbXBvbmVudHMvcGVvcGxlLWxpc3QvcGVvcGxlLWxpc3QuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBRSx1QkFBdUIsRUFBb0IsTUFBTSxvQkFBb0IsQ0FBQztBQUMvRSxPQUFPLEVBQW1DLFNBQVMsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pJLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQVE1RSxNQUFNLE9BQU8sbUJBQW1CO0lBTmhDOzs7O1FBbUJJLFlBQU8sR0FBWSxLQUFLLENBQUM7Ozs7UUFJekIsYUFBUSxHQUFtQyxJQUFJLFlBQVksRUFBb0IsQ0FBQzs7OztRQUloRixnQkFBVyxHQUFpQyxJQUFJLFlBQVksRUFBa0IsQ0FBQztJQXFDbkYsQ0FBQzs7OztJQWpDRyxrQkFBa0I7UUFDZCxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3RELENBQUM7Ozs7SUFFRCxlQUFlO0lBQ2YsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsS0FBVTtRQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDOzs7O0lBRUQsVUFBVTtRQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDOzs7OztJQUVELG9CQUFvQixDQUFDLEtBQVU7O1lBRXZCLFlBQVksR0FBRztZQUNmLEtBQUssRUFBRSxRQUFRO1lBQ2YsSUFBSSxFQUFFLFFBQVE7U0FDakI7UUFFRCxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRztZQUNsQixZQUFZO1NBQ2YsQ0FBQztJQUNOLENBQUM7Ozs7O0lBRUQsa0JBQWtCLENBQUMsS0FBVTs7WUFDckIsSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLOztZQUNsQixNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU07UUFDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxjQUFjLENBQUMsRUFBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEYsQ0FBQzs7O1lBL0RKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQix3WEFBMkM7O2FBRTlDOzs7eUJBSUksWUFBWSxTQUFDLHVCQUF1Qjs4QkFFcEMsU0FBUyxTQUFDLFdBQVc7b0JBSXJCLEtBQUs7c0JBSUwsS0FBSzt1QkFJTCxNQUFNOzBCQUlOLE1BQU07Ozs7SUFsQlAseUNBQTJFOztJQUUzRSw4Q0FDb0M7Ozs7O0lBR3BDLG9DQUMwQjs7Ozs7SUFHMUIsc0NBQ3lCOzs7OztJQUd6Qix1Q0FDZ0Y7Ozs7O0lBR2hGLDBDQUMrRTs7SUFFL0UsbUNBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGF0YVRhYmxlQ29tcG9uZW50IH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IERhdGFDb2x1bW5MaXN0Q29tcG9uZW50LCBVc2VyUHJvY2Vzc01vZGVsIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgQ29udGVudENoaWxkLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVXNlckV2ZW50TW9kZWwgfSBmcm9tICcuLi8uLi8uLi90YXNrLWxpc3QvbW9kZWxzL3VzZXItZXZlbnQubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1wZW9wbGUtbGlzdCcsXG4gICAgdGVtcGxhdGVVcmw6ICcuL3Blb3BsZS1saXN0LmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9wZW9wbGUtbGlzdC5jb21wb25lbnQuc2NzcyddXG59KVxuXG5leHBvcnQgY2xhc3MgUGVvcGxlTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIEFmdGVyQ29udGVudEluaXQge1xuXG4gICAgQENvbnRlbnRDaGlsZChEYXRhQ29sdW1uTGlzdENvbXBvbmVudCkgY29sdW1uTGlzdDogRGF0YUNvbHVtbkxpc3RDb21wb25lbnQ7XG5cbiAgICBAVmlld0NoaWxkKCdkYXRhVGFibGUnKVxuICAgIHBlb3BsZURhdGFUYWJsZTogRGF0YVRhYmxlQ29tcG9uZW50O1xuXG4gICAgLyoqIFRoZSBhcnJheSBvZiB1c2VyIGRhdGEgdXNlZCB0byBwb3B1bGF0ZSB0aGUgcGVvcGxlIGxpc3QuICovXG4gICAgQElucHV0KClcbiAgICB1c2VyczogVXNlclByb2Nlc3NNb2RlbFtdO1xuXG4gICAgLyoqIFRvZ2dsZXMgd2hldGhlciBvciBub3QgYWN0aW9ucyBzaG91bGQgYmUgdmlzaWJsZSwgaS5lLiB0aGUgJ1RocmVlLURvdHMnIG1lbnUuICovXG4gICAgQElucHV0KClcbiAgICBhY3Rpb25zOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBhIHJvdyBpbiB0aGUgcGVvcGxlIGxpc3QuICovXG4gICAgQE91dHB1dCgpXG4gICAgY2xpY2tSb3c6IEV2ZW50RW1pdHRlcjxVc2VyUHJvY2Vzc01vZGVsPiA9IG5ldyBFdmVudEVtaXR0ZXI8VXNlclByb2Nlc3NNb2RlbD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIGluIHRoZSAnVGhyZWUgRG90cycgZHJvcCBkb3duIG1lbnUgZm9yIGEgcm93LiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGNsaWNrQWN0aW9uOiBFdmVudEVtaXR0ZXI8VXNlckV2ZW50TW9kZWw+ID0gbmV3IEV2ZW50RW1pdHRlcjxVc2VyRXZlbnRNb2RlbD4oKTtcblxuICAgIHVzZXI6IFVzZXJQcm9jZXNzTW9kZWw7XG5cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgICAgIHRoaXMucGVvcGxlRGF0YVRhYmxlLmNvbHVtbkxpc3QgPSB0aGlzLmNvbHVtbkxpc3Q7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIH1cblxuICAgIHNlbGVjdFVzZXIoZXZlbnQ6IGFueSkge1xuICAgICAgICB0aGlzLnVzZXIgPSBldmVudC52YWx1ZS5vYmo7XG4gICAgICAgIHRoaXMuY2xpY2tSb3cuZW1pdCh0aGlzLnVzZXIpO1xuICAgIH1cblxuICAgIGhhc0FjdGlvbnMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbnM7XG4gICAgfVxuXG4gICAgb25TaG93Um93QWN0aW9uc01lbnUoZXZlbnQ6IGFueSkge1xuXG4gICAgICAgIGxldCByZW1vdmVBY3Rpb24gPSB7XG4gICAgICAgICAgICB0aXRsZTogJ1JlbW92ZScsXG4gICAgICAgICAgICBuYW1lOiAncmVtb3ZlJ1xuICAgICAgICB9O1xuXG4gICAgICAgIGV2ZW50LnZhbHVlLmFjdGlvbnMgPSBbXG4gICAgICAgICAgICByZW1vdmVBY3Rpb25cbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBvbkV4ZWN1dGVSb3dBY3Rpb24oZXZlbnQ6IGFueSkge1xuICAgICAgICBsZXQgYXJncyA9IGV2ZW50LnZhbHVlO1xuICAgICAgICBsZXQgYWN0aW9uID0gYXJncy5hY3Rpb247XG4gICAgICAgIHRoaXMuY2xpY2tBY3Rpb24uZW1pdChuZXcgVXNlckV2ZW50TW9kZWwoe3R5cGU6IGFjdGlvbi5uYW1lLCB2YWx1ZTogYXJncy5yb3cub2JqfSkpO1xuICAgIH1cbn1cbiJdfQ==
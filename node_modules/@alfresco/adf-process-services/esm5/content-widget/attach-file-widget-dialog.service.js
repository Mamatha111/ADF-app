/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { MatDialog } from '@angular/material';
import { EventEmitter, Injectable, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { AttachFileWidgetDialogComponent } from './attach-file-widget-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
var AttachFileWidgetDialogService = /** @class */ (function () {
    function AttachFileWidgetDialogService(dialog) {
        this.dialog = dialog;
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
    }
    /**
     * Opens a dialog to choose a file to upload.
     * @param action Name of the action to show in the title
     * @param contentEntry Item to upload
     * @returns Information about the chosen file(s)
     */
    /**
     * Opens a dialog to choose a file to upload.
     * @param {?} ecmHost
     * @param {?=} actionName
     * @param {?=} context
     * @return {?} Information about the chosen file(s)
     */
    AttachFileWidgetDialogService.prototype.openLogin = /**
     * Opens a dialog to choose a file to upload.
     * @param {?} ecmHost
     * @param {?=} actionName
     * @param {?=} context
     * @return {?} Information about the chosen file(s)
     */
    function (ecmHost, actionName, context) {
        /** @type {?} */
        var titleString = "Please log in for " + ecmHost;
        /** @type {?} */
        var selected = new Subject();
        selected.subscribe({
            complete: this.close.bind(this)
        });
        /** @type {?} */
        var data = {
            title: titleString,
            actionName: actionName,
            selected: selected,
            ecmHost: ecmHost,
            context: context,
            isSelectionValid: this.isNodeFile.bind(this)
        };
        this.openLoginDialog(data, 'adf-attach-file-widget-dialog', '630px');
        return selected;
    };
    /**
     * @private
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    AttachFileWidgetDialogService.prototype.openLoginDialog = /**
     * @private
     * @param {?} data
     * @param {?} currentPanelClass
     * @param {?} chosenWidth
     * @return {?}
     */
    function (data, currentPanelClass, chosenWidth) {
        this.dialog.open(AttachFileWidgetDialogComponent, { data: data, panelClass: currentPanelClass, width: chosenWidth });
    };
    /** Closes the currently open dialog. */
    /**
     * Closes the currently open dialog.
     * @return {?}
     */
    AttachFileWidgetDialogService.prototype.close = /**
     * Closes the currently open dialog.
     * @return {?}
     */
    function () {
        this.dialog.closeAll();
    };
    /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    AttachFileWidgetDialogService.prototype.isNodeFile = /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        return entry.isFile;
    };
    AttachFileWidgetDialogService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AttachFileWidgetDialogService.ctorParameters = function () { return [
        { type: MatDialog }
    ]; };
    AttachFileWidgetDialogService.propDecorators = {
        error: [{ type: Output }]
    };
    /** @nocollapse */ AttachFileWidgetDialogService.ngInjectableDef = i0.defineInjectable({ factory: function AttachFileWidgetDialogService_Factory() { return new AttachFileWidgetDialogService(i0.inject(i1.MatDialog)); }, token: AttachFileWidgetDialogService, providedIn: "root" });
    return AttachFileWidgetDialogService;
}());
export { AttachFileWidgetDialogService };
if (false) {
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    AttachFileWidgetDialogService.prototype.error;
    /**
     * @type {?}
     * @private
     */
    AttachFileWidgetDialogService.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNoLWZpbGUtd2lkZ2V0LWRpYWxvZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1wcm9jZXNzLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsiY29udGVudC13aWRnZXQvYXR0YWNoLWZpbGUtd2lkZ2V0LWRpYWxvZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakUsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUczQyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQzs7O0FBRXhGO0lBU0ksdUNBQW9CLE1BQWlCO1FBQWpCLFdBQU0sR0FBTixNQUFNLENBQVc7Ozs7UUFGckMsVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0lBR25ELENBQUM7SUFFRDs7Ozs7T0FLRzs7Ozs7Ozs7SUFDSCxpREFBUzs7Ozs7OztJQUFULFVBQVUsT0FBZSxFQUFFLFVBQW1CLEVBQUUsT0FBZ0I7O1lBQ3hELFdBQVcsR0FBVyx1QkFBcUIsT0FBUzs7WUFDbEQsUUFBUSxHQUFHLElBQUksT0FBTyxFQUFVO1FBQ3RDLFFBQVEsQ0FBQyxTQUFTLENBQUM7WUFDZixRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ2xDLENBQUMsQ0FBQzs7WUFFRyxJQUFJLEdBQXdDO1lBQzlDLEtBQUssRUFBRyxXQUFXO1lBQ25CLFVBQVUsWUFBQTtZQUNWLFFBQVEsVUFBQTtZQUNSLE9BQU8sU0FBQTtZQUNQLE9BQU8sU0FBQTtZQUNQLGdCQUFnQixFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUMvQztRQUVELElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLCtCQUErQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sUUFBUSxDQUFDO0lBQ3BCLENBQUM7Ozs7Ozs7O0lBRU8sdURBQWU7Ozs7Ozs7SUFBdkIsVUFBd0IsSUFBeUMsRUFBRSxpQkFBeUIsRUFBRSxXQUFtQjtRQUM3RyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQywrQkFBK0IsRUFBRSxFQUFFLElBQUksTUFBQSxFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUNuSCxDQUFDO0lBRUQsd0NBQXdDOzs7OztJQUN4Qyw2Q0FBSzs7OztJQUFMO1FBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7Ozs7SUFFTyxrREFBVTs7Ozs7SUFBbEIsVUFBbUIsS0FBVztRQUMxQixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDeEIsQ0FBQzs7Z0JBakRKLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7Z0JBVFEsU0FBUzs7O3dCQWFiLE1BQU07Ozt3Q0E5Qlg7Q0EyRUMsQUFuREQsSUFtREM7U0FoRFksNkJBQTZCOzs7Ozs7SUFHdEMsOENBQ21EOzs7OztJQUV2QywrQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBNYXREaWFsb2cgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEluamVjdGFibGUsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQXR0YWNoRmlsZVdpZGdldERpYWxvZ0NvbXBvbmVudERhdGEgfSBmcm9tICcuL2F0dGFjaC1maWxlLXdpZGdldC1kaWFsb2ctY29tcG9uZW50LmludGVyZmFjZSc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBBdHRhY2hGaWxlV2lkZ2V0RGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi9hdHRhY2gtZmlsZS13aWRnZXQtZGlhbG9nLmNvbXBvbmVudCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQXR0YWNoRmlsZVdpZGdldERpYWxvZ1NlcnZpY2Uge1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMuICovXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRpYWxvZzogTWF0RGlhbG9nKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgYSBkaWFsb2cgdG8gY2hvb3NlIGEgZmlsZSB0byB1cGxvYWQuXG4gICAgICogQHBhcmFtIGFjdGlvbiBOYW1lIG9mIHRoZSBhY3Rpb24gdG8gc2hvdyBpbiB0aGUgdGl0bGVcbiAgICAgKiBAcGFyYW0gY29udGVudEVudHJ5IEl0ZW0gdG8gdXBsb2FkXG4gICAgICogQHJldHVybnMgSW5mb3JtYXRpb24gYWJvdXQgdGhlIGNob3NlbiBmaWxlKHMpXG4gICAgICovXG4gICAgb3BlbkxvZ2luKGVjbUhvc3Q6IHN0cmluZywgYWN0aW9uTmFtZT86IHN0cmluZywgY29udGV4dD86IHN0cmluZyk6IE9ic2VydmFibGU8Tm9kZVtdPiB7XG4gICAgICAgIGxldCB0aXRsZVN0cmluZzogc3RyaW5nID0gYFBsZWFzZSBsb2cgaW4gZm9yICR7ZWNtSG9zdH1gO1xuICAgICAgICBjb25zdCBzZWxlY3RlZCA9IG5ldyBTdWJqZWN0PE5vZGVbXT4oKTtcbiAgICAgICAgc2VsZWN0ZWQuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgIGNvbXBsZXRlOiB0aGlzLmNsb3NlLmJpbmQodGhpcylcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZGF0YTogQXR0YWNoRmlsZVdpZGdldERpYWxvZ0NvbXBvbmVudERhdGEgPSB7XG4gICAgICAgICAgICB0aXRsZSA6IHRpdGxlU3RyaW5nLFxuICAgICAgICAgICAgYWN0aW9uTmFtZSxcbiAgICAgICAgICAgIHNlbGVjdGVkLFxuICAgICAgICAgICAgZWNtSG9zdCxcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICBpc1NlbGVjdGlvblZhbGlkOiB0aGlzLmlzTm9kZUZpbGUuYmluZCh0aGlzKVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMub3BlbkxvZ2luRGlhbG9nKGRhdGEsICdhZGYtYXR0YWNoLWZpbGUtd2lkZ2V0LWRpYWxvZycsICc2MzBweCcpO1xuICAgICAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvcGVuTG9naW5EaWFsb2coZGF0YTogQXR0YWNoRmlsZVdpZGdldERpYWxvZ0NvbXBvbmVudERhdGEsIGN1cnJlbnRQYW5lbENsYXNzOiBzdHJpbmcsIGNob3NlbldpZHRoOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5kaWFsb2cub3BlbihBdHRhY2hGaWxlV2lkZ2V0RGlhbG9nQ29tcG9uZW50LCB7IGRhdGEsIHBhbmVsQ2xhc3M6IGN1cnJlbnRQYW5lbENsYXNzLCB3aWR0aDogY2hvc2VuV2lkdGggfSk7XG4gICAgfVxuXG4gICAgLyoqIENsb3NlcyB0aGUgY3VycmVudGx5IG9wZW4gZGlhbG9nLiAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLmRpYWxvZy5jbG9zZUFsbCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNOb2RlRmlsZShlbnRyeTogTm9kZSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZW50cnkuaXNGaWxlO1xuICAgIH1cblxufVxuIl19
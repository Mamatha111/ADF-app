/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContentService, ThumbnailService, EmptyListComponent } from '@alfresco/adf-core';
import { ContentChild, Component, EventEmitter, Input, NgZone, Output, ViewEncapsulation } from '@angular/core';
import { ProcessContentService } from '@alfresco/adf-core';
var TaskAttachmentListComponent = /** @class */ (function () {
    function TaskAttachmentListComponent(activitiContentService, contentService, thumbnailService, ngZone) {
        this.activitiContentService = activitiContentService;
        this.contentService = contentService;
        this.thumbnailService = thumbnailService;
        this.ngZone = ngZone;
        /**
         * Disable/Enable read only mode for attachment list.
         */
        this.disabled = false;
        /**
         * Emitted when the attachment is double-clicked or a view
         * option is selected from the context menu by the user from within the component.
         * Returns a Blob representing the clicked object.
         */
        this.attachmentClick = new EventEmitter();
        /**
         * Emitted when the attachment list has fetched all the attachments.
         * Returns a list of attachments.
         */
        this.success = new EventEmitter();
        /**
         * Emitted when an error occurs while fetching the attachments.
         */
        this.error = new EventEmitter();
        this.hasCustomTemplate = false;
        this.attachments = [];
        this.isLoading = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    TaskAttachmentListComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['taskId'] && changes['taskId'].currentValue) {
            this.loadAttachmentsByTaskId(changes['taskId'].currentValue);
        }
    };
    /**
     * @return {?}
     */
    TaskAttachmentListComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.emptyTemplate) {
            this.hasCustomTemplate = true;
        }
    };
    /**
     * @return {?}
     */
    TaskAttachmentListComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.attachments = [];
    };
    /**
     * @return {?}
     */
    TaskAttachmentListComponent.prototype.hasCustomEmptyTemplate = /**
     * @return {?}
     */
    function () {
        return !!this.emptyTemplate;
    };
    /**
     * @return {?}
     */
    TaskAttachmentListComponent.prototype.reload = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.run(function () {
            _this.loadAttachmentsByTaskId(_this.taskId);
        });
    };
    /**
     * @param {?} content
     * @return {?}
     */
    TaskAttachmentListComponent.prototype.add = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        var _this = this;
        this.ngZone.run(function () {
            _this.attachments.push({
                id: content.id,
                name: content.name,
                created: content.created,
                createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,
                icon: _this.thumbnailService.getMimeTypeIcon(content.mimeType)
            });
        });
    };
    /**
     * @private
     * @param {?} taskId
     * @return {?}
     */
    TaskAttachmentListComponent.prototype.loadAttachmentsByTaskId = /**
     * @private
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        var _this = this;
        if (taskId) {
            this.isLoading = true;
            this.reset();
            /** @type {?} */
            var opts = 'true';
            this.activitiContentService.getTaskRelatedContent(taskId, opts).subscribe(function (res) {
                /** @type {?} */
                var attachList = [];
                res.data.forEach(function (content) {
                    attachList.push({
                        id: content.id,
                        name: content.name,
                        created: content.created,
                        createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,
                        icon: _this.thumbnailService.getMimeTypeIcon(content.mimeType)
                    });
                });
                _this.attachments = attachList;
                _this.success.emit(_this.attachments);
                _this.isLoading = false;
            }, function (err) {
                _this.error.emit(err);
                _this.isLoading = false;
            });
        }
    };
    /**
     * @param {?} contentId
     * @return {?}
     */
    TaskAttachmentListComponent.prototype.deleteAttachmentById = /**
     * @param {?} contentId
     * @return {?}
     */
    function (contentId) {
        var _this = this;
        if (contentId) {
            this.activitiContentService.deleteRelatedContent(contentId).subscribe(function (res) {
                _this.attachments = _this.attachments.filter(function (content) {
                    return content.id !== contentId;
                });
            }, function (err) {
                _this.error.emit(err);
            });
        }
    };
    /**
     * @return {?}
     */
    TaskAttachmentListComponent.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return this.attachments && this.attachments.length === 0;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TaskAttachmentListComponent.prototype.onShowRowActionsMenu = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var viewAction = {
            title: 'ADF_TASK_LIST.MENU_ACTIONS.VIEW_CONTENT',
            name: 'view'
        };
        /** @type {?} */
        var removeAction = {
            title: 'ADF_TASK_LIST.MENU_ACTIONS.REMOVE_CONTENT',
            name: 'remove'
        };
        /** @type {?} */
        var downloadAction = {
            title: 'ADF_TASK_LIST.MENU_ACTIONS.DOWNLOAD_CONTENT',
            name: 'download'
        };
        event.value.actions = [
            viewAction,
            downloadAction
        ];
        if (!this.disabled) {
            event.value.actions.splice(1, 0, removeAction);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TaskAttachmentListComponent.prototype.onExecuteRowAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var args = event.value;
        /** @type {?} */
        var action = args.action;
        if (action.name === 'view') {
            this.emitDocumentContent(args.row.obj);
        }
        else if (action.name === 'remove') {
            this.deleteAttachmentById(args.row.obj.id);
        }
        else if (action.name === 'download') {
            this.downloadContent(args.row.obj);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TaskAttachmentListComponent.prototype.openContent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var content = event.value.obj;
        this.emitDocumentContent(content);
    };
    /**
     * @param {?} content
     * @return {?}
     */
    TaskAttachmentListComponent.prototype.emitDocumentContent = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        var _this = this;
        this.activitiContentService.getFileRawContent(content.id).subscribe(function (blob) {
            content.contentBlob = blob;
            _this.attachmentClick.emit(content);
        }, function (err) {
            _this.error.emit(err);
        });
    };
    /**
     * @param {?} content
     * @return {?}
     */
    TaskAttachmentListComponent.prototype.downloadContent = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        var _this = this;
        this.activitiContentService.getFileRawContent(content.id).subscribe(function (blob) { return _this.contentService.downloadBlob(blob, content.name); }, function (err) {
            _this.error.emit(err);
        });
    };
    /**
     * @return {?}
     */
    TaskAttachmentListComponent.prototype.isDisabled = /**
     * @return {?}
     */
    function () {
        return this.disabled;
    };
    TaskAttachmentListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-task-attachment-list',
                    template: "<adf-datatable [rows]=\"attachments\"\n               [actions]=\"true\"\n               [loading]=\"isLoading\"\n               (rowDblClick)=\"openContent($event)\"\n               (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n               (executeRowAction)=\"onExecuteRowAction($event)\">\n            <adf-no-content-template>\n                <ng-template>\n                    <ng-content *ngIf=\"hasCustomTemplate; else defaulEmptyList\" class=\"adf-custom-empty-template\"></ng-content>\n                    <ng-template #defaulEmptyList>\n                        <adf-empty-list>\n                            <div adf-empty-list-header class=\"adf-empty-list-header\">\n                                {{'ADF_TASK_LIST.ATTACHMENT.EMPTY.HEADER' | translate}}\n                            </div>\n                        </adf-empty-list>\n                    </ng-template>\n                </ng-template>\n            </adf-no-content-template>\n\n            <data-columns>\n                <data-column key=\"icon\" type=\"image\" srTitle=\"ADF_TASK_LIST.PROPERTIES.THUMBNAIL\" [sortable]=\"false\"></data-column>\n                <data-column key=\"name\" type=\"text\" title=\"ADF_TASK_LIST.PROPERTIES.NAME\" class=\"adf-full-width adf-ellipsis-cell\" [sortable]=\"true\"></data-column>\n                <data-column key=\"created\" type=\"date\" format=\"shortDate\" title=\"ADF_TASK_LIST.PROPERTIES.CREATED\"></data-column>\n            </data-columns>\n            <adf-loading-content-template>\n                <ng-template>\n                <!--Add your custom loading template here-->\n                    <mat-progress-spinner class=\"adf-attachment-list-loading-margin\" [color]=\"'primary'\" [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                </ng-template>\n            </adf-loading-content-template>\n</adf-datatable>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    TaskAttachmentListComponent.ctorParameters = function () { return [
        { type: ProcessContentService },
        { type: ContentService },
        { type: ThumbnailService },
        { type: NgZone }
    ]; };
    TaskAttachmentListComponent.propDecorators = {
        emptyTemplate: [{ type: ContentChild, args: [EmptyListComponent,] }],
        taskId: [{ type: Input }],
        disabled: [{ type: Input }],
        attachmentClick: [{ type: Output }],
        success: [{ type: Output }],
        error: [{ type: Output }]
    };
    return TaskAttachmentListComponent;
}());
export { TaskAttachmentListComponent };
if (false) {
    /** @type {?} */
    TaskAttachmentListComponent.prototype.emptyTemplate;
    /**
     * (**required**) The ID of the task to display.
     * @type {?}
     */
    TaskAttachmentListComponent.prototype.taskId;
    /**
     * Disable/Enable read only mode for attachment list.
     * @type {?}
     */
    TaskAttachmentListComponent.prototype.disabled;
    /**
     * Emitted when the attachment is double-clicked or a view
     * option is selected from the context menu by the user from within the component.
     * Returns a Blob representing the clicked object.
     * @type {?}
     */
    TaskAttachmentListComponent.prototype.attachmentClick;
    /**
     * Emitted when the attachment list has fetched all the attachments.
     * Returns a list of attachments.
     * @type {?}
     */
    TaskAttachmentListComponent.prototype.success;
    /**
     * Emitted when an error occurs while fetching the attachments.
     * @type {?}
     */
    TaskAttachmentListComponent.prototype.error;
    /** @type {?} */
    TaskAttachmentListComponent.prototype.hasCustomTemplate;
    /** @type {?} */
    TaskAttachmentListComponent.prototype.attachments;
    /** @type {?} */
    TaskAttachmentListComponent.prototype.isLoading;
    /**
     * @type {?}
     * @private
     */
    TaskAttachmentListComponent.prototype.activitiContentService;
    /**
     * @type {?}
     * @private
     */
    TaskAttachmentListComponent.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    TaskAttachmentListComponent.prototype.thumbnailService;
    /**
     * @type {?}
     * @private
     */
    TaskAttachmentListComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,
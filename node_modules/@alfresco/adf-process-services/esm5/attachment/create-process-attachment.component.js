/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ProcessContentService } from '@alfresco/adf-core';
var CreateProcessAttachmentComponent = /** @class */ (function () {
    function CreateProcessAttachmentComponent(activitiContentService) {
        this.activitiContentService = activitiContentService;
        /**
         * Emitted when an error occurs while creating or uploading an attachment
         * from the user within the component.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when an attachment is successfully created or uploaded
         * from within the component.
         */
        this.success = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    CreateProcessAttachmentComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {
            this.processInstanceId = changes['processInstanceId'].currentValue;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CreateProcessAttachmentComponent.prototype.onFileUpload = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        var e_1, _a;
        /** @type {?} */
        var filesList = event.detail.files.map(function (obj) { return obj.file; });
        try {
            for (var filesList_1 = tslib_1.__values(filesList), filesList_1_1 = filesList_1.next(); !filesList_1_1.done; filesList_1_1 = filesList_1.next()) {
                var fileInfoObj = filesList_1_1.value;
                /** @type {?} */
                var file = fileInfoObj;
                /** @type {?} */
                var opts = {
                    isRelatedContent: true
                };
                this.activitiContentService.createProcessRelatedContent(this.processInstanceId, file, opts).subscribe(function (res) {
                    _this.success.emit(res);
                }, function (err) {
                    _this.error.emit(err);
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (filesList_1_1 && !filesList_1_1.done && (_a = filesList_1.return)) _a.call(filesList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    CreateProcessAttachmentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-create-process-attachment',
                    template: "<button\n    id=\"add_new_process_content_button\"\n    color=\"primary\"\n    mat-button\n    mat-raised-button\n    mat-icon-button\n    class=\"adf-create-attachment\"\n    adf-upload=\"true\"\n    [mode]=\"['click']\"\n    [multiple]=\"true\"\n    (upload-files)=\"onFileUpload($event)\">\n    <mat-icon>add</mat-icon>\n</button>\n",
                    styles: [".adf-create-attachment{display:inline-block;line-height:0;vertical-align:middle}"]
                }] }
    ];
    /** @nocollapse */
    CreateProcessAttachmentComponent.ctorParameters = function () { return [
        { type: ProcessContentService }
    ]; };
    CreateProcessAttachmentComponent.propDecorators = {
        processInstanceId: [{ type: Input }],
        error: [{ type: Output }],
        success: [{ type: Output }]
    };
    return CreateProcessAttachmentComponent;
}());
export { CreateProcessAttachmentComponent };
if (false) {
    /**
     * (required) The ID of the process instance to display.
     * @type {?}
     */
    CreateProcessAttachmentComponent.prototype.processInstanceId;
    /**
     * Emitted when an error occurs while creating or uploading an attachment
     * from the user within the component.
     * @type {?}
     */
    CreateProcessAttachmentComponent.prototype.error;
    /**
     * Emitted when an attachment is successfully created or uploaded
     * from within the component.
     * @type {?}
     */
    CreateProcessAttachmentComponent.prototype.success;
    /**
     * @type {?}
     * @private
     */
    CreateProcessAttachmentComponent.prototype.activitiContentService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXByb2Nlc3MtYXR0YWNobWVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXByb2Nlc3Mtc2VydmljZXMvIiwic291cmNlcyI6WyJhdHRhY2htZW50L2NyZWF0ZS1wcm9jZXNzLWF0dGFjaG1lbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUUzRDtJQXVCSSwwQ0FBb0Isc0JBQTZDO1FBQTdDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBdUI7Ozs7O1FBUmpFLFVBQUssR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQzs7Ozs7UUFNbkQsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0lBR3JELENBQUM7Ozs7O0lBRUQsc0RBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQzlCLElBQUksT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUMsWUFBWSxFQUFFO1lBQzNFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxZQUFZLENBQUM7U0FDdEU7SUFDTCxDQUFDOzs7OztJQUVELHVEQUFZOzs7O0lBQVosVUFBYSxLQUFVO1FBQXZCLGlCQWdCQzs7O1lBZk8sU0FBUyxHQUFXLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLEdBQUcsQ0FBQyxJQUFJLEVBQVIsQ0FBUSxDQUFDOztZQUVqRSxLQUF3QixJQUFBLGNBQUEsaUJBQUEsU0FBUyxDQUFBLG9DQUFBLDJEQUFFO2dCQUE5QixJQUFJLFdBQVcsc0JBQUE7O29CQUNaLElBQUksR0FBUyxXQUFXOztvQkFDeEIsSUFBSSxHQUFHO29CQUNQLGdCQUFnQixFQUFFLElBQUk7aUJBQ3pCO2dCQUNELElBQUksQ0FBQyxzQkFBc0IsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FDakcsVUFBQyxHQUFHO29CQUNBLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUMzQixDQUFDLEVBQ0QsVUFBQyxHQUFHO29CQUNBLEtBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN6QixDQUFDLENBQUMsQ0FBQzthQUNWOzs7Ozs7Ozs7SUFDTCxDQUFDOztnQkFoREosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSwrQkFBK0I7b0JBRXpDLDJWQUF5RDs7aUJBQzVEOzs7O2dCQU5RLHFCQUFxQjs7O29DQVV6QixLQUFLO3dCQU1MLE1BQU07MEJBTU4sTUFBTTs7SUE2QlgsdUNBQUM7Q0FBQSxBQWpERCxJQWlEQztTQTVDWSxnQ0FBZ0M7Ozs7OztJQUd6Qyw2REFDMEI7Ozs7OztJQUsxQixpREFDbUQ7Ozs7OztJQUtuRCxtREFDcUQ7Ozs7O0lBRXpDLGtFQUFxRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb2Nlc3NDb250ZW50U2VydmljZSB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnYWRmLWNyZWF0ZS1wcm9jZXNzLWF0dGFjaG1lbnQnLFxuICAgIHN0eWxlVXJsczogWycuL2NyZWF0ZS1wcm9jZXNzLWF0dGFjaG1lbnQuY29tcG9uZW50LmNzcyddLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jcmVhdGUtcHJvY2Vzcy1hdHRhY2htZW50LmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBDcmVhdGVQcm9jZXNzQXR0YWNobWVudENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgICAvKiogKHJlcXVpcmVkKSBUaGUgSUQgb2YgdGhlIHByb2Nlc3MgaW5zdGFuY2UgdG8gZGlzcGxheS4gKi9cbiAgICBASW5wdXQoKVxuICAgIHByb2Nlc3NJbnN0YW5jZUlkOiBzdHJpbmc7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3VycyB3aGlsZSBjcmVhdGluZyBvciB1cGxvYWRpbmcgYW4gYXR0YWNobWVudFxuICAgICAqIGZyb20gdGhlIHVzZXIgd2l0aGluIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGF0dGFjaG1lbnQgaXMgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgb3IgdXBsb2FkZWRcbiAgICAgKiBmcm9tIHdpdGhpbiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHN1Y2Nlc3M6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFjdGl2aXRpQ29udGVudFNlcnZpY2U6IFByb2Nlc3NDb250ZW50U2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgaWYgKGNoYW5nZXNbJ3Byb2Nlc3NJbnN0YW5jZUlkJ10gJiYgY2hhbmdlc1sncHJvY2Vzc0luc3RhbmNlSWQnXS5jdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc0luc3RhbmNlSWQgPSBjaGFuZ2VzWydwcm9jZXNzSW5zdGFuY2VJZCddLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uRmlsZVVwbG9hZChldmVudDogYW55KSB7XG4gICAgICAgIGxldCBmaWxlc0xpc3Q6IEZpbGVbXSA9IGV2ZW50LmRldGFpbC5maWxlcy5tYXAoKG9iaikgPT4gb2JqLmZpbGUpO1xuXG4gICAgICAgIGZvciAobGV0IGZpbGVJbmZvT2JqIG9mIGZpbGVzTGlzdCkge1xuICAgICAgICAgICAgbGV0IGZpbGU6IEZpbGUgPSBmaWxlSW5mb09iajtcbiAgICAgICAgICAgIGxldCBvcHRzID0ge1xuICAgICAgICAgICAgICAgIGlzUmVsYXRlZENvbnRlbnQ6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmFjdGl2aXRpQ29udGVudFNlcnZpY2UuY3JlYXRlUHJvY2Vzc1JlbGF0ZWRDb250ZW50KHRoaXMucHJvY2Vzc0luc3RhbmNlSWQsIGZpbGUsIG9wdHMpLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3VjY2Vzcy5lbWl0KHJlcyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
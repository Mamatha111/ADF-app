/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ProcessContentService } from '@alfresco/adf-core';
var AttachmentComponent = /** @class */ (function () {
    function AttachmentComponent(activitiContentService) {
        this.activitiContentService = activitiContentService;
        /**
         * Emitted when an error occurs while creating or uploading an
         *  attachment from the user within the component.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when an attachment is created or uploaded successfully
         * from within the component.
         */
        this.success = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    AttachmentComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['taskId'] && changes['taskId'].currentValue) {
            this.taskId = changes['taskId'].currentValue;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AttachmentComponent.prototype.onFileUpload = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        var e_1, _a;
        /** @type {?} */
        var filesList = event.detail.files.map(function (obj) { return obj.file; });
        try {
            for (var filesList_1 = tslib_1.__values(filesList), filesList_1_1 = filesList_1.next(); !filesList_1_1.done; filesList_1_1 = filesList_1.next()) {
                var fileInfoObj = filesList_1_1.value;
                /** @type {?} */
                var file = fileInfoObj;
                /** @type {?} */
                var opts = {
                    isRelatedContent: true
                };
                this.activitiContentService.createTaskRelatedContent(this.taskId, file, opts).subscribe(function (res) {
                    _this.success.emit(res);
                }, function (err) {
                    _this.error.emit(err);
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (filesList_1_1 && !filesList_1_1.done && (_a = filesList_1.return)) _a.call(filesList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    AttachmentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-create-task-attachment',
                    template: "<button\n    color=\"primary\"\n    mat-button\n    mat-raised-button\n    mat-icon-button\n    class=\"adf-create-attachment\"\n    adf-upload=\"true\"\n    [mode]=\"['click']\"\n    [multiple]=\"true\"\n    (upload-files)=\"onFileUpload($event)\">\n    <mat-icon>add</mat-icon>\n</button>\n",
                    styles: [".adf-create-attachment{display:inline-block;line-height:0;vertical-align:middle}"]
                }] }
    ];
    /** @nocollapse */
    AttachmentComponent.ctorParameters = function () { return [
        { type: ProcessContentService }
    ]; };
    AttachmentComponent.propDecorators = {
        taskId: [{ type: Input }],
        error: [{ type: Output }],
        success: [{ type: Output }]
    };
    return AttachmentComponent;
}());
export { AttachmentComponent };
if (false) {
    /**
     * (required) The numeric ID of the task to display.
     * @type {?}
     */
    AttachmentComponent.prototype.taskId;
    /**
     * Emitted when an error occurs while creating or uploading an
     *  attachment from the user within the component.
     * @type {?}
     */
    AttachmentComponent.prototype.error;
    /**
     * Emitted when an attachment is created or uploaded successfully
     * from within the component.
     * @type {?}
     */
    AttachmentComponent.prototype.success;
    /**
     * @type {?}
     * @private
     */
    AttachmentComponent.prototype.activitiContentService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXRhc2stYXR0YWNobWVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLXByb2Nlc3Mtc2VydmljZXMvIiwic291cmNlcyI6WyJhdHRhY2htZW50L2NyZWF0ZS10YXNrLWF0dGFjaG1lbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUUzRDtJQXVCSSw2QkFBb0Isc0JBQTZDO1FBQTdDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBdUI7Ozs7O1FBUmpFLFVBQUssR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQzs7Ozs7UUFNbkQsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0lBR3JELENBQUM7Ozs7O0lBRUQseUNBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQzlCLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLEVBQUU7WUFDckQsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQzs7Ozs7SUFFRCwwQ0FBWTs7OztJQUFaLFVBQWEsS0FBVTtRQUF2QixpQkFpQkM7OztZQWhCTyxTQUFTLEdBQVcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsR0FBRyxDQUFDLElBQUksRUFBUixDQUFRLENBQUM7O1lBRWpFLEtBQXdCLElBQUEsY0FBQSxpQkFBQSxTQUFTLENBQUEsb0NBQUEsMkRBQUU7Z0JBQTlCLElBQUksV0FBVyxzQkFBQTs7b0JBQ1osSUFBSSxHQUFTLFdBQVc7O29CQUN4QixJQUFJLEdBQUc7b0JBQ1AsZ0JBQWdCLEVBQUUsSUFBSTtpQkFDekI7Z0JBQ0QsSUFBSSxDQUFDLHNCQUFzQixDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FDbkYsVUFBQyxHQUFHO29CQUNBLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUMzQixDQUFDLEVBQ0QsVUFBQyxHQUFHO29CQUNBLEtBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN6QixDQUFDLENBQ0osQ0FBQzthQUNMOzs7Ozs7Ozs7SUFDTCxDQUFDOztnQkFqREosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSw0QkFBNEI7b0JBRXRDLGdUQUFzRDs7aUJBQ3pEOzs7O2dCQU5RLHFCQUFxQjs7O3lCQVV6QixLQUFLO3dCQU1MLE1BQU07MEJBTU4sTUFBTTs7SUE4QlgsMEJBQUM7Q0FBQSxBQWxERCxJQWtEQztTQTdDWSxtQkFBbUI7Ozs7OztJQUc1QixxQ0FDZTs7Ozs7O0lBS2Ysb0NBQ21EOzs7Ozs7SUFLbkQsc0NBQ3FEOzs7OztJQUV6QyxxREFBcUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm9jZXNzQ29udGVudFNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1jcmVhdGUtdGFzay1hdHRhY2htZW50JyxcbiAgICBzdHlsZVVybHM6IFsnLi9jcmVhdGUtdGFzay1hdHRhY2htZW50LmNvbXBvbmVudC5zY3NzJ10sXG4gICAgdGVtcGxhdGVVcmw6ICcuL2NyZWF0ZS10YXNrLWF0dGFjaG1lbnQuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEF0dGFjaG1lbnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gICAgLyoqIChyZXF1aXJlZCkgVGhlIG51bWVyaWMgSUQgb2YgdGhlIHRhc2sgdG8gZGlzcGxheS4gKi9cbiAgICBASW5wdXQoKVxuICAgIHRhc2tJZDogc3RyaW5nO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMgd2hpbGUgY3JlYXRpbmcgb3IgdXBsb2FkaW5nIGFuXG4gICAgICogIGF0dGFjaG1lbnQgZnJvbSB0aGUgdXNlciB3aXRoaW4gdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gYW4gYXR0YWNobWVudCBpcyBjcmVhdGVkIG9yIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseVxuICAgICAqIGZyb20gd2l0aGluIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgQE91dHB1dCgpXG4gICAgc3VjY2VzczogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYWN0aXZpdGlDb250ZW50U2VydmljZTogUHJvY2Vzc0NvbnRlbnRTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICBpZiAoY2hhbmdlc1sndGFza0lkJ10gJiYgY2hhbmdlc1sndGFza0lkJ10uY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnRhc2tJZCA9IGNoYW5nZXNbJ3Rhc2tJZCddLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uRmlsZVVwbG9hZChldmVudDogYW55KSB7XG4gICAgICAgIGxldCBmaWxlc0xpc3Q6IEZpbGVbXSA9IGV2ZW50LmRldGFpbC5maWxlcy5tYXAoKG9iaikgPT4gb2JqLmZpbGUpO1xuXG4gICAgICAgIGZvciAobGV0IGZpbGVJbmZvT2JqIG9mIGZpbGVzTGlzdCkge1xuICAgICAgICAgICAgbGV0IGZpbGU6IEZpbGUgPSBmaWxlSW5mb09iajtcbiAgICAgICAgICAgIGxldCBvcHRzID0ge1xuICAgICAgICAgICAgICAgIGlzUmVsYXRlZENvbnRlbnQ6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmFjdGl2aXRpQ29udGVudFNlcnZpY2UuY3JlYXRlVGFza1JlbGF0ZWRDb250ZW50KHRoaXMudGFza0lkLCBmaWxlLCBvcHRzKS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Y2Nlc3MuZW1pdChyZXMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yLmVtaXQoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { from, throwError, of } from 'rxjs';
import { ProcessDefinitionRepresentation } from '../models/process-definition.model';
import { ProcessInstanceVariable } from '../models/process-instance-variable.model';
import { ProcessInstance } from '../models/process-instance.model';
import { ProcessListModel } from '../models/process-list.model';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
var ProcessService = /** @class */ (function () {
    function ProcessService(alfrescoApiService) {
        this.alfrescoApiService = alfrescoApiService;
    }
    /**
     * Gets process instances for a filter and optionally a process definition.
     * @param requestNode Filter for instances
     * @param processDefinitionKey Limits returned instances to a process definition
     * @returns List of process instances
     */
    /**
     * Gets process instances for a filter and optionally a process definition.
     * @param {?} requestNode Filter for instances
     * @param {?=} processDefinitionKey Limits returned instances to a process definition
     * @return {?} List of process instances
     */
    ProcessService.prototype.getProcessInstances = /**
     * Gets process instances for a filter and optionally a process definition.
     * @param {?} requestNode Filter for instances
     * @param {?=} processDefinitionKey Limits returned instances to a process definition
     * @return {?} List of process instances
     */
    function (requestNode, processDefinitionKey) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstances(requestNode))
            .pipe(map(function (res) {
            if (processDefinitionKey) {
                /** @type {?} */
                var filtered = res.data.filter(function (process) { return process.processDefinitionKey === processDefinitionKey; });
                res.data = filtered;
                return res;
            }
            else {
                return res;
            }
        }), catchError(function (err) { return _this.handleProcessError(err); }));
    };
    /**
     * Gets processes for a filter and optionally a process definition.
     * @param requestNode Filter for instances
     * @param processDefinitionKey Limits returned instances to a process definition
     * @returns List of processes
     */
    /**
     * Gets processes for a filter and optionally a process definition.
     * @param {?} requestNode Filter for instances
     * @param {?=} processDefinitionKey Limits returned instances to a process definition
     * @return {?} List of processes
     */
    ProcessService.prototype.getProcesses = /**
     * Gets processes for a filter and optionally a process definition.
     * @param {?} requestNode Filter for instances
     * @param {?=} processDefinitionKey Limits returned instances to a process definition
     * @return {?} List of processes
     */
    function (requestNode, processDefinitionKey) {
        return this.getProcessInstances(requestNode, processDefinitionKey)
            .pipe(catchError(function () {
            return of(new ProcessListModel({}));
        }));
    };
    /**
     * Fetches the Process Audit information as a PDF.
     * @param processId ID of the target process
     * @returns Binary PDF data
     */
    /**
     * Fetches the Process Audit information as a PDF.
     * @param {?} processId ID of the target process
     * @return {?} Binary PDF data
     */
    ProcessService.prototype.fetchProcessAuditPdfById = /**
     * Fetches the Process Audit information as a PDF.
     * @param {?} processId ID of the target process
     * @return {?} Binary PDF data
     */
    function (processId) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditPdf(processId))
            .pipe(catchError(function (err) { return _this.handleProcessError(err); }));
    };
    /**
     * Fetches the Process Audit information in a JSON format.
     * @param processId ID of the target process
     * @returns JSON data
     */
    /**
     * Fetches the Process Audit information in a JSON format.
     * @param {?} processId ID of the target process
     * @return {?} JSON data
     */
    ProcessService.prototype.fetchProcessAuditJsonById = /**
     * Fetches the Process Audit information in a JSON format.
     * @param {?} processId ID of the target process
     * @return {?} JSON data
     */
    function (processId) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditJson(processId))
            .pipe(catchError(function (err) { return _this.handleProcessError(err); }));
    };
    /**
     * Gets Process Instance metadata.
     * @param processInstanceId ID of the target process
     * @returns Metadata for the instance
     */
    /**
     * Gets Process Instance metadata.
     * @param {?} processInstanceId ID of the target process
     * @return {?} Metadata for the instance
     */
    ProcessService.prototype.getProcess = /**
     * Gets Process Instance metadata.
     * @param {?} processInstanceId ID of the target process
     * @return {?} Metadata for the instance
     */
    function (processInstanceId) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstance(processInstanceId))
            .pipe(catchError(function (err) { return _this.handleProcessError(err); }));
    };
    /**
     * Gets task instances for a process instance.
     * @param processInstanceId ID of the process instance
     * @param state Task state filter (can be "active" or "completed")
     * @returns Array of task instance details
     */
    /**
     * Gets task instances for a process instance.
     * @param {?} processInstanceId ID of the process instance
     * @param {?=} state Task state filter (can be "active" or "completed")
     * @return {?} Array of task instance details
     */
    ProcessService.prototype.getProcessTasks = /**
     * Gets task instances for a process instance.
     * @param {?} processInstanceId ID of the process instance
     * @param {?=} state Task state filter (can be "active" or "completed")
     * @return {?} Array of task instance details
     */
    function (processInstanceId, state) {
        var _this = this;
        /** @type {?} */
        var taskOpts = state ? {
            processInstanceId: processInstanceId,
            state: state
        } : {
            processInstanceId: processInstanceId
        };
        return from(this.alfrescoApiService.getInstance().activiti.taskApi.listTasks(taskOpts))
            .pipe(map(this.extractData), map(function (tasks) { return tasks.map(function (task) {
            task.created = moment(task.created, 'YYYY-MM-DD').format();
            return task;
        }); }), catchError(function (err) { return _this.handleProcessError(err); }));
    };
    /**
     * Gets process definitions associated with an app.
     * @param appId ID of a target app
     * @returns Array of process definitions
     */
    /**
     * Gets process definitions associated with an app.
     * @param {?=} appId ID of a target app
     * @return {?} Array of process definitions
     */
    ProcessService.prototype.getProcessDefinitions = /**
     * Gets process definitions associated with an app.
     * @param {?=} appId ID of a target app
     * @return {?} Array of process definitions
     */
    function (appId) {
        var _this = this;
        /** @type {?} */
        var opts = appId ? {
            latest: true,
            appDefinitionId: appId
        } : {
            latest: true
        };
        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessDefinitions(opts))
            .pipe(map(this.extractData), map(function (processDefs) { return processDefs.map(function (pd) { return new ProcessDefinitionRepresentation(pd); }); }), catchError(function (err) { return _this.handleProcessError(err); }));
    };
    /**
     * Starts a process based on a process definition, name, form values or variables.
     * @param processDefinitionId Process definition ID
     * @param name Process name
     * @param outcome Process outcome
     * @param startFormValues Values for the start form
     * @param variables Array of process instance variables
     * @returns Details of the process instance just started
     */
    /**
     * Starts a process based on a process definition, name, form values or variables.
     * @param {?} processDefinitionId Process definition ID
     * @param {?} name Process name
     * @param {?=} outcome Process outcome
     * @param {?=} startFormValues Values for the start form
     * @param {?=} variables Array of process instance variables
     * @return {?} Details of the process instance just started
     */
    ProcessService.prototype.startProcess = /**
     * Starts a process based on a process definition, name, form values or variables.
     * @param {?} processDefinitionId Process definition ID
     * @param {?} name Process name
     * @param {?=} outcome Process outcome
     * @param {?=} startFormValues Values for the start form
     * @param {?=} variables Array of process instance variables
     * @return {?} Details of the process instance just started
     */
    function (processDefinitionId, name, outcome, startFormValues, variables) {
        var _this = this;
        /** @type {?} */
        var startRequest = {
            name: name,
            processDefinitionId: processDefinitionId
        };
        if (outcome) {
            startRequest.outcome = outcome;
        }
        if (startFormValues) {
            startRequest.values = startFormValues;
        }
        if (variables) {
            startRequest.variables = variables;
        }
        return from(this.alfrescoApiService.getInstance().activiti.processApi.startNewProcessInstance(startRequest))
            .pipe(map(function (pd) { return new ProcessInstance(pd); }), catchError(function (err) { return _this.handleProcessError(err); }));
    };
    /**
     * Cancels a process instance.
     * @param processInstanceId ID of process to cancel
     * @returns Null response notifying when the operation is complete
     */
    /**
     * Cancels a process instance.
     * @param {?} processInstanceId ID of process to cancel
     * @return {?} Null response notifying when the operation is complete
     */
    ProcessService.prototype.cancelProcess = /**
     * Cancels a process instance.
     * @param {?} processInstanceId ID of process to cancel
     * @return {?} Null response notifying when the operation is complete
     */
    function (processInstanceId) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.processApi.deleteProcessInstance(processInstanceId))
            .pipe(catchError(function (err) { return _this.handleProcessError(err); }));
    };
    /**
     * Gets the variables for a process instance.
     * @param processInstanceId ID of the target process
     * @returns Array of instance variable info
     */
    /**
     * Gets the variables for a process instance.
     * @param {?} processInstanceId ID of the target process
     * @return {?} Array of instance variable info
     */
    ProcessService.prototype.getProcessInstanceVariables = /**
     * Gets the variables for a process instance.
     * @param {?} processInstanceId ID of the target process
     * @return {?} Array of instance variable info
     */
    function (processInstanceId) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.getProcessInstanceVariables(processInstanceId))
            .pipe(map(function (processVars) { return processVars.map(function (currentProcessVar) { return new ProcessInstanceVariable(currentProcessVar); }); }), catchError(function (err) { return _this.handleProcessError(err); }));
    };
    /**
     * Creates or updates variables for a process instance.
     * @param processInstanceId ID of the target process
     * @param variables Variables to update
     * @returns Array of instance variable info
     */
    /**
     * Creates or updates variables for a process instance.
     * @param {?} processInstanceId ID of the target process
     * @param {?} variables Variables to update
     * @return {?} Array of instance variable info
     */
    ProcessService.prototype.createOrUpdateProcessInstanceVariables = /**
     * Creates or updates variables for a process instance.
     * @param {?} processInstanceId ID of the target process
     * @param {?} variables Variables to update
     * @return {?} Array of instance variable info
     */
    function (processInstanceId, variables) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.createOrUpdateProcessInstanceVariables(processInstanceId, variables)).pipe(catchError(function (err) { return _this.handleProcessError(err); }));
    };
    /**
     * Deletes a variable for a process instance.
     * @param processInstanceId ID of the target process
     * @param variableName Name of the variable to delete
     * @returns Null response notifying when the operation is complete
     */
    /**
     * Deletes a variable for a process instance.
     * @param {?} processInstanceId ID of the target process
     * @param {?} variableName Name of the variable to delete
     * @return {?} Null response notifying when the operation is complete
     */
    ProcessService.prototype.deleteProcessInstanceVariable = /**
     * Deletes a variable for a process instance.
     * @param {?} processInstanceId ID of the target process
     * @param {?} variableName Name of the variable to delete
     * @return {?} Null response notifying when the operation is complete
     */
    function (processInstanceId, variableName) {
        var _this = this;
        return from(this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.deleteProcessInstanceVariable(processInstanceId, variableName))
            .pipe(catchError(function (err) { return _this.handleProcessError(err); }));
    };
    /**
     * @private
     * @param {?} res
     * @return {?}
     */
    ProcessService.prototype.extractData = /**
     * @private
     * @param {?} res
     * @return {?}
     */
    function (res) {
        return res.data || {};
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    ProcessService.prototype.handleProcessError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return throwError(error || 'Server error');
    };
    ProcessService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ProcessService.ctorParameters = function () { return [
        { type: AlfrescoApiService }
    ]; };
    /** @nocollapse */ ProcessService.ngInjectableDef = i0.defineInjectable({ factory: function ProcessService_Factory() { return new ProcessService(i0.inject(i1.AlfrescoApiService)); }, token: ProcessService, providedIn: "root" });
    return ProcessService;
}());
export { ProcessService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProcessService.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1wcm9jZXNzLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsicHJvY2Vzcy1saXN0L3NlcnZpY2VzL3Byb2Nlc3Muc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsa0JBQWtCLEVBQWMsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBYyxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUd4RCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNyRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNwRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDbkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDaEUsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBSWpEO0lBS0ksd0JBQW9CLGtCQUFzQztRQUF0Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO0lBQzFELENBQUM7SUFFRDs7Ozs7T0FLRzs7Ozs7OztJQUNILDRDQUFtQjs7Ozs7O0lBQW5CLFVBQW9CLFdBQWtELEVBQUUsb0JBQTZCO1FBQXJHLGlCQWNDO1FBYkcsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDbEcsSUFBSSxDQUNELEdBQUcsQ0FBQyxVQUFDLEdBQVE7WUFDVCxJQUFJLG9CQUFvQixFQUFFOztvQkFDaEIsUUFBUSxHQUFHLEdB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QUE2QixDQUFDLGlCQUFpQixFQUFFLFlBQVksQ0FBQyxDQUM1STthQUNJLElBQUksQ0FDRCxVQUFVLENBQUMsVUFBQyxHQUFHLElBQUssT0FBQSxLQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLEVBQTVCLENBQTRCLENBQUMsQ0FDcEQsQ0FBQztJQUNWLENBQUM7Ozs7OztJQUVPLG9DQUFXOzs7OztJQUFuQixVQUFvQixHQUFRO1FBQ3hCLE9BQU8sR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7Ozs7O0lBRU8sMkNBQWtCOzs7OztJQUExQixVQUEyQixLQUFVO1FBQ2pDLE9BQU8sVUFBVSxDQUFDLEtBQUssSUFBSSxjQUFjLENBQUMsQ0FBQztJQUMvQyxDQUFDOztnQkE3TkosVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7OztnQkFoQlEsa0JBQWtCOzs7eUJBakIzQjtDQTZQQyxBQTlORCxJQThOQztTQTNOWSxjQUFjOzs7Ozs7SUFFWCw0Q0FBOEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBbGZyZXNjb0FwaVNlcnZpY2UsIEZvcm1WYWx1ZXMgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVzdFZhcmlhYmxlIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCB0aHJvd0Vycm9yLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVGFza0RldGFpbHNNb2RlbCB9IGZyb20gJy4uLy4uL3Rhc2stbGlzdCc7XG5pbXBvcnQgeyBQcm9jZXNzRmlsdGVyUGFyYW1SZXByZXNlbnRhdGlvbk1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL2ZpbHRlci1wcm9jZXNzLm1vZGVsJztcbmltcG9ydCB7IFByb2Nlc3NEZWZpbml0aW9uUmVwcmVzZW50YXRpb24gfSBmcm9tICcuLi9tb2RlbHMvcHJvY2Vzcy1kZWZpbml0aW9uLm1vZGVsJztcbmltcG9ydCB7IFByb2Nlc3NJbnN0YW5jZVZhcmlhYmxlIH0gZnJvbSAnLi4vbW9kZWxzL3Byb2Nlc3MtaW5zdGFuY2UtdmFyaWFibGUubW9kZWwnO1xuaW1wb3J0IHsgUHJvY2Vzc0luc3RhbmNlIH0gZnJvbSAnLi4vbW9kZWxzL3Byb2Nlc3MtaW5zdGFuY2UubW9kZWwnO1xuaW1wb3J0IHsgUHJvY2Vzc0xpc3RNb2RlbCB9IGZyb20gJy4uL21vZGVscy9wcm9jZXNzLWxpc3QubW9kZWwnO1xuaW1wb3J0IHsgbWFwLCBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5kZWNsYXJlIGxldCBtb21lbnQ6IGFueTtcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQcm9jZXNzU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFsZnJlc2NvQXBpU2VydmljZTogQWxmcmVzY29BcGlTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBwcm9jZXNzIGluc3RhbmNlcyBmb3IgYSBmaWx0ZXIgYW5kIG9wdGlvbmFsbHkgYSBwcm9jZXNzIGRlZmluaXRpb24uXG4gICAgICogQHBhcmFtIHJlcXVlc3ROb2RlIEZpbHRlciBmb3IgaW5zdGFuY2VzXG4gICAgICogQHBhcmFtIHByb2Nlc3NEZWZpbml0aW9uS2V5IExpbWl0cyByZXR1cm5lZCBpbnN0YW5jZXMgdG8gYSBwcm9jZXNzIGRlZmluaXRpb25cbiAgICAgKiBAcmV0dXJucyBMaXN0IG9mIHByb2Nlc3MgaW5zdGFuY2VzXG4gICAgICovXG4gICAgZ2V0UHJvY2Vzc0luc3RhbmNlcyhyZXF1ZXN0Tm9kZTogUHJvY2Vzc0ZpbHRlclBhcmFtUmVwcmVzZW50YXRpb25Nb2RlbCwgcHJvY2Vzc0RlZmluaXRpb25LZXk/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFByb2Nlc3NMaXN0TW9kZWw+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS5wcm9jZXNzQXBpLmdldFByb2Nlc3NJbnN0YW5jZXMocmVxdWVzdE5vZGUpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKChyZXM6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc0RlZmluaXRpb25LZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkID0gcmVzLmRhdGEuZmlsdGVyKChwcm9jZXNzKSA9PiBwcm9jZXNzLnByb2Nlc3NEZWZpbml0aW9uS2V5ID09PSBwcm9jZXNzRGVmaW5pdGlvbktleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMuZGF0YSA9IGZpbHRlcmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlUHJvY2Vzc0Vycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgcHJvY2Vzc2VzIGZvciBhIGZpbHRlciBhbmQgb3B0aW9uYWxseSBhIHByb2Nlc3MgZGVmaW5pdGlvbi5cbiAgICAgKiBAcGFyYW0gcmVxdWVzdE5vZGUgRmlsdGVyIGZvciBpbnN0YW5jZXNcbiAgICAgKiBAcGFyYW0gcHJvY2Vzc0RlZmluaXRpb25LZXkgTGltaXRzIHJldHVybmVkIGluc3RhbmNlcyB0byBhIHByb2Nlc3MgZGVmaW5pdGlvblxuICAgICAqIEByZXR1cm5zIExpc3Qgb2YgcHJvY2Vzc2VzXG4gICAgICovXG4gICAgZ2V0UHJvY2Vzc2VzKHJlcXVlc3ROb2RlOiBQcm9jZXNzRmlsdGVyUGFyYW1SZXByZXNlbnRhdGlvbk1vZGVsLCBwcm9jZXNzRGVmaW5pdGlvbktleT86IHN0cmluZyk6IE9ic2VydmFibGU8UHJvY2Vzc0xpc3RNb2RlbD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9jZXNzSW5zdGFuY2VzKHJlcXVlc3ROb2RlLCBwcm9jZXNzRGVmaW5pdGlvbktleSlcbiAgICAgICAgICAgIC5waXBlKGNhdGNoRXJyb3IoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBvZihuZXcgUHJvY2Vzc0xpc3RNb2RlbCh7fSkpO1xuICAgICAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgdGhlIFByb2Nlc3MgQXVkaXQgaW5mb3JtYXRpb24gYXMgYSBQREYuXG4gICAgICogQHBhcmFtIHByb2Nlc3NJZCBJRCBvZiB0aGUgdGFyZ2V0IHByb2Nlc3NcbiAgICAgKiBAcmV0dXJucyBCaW5hcnkgUERGIGRhdGFcbiAgICAgKi9cbiAgICBmZXRjaFByb2Nlc3NBdWRpdFBkZkJ5SWQocHJvY2Vzc0lkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJsb2I+IHtcbiAgICAgICAgcmV0dXJuIGZyb208QmxvYj4odGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS5wcm9jZXNzQXBpLmdldFByb2Nlc3NBdWRpdFBkZihwcm9jZXNzSWQpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB0aGlzLmhhbmRsZVByb2Nlc3NFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIHRoZSBQcm9jZXNzIEF1ZGl0IGluZm9ybWF0aW9uIGluIGEgSlNPTiBmb3JtYXQuXG4gICAgICogQHBhcmFtIHByb2Nlc3NJZCBJRCBvZiB0aGUgdGFyZ2V0IHByb2Nlc3NcbiAgICAgKiBAcmV0dXJucyBKU09OIGRhdGFcbiAgICAgKi9cbiAgICBmZXRjaFByb2Nlc3NBdWRpdEpzb25CeUlkKHByb2Nlc3NJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS5wcm9jZXNzQXBpLmdldFByb2Nlc3NBdWRpdEpzb24ocHJvY2Vzc0lkKSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhpcy5oYW5kbGVQcm9jZXNzRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBQcm9jZXNzIEluc3RhbmNlIG1ldGFkYXRhLlxuICAgICAqIEBwYXJhbSBwcm9jZXNzSW5zdGFuY2VJZCBJRCBvZiB0aGUgdGFyZ2V0IHByb2Nlc3NcbiAgICAgKiBAcmV0dXJucyBNZXRhZGF0YSBmb3IgdGhlIGluc3RhbmNlXG4gICAgICovXG4gICAgZ2V0UHJvY2Vzcyhwcm9jZXNzSW5zdGFuY2VJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxQcm9jZXNzSW5zdGFuY2U+IHtcbiAgICAgICAgcmV0dXJuIGZyb20odGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS5wcm9jZXNzQXBpLmdldFByb2Nlc3NJbnN0YW5jZShwcm9jZXNzSW5zdGFuY2VJZCkpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlUHJvY2Vzc0Vycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGFzayBpbnN0YW5jZXMgZm9yIGEgcHJvY2VzcyBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gcHJvY2Vzc0luc3RhbmNlSWQgSUQgb2YgdGhlIHByb2Nlc3MgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gc3RhdGUgVGFzayBzdGF0ZSBmaWx0ZXIgKGNhbiBiZSBcImFjdGl2ZVwiIG9yIFwiY29tcGxldGVkXCIpXG4gICAgICogQHJldHVybnMgQXJyYXkgb2YgdGFzayBpbnN0YW5jZSBkZXRhaWxzXG4gICAgICovXG4gICAgZ2V0UHJvY2Vzc1Rhc2tzKHByb2Nlc3NJbnN0YW5jZUlkOiBzdHJpbmcsIHN0YXRlPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxUYXNrRGV0YWlsc01vZGVsW10+IHtcbiAgICAgICAgbGV0IHRhc2tPcHRzID0gc3RhdGUgPyB7XG4gICAgICAgICAgICBwcm9jZXNzSW5zdGFuY2VJZDogcHJvY2Vzc0luc3RhbmNlSWQsXG4gICAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICBwcm9jZXNzSW5zdGFuY2VJZDogcHJvY2Vzc0luc3RhbmNlSWRcbiAgICAgICAgICAgIH07XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuYWxmcmVzY29BcGlTZXJ2aWNlLmdldEluc3RhbmNlKCkuYWN0aXZpdGkudGFza0FwaS5saXN0VGFza3ModGFza09wdHMpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKHRoaXMuZXh0cmFjdERhdGEpLFxuICAgICAgICAgICAgICAgIG1hcCgodGFza3MpID0+IHRhc2tzLm1hcCgodGFzazogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2suY3JlYXRlZCA9IG1vbWVudCh0YXNrLmNyZWF0ZWQsICdZWVlZLU1NLUREJykuZm9ybWF0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXNrO1xuICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlUHJvY2Vzc0Vycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgcHJvY2VzcyBkZWZpbml0aW9ucyBhc3NvY2lhdGVkIHdpdGggYW4gYXBwLlxuICAgICAqIEBwYXJhbSBhcHBJZCBJRCBvZiBhIHRhcmdldCBhcHBcbiAgICAgKiBAcmV0dXJucyBBcnJheSBvZiBwcm9jZXNzIGRlZmluaXRpb25zXG4gICAgICovXG4gICAgZ2V0UHJvY2Vzc0RlZmluaXRpb25zKGFwcElkPzogbnVtYmVyKTogT2JzZXJ2YWJsZTxQcm9jZXNzRGVmaW5pdGlvblJlcHJlc2VudGF0aW9uW10+IHtcbiAgICAgICAgbGV0IG9wdHMgPSBhcHBJZCA/IHtcbiAgICAgICAgICAgIGxhdGVzdDogdHJ1ZSxcbiAgICAgICAgICAgIGFwcERlZmluaXRpb25JZDogYXBwSWRcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICBsYXRlc3Q6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIHJldHVybiBmcm9tKFxuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS5wcm9jZXNzQXBpLmdldFByb2Nlc3NEZWZpbml0aW9ucyhvcHRzKVxuICAgICAgICApXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAodGhpcy5leHRyYWN0RGF0YSksXG4gICAgICAgICAgICAgICAgbWFwKChwcm9jZXNzRGVmcykgPT4gcHJvY2Vzc0RlZnMubWFwKChwZCkgPT4gbmV3IFByb2Nlc3NEZWZpbml0aW9uUmVwcmVzZW50YXRpb24ocGQpKSksXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB0aGlzLmhhbmRsZVByb2Nlc3NFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydHMgYSBwcm9jZXNzIGJhc2VkIG9uIGEgcHJvY2VzcyBkZWZpbml0aW9uLCBuYW1lLCBmb3JtIHZhbHVlcyBvciB2YXJpYWJsZXMuXG4gICAgICogQHBhcmFtIHByb2Nlc3NEZWZpbml0aW9uSWQgUHJvY2VzcyBkZWZpbml0aW9uIElEXG4gICAgICogQHBhcmFtIG5hbWUgUHJvY2VzcyBuYW1lXG4gICAgICogQHBhcmFtIG91dGNvbWUgUHJvY2VzcyBvdXRjb21lXG4gICAgICogQHBhcmFtIHN0YXJ0Rm9ybVZhbHVlcyBWYWx1ZXMgZm9yIHRoZSBzdGFydCBmb3JtXG4gICAgICogQHBhcmFtIHZhcmlhYmxlcyBBcnJheSBvZiBwcm9jZXNzIGluc3RhbmNlIHZhcmlhYmxlc1xuICAgICAqIEByZXR1cm5zIERldGFpbHMgb2YgdGhlIHByb2Nlc3MgaW5zdGFuY2UganVzdCBzdGFydGVkXG4gICAgICovXG4gICAgc3RhcnRQcm9jZXNzKHByb2Nlc3NEZWZpbml0aW9uSWQ6IHN0cmluZywgbmFtZTogc3RyaW5nLCBvdXRjb21lPzogc3RyaW5nLCBzdGFydEZvcm1WYWx1ZXM/OiBGb3JtVmFsdWVzLCB2YXJpYWJsZXM/OiBQcm9jZXNzSW5zdGFuY2VWYXJpYWJsZVtdKTogT2JzZXJ2YWJsZTxQcm9jZXNzSW5zdGFuY2U+IHtcbiAgICAgICAgbGV0IHN0YXJ0UmVxdWVzdDogYW55ID0ge1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHByb2Nlc3NEZWZpbml0aW9uSWQ6IHByb2Nlc3NEZWZpbml0aW9uSWRcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG91dGNvbWUpIHtcbiAgICAgICAgICAgIHN0YXJ0UmVxdWVzdC5vdXRjb21lID0gb3V0Y29tZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRGb3JtVmFsdWVzKSB7XG4gICAgICAgICAgICBzdGFydFJlcXVlc3QudmFsdWVzID0gc3RhcnRGb3JtVmFsdWVzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YXJpYWJsZXMpIHtcbiAgICAgICAgICAgIHN0YXJ0UmVxdWVzdC52YXJpYWJsZXMgPSB2YXJpYWJsZXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZyb20oXG4gICAgICAgICAgICB0aGlzLmFsZnJlc2NvQXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmFjdGl2aXRpLnByb2Nlc3NBcGkuc3RhcnROZXdQcm9jZXNzSW5zdGFuY2Uoc3RhcnRSZXF1ZXN0KVxuICAgICAgICApXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoKHBkKSA9PiBuZXcgUHJvY2Vzc0luc3RhbmNlKHBkKSksXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB0aGlzLmhhbmRsZVByb2Nlc3NFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYW5jZWxzIGEgcHJvY2VzcyBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0gcHJvY2Vzc0luc3RhbmNlSWQgSUQgb2YgcHJvY2VzcyB0byBjYW5jZWxcbiAgICAgKiBAcmV0dXJucyBOdWxsIHJlc3BvbnNlIG5vdGlmeWluZyB3aGVuIHRoZSBvcGVyYXRpb24gaXMgY29tcGxldGVcbiAgICAgKi9cbiAgICBjYW5jZWxQcm9jZXNzKHByb2Nlc3NJbnN0YW5jZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIGZyb208dm9pZD4oXG4gICAgICAgICAgICB0aGlzLmFsZnJlc2NvQXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmFjdGl2aXRpLnByb2Nlc3NBcGkuZGVsZXRlUHJvY2Vzc0luc3RhbmNlKHByb2Nlc3NJbnN0YW5jZUlkKVxuICAgICAgICApXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlUHJvY2Vzc0Vycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhcmlhYmxlcyBmb3IgYSBwcm9jZXNzIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSBwcm9jZXNzSW5zdGFuY2VJZCBJRCBvZiB0aGUgdGFyZ2V0IHByb2Nlc3NcbiAgICAgKiBAcmV0dXJucyBBcnJheSBvZiBpbnN0YW5jZSB2YXJpYWJsZSBpbmZvXG4gICAgICovXG4gICAgZ2V0UHJvY2Vzc0luc3RhbmNlVmFyaWFibGVzKHByb2Nlc3NJbnN0YW5jZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFByb2Nlc3NJbnN0YW5jZVZhcmlhYmxlW10+IHtcbiAgICAgICAgcmV0dXJuIGZyb20oXG4gICAgICAgICAgICB0aGlzLmFsZnJlc2NvQXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmFjdGl2aXRpLnByb2Nlc3NJbnN0YW5jZVZhcmlhYmxlc0FwaS5nZXRQcm9jZXNzSW5zdGFuY2VWYXJpYWJsZXMocHJvY2Vzc0luc3RhbmNlSWQpXG4gICAgICAgIClcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgocHJvY2Vzc1ZhcnM6IGFueVtdKSA9PiBwcm9jZXNzVmFycy5tYXAoKGN1cnJlbnRQcm9jZXNzVmFyKSA9PiBuZXcgUHJvY2Vzc0luc3RhbmNlVmFyaWFibGUoY3VycmVudFByb2Nlc3NWYXIpKSksXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyKSA9PiB0aGlzLmhhbmRsZVByb2Nlc3NFcnJvcihlcnIpKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIG9yIHVwZGF0ZXMgdmFyaWFibGVzIGZvciBhIHByb2Nlc3MgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHByb2Nlc3NJbnN0YW5jZUlkIElEIG9mIHRoZSB0YXJnZXQgcHJvY2Vzc1xuICAgICAqIEBwYXJhbSB2YXJpYWJsZXMgVmFyaWFibGVzIHRvIHVwZGF0ZVxuICAgICAqIEByZXR1cm5zIEFycmF5IG9mIGluc3RhbmNlIHZhcmlhYmxlIGluZm9cbiAgICAgKi9cbiAgICBjcmVhdGVPclVwZGF0ZVByb2Nlc3NJbnN0YW5jZVZhcmlhYmxlcyhwcm9jZXNzSW5zdGFuY2VJZDogc3RyaW5nLCB2YXJpYWJsZXM6IFJlc3RWYXJpYWJsZVtdKTogT2JzZXJ2YWJsZTxQcm9jZXNzSW5zdGFuY2VWYXJpYWJsZVtdPiB7XG4gICAgICAgIHJldHVybiBmcm9tKFxuICAgICAgICAgICAgdGhpcy5hbGZyZXNjb0FwaVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5hY3Rpdml0aS5wcm9jZXNzSW5zdGFuY2VWYXJpYWJsZXNBcGkuY3JlYXRlT3JVcGRhdGVQcm9jZXNzSW5zdGFuY2VWYXJpYWJsZXMocHJvY2Vzc0luc3RhbmNlSWQsIHZhcmlhYmxlcylcbiAgICAgICAgKS5waXBlKFxuICAgICAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4gdGhpcy5oYW5kbGVQcm9jZXNzRXJyb3IoZXJyKSlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlcyBhIHZhcmlhYmxlIGZvciBhIHByb2Nlc3MgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIHByb2Nlc3NJbnN0YW5jZUlkIElEIG9mIHRoZSB0YXJnZXQgcHJvY2Vzc1xuICAgICAqIEBwYXJhbSB2YXJpYWJsZU5hbWUgTmFtZSBvZiB0aGUgdmFyaWFibGUgdG8gZGVsZXRlXG4gICAgICogQHJldHVybnMgTnVsbCByZXNwb25zZSBub3RpZnlpbmcgd2hlbiB0aGUgb3BlcmF0aW9uIGlzIGNvbXBsZXRlXG4gICAgICovXG4gICAgZGVsZXRlUHJvY2Vzc0luc3RhbmNlVmFyaWFibGUocHJvY2Vzc0luc3RhbmNlSWQ6IHN0cmluZywgdmFyaWFibGVOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIGZyb208dm9pZD4oXG4gICAgICAgICAgICB0aGlzLmFsZnJlc2NvQXBpU2VydmljZS5nZXRJbnN0YW5jZSgpLmFjdGl2aXRpLnByb2Nlc3NJbnN0YW5jZVZhcmlhYmxlc0FwaS5kZWxldGVQcm9jZXNzSW5zdGFuY2VWYXJpYWJsZShwcm9jZXNzSW5zdGFuY2VJZCwgdmFyaWFibGVOYW1lKVxuICAgICAgICApXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+IHRoaXMuaGFuZGxlUHJvY2Vzc0Vycm9yKGVycikpXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgZXh0cmFjdERhdGEocmVzOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5kYXRhIHx8IHt9O1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlUHJvY2Vzc0Vycm9yKGVycm9yOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IgfHwgJ1NlcnZlciBlcnJvcicpO1xuICAgIH1cbn1cbiJdfQ==
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import { Observable, forkJoin, from, throwError } from 'rxjs';
import { FilterRepresentationModel } from '../models/filter.model';
import { map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
var TaskFilterService = /** @class */ (function () {
    function TaskFilterService(apiService, logService) {
        this.apiService = apiService;
        this.logService = logService;
    }
    /**
     * Creates and returns the default filters for a process app.
     * @param appId ID of the target app
     * @returns Array of default filters just created
     */
    /**
     * Creates and returns the default filters for a process app.
     * @param {?} appId ID of the target app
     * @return {?} Array of default filters just created
     */
    TaskFilterService.prototype.createDefaultFilters = /**
     * Creates and returns the default filters for a process app.
     * @param {?} appId ID of the target app
     * @return {?} Array of default filters just created
     */
    function (appId) {
        var _this = this;
        /** @type {?} */
        var involvedTasksFilter = this.getInvolvedTasksFilterInstance(appId);
        /** @type {?} */
        var involvedObservable = this.addFilter(involvedTasksFilter);
        /** @type {?} */
        var myTasksFilter = this.getMyTasksFilterInstance(appId);
        /** @type {?} */
        var myTaskObservable = this.addFilter(myTasksFilter);
        /** @type {?} */
        var queuedTasksFilter = this.getQueuedTasksFilterInstance(appId);
        /** @type {?} */
        var queuedObservable = this.addFilter(queuedTasksFilter);
        /** @type {?} */
        var completedTasksFilter = this.getCompletedTasksFilterInstance(appId);
        /** @type {?} */
        var completeObservable = this.addFilter(completedTasksFilter);
        return new Observable(function (observer) {
            forkJoin(involvedObservable, myTaskObservable, queuedObservable, completeObservable).subscribe(function (res) {
                /** @type {?} */
                var filters = [];
                res.forEach(function (filter) {
                    if (filter.name === involvedTasksFilter.name) {
                        involvedTasksFilter.id = filter.id;
                        filters.push(involvedTasksFilter);
                    }
                    else if (filter.name === myTasksFilter.name) {
                        myTasksFilter.id = filter.id;
                        filters.push(myTasksFilter);
                    }
                    else if (filter.name === queuedTasksFilter.name) {
                        queuedTasksFilter.id = filter.id;
                        filters.push(queuedTasksFilter);
                    }
                    else if (filter.name === completedTasksFilter.name) {
                        completedTasksFilter.id = filter.id;
                        filters.push(completedTasksFilter);
                    }
                });
                observer.next(filters);
                observer.complete();
            }, function (err) {
                _this.logService.error(err);
            });
        });
    };
    /**
     * Gets all task filters for a process app.
     * @param appId Optional ID for a specific app
     * @returns Array of task filter details
     */
    /**
     * Gets all task filters for a process app.
     * @param {?=} appId Optional ID for a specific app
     * @return {?} Array of task filter details
     */
    TaskFilterService.prototype.getTaskListFilters = /**
     * Gets all task filters for a process app.
     * @param {?=} appId Optional ID for a specific app
     * @return {?} Array of task filter details
     */
    function (appId) {
        var _this = this;
        return from(this.callApiTaskFilters(appId))
            .pipe(map(function (response) {
            /** @type {?} */
            var filters = [];
            response.data.forEach(function (filter) {
                /** @type {?} */
                var filterModel = new FilterRepresentationModel(filter);
                filters.push(filterModel);
            });
            return filters;
        }), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets a task filter by ID.
     * @param filterId ID of the filter
     * @param appId ID of the app for the filter
     * @returns Details of task filter
     */
    /**
     * Gets a task filter by ID.
     * @param {?} filterId ID of the filter
     * @param {?=} appId ID of the app for the filter
     * @return {?} Details of task filter
     */
    TaskFilterService.prototype.getTaskFilterById = /**
     * Gets a task filter by ID.
     * @param {?} filterId ID of the filter
     * @param {?=} appId ID of the app for the filter
     * @return {?} Details of task filter
     */
    function (filterId, appId) {
        var _this = this;
        return from(this.callApiTaskFilters(appId)).pipe(map(function (response) { return response.data.find(function (filter) { return filter.id === filterId; }); }), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Gets a task filter by name.
     * @param taskName Name of the filter
     * @param appId ID of the app for the filter
     * @returns Details of task filter
     */
    /**
     * Gets a task filter by name.
     * @param {?} taskName Name of the filter
     * @param {?=} appId ID of the app for the filter
     * @return {?} Details of task filter
     */
    TaskFilterService.prototype.getTaskFilterByName = /**
     * Gets a task filter by name.
     * @param {?} taskName Name of the filter
     * @param {?=} appId ID of the app for the filter
     * @return {?} Details of task filter
     */
    function (taskName, appId) {
        var _this = this;
        return from(this.callApiTaskFilters(appId)).pipe(map(function (response) { return response.data.find(function (filter) { return filter.name === taskName; }); }), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Adds a new task filter
     * @param filter The new filter to add
     * @returns Details of task filter just added
     */
    /**
     * Adds a new task filter
     * @param {?} filter The new filter to add
     * @return {?} Details of task filter just added
     */
    TaskFilterService.prototype.addFilter = /**
     * Adds a new task filter
     * @param {?} filter The new filter to add
     * @return {?} Details of task filter just added
     */
    function (filter) {
        var _this = this;
        return from(this.apiService.getInstance().activiti.userFiltersApi.createUserTaskFilter(filter))
            .pipe(map(function (response) {
            return response;
        }), catchError(function (err) { return _this.handleError(err); }));
    };
    /**
     * Calls `getUserTaskFilters` from the Alfresco JS API.
     * @param appId ID of the target app
     * @returns List of task filters
     */
    /**
     * Calls `getUserTaskFilters` from the Alfresco JS API.
     * @param {?=} appId ID of the target app
     * @return {?} List of task filters
     */
    TaskFilterService.prototype.callApiTaskFilters = /**
     * Calls `getUserTaskFilters` from the Alfresco JS API.
     * @param {?=} appId ID of the target app
     * @return {?} List of task filters
     */
    function (appId) {
        if (appId) {
            return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters({ appId: appId });
        }
        else {
            return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters();
        }
    };
    /**
     * Creates and returns a filter for "Involved" task instances.
     * @param appId ID of the target app
     * @returns The newly created filter
     */
    /**
     * Creates and returns a filter for "Involved" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    TaskFilterService.prototype.getInvolvedTasksFilterInstance = /**
     * Creates and returns a filter for "Involved" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    function (appId) {
        return new FilterRepresentationModel({
            'name': 'Involved Tasks',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-align-left',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'involved' }
        });
    };
    /**
     * Creates and returns a filter for "My Tasks" task instances.
     * @param appId ID of the target app
     * @returns The newly created filter
     */
    /**
     * Creates and returns a filter for "My Tasks" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    TaskFilterService.prototype.getMyTasksFilterInstance = /**
     * Creates and returns a filter for "My Tasks" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    function (appId) {
        return new FilterRepresentationModel({
            'name': 'My Tasks',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-inbox',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'assignee' }
        });
    };
    /**
     * Creates and returns a filter for "Queued Tasks" task instances.
     * @param appId ID of the target app
     * @returns The newly created filter
     */
    /**
     * Creates and returns a filter for "Queued Tasks" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    TaskFilterService.prototype.getQueuedTasksFilterInstance = /**
     * Creates and returns a filter for "Queued Tasks" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    function (appId) {
        return new FilterRepresentationModel({
            'name': 'Queued Tasks',
            'appId': appId,
            'recent': false,
            'icon': 'glyphicon-record',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'candidate' }
        });
    };
    /**
     * Creates and returns a filter for "Completed" task instances.
     * @param appId ID of the target app
     * @returns The newly created filter
     */
    /**
     * Creates and returns a filter for "Completed" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    TaskFilterService.prototype.getCompletedTasksFilterInstance = /**
     * Creates and returns a filter for "Completed" task instances.
     * @param {?} appId ID of the target app
     * @return {?} The newly created filter
     */
    function (appId) {
        return new FilterRepresentationModel({
            'name': 'Completed Tasks',
            'appId': appId,
            'recent': true,
            'icon': 'glyphicon-ok-sign',
            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed', 'assignment': 'involved' }
        });
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    TaskFilterService.prototype.handleError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    };
    TaskFilterService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TaskFilterService.ctorParameters = function () { return [
        { type: AlfrescoApiService },
        { type: LogService }
    ]; };
    /** @nocollapse */ TaskFilterService.ngInjectableDef = i0.defineInjectable({ factory: function TaskFilterService_Factory() { return new TaskFilterService(i0.inject(i1.AlfrescoApiService), i0.inject(i1.LogService)); }, token: TaskFilterService, providedIn: "root" });
    return TaskFilterService;
}());
export { TaskFilterService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaskFilterService.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    TaskFilterService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,
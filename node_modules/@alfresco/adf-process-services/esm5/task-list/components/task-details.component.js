/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { PeopleProcessService, UserProcessModel } from '@alfresco/adf-core';
import { AuthenticationService, CardViewUpdateService, LogService, FormRenderingService, CommentsComponent } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material';
import { Observable } from 'rxjs';
import { TaskQueryRequestRepresentationModel } from '../models/filter.model';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListService } from './../services/tasklist.service';
import { AttachFileWidgetComponent, AttachFolderWidgetComponent } from '../../content-widget';
import { share } from 'rxjs/operators';
var TaskDetailsComponent = /** @class */ (function () {
    function TaskDetailsComponent(taskListService, authService, peopleProcessService, formRenderingService, logService, cardViewUpdateService, dialog) {
        var _this = this;
        this.taskListService = taskListService;
        this.authService = authService;
        this.peopleProcessService = peopleProcessService;
        this.formRenderingService = formRenderingService;
        this.logService = logService;
        this.cardViewUpdateService = cardViewUpdateService;
        this.dialog = dialog;
        /**
         * Toggles debug mode.
         */
        this.debugMode = false;
        /**
         * Automatically renders the next task when the current one is completed.
         */
        this.showNextTask = true;
        /**
         * Toggles task details Header component.
         */
        this.showHeader = true;
        /**
         * Toggles collapsed/expanded state of the Header component.
         */
        this.showHeaderContent = true;
        /**
         * Toggles `Involve People` feature for the Header component.
         */
        this.showInvolvePeople = true;
        /**
         * Toggles `Comments` feature for the Header component.
         */
        this.showComments = true;
        /**
         * Toggles `Checklist` feature for the Header component.
         */
        this.showChecklist = true;
        /**
         * Toggles rendering of the form title.
         */
        this.showFormTitle = false;
        /**
         * Toggles rendering of the `Complete` outcome button.
         */
        this.showFormCompleteButton = true;
        /**
         * Toggles rendering of the `Save` outcome button.
         */
        this.showFormSaveButton = true;
        /**
         * Toggles read-only state of the form. All form widgets render as read-only
         * if enabled.
         */
        this.readOnlyForm = false;
        /**
         * Toggles rendering of the `Refresh` button.
         */
        this.showFormRefreshButton = true;
        /**
         * Field validators for use with the form.
         */
        this.fieldValidators = [];
        /**
         * Emitted when the form is submitted with the `Save` or custom outcomes.
         */
        this.formSaved = new EventEmitter();
        /**
         * Emitted when the form is submitted with the `Complete` outcome.
         */
        this.formCompleted = new EventEmitter();
        /**
         * Emitted when the form field content is clicked.
         */
        this.formContentClicked = new EventEmitter();
        /**
         * Emitted when the form is loaded or reloaded.
         */
        this.formLoaded = new EventEmitter();
        /**
         * Emitted when a checklist task is created.
         */
        this.taskCreated = new EventEmitter();
        /**
         * Emitted when a checklist task is deleted.
         */
        this.taskDeleted = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        /**
         * Emitted when any outcome is executed. Default behaviour can be prevented
         * via `event.preventDefault()`.
         */
        this.executeOutcome = new EventEmitter();
        /**
         * Emitted when a task is assigned.
         */
        this.assignTask = new EventEmitter();
        /**
         * Emitted when a task is claimed.
         */
        this.claimedTask = new EventEmitter();
        /**
         * Emitted when a task is unclaimed.
         */
        this.unClaimedTask = new EventEmitter();
        this.taskFormName = null;
        this.taskPeople = [];
        this.showAssignee = false;
        this.showAttachForm = false;
        this.internalReadOnlyForm = false;
        this.formRenderingService.setComponentTypeResolver('select-folder', function () { return AttachFolderWidgetComponent; }, true);
        this.formRenderingService.setComponentTypeResolver('upload', function () { return AttachFileWidgetComponent; }, true);
        this.peopleSearch = new Observable(function (observer) { return _this.peopleSearchObserver = observer; })
            .pipe(share());
        this.authService.getBpmLoggedUser().subscribe(function (user) {
            _this.currentLoggedUser = user;
        });
    }
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.taskId) {
            this.loadDetails(this.taskId);
        }
        this.cardViewUpdateService.itemUpdated$.subscribe(this.updateTaskDetails.bind(this));
        this.cardViewUpdateService.itemClicked$.subscribe(this.clickTaskDetails.bind(this));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TaskDetailsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var taskId = changes.taskId;
        this.showAssignee = false;
        if (taskId && !taskId.currentValue) {
            this.reset();
        }
        else if (taskId && taskId.currentValue) {
            this.loadDetails(taskId.currentValue);
        }
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isStandaloneTask = /**
     * @return {?}
     */
    function () {
        return !(this.taskDetails && (!!this.taskDetails.processDefinitionId));
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isStandaloneTaskWithForm = /**
     * @return {?}
     */
    function () {
        return this.isStandaloneTask() && this.hasFormKey();
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isStandaloneTaskWithoutForm = /**
     * @return {?}
     */
    function () {
        return this.isStandaloneTask() && !this.hasFormKey();
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isFormComponentVisible = /**
     * @return {?}
     */
    function () {
        return this.hasFormKey() && !this.isShowAttachForm();
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isTaskStandaloneComponentVisible = /**
     * @return {?}
     */
    function () {
        return this.isStandaloneTaskWithoutForm() && !this.isShowAttachForm();
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isShowAttachForm = /**
     * @return {?}
     */
    function () {
        return this.showAttachForm;
    };
    /**
     * Reset the task details
     */
    /**
     * Reset the task details
     * @private
     * @return {?}
     */
    TaskDetailsComponent.prototype.reset = /**
     * Reset the task details
     * @private
     * @return {?}
     */
    function () {
        this.taskDetails = null;
    };
    /**
     * Check if the task has a form
     */
    /**
     * Check if the task has a form
     * @return {?}
     */
    TaskDetailsComponent.prototype.hasFormKey = /**
     * Check if the task has a form
     * @return {?}
     */
    function () {
        return (this.taskDetails && (!!this.taskDetails.formKey));
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isTaskActive = /**
     * @return {?}
     */
    function () {
        return this.taskDetails && this.taskDetails.duration === null;
    };
    /**
     * Save a task detail and update it after a successful response
     *
     * @param updateNotification
     */
    /**
     * Save a task detail and update it after a successful response
     *
     * @private
     * @param {?} updateNotification
     * @return {?}
     */
    TaskDetailsComponent.prototype.updateTaskDetails = /**
     * Save a task detail and update it after a successful response
     *
     * @private
     * @param {?} updateNotification
     * @return {?}
     */
    function (updateNotification) {
        var _this = this;
        this.taskListService.updateTask(this.taskId, updateNotification.changed)
            .subscribe(function () {
            _this.loadDetails(_this.taskId);
        });
    };
    /**
     * @private
     * @param {?} clickNotification
     * @return {?}
     */
    TaskDetailsComponent.prototype.clickTaskDetails = /**
     * @private
     * @param {?} clickNotification
     * @return {?}
     */
    function (clickNotification) {
        if (clickNotification.target.key === 'assignee') {
            this.showAssignee = true;
        }
        if (clickNotification.target.key === 'formName') {
            this.showAttachForm = true;
        }
    };
    /**
     * Load the activiti task details
     * @param taskId
     */
    /**
     * Load the activiti task details
     * @private
     * @param {?} taskId
     * @return {?}
     */
    TaskDetailsComponent.prototype.loadDetails = /**
     * Load the activiti task details
     * @private
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        var _this = this;
        this.taskPeople = [];
        this.taskFormName = null;
        if (taskId) {
            this.taskListService.getTaskDetails(taskId).subscribe(function (res) {
                _this.showAttachForm = false;
                _this.taskDetails = res;
                if (_this.taskDetails.name === 'null') {
                    _this.taskDetails.name = 'No name';
                }
                /** @type {?} */
                var endDate = res.endDate;
                if (endDate && !isNaN(endDate.getTime())) {
                    _this.internalReadOnlyForm = true;
                }
                else {
                    _this.internalReadOnlyForm = _this.readOnlyForm;
                }
                if (_this.taskDetails && _this.taskDetails.involvedPeople) {
                    _this.taskDetails.involvedPeople.forEach(function (user) {
                        _this.taskPeople.push(new UserProcessModel(user));
                    });
                }
            });
        }
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isAssigned = /**
     * @return {?}
     */
    function () {
        return !!this.taskDetails.assignee;
    };
    /**
     * @private
     * @return {?}
     */
    TaskDetailsComponent.prototype.hasEmailAddress = /**
     * @private
     * @return {?}
     */
    function () {
        return this.taskDetails.assignee.email ? true : false;
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isAssignedToMe = /**
     * @return {?}
     */
    function () {
        return this.isAssigned() && this.hasEmailAddress() ?
            this.isEmailEqual(this.taskDetails.assignee.email, this.currentLoggedUser.email) :
            this.isExternalIdEqual(this.taskDetails.assignee.externalId, this.currentLoggedUser.externalId);
    };
    /**
     * @private
     * @param {?} assigneeMail
     * @param {?} currentLoggedEmail
     * @return {?}
     */
    TaskDetailsComponent.prototype.isEmailEqual = /**
     * @private
     * @param {?} assigneeMail
     * @param {?} currentLoggedEmail
     * @return {?}
     */
    function (assigneeMail, currentLoggedEmail) {
        return assigneeMail.toLocaleLowerCase() === currentLoggedEmail.toLocaleLowerCase();
    };
    /**
     * @private
     * @param {?} assigneeExternalId
     * @param {?} currentUserExternalId
     * @return {?}
     */
    TaskDetailsComponent.prototype.isExternalIdEqual = /**
     * @private
     * @param {?} assigneeExternalId
     * @param {?} currentUserExternalId
     * @return {?}
     */
    function (assigneeExternalId, currentUserExternalId) {
        return assigneeExternalId.toLocaleLowerCase() === currentUserExternalId.toLocaleLowerCase();
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isCompleteButtonEnabled = /**
     * @return {?}
     */
    function () {
        return this.isAssignedToMe() || this.canInitiatorComplete();
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isCompleteButtonVisible = /**
     * @return {?}
     */
    function () {
        return !this.hasFormKey() && this.isTaskActive() && this.isCompleteButtonEnabled();
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.canInitiatorComplete = /**
     * @return {?}
     */
    function () {
        return this.taskDetails.initiatorCanCompleteTask;
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isSaveButtonVisible = /**
     * @return {?}
     */
    function () {
        return this.hasSaveButton() && (!this.canInitiatorComplete() || this.isAssignedToMe());
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.hasSaveButton = /**
     * @return {?}
     */
    function () {
        return this.showFormSaveButton;
    };
    /**
     * Retrieve the next open task
     * @param processInstanceId
     * @param processDefinitionId
     */
    /**
     * Retrieve the next open task
     * @private
     * @param {?} processInstanceId
     * @param {?} processDefinitionId
     * @return {?}
     */
    TaskDetailsComponent.prototype.loadNextTask = /**
     * Retrieve the next open task
     * @private
     * @param {?} processInstanceId
     * @param {?} processDefinitionId
     * @return {?}
     */
    function (processInstanceId, processDefinitionId) {
        var _this = this;
        /** @type {?} */
        var requestNode = new TaskQueryRequestRepresentationModel({
            processInstanceId: processInstanceId,
            processDefinitionId: processDefinitionId
        });
        this.taskListService.getTasks(requestNode).subscribe(function (response) {
            if (response && response.length > 0) {
                _this.taskDetails = new TaskDetailsModel(response[0]);
            }
            else {
                _this.reset();
            }
        }, function (error) {
            _this.error.emit(error);
        });
    };
    /**
     * Complete button clicked
     */
    /**
     * Complete button clicked
     * @return {?}
     */
    TaskDetailsComponent.prototype.onComplete = /**
     * Complete button clicked
     * @return {?}
     */
    function () {
        var _this = this;
        this.taskListService.completeTask(this.taskId).subscribe(function (res) { return _this.onFormCompleted(null); });
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.onShowAttachForm = /**
     * @return {?}
     */
    function () {
        this.showAttachForm = true;
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.onCancelAttachForm = /**
     * @return {?}
     */
    function () {
        this.showAttachForm = false;
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.onCompleteAttachForm = /**
     * @return {?}
     */
    function () {
        this.showAttachForm = false;
        this.loadDetails(this.taskId);
    };
    /**
     * @param {?} content
     * @return {?}
     */
    TaskDetailsComponent.prototype.onFormContentClick = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        this.formContentClicked.emit(content);
    };
    /**
     * @param {?} form
     * @return {?}
     */
    TaskDetailsComponent.prototype.onFormSaved = /**
     * @param {?} form
     * @return {?}
     */
    function (form) {
        this.formSaved.emit(form);
    };
    /**
     * @param {?} form
     * @return {?}
     */
    TaskDetailsComponent.prototype.onFormCompleted = /**
     * @param {?} form
     * @return {?}
     */
    function (form) {
        this.formCompleted.emit(form);
        if (this.showNextTask && (this.taskDetails.processInstanceId || this.taskDetails.processDefinitionId)) {
            this.loadNextTask(this.taskDetails.processInstanceId, this.taskDetails.processDefinitionId);
        }
    };
    /**
     * @param {?} form
     * @return {?}
     */
    TaskDetailsComponent.prototype.onFormLoaded = /**
     * @param {?} form
     * @return {?}
     */
    function (form) {
        this.taskFormName = (form && form.name ? form.name : null);
        this.formLoaded.emit(form);
    };
    /**
     * @param {?} task
     * @return {?}
     */
    TaskDetailsComponent.prototype.onChecklistTaskCreated = /**
     * @param {?} task
     * @return {?}
     */
    function (task) {
        this.taskCreated.emit(task);
    };
    /**
     * @param {?} taskId
     * @return {?}
     */
    TaskDetailsComponent.prototype.onChecklistTaskDeleted = /**
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        this.taskDeleted.emit(taskId);
    };
    /**
     * @param {?} error
     * @return {?}
     */
    TaskDetailsComponent.prototype.onFormError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.errorDialogRef = this.dialog.open(this.errorDialog, { width: '500px' });
        this.error.emit(error);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TaskDetailsComponent.prototype.onFormExecuteOutcome = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.executeOutcome.emit(event);
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.closeErrorDialog = /**
     * @return {?}
     */
    function () {
        this.dialog.closeAll();
    };
    /**
     * @param {?} taskId
     * @return {?}
     */
    TaskDetailsComponent.prototype.onClaimAction = /**
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        this.claimedTask.emit(taskId);
        this.loadDetails(taskId);
    };
    /**
     * @param {?} taskId
     * @return {?}
     */
    TaskDetailsComponent.prototype.onUnclaimAction = /**
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        this.unClaimedTask.emit(taskId);
        this.loadDetails(taskId);
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isCompletedTask = /**
     * @return {?}
     */
    function () {
        return this.taskDetails && this.taskDetails.endDate ? true : undefined;
    };
    /**
     * @param {?} searchedWord
     * @return {?}
     */
    TaskDetailsComponent.prototype.searchUser = /**
     * @param {?} searchedWord
     * @return {?}
     */
    function (searchedWord) {
        var _this = this;
        this.peopleProcessService.getWorkflowUsers(null, searchedWord)
            .subscribe(function (users) {
            users = users.filter(function (user) { return user.id !== _this.taskDetails.assignee.id; });
            _this.peopleSearchObserver.next(users);
        }, function (error) { return _this.logService.error('Could not load users'); });
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.onCloseSearch = /**
     * @return {?}
     */
    function () {
        this.showAssignee = false;
    };
    /**
     * @param {?} selectedUser
     * @return {?}
     */
    TaskDetailsComponent.prototype.assignTaskToUser = /**
     * @param {?} selectedUser
     * @return {?}
     */
    function (selectedUser) {
        var _this = this;
        this.taskListService.assignTask(this.taskDetails.id, selectedUser).subscribe(function (res) {
            _this.logService.info('Task Assigned to ' + selectedUser.email);
            _this.assignTask.emit();
        });
        this.showAssignee = false;
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.getTaskHeaderViewClass = /**
     * @return {?}
     */
    function () {
        if (this.showAssignee) {
            return 'assign-edit-view';
        }
        else {
            return 'default-view';
        }
    };
    /**
     * @return {?}
     */
    TaskDetailsComponent.prototype.isReadOnlyComment = /**
     * @return {?}
     */
    function () {
        return (this.taskDetails && this.taskDetails.isCompleted()) && (this.taskPeople && this.taskPeople.length === 0);
    };
    TaskDetailsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-task-details',
                    template: "<div *ngIf=\"!taskDetails\" data-automation-id=\"adf-tasks-details--empty\">\n    <ng-template *ngIf=\"noTaskDetailsTemplateComponent\" ngFor [ngForOf]=\"[data]\"\n                 [ngForTemplate]=\"noTaskDetailsTemplateComponent\">\n        {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.NONE' | translate }}\n    </ng-template>\n    <div *ngIf=\"!noTaskDetailsTemplateComponent\">\n        {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.NONE' | translate }}\n    </div>\n</div>\n<div *ngIf=\"taskDetails\" class=\"adf-task-details\">\n\n    <div *ngIf=\"showHeader\" class=\"adf-task-details-header\">\n        <h2 class=\"adf-activiti-task-details__header\">\n            <span>{{taskDetails.name || 'No name'}}</span>\n        </h2>\n    </div>\n\n    <div class=\"adf-task-details-core\"\n        fxLayout=\"column\"\n        fxLayoutGap=\"8px\"\n        fxLayout.lt-lg=\"column\">\n\n        <div class=\"adf-task-details-core-form\">\n            <div *ngIf=\"isAssigned()\">\n                <adf-form *ngIf=\"isFormComponentVisible()\" #activitiForm\n                          [showDebugButton]=\"debugMode\"\n                          [taskId]=\"taskDetails.id\"\n                          [showTitle]=\"showFormTitle\"\n                          [showRefreshButton]=\"showFormRefreshButton\"\n                          [showCompleteButton]=\"showFormCompleteButton\"\n                          [disableCompleteButton]=\"!isCompleteButtonEnabled()\"\n                          [showSaveButton]=\"isSaveButtonVisible()\"\n                          [readOnly]=\"internalReadOnlyForm\"\n                          [fieldValidators]=\"fieldValidators\"\n                          (formSaved)='onFormSaved($event)'\n                          (formCompleted)='onFormCompleted($event)'\n                          (formContentClicked)='onFormContentClick($event)'\n                          (formLoaded)='onFormLoaded($event)'\n                          (error)='onFormError($event)'\n                          (executeOutcome)='onFormExecuteOutcome($event)'>\n                </adf-form>\n                <adf-task-standalone *ngIf=\"isTaskStandaloneComponentVisible()\"\n                                     [taskName]=\"taskDetails.name\"\n                                     [taskId]=\"taskDetails.id\"\n                                     [isCompleted]=\"isCompletedTask()\"\n                                     [hasCompletePermission]=\"isCompleteButtonEnabled()\"\n                                     [hideCancelButton]=\"true\"\n                                     (complete)=\"onComplete()\"\n                                     (showAttachForm)=\"onShowAttachForm()\">\n                </adf-task-standalone>\n\n                <mat-card class=\"adf-message-card\" *ngIf=\"!isTaskStandaloneComponentVisible() && !isCompletedTask() && !isFormComponentVisible()\" >\n                    <mat-card-content>\n                        <div class=\"adf-no-form-message-container\">\n                            <div class=\"adf-no-form-message-list\">\n                                <div *ngIf=\"!isCompletedTask()\" class=\"adf-no-form-message\">\n                                    <span id=\"adf-no-form-message\">{{'ADF_TASK_LIST.STANDALONE_TASK.NO_FORM_MESSAGE' | translate}}</span>\n                                </div>\n                            </div>\n                        </div>\n                    </mat-card-content>\n\n                    <mat-card-actions class=\"adf-no-form-mat-card-actions\">\n                        <div>\n                            <button mat-button id=\"adf-no-form-complete-button\" color=\"primary\" (click)=\"onComplete()\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.COMPLETE' | translate }}</button>\n                        </div>\n                    </mat-card-actions>\n\n                </mat-card>\n\n                <adf-attach-form *ngIf=\"isShowAttachForm()\"\n                                 [taskId]=\"taskDetails.id\"\n                                 [formKey]=\"taskDetails.formKey\"\n                                 (cancelAttachForm)=\"onCancelAttachForm()\"\n                                 (success)=\"onCompleteAttachForm()\">\n                </adf-attach-form>\n            </div>\n            <div *ngIf=\"!isAssigned()\" id=\"claim-message-id\">\n                {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.CLAIM' | translate }}\n            </div>\n        </div>\n        <div class=\"adf-task-details-core-sidebar\">\n            <adf-info-drawer *ngIf=\"showHeaderContent\" title=\"{{ 'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TITLE' | translate }}\" id=\"adf-task-details-core-sidebar-drawer\" class=\"adf-task-details-core-sidebar-drawer\">\n                <adf-info-drawer-tab label=\"{{ 'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TAB_DETAILS_TITLE' | translate }}\">\n                    <div class=\"adf-assignment-container\" *ngIf=\"showAssignee\">\n                        <adf-people-search\n                            (searchPeople)=\"searchUser($event)\"\n                            (success)=\"assignTaskToUser($event)\"\n                            (closeSearch)=\"onCloseSearch()\"\n                            [results]=\"peopleSearch\">\n                            <ng-container adf-people-search-title>{{ 'ADF_TASK_LIST.DETAILS.LABELS.ADD_ASSIGNEE' | translate }}\n                            </ng-container>\n                            <ng-container adf-people-search-action-label>{{ 'ADF_TASK_LIST.PEOPLE.ADD_ASSIGNEE' | translate }}\n                            </ng-container>\n                        </adf-people-search>\n                    </div>\n                    <adf-task-header\n                        [class]=\"getTaskHeaderViewClass()\"\n                        [taskDetails]=\"taskDetails\"\n                        [formName]=\"taskFormName\"\n                        (claim)=\"onClaimAction($event)\"\n                        (unclaim)=\"onUnclaimAction($event)\">\n                    </adf-task-header>\n                    <adf-people *ngIf=\"showInvolvePeople\" #people\n                                [people]=\"taskPeople\"\n                                [readOnly]=\"internalReadOnlyForm\"\n                                [taskId]=\"taskDetails.id\">\n                    </adf-people>\n                </adf-info-drawer-tab>\n\n                <adf-info-drawer-tab label=\"{{ 'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TAB_ACTIVITY_TITLE' | translate }}\">\n                    <mat-card *ngIf=\"showComments\">\n                        <mat-card-content>\n                            <adf-comments #activitiComments\n                                          [readOnly]=\"isReadOnlyComment()\"\n                                          [taskId]=\"taskDetails.id\">\n                            </adf-comments>\n                        </mat-card-content>\n                    </mat-card>\n                </adf-info-drawer-tab>\n\n            </adf-info-drawer>\n\n            <div *ngIf=\"showHeaderContent\" class=\"adf-task-details-core-sidebar-checklist\">\n                <div *ngIf=\"showChecklist\">\n                    <adf-checklist #activitiChecklist\n                                   [readOnly]=\"internalReadOnlyForm\"\n                                   [taskId]=\"taskDetails.id\"\n                                   [assignee]=\"taskDetails?.assignee?.id\"\n                                   (checklistTaskCreated)=\"onChecklistTaskCreated($event)\"\n                                   (checklistTaskDeleted)=\"onChecklistTaskDeleted($event)\">\n                    </adf-checklist>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <ng-template #errorDialog>\n        <h3 matDialogTitle>{{'ADF_TASK_LIST.DETAILS.ERROR.TITLE'|translate}}</h3>\n        <mat-dialog-content>\n            <p>{{'ADF_TASK_LIST.DETAILS.ERROR.DESCRIPTION'|translate}}</p>\n        </mat-dialog-content>\n        <mat-dialog-actions>\n            <button mat-button type=\"button\" (click)=\"closeErrorDialog()\">{{'ADF_TASK_LIST.DETAILS.ERROR.CLOSE'|translate}}\n            </button>\n        </mat-dialog-actions>\n    </ng-template>\n\n</div>\n",
                    styles: [":host{width:100%}.adf-error-dialog h3{margin:16px 0}.adf-activiti-task-details__header{align-self:flex-end;display:flex;font-size:24px;font-weight:300;line-height:normal;overflow:hidden;margin:8px 0 16px;cursor:pointer;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.adf-activiti-task-details__action-button{text-transform:uppercase}.adf-assignment-container{padding:10px 20px;width:auto}adf-task-header.adf-assign-edit-view ::ng-deep adf-card-view ::ng-deep .adf-property[data-automation-id=header-assignee]{display:none}.adf-task-details-header{display:flex;justify-content:space-between}.adf-task-details-header-toggle{position:relative;top:10px;margin-right:2px;height:23px;cursor:pointer;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}.adf-task-details-toggle{position:relative}.adf-task-details-core{display:flex;justify-content:space-between}@media screen and (max-width:1279px){.adf-task-details-core-sidebar-drawer{margin-left:0}}.adf-task-details-core-sidebar-checklist{margin-top:30px;padding-left:20px;padding-right:20px}.adf-task-details-core-form{flex-grow:1}.adf-task-details-core-form ::ng-deep .adf-form-debug-container{display:flex;flex-direction:column;padding:20px 0}.adf-task-details-core-form ::ng-deep .adf-form-debug-container .mat-slide-toggle{margin-left:auto}.adf-task-details-core-form ::ng-deep .adf-form-debug-container .mat-slide-toggle+div{background-color:#000;padding:20px;clear:both;margin-top:30px;color:#fff}.adf-task-details-core-form ::ng-deep .mat-tab-label{flex-grow:1}"]
                }] }
    ];
    /** @nocollapse */
    TaskDetailsComponent.ctorParameters = function () { return [
        { type: TaskListService },
        { type: AuthenticationService },
        { type: PeopleProcessService },
        { type: FormRenderingService },
        { type: LogService },
        { type: CardViewUpdateService },
        { type: MatDialog }
    ]; };
    TaskDetailsComponent.propDecorators = {
        activitiComments: [{ type: ViewChild, args: ['activitiComments',] }],
        activitiChecklist: [{ type: ViewChild, args: ['activitiChecklist',] }],
        errorDialog: [{ type: ViewChild, args: ['errorDialog',] }],
        debugMode: [{ type: Input }],
        taskId: [{ type: Input }],
        showNextTask: [{ type: Input }],
        showHeader: [{ type: Input }],
        showHeaderContent: [{ type: Input }],
        showInvolvePeople: [{ type: Input }],
        showComments: [{ type: Input }],
        showChecklist: [{ type: Input }],
        showFormTitle: [{ type: Input }],
        showFormCompleteButton: [{ type: Input }],
        showFormSaveButton: [{ type: Input }],
        readOnlyForm: [{ type: Input }],
        showFormRefreshButton: [{ type: Input }],
        fieldValidators: [{ type: Input }],
        formSaved: [{ type: Output }],
        formCompleted: [{ type: Output }],
        formContentClicked: [{ type: Output }],
        formLoaded: [{ type: Output }],
        taskCreated: [{ type: Output }],
        taskDeleted: [{ type: Output }],
        error: [{ type: Output }],
        executeOutcome: [{ type: Output }],
        assignTask: [{ type: Output }],
        claimedTask: [{ type: Output }],
        unClaimedTask: [{ type: Output }]
    };
    return TaskDetailsComponent;
}());
export { TaskDetailsComponent };
if (false) {
    /** @type {?} */
    TaskDetailsComponent.prototype.activitiComments;
    /** @type {?} */
    TaskDetailsComponent.prototype.activitiChecklist;
    /** @type {?} */
    TaskDetailsComponent.prototype.errorDialog;
    /**
     * Toggles debug mode.
     * @type {?}
     */
    TaskDetailsComponent.prototype.debugMode;
    /**
     * (**required**) The id of the task whose details we are asking for.
     * @type {?}
     */
    TaskDetailsComponent.prototype.taskId;
    /**
     * Automatically renders the next task when the current one is completed.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showNextTask;
    /**
     * Toggles task details Header component.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showHeader;
    /**
     * Toggles collapsed/expanded state of the Header component.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showHeaderContent;
    /**
     * Toggles `Involve People` feature for the Header component.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showInvolvePeople;
    /**
     * Toggles `Comments` feature for the Header component.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showComments;
    /**
     * Toggles `Checklist` feature for the Header component.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showChecklist;
    /**
     * Toggles rendering of the form title.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showFormTitle;
    /**
     * Toggles rendering of the `Complete` outcome button.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showFormCompleteButton;
    /**
     * Toggles rendering of the `Save` outcome button.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showFormSaveButton;
    /**
     * Toggles read-only state of the form. All form widgets render as read-only
     * if enabled.
     * @type {?}
     */
    TaskDetailsComponent.prototype.readOnlyForm;
    /**
     * Toggles rendering of the `Refresh` button.
     * @type {?}
     */
    TaskDetailsComponent.prototype.showFormRefreshButton;
    /**
     * Field validators for use with the form.
     * @type {?}
     */
    TaskDetailsComponent.prototype.fieldValidators;
    /**
     * Emitted when the form is submitted with the `Save` or custom outcomes.
     * @type {?}
     */
    TaskDetailsComponent.prototype.formSaved;
    /**
     * Emitted when the form is submitted with the `Complete` outcome.
     * @type {?}
     */
    TaskDetailsComponent.prototype.formCompleted;
    /**
     * Emitted when the form field content is clicked.
     * @type {?}
     */
    TaskDetailsComponent.prototype.formContentClicked;
    /**
     * Emitted when the form is loaded or reloaded.
     * @type {?}
     */
    TaskDetailsComponent.prototype.formLoaded;
    /**
     * Emitted when a checklist task is created.
     * @type {?}
     */
    TaskDetailsComponent.prototype.taskCreated;
    /**
     * Emitted when a checklist task is deleted.
     * @type {?}
     */
    TaskDetailsComponent.prototype.taskDeleted;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    TaskDetailsComponent.prototype.error;
    /**
     * Emitted when any outcome is executed. Default behaviour can be prevented
     * via `event.preventDefault()`.
     * @type {?}
     */
    TaskDetailsComponent.prototype.executeOutcome;
    /**
     * Emitted when a task is assigned.
     * @type {?}
     */
    TaskDetailsComponent.prototype.assignTask;
    /**
     * Emitted when a task is claimed.
     * @type {?}
     */
    TaskDetailsComponent.prototype.claimedTask;
    /**
     * Emitted when a task is unclaimed.
     * @type {?}
     */
    TaskDetailsComponent.prototype.unClaimedTask;
    /** @type {?} */
    TaskDetailsComponent.prototype.taskDetails;
    /** @type {?} */
    TaskDetailsComponent.prototype.taskFormName;
    /** @type {?} */
    TaskDetailsComponent.prototype.taskPeople;
    /** @type {?} */
    TaskDetailsComponent.prototype.noTaskDetailsTemplateComponent;
    /** @type {?} */
    TaskDetailsComponent.prototype.showAssignee;
    /** @type {?} */
    TaskDetailsComponent.prototype.showAttachForm;
    /** @type {?} */
    TaskDetailsComponent.prototype.internalReadOnlyForm;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.peopleSearchObserver;
    /** @type {?} */
    TaskDetailsComponent.prototype.errorDialogRef;
    /** @type {?} */
    TaskDetailsComponent.prototype.peopleSearch;
    /** @type {?} */
    TaskDetailsComponent.prototype.currentLoggedUser;
    /** @type {?} */
    TaskDetailsComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.taskListService;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.authService;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.peopleProcessService;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.formRenderingService;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.cardViewUpdateService;
    /**
     * @type {?}
     * @private
     */
    TaskDetailsComponent.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,
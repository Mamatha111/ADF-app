/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataTableSchema, CustomEmptyContentTemplateDirective, CustomLoadingContentTemplateDirective } from '@alfresco/adf-core';
import { AppConfigService, PaginationComponent, UserPreferencesService, UserPreferenceValues } from '@alfresco/adf-core';
import { Component, ContentChild, EventEmitter, Input, Output } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { TaskQueryRequestRepresentationModel } from '../models/filter.model';
import { taskPresetsDefaultModel } from '../models/task-preset.model';
import { TaskListService } from './../services/tasklist.service';
import moment from 'moment-es6';
var TaskListComponent = /** @class */ (function (_super) {
    tslib_1.__extends(TaskListComponent, _super);
    function TaskListComponent(taskListService, appConfigService, userPreferences) {
        var _this = _super.call(this, appConfigService, TaskListComponent.PRESET_KEY, taskPresetsDefaultModel) || this;
        _this.taskListService = taskListService;
        _this.userPreferences = userPreferences;
        _this.FORMAT_DATE = 'll';
        /**
         * Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,
         * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for
         * multiple rows.
         */
        _this.selectionMode = 'single'; // none|single|multiple
        // none|single|multiple
        /**
         * Toggles multiple row selection, renders checkboxes at the beginning of each row
         */
        _this.multiselect = false;
        /**
         * Toggles default selection of the first row
         */
        _this.selectFirstRow = true;
        /**
         * Emitted when a task in the list is clicked
         */
        _this.rowClick = new EventEmitter();
        /**
         * Emitted when rows are selected/unselected
         */
        _this.rowsSelected = new EventEmitter();
        /**
         * Emitted when the task list is loaded
         */
        _this.success = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        _this.error = new EventEmitter();
        /**
         * The page number of the tasks to fetch.
         */
        _this.page = 0;
        /**
         * The number of tasks to fetch. Default value: 25.
         */
        _this.size = PaginationComponent.DEFAULT_PAGINATION.maxItems;
        _this.rows = [];
        _this.isLoading = true;
        _this.sorting = ['created', 'desc'];
        /**
         * Toggles custom data source mode.
         * When enabled the component reloads data from it's current source instead of the server side.
         * This allows generating and displaying custom data sets (i.e. filtered out content).
         *
         * \@memberOf TaskListComponent
         */
        _this.hasCustomDataSource = false;
        _this.userPreferences.select(UserPreferenceValues.PaginationSize).subscribe(function (pageSize) {
            _this.size = pageSize;
        });
        _this.pagination = new BehaviorSubject((/** @type {?} */ ({
            maxItems: _this.size,
            skipCount: 0,
            totalItems: 0
        })));
        return _this;
    }
    /**
     * @return {?}
     */
    TaskListComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.createDatatableSchema();
        if (this.data && this.data.getColumns().length === 0) {
            this.data.setColumns(this.columns);
        }
        if (this.appId) {
            this.reload();
        }
    };
    /**
     * @param {?} rows
     * @return {?}
     */
    TaskListComponent.prototype.setCustomDataSource = /**
     * @param {?} rows
     * @return {?}
     */
    function (rows) {
        if (rows) {
            this.rows = rows;
            this.hasCustomDataSource = true;
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TaskListComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.isPropertyChanged(changes)) {
            if (this.isSortChanged(changes)) {
                this.sorting = this.sort ? this.sort.split('-') : this.sorting;
            }
            this.reload();
        }
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    TaskListComponent.prototype.isSortChanged = /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var actualSort = changes['sort'];
        return actualSort && actualSort.currentValue && actualSort.currentValue !== actualSort.previousValue;
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    TaskListComponent.prototype.isPropertyChanged = /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var changed = true;
        /** @type {?} */
        var landingTaskId = changes['landingTaskId'];
        /** @type {?} */
        var page = changes['page'];
        /** @type {?} */
        var size = changes['size'];
        if (landingTaskId && landingTaskId.currentValue && this.isEqualToCurrentId(landingTaskId.currentValue)) {
            changed = false;
        }
        else if (page && page.currentValue !== page.previousValue) {
            changed = true;
        }
        else if (size && size.currentValue !== size.previousValue) {
            changed = true;
        }
        return changed;
    };
    /**
     * @return {?}
     */
    TaskListComponent.prototype.reload = /**
     * @return {?}
     */
    function () {
        if (!this.hasCustomDataSource) {
            this.requestNode = this.createRequestNode();
            this.load(this.requestNode);
        }
        else {
            this.isLoading = false;
        }
    };
    /**
     * @private
     * @param {?} requestNode
     * @return {?}
     */
    TaskListComponent.prototype.load = /**
     * @private
     * @param {?} requestNode
     * @return {?}
     */
    function (requestNode) {
        var _this = this;
        this.isLoading = true;
        this.loadTasksByState().subscribe(function (tasks) {
            _this.rows = _this.optimizeTaskDetails(tasks.data);
            _this.selectTask(_this.landingTaskId);
            _this.success.emit(tasks);
            _this.isLoading = false;
            _this.pagination.next({
                count: tasks.data.length,
                maxItems: _this.size,
                skipCount: _this.page * _this.size,
                totalItems: tasks.total
            });
        }, function (error) {
            _this.error.emit(error);
            _this.isLoading = false;
        });
    };
    /**
     * @private
     * @return {?}
     */
    TaskListComponent.prototype.loadTasksByState = /**
     * @private
     * @return {?}
     */
    function () {
        return this.requestNode.state === 'all'
            ? this.taskListService.findAllTasksWithoutState(this.requestNode)
            : this.taskListService.findTasksByState(this.requestNode);
    };
    /**
     * Select the task given in input if present
     */
    /**
     * Select the task given in input if present
     * @param {?} taskIdSelected
     * @return {?}
     */
    TaskListComponent.prototype.selectTask = /**
     * Select the task given in input if present
     * @param {?} taskIdSelected
     * @return {?}
     */
    function (taskIdSelected) {
        if (!this.isListEmpty()) {
            /** @type {?} */
            var dataRow = null;
            if (taskIdSelected) {
                dataRow = this.rows.find(function (currentRow) {
                    return currentRow['id'] === taskIdSelected;
                });
            }
            if (!dataRow && this.selectFirstRow) {
                dataRow = this.rows[0];
            }
            if (dataRow) {
                dataRow.isSelected = true;
                this.currentInstanceId = dataRow['id'];
            }
        }
        else {
            this.currentInstanceId = null;
        }
    };
    /**
     * Return the current id
     */
    /**
     * Return the current id
     * @return {?}
     */
    TaskListComponent.prototype.getCurrentId = /**
     * Return the current id
     * @return {?}
     */
    function () {
        return this.currentInstanceId;
    };
    /**
     * Check if the taskId is the same of the selected task
     * @param taskId
     */
    /**
     * Check if the taskId is the same of the selected task
     * @param {?} taskId
     * @return {?}
     */
    TaskListComponent.prototype.isEqualToCurrentId = /**
     * Check if the taskId is the same of the selected task
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        return this.currentInstanceId === taskId;
    };
    /**
     * Check if the list is empty
     */
    /**
     * Check if the list is empty
     * @return {?}
     */
    TaskListComponent.prototype.isListEmpty = /**
     * Check if the list is empty
     * @return {?}
     */
    function () {
        return !this.rows || this.rows.length === 0;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    TaskListComponent.prototype.onRowClick = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.currentInstanceId = item.value.getValue('id');
        this.rowClick.emit(this.currentInstanceId);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TaskListComponent.prototype.onRowSelect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.selectedInstances = tslib_1.__spread(event.detail.selection);
        this.rowsSelected.emit(this.selectedInstances);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TaskListComponent.prototype.onRowUnselect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.selectedInstances = tslib_1.__spread(event.detail.selection);
        this.rowsSelected.emit(this.selectedInstances);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    TaskListComponent.prototype.onRowKeyUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.detail.keyboardEvent.key === 'Enter') {
            event.preventDefault();
            this.currentInstanceId = event.detail.row.getValue('id');
            this.rowClick.emit(this.currentInstanceId);
        }
    };
    /**
     * Optimize name field
     * @param instances
     */
    /**
     * Optimize name field
     * @private
     * @param {?} instances
     * @return {?}
     */
    TaskListComponent.prototype.optimizeTaskDetails = /**
     * Optimize name field
     * @private
     * @param {?} instances
     * @return {?}
     */
    function (instances) {
        var _this = this;
        instances = instances.map(function (task) {
            if (!task.name) {
                task.name = 'No name';
            }
            if (task.created) {
                task.created = moment(task.created).format(_this.FORMAT_DATE);
            }
            if (task.dueDate) {
                task.dueDate = moment(task.dueDate).format(_this.FORMAT_DATE);
            }
            if (task.endDate) {
                task.endDate = moment(task.endDate).format(_this.FORMAT_DATE);
            }
            return task;
        });
        return instances;
    };
    /**
     * @private
     * @return {?}
     */
    TaskListComponent.prototype.createRequestNode = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var requestNode = {
            appDefinitionId: this.appId,
            dueAfter: this.dueAfter ? moment(this.dueAfter).toDate() : null,
            dueBefore: this.dueBefore ? moment(this.dueBefore).toDate() : null,
            processInstanceId: this.processInstanceId,
            processDefinitionId: this.processDefinitionId,
            text: this.name,
            assignment: this.assignment,
            state: this.state,
            sort: this.sort,
            page: this.page,
            size: this.size,
            start: this.start,
            taskId: this.taskId,
            includeProcessInstance: this.includeProcessInstance
        };
        return new TaskQueryRequestRepresentationModel(requestNode);
    };
    /**
     * @param {?} params
     * @return {?}
     */
    TaskListComponent.prototype.updatePagination = /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var needsReload = params.maxItems || params.skipCount;
        this.size = params.maxItems;
        this.page = this.currentPage(params.skipCount, params.maxItems);
        if (needsReload) {
            this.reload();
        }
    };
    /**
     * @param {?} skipCount
     * @param {?} maxItems
     * @return {?}
     */
    TaskListComponent.prototype.currentPage = /**
     * @param {?} skipCount
     * @param {?} maxItems
     * @return {?}
     */
    function (skipCount, maxItems) {
        return (skipCount && maxItems) ? Math.floor(skipCount / maxItems) : 0;
    };
    TaskListComponent.PRESET_KEY = 'adf-task-list.presets';
    TaskListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-tasklist',
                    template: "<div *ngIf=\"!requestNode\">{{ 'ADF_TASK_LIST.FILTERS.MESSAGES.NONE' | translate }}</div>\n<ng-container *ngIf=\"requestNode\">\n        <adf-datatable\n            [data]=\"data\"\n            [rows]=\"rows\"\n            [columns]=\"columns\"\n            [sorting]=\"sorting\"\n            [loading]=\"isLoading\"\n            [multiselect]=\"multiselect\"\n            [selectionMode]=\"selectionMode\"\n            (row-select)=\"onRowSelect($event)\"\n            (row-unselect)=\"onRowUnselect($event)\"\n            (rowClick)=\"onRowClick($event)\"\n            (row-keyup)=\"onRowKeyUp($event)\">\n            <adf-loading-content-template>\n                <ng-template>\n                    <!--Add your custom loading template here-->\n                    <mat-progress-spinner\n                        *ngIf=\"!customLoadingContent\"\n                        class=\"adf-task-list-loading-margin\"\n                        [color]=\"'primary'\"\n                        [mode]=\"'indeterminate'\">\n                    </mat-progress-spinner>\n                    <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n                </ng-template>\n            </adf-loading-content-template>\n            <adf-no-content-template>\n                <ng-template>\n                    <adf-empty-content *ngIf=\"!customEmptyContent\"\n                        icon=\"assignment\"\n                        [title]=\"'ADF_TASK_LIST.LIST.MESSAGES.TITLE' | translate\"\n                        [subtitle]=\"'ADF_TASK_LIST.LIST.MESSAGES.SUBTITLE' | translate\">\n                    </adf-empty-content>\n                    <ng-content select=\"adf-custom-empty-content-template\"></ng-content>\n                </ng-template>\n            </adf-no-content-template>\n        </adf-datatable>\n</ng-container>\n",
                    styles: [".adf-task-list-loading-margin{margin-left:calc((100% - 100px)/ 2);margin-right:calc((100% - 100px)/ 2)}"]
                }] }
    ];
    /** @nocollapse */
    TaskListComponent.ctorParameters = function () { return [
        { type: TaskListService },
        { type: AppConfigService },
        { type: UserPreferencesService }
    ]; };
    TaskListComponent.propDecorators = {
        customEmptyContent: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
        customLoadingContent: [{ type: ContentChild, args: [CustomLoadingContentTemplateDirective,] }],
        appId: [{ type: Input }],
        processInstanceId: [{ type: Input }],
        processDefinitionId: [{ type: Input }],
        state: [{ type: Input }],
        assignment: [{ type: Input }],
        sort: [{ type: Input }],
        name: [{ type: Input }],
        landingTaskId: [{ type: Input }],
        data: [{ type: Input }],
        selectionMode: [{ type: Input }],
        multiselect: [{ type: Input }],
        selectFirstRow: [{ type: Input }],
        taskId: [{ type: Input }],
        includeProcessInstance: [{ type: Input }],
        start: [{ type: Input }],
        rowClick: [{ type: Output }],
        rowsSelected: [{ type: Output }],
        success: [{ type: Output }],
        error: [{ type: Output }],
        page: [{ type: Input }],
        size: [{ type: Input }],
        dueAfter: [{ type: Input }],
        dueBefore: [{ type: Input }]
    };
    return TaskListComponent;
}(DataTableSchema));
export { TaskListComponent };
if (false) {
    /** @type {?} */
    TaskListComponent.PRESET_KEY;
    /** @type {?} */
    TaskListComponent.prototype.FORMAT_DATE;
    /** @type {?} */
    TaskListComponent.prototype.customEmptyContent;
    /** @type {?} */
    TaskListComponent.prototype.customLoadingContent;
    /** @type {?} */
    TaskListComponent.prototype.requestNode;
    /**
     * The id of the app.
     * @type {?}
     */
    TaskListComponent.prototype.appId;
    /**
     * The Instance Id of the process.
     * @type {?}
     */
    TaskListComponent.prototype.processInstanceId;
    /**
     * The Definition Id of the process.
     * @type {?}
     */
    TaskListComponent.prototype.processDefinitionId;
    /**
     * Current state of the process. Possible values are: `completed`, `active`.
     * @type {?}
     */
    TaskListComponent.prototype.state;
    /**
     * The assignment of the process. Possible values are: "assignee" (the current user
     * is the assignee), "candidate" (the current user is a task candidate, "group_x" (the task
     * is assigned to a group where the current user is a member,
     * no value (the current user is involved).
     * @type {?}
     */
    TaskListComponent.prototype.assignment;
    /**
     * Define the sort order of the tasks. Possible values are : `created-desc`,
     * `created-asc`, `due-desc`, `due-asc`
     * @type {?}
     */
    TaskListComponent.prototype.sort;
    /**
     * Name of the tasklist.
     * @type {?}
     */
    TaskListComponent.prototype.name;
    /**
     * Define which task id should be selected after reloading. If the task id doesn't
     * exist or nothing is passed then the first task will be selected.
     * @type {?}
     */
    TaskListComponent.prototype.landingTaskId;
    /**
     * Data source object that represents the number and the type of the columns that
     * you want to show.
     * @type {?}
     */
    TaskListComponent.prototype.data;
    /**
     * Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,
     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for
     * multiple rows.
     * @type {?}
     */
    TaskListComponent.prototype.selectionMode;
    /**
     * Toggles multiple row selection, renders checkboxes at the beginning of each row
     * @type {?}
     */
    TaskListComponent.prototype.multiselect;
    /**
     * Toggles default selection of the first row
     * @type {?}
     */
    TaskListComponent.prototype.selectFirstRow;
    /**
     * The id of a task
     * @type {?}
     */
    TaskListComponent.prototype.taskId;
    /**
     * Toggles inclusion of Process Instances
     * @type {?}
     */
    TaskListComponent.prototype.includeProcessInstance;
    /**
     * Starting point of the list within the full set of tasks.
     * @type {?}
     */
    TaskListComponent.prototype.start;
    /**
     * Emitted when a task in the list is clicked
     * @type {?}
     */
    TaskListComponent.prototype.rowClick;
    /**
     * Emitted when rows are selected/unselected
     * @type {?}
     */
    TaskListComponent.prototype.rowsSelected;
    /**
     * Emitted when the task list is loaded
     * @type {?}
     */
    TaskListComponent.prototype.success;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    TaskListComponent.prototype.error;
    /** @type {?} */
    TaskListComponent.prototype.currentInstanceId;
    /** @type {?} */
    TaskListComponent.prototype.selectedInstances;
    /** @type {?} */
    TaskListComponent.prototype.pagination;
    /**
     * The page number of the tasks to fetch.
     * @type {?}
     */
    TaskListComponent.prototype.page;
    /**
     * The number of tasks to fetch. Default value: 25.
     * @type {?}
     */
    TaskListComponent.prototype.size;
    /**
     * Filter the tasks. Display only tasks with `created_date` after `dueAfter`.
     * @type {?}
     */
    TaskListComponent.prototype.dueAfter;
    /**
     * Filter the tasks. Display only tasks with `created_date` before `dueBefore`.
     * @type {?}
     */
    TaskListComponent.prototype.dueBefore;
    /** @type {?} */
    TaskListComponent.prototype.rows;
    /** @type {?} */
    TaskListComponent.prototype.isLoading;
    /** @type {?} */
    TaskListComponent.prototype.sorting;
    /**
     * Toggles custom data source mode.
     * When enabled the component reloads data from it's current source instead of the server side.
     * This allows generating and displaying custom data sets (i.e. filtered out content).
     *
     * \@memberOf TaskListComponent
     * @type {?}
     */
    TaskListComponent.prototype.hasCustomDataSource;
    /**
     * @type {?}
     * @private
     */
    TaskListComponent.prototype.taskListService;
    /**
     * @type {?}
     * @private
     */
    TaskListComponent.prototype.userPreferences;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtcHJvY2Vzcy1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInRhc2stbGlzdC9jb21wb25lbnRzL3Rhc2stbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBa0MsZUFBZSxFQUFFLG1DQUFtQyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDakssT0FBTyxFQUNILGdCQUFnQixFQUFFLG1CQUFtQixFQUNyQyxzQkFBc0IsRUFBRSxvQkFBb0IsRUFBbUIsTUFBTSxvQkFBb0IsQ0FBQztBQUM5RixPQUFPLEVBQ2UsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQ3ZELEtBQUssRUFBYSxNQUFNLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRW5FLE9BQU8sRUFBYyxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbkQsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFN0UsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2pFLE9BQU8sTUFBTSxNQUFNLFlBQVksQ0FBQztBQUVoQztJQUt1Qyw2Q0FBZTtJQXdJbEQsMkJBQW9CLGVBQWdDLEVBQ3hDLGdCQUFrQyxFQUMxQixlQUF1QztRQUYzRCxZQUdJLGtCQUFNLGdCQUFnQixFQUFFLGlCQUFpQixDQUFDLFVBQVUsRUFBRSx1QkFBdUIsQ0FBQyxTQVVqRjtRQWJtQixxQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFFaEMscUJBQWUsR0FBZixlQUFlLENBQXdCO1FBdklwRCxpQkFBVyxHQUFXLElBQUksQ0FBQzs7Ozs7O1FBOERsQyxtQkFBYSxHQUFXLFFBQVEsQ0FBQyxDQUFDLHVCQUF1Qjs7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QUFLOzRCQUlMLEtBQUs7O0lBK09WLHdCQUFDO0NBQUEsQUE1V0QsQ0FLdUMsZUFBZSxHQXVXckQ7U0F2V1ksaUJBQWlCOzs7SUFFMUIsNkJBQTRDOztJQUM1Qyx3Q0FBa0M7O0lBRWxDLCtDQUN3RDs7SUFFeEQsaURBQzREOztJQUU1RCx3Q0FBaUQ7Ozs7O0lBR2pELGtDQUNjOzs7OztJQUdkLDhDQUMwQjs7Ozs7SUFHMUIsZ0RBQzRCOzs7OztJQUc1QixrQ0FDYzs7Ozs7Ozs7SUFPZCx1Q0FDbUI7Ozs7OztJQUtuQixpQ0FDYTs7Ozs7SUFHYixpQ0FDYTs7Ozs7O0lBS2IsMENBQ3NCOzs7Ozs7SUFNdEIsaUNBQ3VCOzs7Ozs7O0lBTXZCLDBDQUNpQzs7Ozs7SUFHakMsd0NBQzZCOzs7OztJQUc3QiwyQ0FDK0I7Ozs7O0lBRy9CLG1DQUNlOzs7OztJQUdmLG1EQUNnQzs7Ozs7SUFHaEMsa0NBQ2M7Ozs7O0lBR2QscUNBQzREOzs7OztJQUc1RCx5Q0FDOEQ7Ozs7O0lBRzlELG9DQUNxRDs7Ozs7SUFHckQsa0NBQ21EOztJQUVuRCw4Q0FBMEI7O0lBQzFCLDhDQUF5Qjs7SUFDekIsdUNBQTZDOzs7OztJQUc3QyxpQ0FDaUI7Ozs7O0lBR2pCLGlDQUMrRDs7Ozs7SUFHL0QscUNBQ2lCOzs7OztJQUdqQixzQ0FDa0I7O0lBRWxCLGlDQUFpQjs7SUFDakIsc0NBQTBCOztJQUMxQixvQ0FBcUM7Ozs7Ozs7OztJQVNyQyxnREFBcUM7Ozs7O0lBRXpCLDRDQUF3Qzs7Ozs7SUFFeEMsNENBQStDIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGF0YVJvd0V2ZW50LCBEYXRhVGFibGVBZGFwdGVyLCBEYXRhVGFibGVTY2hlbWEsIEN1c3RvbUVtcHR5Q29udGVudFRlbXBsYXRlRGlyZWN0aXZlLCBDdXN0b21Mb2FkaW5nQ29udGVudFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7XG4gICAgQXBwQ29uZmlnU2VydmljZSwgUGFnaW5hdGlvbkNvbXBvbmVudCwgUGFnaW5hdGVkQ29tcG9uZW50LFxuICAgIFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UsIFVzZXJQcmVmZXJlbmNlVmFsdWVzLCBQYWdpbmF0aW9uTW9kZWwgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHtcbiAgICBBZnRlckNvbnRlbnRJbml0LCBDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgRXZlbnRFbWl0dGVyLFxuICAgIElucHV0LCBPbkNoYW5nZXMsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRhc2tRdWVyeVJlcXVlc3RSZXByZXNlbnRhdGlvbk1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL2ZpbHRlci5tb2RlbCc7XG5pbXBvcnQgeyBUYXNrTGlzdE1vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL3Rhc2stbGlzdC5tb2RlbCc7XG5pbXBvcnQgeyB0YXNrUHJlc2V0c0RlZmF1bHRNb2RlbCB9IGZyb20gJy4uL21vZGVscy90YXNrLXByZXNldC5tb2RlbCc7XG5pbXBvcnQgeyBUYXNrTGlzdFNlcnZpY2UgfSBmcm9tICcuLy4uL3NlcnZpY2VzL3Rhc2tsaXN0LnNlcnZpY2UnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQtZXM2JztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtdGFza2xpc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi90YXNrLWxpc3QuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3Rhc2stbGlzdC5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgVGFza0xpc3RDb21wb25lbnQgZXh0ZW5kcyBEYXRhVGFibGVTY2hlbWEgaW1wbGVtZW50cyBPbkNoYW5nZXMsIEFmdGVyQ29udGVudEluaXQsIFBhZ2luYXRlZENvbXBvbmVudCB7XG5cbiAgICBzdGF0aWMgUFJFU0VUX0tFWSA9ICdhZGYtdGFzay1saXN0LnByZXNldHMnO1xuICAgIHB1YmxpYyBGT1JNQVRfREFURTogc3RyaW5nID0gJ2xsJztcblxuICAgIEBDb250ZW50Q2hpbGQoQ3VzdG9tRW1wdHlDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUpXG4gICAgY3VzdG9tRW1wdHlDb250ZW50OiBDdXN0b21FbXB0eUNvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZTtcblxuICAgIEBDb250ZW50Q2hpbGQoQ3VzdG9tTG9hZGluZ0NvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZSlcbiAgICBjdXN0b21Mb2FkaW5nQ29udGVudDogQ3VzdG9tTG9hZGluZ0NvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZTtcblxuICAgIHJlcXVlc3ROb2RlOiBUYXNrUXVlcnlSZXF1ZXN0UmVwcmVzZW50YXRpb25Nb2RlbDtcblxuICAgIC8qKiBUaGUgaWQgb2YgdGhlIGFwcC4gKi9cbiAgICBASW5wdXQoKVxuICAgIGFwcElkOiBudW1iZXI7XG5cbiAgICAvKiogVGhlIEluc3RhbmNlIElkIG9mIHRoZSBwcm9jZXNzLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHJvY2Vzc0luc3RhbmNlSWQ6IHN0cmluZztcblxuICAgIC8qKiBUaGUgRGVmaW5pdGlvbiBJZCBvZiB0aGUgcHJvY2Vzcy4gKi9cbiAgICBASW5wdXQoKVxuICAgIHByb2Nlc3NEZWZpbml0aW9uSWQ6IHN0cmluZztcblxuICAgIC8qKiBDdXJyZW50IHN0YXRlIG9mIHRoZSBwcm9jZXNzLiBQb3NzaWJsZSB2YWx1ZXMgYXJlOiBgY29tcGxldGVkYCwgYGFjdGl2ZWAuICovXG4gICAgQElucHV0KClcbiAgICBzdGF0ZTogc3RyaW5nO1xuXG4gICAgLyoqIFRoZSBhc3NpZ25tZW50IG9mIHRoZSBwcm9jZXNzLiBQb3NzaWJsZSB2YWx1ZXMgYXJlOiBcImFzc2lnbmVlXCIgKHRoZSBjdXJyZW50IHVzZXJcbiAgICAgKiBpcyB0aGUgYXNzaWduZWUpLCBcImNhbmRpZGF0ZVwiICh0aGUgY3VycmVudCB1c2VyIGlzIGEgdGFzayBjYW5kaWRhdGUsIFwiZ3JvdXBfeFwiICh0aGUgdGFza1xuICAgICAqIGlzIGFzc2lnbmVkIHRvIGEgZ3JvdXAgd2hlcmUgdGhlIGN1cnJlbnQgdXNlciBpcyBhIG1lbWJlcixcbiAgICAgKiBubyB2YWx1ZSAodGhlIGN1cnJlbnQgdXNlciBpcyBpbnZvbHZlZCkuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBhc3NpZ25tZW50OiBzdHJpbmc7XG5cbiAgICAvKiogRGVmaW5lIHRoZSBzb3J0IG9yZGVyIG9mIHRoZSB0YXNrcy4gUG9zc2libGUgdmFsdWVzIGFyZSA6IGBjcmVhdGVkLWRlc2NgLFxuICAgICAqIGBjcmVhdGVkLWFzY2AsIGBkdWUtZGVzY2AsIGBkdWUtYXNjYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgc29ydDogc3RyaW5nO1xuXG4gICAgLyoqIE5hbWUgb2YgdGhlIHRhc2tsaXN0LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgbmFtZTogc3RyaW5nO1xuXG4gICAgLyoqIERlZmluZSB3aGljaCB0YXNrIGlkIHNob3VsZCBiZSBzZWxlY3RlZCBhZnRlciByZWxvYWRpbmcuIElmIHRoZSB0YXNrIGlkIGRvZXNuJ3RcbiAgICAgKiBleGlzdCBvciBub3RoaW5nIGlzIHBhc3NlZCB0aGVuIHRoZSBmaXJzdCB0YXNrIHdpbGwgYmUgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBsYW5kaW5nVGFza0lkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBEYXRhIHNvdXJjZSBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBudW1iZXIgYW5kIHRoZSB0eXBlIG9mIHRoZSBjb2x1bW5zIHRoYXRcbiAgICAgKiB5b3Ugd2FudCB0byBzaG93LlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgZGF0YTogRGF0YVRhYmxlQWRhcHRlcjtcblxuICAgIC8qKiBSb3cgc2VsZWN0aW9uIG1vZGUuIENhbiBiZSBub25lLCBgc2luZ2xlYCBvciBgbXVsdGlwbGVgLiBGb3IgYG11bHRpcGxlYCBtb2RlLFxuICAgICAqIHlvdSBjYW4gdXNlIENtZCAobWFjT1MpIG9yIEN0cmwgKFdpbikgbW9kaWZpZXIga2V5IHRvIHRvZ2dsZSBzZWxlY3Rpb24gZm9yXG4gICAgICogbXVsdGlwbGUgcm93cy5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHNlbGVjdGlvbk1vZGU6IHN0cmluZyA9ICdzaW5nbGUnOyAvLyBub25lfHNpbmdsZXxtdWx0aXBsZVxuXG4gICAgLyoqIFRvZ2dsZXMgbXVsdGlwbGUgcm93IHNlbGVjdGlvbiwgcmVuZGVycyBjaGVja2JveGVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgZWFjaCByb3cgKi9cbiAgICBASW5wdXQoKVxuICAgIG11bHRpc2VsZWN0OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogVG9nZ2xlcyBkZWZhdWx0IHNlbGVjdGlvbiBvZiB0aGUgZmlyc3Qgcm93ICovXG4gICAgQElucHV0KClcbiAgICBzZWxlY3RGaXJzdFJvdzogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogVGhlIGlkIG9mIGEgdGFzayAqL1xuICAgIEBJbnB1dCgpXG4gICAgdGFza0lkOiBzdHJpbmc7XG5cbiAgICAvKiogVG9nZ2xlcyBpbmNsdXNpb24gb2YgUHJvY2VzcyBJbnN0YW5jZXMgKi9cbiAgICBASW5wdXQoKVxuICAgIGluY2x1ZGVQcm9jZXNzSW5zdGFuY2U6IGJvb2xlYW47XG5cbiAgICAvKiogU3RhcnRpbmcgcG9pbnQgb2YgdGhlIGxpc3Qgd2l0aGluIHRoZSBmdWxsIHNldCBvZiB0YXNrcy4gKi9cbiAgICBASW5wdXQoKVxuICAgIHN0YXJ0OiBudW1iZXI7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGEgdGFzayBpbiB0aGUgbGlzdCBpcyBjbGlja2VkICovXG4gICAgQE91dHB1dCgpXG4gICAgcm93Q2xpY2s6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHJvd3MgYXJlIHNlbGVjdGVkL3Vuc2VsZWN0ZWQgKi9cbiAgICBAT3V0cHV0KClcbiAgICByb3dzU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxhbnlbXT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueVtdPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgdGFzayBsaXN0IGlzIGxvYWRlZCAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHN1Y2Nlc3M6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3Vycy4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIGN1cnJlbnRJbnN0YW5jZUlkOiBzdHJpbmc7XG4gICAgc2VsZWN0ZWRJbnN0YW5jZXM6IGFueVtdO1xuICAgIHBhZ2luYXRpb246IEJlaGF2aW9yU3ViamVjdDxQYWdpbmF0aW9uTW9kZWw+O1xuXG4gICAgLyoqIFRoZSBwYWdlIG51bWJlciBvZiB0aGUgdGFza3MgdG8gZmV0Y2guICovXG4gICAgQElucHV0KClcbiAgICBwYWdlOiBudW1iZXIgPSAwO1xuXG4gICAgLyoqIFRoZSBudW1iZXIgb2YgdGFza3MgdG8gZmV0Y2guIERlZmF1bHQgdmFsdWU6IDI1LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2l6ZTogbnVtYmVyID0gUGFnaW5hdGlvbkNvbXBvbmVudC5ERUZBVUxUX1BBR0lOQVRJT04ubWF4SXRlbXM7XG5cbiAgICAvKiogRmlsdGVyIHRoZSB0YXNrcy4gRGlzcGxheSBvbmx5IHRhc2tzIHdpdGggYGNyZWF0ZWRfZGF0ZWAgYWZ0ZXIgYGR1ZUFmdGVyYC4gKi9cbiAgICBASW5wdXQoKVxuICAgIGR1ZUFmdGVyOiBzdHJpbmc7XG5cbiAgICAvKiogRmlsdGVyIHRoZSB0YXNrcy4gRGlzcGxheSBvbmx5IHRhc2tzIHdpdGggYGNyZWF0ZWRfZGF0ZWAgYmVmb3JlIGBkdWVCZWZvcmVgLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgZHVlQmVmb3JlOiBzdHJpbmc7XG5cbiAgICByb3dzOiBhbnlbXSA9IFtdO1xuICAgIGlzTG9hZGluZzogYm9vbGVhbiA9IHRydWU7XG4gICAgc29ydGluZzogYW55W10gPSBbJ2NyZWF0ZWQnLCAnZGVzYyddO1xuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyBjdXN0b20gZGF0YSBzb3VyY2UgbW9kZS5cbiAgICAgKiBXaGVuIGVuYWJsZWQgdGhlIGNvbXBvbmVudCByZWxvYWRzIGRhdGEgZnJvbSBpdCdzIGN1cnJlbnQgc291cmNlIGluc3RlYWQgb2YgdGhlIHNlcnZlciBzaWRlLlxuICAgICAqIFRoaXMgYWxsb3dzIGdlbmVyYXRpbmcgYW5kIGRpc3BsYXlpbmcgY3VzdG9tIGRhdGEgc2V0cyAoaS5lLiBmaWx0ZXJlZCBvdXQgY29udGVudCkuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyT2YgVGFza0xpc3RDb21wb25lbnRcbiAgICAgKi9cbiAgICBoYXNDdXN0b21EYXRhU291cmNlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRhc2tMaXN0U2VydmljZTogVGFza0xpc3RTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIGFwcENvbmZpZ1NlcnZpY2U6IEFwcENvbmZpZ1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSB1c2VyUHJlZmVyZW5jZXM6IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoYXBwQ29uZmlnU2VydmljZSwgVGFza0xpc3RDb21wb25lbnQuUFJFU0VUX0tFWSwgdGFza1ByZXNldHNEZWZhdWx0TW9kZWwpO1xuICAgICAgICB0aGlzLnVzZXJQcmVmZXJlbmNlcy5zZWxlY3QoVXNlclByZWZlcmVuY2VWYWx1ZXMuUGFnaW5hdGlvblNpemUpLnN1YnNjcmliZSgocGFnZVNpemUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IHBhZ2VTaXplO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnBhZ2luYXRpb24gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFBhZ2luYXRpb25Nb2RlbD4oPFBhZ2luYXRpb25Nb2RlbD4ge1xuICAgICAgICAgICAgbWF4SXRlbXM6IHRoaXMuc2l6ZSxcbiAgICAgICAgICAgIHNraXBDb3VudDogMCxcbiAgICAgICAgICAgIHRvdGFsSXRlbXM6IDBcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgICAgICB0aGlzLmNyZWF0ZURhdGF0YWJsZVNjaGVtYSgpO1xuICAgICAgICBpZiAodGhpcy5kYXRhICYmIHRoaXMuZGF0YS5nZXRDb2x1bW5zKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuc2V0Q29sdW1ucyh0aGlzLmNvbHVtbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYXBwSWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRDdXN0b21EYXRhU291cmNlKHJvd3M6IGFueVtdKTogdm9pZCB7XG4gICAgICAgIGlmIChyb3dzKSB7XG4gICAgICAgICAgICB0aGlzLnJvd3MgPSByb3dzO1xuICAgICAgICAgICAgdGhpcy5oYXNDdXN0b21EYXRhU291cmNlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNQcm9wZXJ0eUNoYW5nZWQoY2hhbmdlcykpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzU29ydENoYW5nZWQoY2hhbmdlcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvcnRpbmcgPSB0aGlzLnNvcnQgPyB0aGlzLnNvcnQuc3BsaXQoJy0nKSA6IHRoaXMuc29ydGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGlzU29ydENoYW5nZWQoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBhY3R1YWxTb3J0ID0gY2hhbmdlc1snc29ydCddO1xuICAgICAgICByZXR1cm4gYWN0dWFsU29ydCAmJiBhY3R1YWxTb3J0LmN1cnJlbnRWYWx1ZSAmJiBhY3R1YWxTb3J0LmN1cnJlbnRWYWx1ZSAhPT0gYWN0dWFsU29ydC5wcmV2aW91c1ZhbHVlO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNQcm9wZXJ0eUNoYW5nZWQoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgY2hhbmdlZDogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAgICAgbGV0IGxhbmRpbmdUYXNrSWQgPSBjaGFuZ2VzWydsYW5kaW5nVGFza0lkJ107XG4gICAgICAgIGxldCBwYWdlID0gY2hhbmdlc1sncGFnZSddO1xuICAgICAgICBsZXQgc2l6ZSA9IGNoYW5nZXNbJ3NpemUnXTtcbiAgICAgICAgaWYgKGxhbmRpbmdUYXNrSWQgJiYgbGFuZGluZ1Rhc2tJZC5jdXJyZW50VmFsdWUgJiYgdGhpcy5pc0VxdWFsVG9DdXJyZW50SWQobGFuZGluZ1Rhc2tJZC5jdXJyZW50VmFsdWUpKSB7XG4gICAgICAgICAgICBjaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAocGFnZSAmJiBwYWdlLmN1cnJlbnRWYWx1ZSAhPT0gcGFnZS5wcmV2aW91c1ZhbHVlKSB7XG4gICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChzaXplICYmIHNpemUuY3VycmVudFZhbHVlICE9PSBzaXplLnByZXZpb3VzVmFsdWUpIHtcbiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNoYW5nZWQ7XG4gICAgfVxuXG4gICAgcmVsb2FkKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuaGFzQ3VzdG9tRGF0YVNvdXJjZSkge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0Tm9kZSA9IHRoaXMuY3JlYXRlUmVxdWVzdE5vZGUoKTtcbiAgICAgICAgICAgIHRoaXMubG9hZCh0aGlzLnJlcXVlc3ROb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWQocmVxdWVzdE5vZGU6IFRhc2tRdWVyeVJlcXVlc3RSZXByZXNlbnRhdGlvbk1vZGVsKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sb2FkVGFza3NCeVN0YXRlKCkuc3Vic2NyaWJlKFxuICAgICAgICAgICAgKHRhc2tzKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3dzID0gdGhpcy5vcHRpbWl6ZVRhc2tEZXRhaWxzKHRhc2tzLmRhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0VGFzayh0aGlzLmxhbmRpbmdUYXNrSWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3VjY2Vzcy5lbWl0KHRhc2tzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMucGFnaW5hdGlvbi5uZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgY291bnQ6IHRhc2tzLmRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBtYXhJdGVtczogdGhpcy5zaXplLFxuICAgICAgICAgICAgICAgICAgICBza2lwQ291bnQ6IHRoaXMucGFnZSAqIHRoaXMuc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgdG90YWxJdGVtczogdGFza3MudG90YWxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnJvcik7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgbG9hZFRhc2tzQnlTdGF0ZSgpOiBPYnNlcnZhYmxlPFRhc2tMaXN0TW9kZWw+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdE5vZGUuc3RhdGUgPT09ICdhbGwnXG4gICAgICAgICAgICA/IHRoaXMudGFza0xpc3RTZXJ2aWNlLmZpbmRBbGxUYXNrc1dpdGhvdXRTdGF0ZSh0aGlzLnJlcXVlc3ROb2RlKVxuICAgICAgICAgICAgOiB0aGlzLnRhc2tMaXN0U2VydmljZS5maW5kVGFza3NCeVN0YXRlKHRoaXMucmVxdWVzdE5vZGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbGVjdCB0aGUgdGFzayBnaXZlbiBpbiBpbnB1dCBpZiBwcmVzZW50XG4gICAgICovXG4gICAgc2VsZWN0VGFzayh0YXNrSWRTZWxlY3RlZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5pc0xpc3RFbXB0eSgpKSB7XG4gICAgICAgICAgICBsZXQgZGF0YVJvdyA9IG51bGw7XG4gICAgICAgICAgICBpZiAodGFza0lkU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBkYXRhUm93ID0gdGhpcy5yb3dzLmZpbmQoKGN1cnJlbnRSb3c6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudFJvd1snaWQnXSA9PT0gdGFza0lkU2VsZWN0ZWQ7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWRhdGFSb3cgJiYgdGhpcy5zZWxlY3RGaXJzdFJvdykge1xuICAgICAgICAgICAgICAgIGRhdGFSb3cgPSB0aGlzLnJvd3NbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YVJvdykge1xuICAgICAgICAgICAgICAgIGRhdGFSb3cuaXNTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50SW5zdGFuY2VJZCA9IGRhdGFSb3dbJ2lkJ107XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJbnN0YW5jZUlkID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgY3VycmVudCBpZFxuICAgICAqL1xuICAgIGdldEN1cnJlbnRJZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50SW5zdGFuY2VJZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgdGFza0lkIGlzIHRoZSBzYW1lIG9mIHRoZSBzZWxlY3RlZCB0YXNrXG4gICAgICogQHBhcmFtIHRhc2tJZFxuICAgICAqL1xuICAgIGlzRXF1YWxUb0N1cnJlbnRJZCh0YXNrSWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50SW5zdGFuY2VJZCA9PT0gdGFza0lkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBsaXN0IGlzIGVtcHR5XG4gICAgICovXG4gICAgaXNMaXN0RW1wdHkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhdGhpcy5yb3dzIHx8IHRoaXMucm93cy5sZW5ndGggPT09IDA7XG4gICAgfVxuXG4gICAgb25Sb3dDbGljayhpdGVtOiBEYXRhUm93RXZlbnQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50SW5zdGFuY2VJZCA9IGl0ZW0udmFsdWUuZ2V0VmFsdWUoJ2lkJyk7XG4gICAgICAgIHRoaXMucm93Q2xpY2suZW1pdCh0aGlzLmN1cnJlbnRJbnN0YW5jZUlkKTtcbiAgICB9XG5cbiAgICBvblJvd1NlbGVjdChldmVudDogQ3VzdG9tRXZlbnQpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEluc3RhbmNlcyA9IFsuLi5ldmVudC5kZXRhaWwuc2VsZWN0aW9uXTtcbiAgICAgICAgdGhpcy5yb3dzU2VsZWN0ZWQuZW1pdCh0aGlzLnNlbGVjdGVkSW5zdGFuY2VzKTtcbiAgICB9XG5cbiAgICBvblJvd1Vuc2VsZWN0KGV2ZW50OiBDdXN0b21FdmVudCkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkSW5zdGFuY2VzID0gWy4uLmV2ZW50LmRldGFpbC5zZWxlY3Rpb25dO1xuICAgICAgICB0aGlzLnJvd3NTZWxlY3RlZC5lbWl0KHRoaXMuc2VsZWN0ZWRJbnN0YW5jZXMpO1xuICAgIH1cblxuICAgIG9uUm93S2V5VXAoZXZlbnQ6IEN1c3RvbUV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5kZXRhaWwua2V5Ym9hcmRFdmVudC5rZXkgPT09ICdFbnRlcicpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRJbnN0YW5jZUlkID0gZXZlbnQuZGV0YWlsLnJvdy5nZXRWYWx1ZSgnaWQnKTtcbiAgICAgICAgICAgIHRoaXMucm93Q2xpY2suZW1pdCh0aGlzLmN1cnJlbnRJbnN0YW5jZUlkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wdGltaXplIG5hbWUgZmllbGRcbiAgICAgKiBAcGFyYW0gaW5zdGFuY2VzXG4gICAgICovXG4gICAgcHJpdmF0ZSBvcHRpbWl6ZVRhc2tEZXRhaWxzKGluc3RhbmNlczogYW55W10pOiBhbnlbXSB7XG4gICAgICAgIGluc3RhbmNlcyA9IGluc3RhbmNlcy5tYXAoKHRhc2spID0+IHtcbiAgICAgICAgICAgIGlmICghdGFzay5uYW1lKSB7XG4gICAgICAgICAgICAgICAgdGFzay5uYW1lID0gJ05vIG5hbWUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRhc2suY3JlYXRlZCkge1xuICAgICAgICAgICAgICAgIHRhc2suY3JlYXRlZCA9IG1vbWVudCh0YXNrLmNyZWF0ZWQpLmZvcm1hdCh0aGlzLkZPUk1BVF9EQVRFKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0YXNrLmR1ZURhdGUpIHtcbiAgICAgICAgICAgICAgICB0YXNrLmR1ZURhdGUgPSBtb21lbnQodGFzay5kdWVEYXRlKS5mb3JtYXQodGhpcy5GT1JNQVRfREFURSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGFzay5lbmREYXRlKSB7XG4gICAgICAgICAgICAgICAgdGFzay5lbmREYXRlID0gbW9tZW50KHRhc2suZW5kRGF0ZSkuZm9ybWF0KHRoaXMuRk9STUFUX0RBVEUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRhc2s7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2VzO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlUmVxdWVzdE5vZGUoKSB7XG5cbiAgICAgICAgbGV0IHJlcXVlc3ROb2RlID0ge1xuICAgICAgICAgICAgYXBwRGVmaW5pdGlvbklkOiB0aGlzLmFwcElkLFxuICAgICAgICAgICAgZHVlQWZ0ZXI6IHRoaXMuZHVlQWZ0ZXIgPyBtb21lbnQodGhpcy5kdWVBZnRlcikudG9EYXRlKCkgOiBudWxsLFxuICAgICAgICAgICAgZHVlQmVmb3JlOiB0aGlzLmR1ZUJlZm9yZSA/IG1vbWVudCh0aGlzLmR1ZUJlZm9yZSkudG9EYXRlKCkgOiBudWxsLFxuICAgICAgICAgICAgcHJvY2Vzc0luc3RhbmNlSWQ6IHRoaXMucHJvY2Vzc0luc3RhbmNlSWQsXG4gICAgICAgICAgICBwcm9jZXNzRGVmaW5pdGlvbklkOiB0aGlzLnByb2Nlc3NEZWZpbml0aW9uSWQsXG4gICAgICAgICAgICB0ZXh0OiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBhc3NpZ25tZW50OiB0aGlzLmFzc2lnbm1lbnQsXG4gICAgICAgICAgICBzdGF0ZTogdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIHNvcnQ6IHRoaXMuc29ydCxcbiAgICAgICAgICAgIHBhZ2U6IHRoaXMucGFnZSxcbiAgICAgICAgICAgIHNpemU6IHRoaXMuc2l6ZSxcbiAgICAgICAgICAgIHN0YXJ0OiB0aGlzLnN0YXJ0LFxuICAgICAgICAgICAgdGFza0lkOiB0aGlzLnRhc2tJZCxcbiAgICAgICAgICAgIGluY2x1ZGVQcm9jZXNzSW5zdGFuY2U6IHRoaXMuaW5jbHVkZVByb2Nlc3NJbnN0YW5jZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IFRhc2tRdWVyeVJlcXVlc3RSZXByZXNlbnRhdGlvbk1vZGVsKHJlcXVlc3ROb2RlKTtcbiAgICB9XG5cbiAgICB1cGRhdGVQYWdpbmF0aW9uKHBhcmFtczogUGFnaW5hdGlvbk1vZGVsKSB7XG4gICAgICAgIGNvbnN0IG5lZWRzUmVsb2FkID0gcGFyYW1zLm1heEl0ZW1zIHx8IHBhcmFtcy5za2lwQ291bnQ7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHBhcmFtcy5tYXhJdGVtcztcbiAgICAgICAgdGhpcy5wYWdlID0gdGhpcy5jdXJyZW50UGFnZShwYXJhbXMuc2tpcENvdW50LCBwYXJhbXMubWF4SXRlbXMpO1xuICAgICAgICBpZiAobmVlZHNSZWxvYWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjdXJyZW50UGFnZShza2lwQ291bnQ6IG51bWJlciwgbWF4SXRlbXM6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAoc2tpcENvdW50ICYmIG1heEl0ZW1zKSA/IE1hdGguZmxvb3Ioc2tpcENvdW50IC8gbWF4SXRlbXMpIDogMDtcbiAgICB9XG59XG4iXX0=
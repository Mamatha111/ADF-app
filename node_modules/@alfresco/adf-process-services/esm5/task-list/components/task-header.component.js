/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { BpmUserService, CardViewDateItemModel, CardViewMapItemModel, CardViewTextItemModel, LogService, TranslationService, AppConfigService } from '@alfresco/adf-core';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListService } from './../services/tasklist.service';
var TaskHeaderComponent = /** @class */ (function () {
    function TaskHeaderComponent(activitiTaskService, bpmUserService, translationService, logService, appConfig) {
        this.activitiTaskService = activitiTaskService;
        this.bpmUserService = bpmUserService;
        this.translationService = translationService;
        this.logService = logService;
        this.appConfig = appConfig;
        /**
         * The name of the form.
         */
        this.formName = null;
        /**
         * Emitted when the task is claimed.
         */
        this.claim = new EventEmitter();
        /**
         * Emitted when the task is unclaimed (ie, requeued).
         */
        this.unclaim = new EventEmitter();
        this.inEdit = false;
    }
    /**
     * @return {?}
     */
    TaskHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.loadCurrentBpmUserId();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TaskHeaderComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.refreshData();
    };
    /**
     * @private
     * @param {?} parentInfoMap
     * @return {?}
     */
    TaskHeaderComponent.prototype.initDefaultProperties = /**
     * @private
     * @param {?} parentInfoMap
     * @return {?}
     */
    function (parentInfoMap) {
        return [
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.ASSIGNEE',
                value: this.taskDetails.getFullName(),
                key: 'assignee',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.ASSIGNEE_DEFAULT'),
                clickable: !this.isCompleted(),
                icon: 'create'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.STATUS',
                value: this.getTaskStatus(),
                key: 'status'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.PRIORITY',
                value: this.taskDetails.priority,
                key: 'priority',
                editable: true
            }),
            new CardViewDateItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.DUE_DATE',
                value: this.taskDetails.dueDate,
                key: 'dueDate',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.DUE_DATE_DEFAULT'),
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.CATEGORY',
                value: this.taskDetails.category,
                key: 'category',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.CATEGORY_DEFAULT')
            }),
            new CardViewMapItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.PARENT_NAME',
                value: parentInfoMap,
                key: 'parentName',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.PARENT_NAME_DEFAULT'),
                clickable: true
            }),
            new CardViewDateItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.CREATED',
                value: this.taskDetails.created,
                key: 'created'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.DURATION',
                value: this.getTaskDuration(),
                key: 'duration'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.PARENT_TASK_ID',
                value: this.taskDetails.parentTaskId,
                key: 'parentTaskId'
            }),
            new CardViewDateItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.END_DATE',
                value: this.taskDetails.endDate,
                key: 'endDate'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.ID',
                value: this.taskDetails.id,
                key: 'id'
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.DESCRIPTION',
                value: this.taskDetails.description,
                key: 'description',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.DESCRIPTION_DEFAULT'),
                multiline: true,
                editable: true
            }),
            new CardViewTextItemModel({
                label: 'ADF_TASK_LIST.PROPERTIES.FORM_NAME',
                value: this.formName,
                key: 'formName',
                default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.FORM_NAME_DEFAULT'),
                clickable: !!this.formName,
                icon: 'create'
            })
        ];
    };
    /**
     * Refresh the card data
     */
    /**
     * Refresh the card data
     * @return {?}
     */
    TaskHeaderComponent.prototype.refreshData = /**
     * Refresh the card data
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.taskDetails) {
            /** @type {?} */
            var parentInfoMap = this.getParentInfo();
            /** @type {?} */
            var defaultProperties = this.initDefaultProperties(parentInfoMap);
            /** @type {?} */
            var filteredProperties_1 = this.appConfig.get('adf-task-header.presets.properties');
            this.properties = defaultProperties.filter(function (cardItem) { return _this.isValidSelection(filteredProperties_1, cardItem); });
        }
    };
    /**
     * @private
     * @param {?} filteredProperties
     * @param {?} cardItem
     * @return {?}
     */
    TaskHeaderComponent.prototype.isValidSelection = /**
     * @private
     * @param {?} filteredProperties
     * @param {?} cardItem
     * @return {?}
     */
    function (filteredProperties, cardItem) {
        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;
    };
    /**
     * Loads current bpm userId
     */
    /**
     * Loads current bpm userId
     * @private
     * @return {?}
     */
    TaskHeaderComponent.prototype.loadCurrentBpmUserId = /**
     * Loads current bpm userId
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.bpmUserService.getCurrentUserInfo().subscribe(function (res) {
            _this.currentUserId = res ? +res.id : null;
        });
    };
    /**
     * Return the process parent information
     */
    /**
     * Return the process parent information
     * @return {?}
     */
    TaskHeaderComponent.prototype.getParentInfo = /**
     * Return the process parent information
     * @return {?}
     */
    function () {
        if (this.taskDetails.processInstanceId && this.taskDetails.processDefinitionName) {
            return new Map([[this.taskDetails.processInstanceId, this.taskDetails.processDefinitionName]]);
        }
    };
    /**
     * Does the task have an assignee
     */
    /**
     * Does the task have an assignee
     * @return {?}
     */
    TaskHeaderComponent.prototype.hasAssignee = /**
     * Does the task have an assignee
     * @return {?}
     */
    function () {
        return !!this.taskDetails.assignee ? true : false;
    };
    /**
     * Returns true if the task is assigned to logged in user
     */
    /**
     * Returns true if the task is assigned to logged in user
     * @param {?} userId
     * @return {?}
     */
    TaskHeaderComponent.prototype.isAssignedTo = /**
     * Returns true if the task is assigned to logged in user
     * @param {?} userId
     * @return {?}
     */
    function (userId) {
        return this.hasAssignee() ? this.taskDetails.assignee.id === userId : false;
    };
    /**
     * Return true if the task assigned
     */
    /**
     * Return true if the task assigned
     * @return {?}
     */
    TaskHeaderComponent.prototype.isAssignedToCurrentUser = /**
     * Return true if the task assigned
     * @return {?}
     */
    function () {
        return this.hasAssignee() && this.isAssignedTo(this.currentUserId);
    };
    /**
     * Return true if the user is a candidate member
     */
    /**
     * Return true if the user is a candidate member
     * @return {?}
     */
    TaskHeaderComponent.prototype.isCandidateMember = /**
     * Return true if the user is a candidate member
     * @return {?}
     */
    function () {
        return this.taskDetails.managerOfCandidateGroup || this.taskDetails.memberOfCandidateGroup || this.taskDetails.memberOfCandidateUsers;
    };
    /**
     * Return true if the task claimable
     */
    /**
     * Return true if the task claimable
     * @return {?}
     */
    TaskHeaderComponent.prototype.isTaskClaimable = /**
     * Return true if the task claimable
     * @return {?}
     */
    function () {
        return !this.hasAssignee() && this.isCandidateMember();
    };
    /**
     * Return true if the task claimed by candidate member.
     */
    /**
     * Return true if the task claimed by candidate member.
     * @return {?}
     */
    TaskHeaderComponent.prototype.isTaskClaimedByCandidateMember = /**
     * Return true if the task claimed by candidate member.
     * @return {?}
     */
    function () {
        return this.isCandidateMember() && this.isAssignedToCurrentUser() && !this.isCompleted();
    };
    /**
     * Returns task's status
     */
    /**
     * Returns task's status
     * @return {?}
     */
    TaskHeaderComponent.prototype.getTaskStatus = /**
     * Returns task's status
     * @return {?}
     */
    function () {
        return (this.taskDetails && this.taskDetails.isCompleted()) ? 'Completed' : 'Running';
    };
    /**
     * Claim task
     *
     * @param taskId
     */
    /**
     * Claim task
     *
     * @param {?} taskId
     * @return {?}
     */
    TaskHeaderComponent.prototype.claimTask = /**
     * Claim task
     *
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        var _this = this;
        this.activitiTaskService.claimTask(taskId).subscribe(function (res) {
            _this.logService.info('Task claimed');
            _this.claim.emit(taskId);
        });
    };
    /**
     * Unclaim task
     *
     * @param taskId
     */
    /**
     * Unclaim task
     *
     * @param {?} taskId
     * @return {?}
     */
    TaskHeaderComponent.prototype.unclaimTask = /**
     * Unclaim task
     *
     * @param {?} taskId
     * @return {?}
     */
    function (taskId) {
        var _this = this;
        this.activitiTaskService.unclaimTask(taskId).subscribe(function (res) {
            _this.logService.info('Task unclaimed');
            _this.unclaim.emit(taskId);
        });
    };
    /**
     * Returns true if the task is completed
     */
    /**
     * Returns true if the task is completed
     * @return {?}
     */
    TaskHeaderComponent.prototype.isCompleted = /**
     * Returns true if the task is completed
     * @return {?}
     */
    function () {
        return this.taskDetails && !!this.taskDetails.endDate;
    };
    /**
     * @return {?}
     */
    TaskHeaderComponent.prototype.getTaskDuration = /**
     * @return {?}
     */
    function () {
        return this.taskDetails.duration ? this.taskDetails.duration + " ms" : '';
    };
    TaskHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-task-header',
                    template: "<mat-card *ngIf=\"taskDetails\" class=\"adf-card-container\">\n    <mat-card-content>\n        <adf-card-view [properties]=\"properties\" [editable]=\"!isCompleted()\"></adf-card-view>\n    </mat-card-content>\n\n    <mat-card-actions class=\"adf-controls\">\n        <button *ngIf=\"isTaskClaimedByCandidateMember()\" mat-button data-automation-id=\"header-unclaim-button\" id=\"unclaim-task\" (click)=\"unclaimTask(taskDetails.id)\" class=\"adf-claim-controls\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.UNCLAIM' | translate }}\n        </button>\n        <button *ngIf=\"isTaskClaimable()\" mat-button data-automation-id=\"header-claim-button\" id=\"claim-task\" (click)=\"claimTask(taskDetails.id)\" class=\"adf-claim-controls\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.CLAIM' | translate }}\n        </button>\n    </mat-card-actions>\n</mat-card>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    TaskHeaderComponent.ctorParameters = function () { return [
        { type: TaskListService },
        { type: BpmUserService },
        { type: TranslationService },
        { type: LogService },
        { type: AppConfigService }
    ]; };
    TaskHeaderComponent.propDecorators = {
        formName: [{ type: Input }],
        taskDetails: [{ type: Input }],
        claim: [{ type: Output }],
        unclaim: [{ type: Output }]
    };
    return TaskHeaderComponent;
}());
export { TaskHeaderComponent };
if (false) {
    /**
     * The name of the form.
     * @type {?}
     */
    TaskHeaderComponent.prototype.formName;
    /**
     * (required) Details related to the task.
     * @type {?}
     */
    TaskHeaderComponent.prototype.taskDetails;
    /**
     * Emitted when the task is claimed.
     * @type {?}
     */
    TaskHeaderComponent.prototype.claim;
    /**
     * Emitted when the task is unclaimed (ie, requeued).
     * @type {?}
     */
    TaskHeaderComponent.prototype.unclaim;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.currentUserId;
    /** @type {?} */
    TaskHeaderComponent.prototype.properties;
    /** @type {?} */
    TaskHeaderComponent.prototype.inEdit;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.activitiTaskService;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.bpmUserService;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.translationService;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    TaskHeaderComponent.prototype.appConfig;
}
//# sourceMappingURL=data:application/json;base64,
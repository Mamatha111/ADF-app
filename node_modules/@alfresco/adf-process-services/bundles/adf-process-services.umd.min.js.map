{"version":3,"sources":["ng://@alfresco/adf-process-services/process-list/models/filter-process.model.ts","ng://@alfresco/adf-process-services/process-list/services/process-filter.service.ts","ng://@alfresco/adf-process-services/app-list/icon.model.ts","ng://@alfresco/adf-process-services/process-list/components/process-filters.component.ts","ng://@alfresco/adf-process-services/process-list/models/process-definition.model.ts","ng://@alfresco/adf-process-services/process-list/models/process-instance-variable.model.ts","ng://@alfresco/adf-process-services/process-list/models/process-instance.model.ts","ng://@alfresco/adf-process-services/process-list/models/process-list.model.ts","ng://@alfresco/adf-process-services/process-list/services/process.service.ts","ng://@alfresco/adf-process-services/process-list/components/process-instance-details.component.ts","ng://@alfresco/adf-process-services/process-list/components/process-audit.directive.ts","ng://@alfresco/adf-process-services/process-list/components/process-instance-header.component.ts","node_modules/tslib/tslib.es6.js","ng://@alfresco/adf-process-services/task-list/models/filter.model.ts","ng://@alfresco/adf-process-services/task-list/models/task-preset.model.ts","ng://@alfresco/adf-process-services/task-list/models/form.model.ts","ng://@alfresco/adf-process-services/task-list/models/task-details.model.ts","ng://@alfresco/adf-process-services/task-list/models/task-list.model.ts","ng://@alfresco/adf-process-services/task-list/services/tasklist.service.ts","ng://@alfresco/adf-process-services/task-list/components/task-list.component.ts","ng://@alfresco/adf-process-services/task-list/components/checklist.component.ts","ng://@alfresco/adf-process-services/task-list/components/task-header.component.ts","ng://@alfresco/adf-process-services/content-widget/attach-file-widget-dialog.component.ts","ng://@alfresco/adf-process-services/content-widget/attach-file-widget-dialog.service.ts","ng://@alfresco/adf-process-services/content-widget/attach-file-widget.component.ts","ng://@alfresco/adf-process-services/content-widget/attach-folder-widget.component.ts","ng://@alfresco/adf-process-services/material.module.ts","ng://@alfresco/adf-process-services/content-widget/content-widget.module.ts","ng://@alfresco/adf-process-services/task-list/components/task-details.component.ts","ng://@alfresco/adf-process-services/task-list/components/no-task-detail-template.directive.ts","ng://@alfresco/adf-process-services/task-list/services/task-filter.service.ts","ng://@alfresco/adf-process-services/task-list/components/task-filters.component.ts","ng://@alfresco/adf-process-services/task-list/components/task-audit.directive.ts","ng://@alfresco/adf-process-services/task-list/components/start-task.component.ts","ng://@alfresco/adf-process-services/task-list/components/task-standalone.component.ts","ng://@alfresco/adf-process-services/task-list/components/attach-form.component.ts","ng://@alfresco/adf-process-services/task-list/services/process-upload.service.ts","ng://@alfresco/adf-process-services/task-list/services/task-upload.service.ts","ng://@alfresco/adf-process-services/task-list/models/start-task.model.ts","ng://@alfresco/adf-process-services/task-list/models/task-details.event.ts","ng://@alfresco/adf-process-services/task-list/models/user-event.model.ts","ng://@alfresco/adf-process-services/task-list/models/user-group.model.ts","ng://@alfresco/adf-process-services/process-comments/process-comments.component.ts","ng://@alfresco/adf-process-services/process-comments/process-comments.module.ts","ng://@alfresco/adf-process-services/people/components/people/people.component.ts","ng://@alfresco/adf-process-services/people/components/people-list/people-list.component.ts","ng://@alfresco/adf-process-services/people/components/people-search/people-search.component.ts","ng://@alfresco/adf-process-services/people/helpers/getDisplayUser.ts","ng://@alfresco/adf-process-services/people/components/people-search-field/people-search-field.component.ts","ng://@alfresco/adf-process-services/people/components/people-selector/people-selector.component.ts","ng://@alfresco/adf-process-services/people/directives/people-search-action-label.directive.ts","ng://@alfresco/adf-process-services/people/directives/people-search-title.directive.ts","ng://@alfresco/adf-process-services/people/people.module.ts","ng://@alfresco/adf-process-services/task-list/task-list.module.ts","ng://@alfresco/adf-process-services/process-list/components/process-instance-tasks.component.ts","ng://@alfresco/adf-process-services/process-list/models/process-preset.model.ts","ng://@alfresco/adf-process-services/process-list/components/process-list.component.ts","ng://@alfresco/adf-process-services/process-list/components/start-process.component.ts","ng://@alfresco/adf-process-services/process-list/models/process-instance-filter.model.ts","ng://@alfresco/adf-process-services/process-list/process-list.module.ts","ng://@alfresco/adf-process-services/app-list/apps-list.component.ts","ng://@alfresco/adf-process-services/app-list/select-apps-dialog-component.ts","ng://@alfresco/adf-process-services/app-list/apps-list.module.ts","ng://@alfresco/adf-process-services/attachment/task-attachment-list.component.ts","ng://@alfresco/adf-process-services/attachment/process-attachment-list.component.ts","ng://@alfresco/adf-process-services/attachment/create-process-attachment.component.ts","ng://@alfresco/adf-process-services/attachment/create-task-attachment.component.ts","ng://@alfresco/adf-process-services/attachment/attachment.module.ts","ng://@alfresco/adf-process-services/process.module.ts"],"names":["FilterProcessRepresentationModel","obj","this","id","appId","name","recent","icon","filter","index","prototype","hasFilter","ProcessFilterParamRepresentationModel","processDefinitionId","appDefinitionId","processInstanceId","state","sort","page","size","ProcessFilterService","alfrescoApiService","getProcessFilters","_this","from","callApiProcessFilters","pipe","map","response","filters","data","forEach","filterModel","push","catchError","err","handleProcessError","getProcessFilterById","filterId","find","getProcessFilterByName","filterName","createDefaultFilters","runningFilter","getRunningFilterInstance","runningObservable","addProcessFilter","completedFilter","getCompletedFilterInstance","completedObservable","allFilter","getAllFilterInstance","allObservable","Observable","observer","forkJoin","subscribe","res","next","complete","getInstance","activiti","userFiltersApi","createUserProcessInstanceFilter","getUserProcessInstanceFilters","error","throwError","Injectable","args","providedIn","AlfrescoApiService","IconModel","initIconsMDL","mapGlyphiconToMaterialDesignIcons","iconsMDL","get","DEFAULT_TASKS_APP_MATERIAL_ICON","Map","set","ProcessFiltersComponent","processFilterService","appsProcessService","filterClick","EventEmitter","success","showIcon","filterSelected","ngOnInit","ngOnChanges","changes","appName","currentValue","getFiltersByAppId","getFiltersByAppName","previousValue","selectProcessFilter","length","isFilterListEmpty","resDefault","resetFilter","filterParam","emit","errDefault","getDeployedApplicationsByName","application","selectFilter","currentFilter","processFilter","toLowerCase","isCurrentFilterEmpty","selectDefaultTaskFilter","selectRunningFilter","getCurrentFilter","undefined","getFilterIcon","Component","selector","template","AppsProcessService","Input","Output","ProcessDefinitionRepresentation","description","key","category","version","deploymentId","tenantId","metaDataValues","hasStartForm","ProcessInstanceVariable","scope","value","valueUrl","ProcessInstance","businessKey","ended","graphicalNotationDefined","processDefinitionCategory","processDefinitionDeploymentId","processDefinitionDescription","processDefinitionKey","processDefinitionName","processDefinitionVersion","startFormDefined","started","startedBy","variables","ProcessListModel","total","start","ProcessService","getProcessInstances","requestNode","processApi","filtered","process","getProcesses","of","fetchProcessAuditPdfById","processId","getProcessAuditPdf","fetchProcessAuditJsonById","getProcessAuditJson","getProcess","getProcessInstance","getProcessTasks","taskOpts","taskApi","listTasks","extractData","tasks","task","created","moment","format","getProcessDefinitions","opts","latest","processDefs","pd","startProcess","outcome","startFormValues","startRequest","values","startNewProcessInstance","cancelProcess","deleteProcessInstance","getProcessInstanceVariables","processInstanceVariablesApi","processVars","currentProcessVar","createOrUpdateProcessInstanceVariables","deleteProcessInstanceVariable","variableName","ProcessInstanceDetailsComponent","activitiProcess","logService","showTitle","showRefreshButton","processCancelled","taskClick","showProcessDiagram","load","reset","processInstanceDetails","isRunning","onTaskClicked","event","getProcessNameOrDescription","dateFormat","getFormatDate","datePipe","DatePipe","transform","onShowProcessDiagram","LogService","ViewChild","ProcessAuditDirective","contentService","processListService","fileName","download","clicked","isValidType","setDefaultFormatType","isJsonFormat","isPdfFormat","fetchAuditInfo","blob","audit","downloadBlob","onClickAudit","Directive","host","role","(click)","ContentService","ProcessInstanceHeaderComponent","translationService","appConfig","refreshData","processInstance","defaultProperties","initDefaultProperties","filteredProperties_1","properties","cardItem","isValidSelection","CardViewTextItemModel","label","getProcessStatus","CardViewDateItemModel","default","instant","getStartedByFullName","filteredProperties","indexOf","fullName","firstName","lastName","TranslationService","AppConfigService","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__values","o","m","Symbol","iterator","i","call","done","__read","n","r","e","ar","__spread","arguments","concat","AppDefinitionRepresentationModel","defaultAppId","theme","modelId","FilterParamsModel","FilterRepresentationModel","UserTaskFilterRepresentation","TaskQueryRequestRepresentationModel","tslib_1.__extends","TaskQueryRepresentation","taskPresetsDefaultModel","type","title","sortable","cssClass","Form","TaskDetailsModel","priority","assignee","UserProcessModel","adhocTaskCanBeReassigned","dueDate","duration","endDate","executionId","formKey","initiatorCanCompleteTask","managerOfCandidateGroup","memberOfCandidateGroup","memberOfCandidateUsers","involvedGroups","involvedPeople","parentTaskId","parentTaskName","processInstanceName","processInstanceStartUserId","taskDefinitionKey","getFullName","trim","isCompleted","TaskListModel","input","assign","item","TaskListService","apiService","getFilterForTaskById","taskId","filterList","flatMap","isTaskRelatedToFilter","generateTaskRequestNodeFromFilter","assignment","requestNodeForFilter","callApiTasksFiltered","element","handleError","getTasks","findTasksByState","findAllTaskByState","getTotalTasks","switchMap","findAllTasksWithoutState","activeTasks","completedTasks","getTaskDetails","callApiTaskDetails","details","getTaskChecklist","callApiTaskChecklist","checklists","checklist","getFormList","modelsApi","getModels","modelType","forms","form","attachFormToATask","formId","attachForm","addTask","callApiAddTask","deleteTask","callApiDeleteTask","deleteForm","callApiDeleteForm","completeTask","createNewTask","callApiCreateTask","assignTask","callApiAssignTask","assignTaskByUserId","userId","claimTask","unclaimTask","updateTask","updated","result","fetchTaskAuditPdfById","getTaskAuditPdf","fetchTaskAuditJsonById","getTaskAuditJson","getTask","addSubtask","removeForm","getChecklist","TaskListComponent","taskListService","appConfigService","userPreferences","_super","PRESET_KEY","FORMAT_DATE","selectionMode","multiselect","selectFirstRow","rowClick","rowsSelected","PaginationComponent","DEFAULT_PAGINATION","maxItems","rows","isLoading","sorting","hasCustomDataSource","select","UserPreferenceValues","PaginationSize","pageSize","pagination","BehaviorSubject","skipCount","totalItems","ngAfterContentInit","createDatatableSchema","getColumns","setColumns","columns","reload","setCustomDataSource","isPropertyChanged","isSortChanged","split","actualSort","changed","landingTaskId","isEqualToCurrentId","createRequestNode","loadTasksByState","optimizeTaskDetails","selectTask","count","taskIdSelected","isListEmpty","currentInstanceId","dataRow","currentRow","isSelected","getCurrentId","onRowClick","getValue","onRowSelect","selectedInstances","detail","selection","onRowUnselect","onRowKeyUp","keyboardEvent","preventDefault","row","instances","dueAfter","toDate","dueBefore","text","includeProcessInstance","updatePagination","params","needsReload","currentPage","Math","floor","UserPreferencesService","ContentChild","CustomEmptyContentTemplateDirective","CustomLoadingContentTemplateDirective","DataTableSchema","ChecklistComponent","activitiTaskList","dialog","readOnly","checklistTaskCreated","checklistTaskDeleted","taskDetailsModel","showDialog","open","addNewDialog","width","add","newTask","taskName","cancel","delete","check","closeAll","MatDialog","TaskHeaderComponent","activitiTaskService","bpmUserService","formName","claim","unclaim","inEdit","loadCurrentBpmUserId","parentInfoMap","taskDetails","clickable","getTaskStatus","editable","CardViewMapItemModel","getTaskDuration","multiline","getParentInfo","getCurrentUserInfo","currentUserId","hasAssignee","isAssignedTo","isAssignedToCurrentUser","isCandidateMember","isTaskClaimable","isTaskClaimedByCandidateMember","info","BpmUserService","AttachFileWidgetDialogComponent","externalApiService","init","ecmHost","context","buttonActionName","actionName","toUpperCase","isLoggedIn","performLogin","loginPanel","submitForm","close","selected","onSelect","nodeList","isFile","chosenNode","onClick","encapsulation","ViewEncapsulation","None","providers","AuthenticationService","DocumentListService","SitesService","ContentNodeSelectorService","SearchService","provide","useClass","ExternalAlfrescoApiService","Inject","MAT_DIALOG_DATA","AttachFileWidgetDialogService","openLogin","titleString","Subject","bind","isSelectionValid","isNodeFile","openLoginDialog","currentPanelClass","chosenWidth","panelClass","entry","AttachFileWidgetComponent","formService","logger","thumbnails","processContentService","activitiContentService","contentDialog","attachDialogService","repositoryList","tempFilesList","field","hasFile","getMultipleFileParam","getAlfrescoRepositories","repoList","taskSaved","formSaved","isFileSourceConfigured","fileSource","isMultipleSourceUpload","isOnlyLocalSourceSelected","isAllFileSourceSelected","serviceId","isSimpleUploadButton","isUploadButtonVisible","multipleOption","isDefinedSourceFolder","selectedFolder","isTemporaryFile","file","findIndex","elem","openSelectDialogFromFileSource","openFileBrowseDialogByFolderId","pathId","selections","_a","apply","uploadFileFromCS","accountId","siteId","onAttachFileChanged","target","files","onFileChanged","onRemoveAttachFile","splice","contentBlob","removeFile","onAttachFileClicked","isExternal","formContentClicked","fileClicked","downloadContent","getFileRawContent","openSelectDialog","repository","accountIdentifier","currentECMHost","getDomainHost","AppConfigValues","ECMHOST","repositoryUrl","formattedRepositoryHost","replace","node","openFileBrowseDialogBySite","fileNodeList","filesSaved","mergeMap","zip","content","mimeType","applyAlfrescoNode","_b","json","urlToCheck","match","(blur)","(change)","(focus)","(focusin)","(focusout)","(input)","(invalid)","(select)","FormService","ThumbnailService","ProcessContentService","ActivitiContentService","ContentNodeDialogService","UploadWidgetComponent","AttachFolderWidgetComponent","nodeService","hasFolder","selectedFolderName","getNode","folderSource","openFolderBrowseDialogByFolderId","openFolderBrowseDialogBySite","removeFolder","NodesApiService","WidgetComponent","modules","MatAutocompleteModule","MatButtonModule","MatCardModule","MatDialogModule","MatCheckboxModule","MatDatepickerModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatOptionModule","MatRadioModule","MatSelectModule","MatSlideToggleModule","MatTableModule","MatTabsModule","MatProgressSpinnerModule","MatNativeDateModule","MatRippleModule","MatTooltipModule","MatChipsModule","MatMenuModule","float","MaterialModule","NgModule","MAT_LABEL_GLOBAL_OPTIONS","useValue","ɵ0","imports","exports","ContentWidgetModule","CoreModule","forChild","ContentNodeSelectorModule","entryComponents","declarations","TaskDetailsComponent","authService","peopleProcessService","formRenderingService","cardViewUpdateService","debugMode","showNextTask","showHeader","showHeaderContent","showInvolvePeople","showComments","showChecklist","showFormTitle","showFormCompleteButton","showFormSaveButton","readOnlyForm","showFormRefreshButton","fieldValidators","formCompleted","formLoaded","taskCreated","taskDeleted","executeOutcome","claimedTask","unClaimedTask","taskFormName","taskPeople","showAssignee","showAttachForm","internalReadOnlyForm","setComponentTypeResolver","peopleSearch","peopleSearchObserver","share","getBpmLoggedUser","user","currentLoggedUser","loadDetails","itemUpdated$","updateTaskDetails","itemClicked$","clickTaskDetails","isStandaloneTask","isStandaloneTaskWithForm","hasFormKey","isStandaloneTaskWithoutForm","isFormComponentVisible","isShowAttachForm","isTaskStandaloneComponentVisible","isTaskActive","updateNotification","clickNotification","isNaN","getTime","isAssigned","hasEmailAddress","email","isAssignedToMe","isEmailEqual","isExternalIdEqual","externalId","assigneeMail","currentLoggedEmail","toLocaleLowerCase","assigneeExternalId","currentUserExternalId","isCompleteButtonEnabled","canInitiatorComplete","isCompleteButtonVisible","isSaveButtonVisible","hasSaveButton","loadNextTask","onComplete","onFormCompleted","onShowAttachForm","onCancelAttachForm","onCompleteAttachForm","onFormContentClick","onFormSaved","onFormLoaded","onChecklistTaskCreated","onChecklistTaskDeleted","onFormError","errorDialogRef","errorDialog","onFormExecuteOutcome","closeErrorDialog","onClaimAction","onUnclaimAction","isCompletedTask","searchUser","searchedWord","getWorkflowUsers","users","onCloseSearch","assignTaskToUser","selectedUser","getTaskHeaderViewClass","isReadOnlyComment","PeopleProcessService","FormRenderingService","CardViewUpdateService","NoTaskDetailsTemplateDirective","activitiTaskDetails","noTaskDetailsTemplateComponent","TemplateRef","TaskFilterService","involvedTasksFilter","getInvolvedTasksFilterInstance","involvedObservable","addFilter","myTasksFilter","getMyTasksFilterInstance","myTaskObservable","queuedTasksFilter","getQueuedTasksFilterInstance","queuedObservable","completedTasksFilter","getCompletedTasksFilterInstance","completeObservable","getTaskListFilters","callApiTaskFilters","getTaskFilterById","getTaskFilterByName","createUserTaskFilter","getUserTaskFilters","TaskFiltersComponent","taskFilterService","getFilters","createFiltersByAppId","newFilter","selectFilterAndEmit","selectFilterWithTask","filteredFilterList","TaskAuditDirective","MOMENT_DATE_FORMATS","StartTaskComponent","taskService","dateAdapter","userPreferencesService","formBuilder","MAX_LENGTH","dateError","maxTaskNameLength","loading","validateMaxTaskNameLength","FormFieldModel","FormModel","assigneeId","placeholder","Locale","locale","setLocale","loadFormsTask","buildForm","taskForm","group","FormControl","Validators","required","maxLength","valueChanges","taskFormValues","setTaskDetails","toString","isFormValid","valid","saveTask","createRes","defaultIfEmpty","attachRes","getAssigneeId","parseInt","onCancel","forms$","isUserNameEmpty","isEmpty","getDisplayUser","delimiter","onDateChanged","newDateValue","momentDate","isValid","log","defineProperty","DateAdapter","MomentDateAdapter","MAT_DATE_FORMATS","ɵ0$1","FormBuilder","TaskStandaloneComponent","hasCompletePermission","hideCancelButton","onCancelButtonClick","onCompleteButtonClick","hasCompleteButton","hasCancelButton","hasAttachFormButton","AttachFormComponent","cancelAttachForm","disableSubmit","attachFormControl","onFormAttached","selectedFormId","onRemoveButtonClick","onAttachFormButtonClick","getTaskForm","getFormDefinitionByName","formDef","ProcessUploadService","getUploadPromise","options","parentId","promise","contentApi","createRelatedContentOnProcessInstance","isRelatedContent","catch","UploadService","TaskUploadService","createRelatedContentOnTask","StartTaskModel","TaskDetailsEvent","_defaultPrevented","_value","UserEventModel","UserGroupModel","groups","status","ProcessCommentsComponent","commentProcessService","comments","beingAdded","comment$","commentObserver","comment","getProcessInstanceComments","resetComments","comment1","comment2","date1","Date","date2","message","addProcessInstanceComment","unshift","clear","isReadOnly","onError","CommentProcessService","ProcessCommentsModule","FormsModule","ReactiveFormsModule","CommonModule","PeopleComponent","people","showAssignment","peopleSearch$","ngAfterViewInit","involveUserAndCloseSearch","involveUserAndClose","involveUserWithoutCloseSearch","involveUser","involveUserWithTask","removeInvolvedUser","involvedUser","getInitialUserName","onAddAssignment","onClickAction","hasPeople","isEditMode","PeopleListComponent","actions","clickRow","clickAction","peopleDataTable","columnList","selectUser","hasActions","onShowRowActionsMenu","onExecuteRowAction","action","DataColumnListComponent","PeopleSearchComponent","searchPeople","closeSearch","filteredResults$","results","performSearch","performSearchCallback","closeSearchList","class","PeopleSearchFieldComponent","defaultPlaceholder","users$","debounceTime","searchWord","PeopleSelectorComponent","peopleIdChange","onSearchUserError","userSelected","updateUserSelection","userDeselected","searchFieldComponent","PeopleSearchActionLabelDirective","PeopleSearchTitleDirective","PeopleModule","TaskListModule","FlexLayoutModule","ProcessInstanceTasksComponent","task$","taskObserver","completedTask$","completedTaskObserver","loadActive","loadCompleted","hasStartFormDefined","getUserFullName","clickTask","$event","clickStartTask","showStartDialog","startDialog","height","closeStartDialog","onRefreshClicked","processPresetsDefaultModel","ProcessInstanceListComponent","processService","paginationSize","optimizeProcessDetails","selectFirst","instance","StartProcessInstanceComponent","showSelectProcessDropdown","processFilterSelector","processDefinitions","selectedProcessDef","errorMessageId","maxProcessNameLength","processNameInput","processDefinitionInput","loadStartProcess","filteredProcesses","_filter","moveNodeFromCStoPS","filterValue_1","filteredProcess","option","includes","getSelectedProcess","selectedProcess","processSelected","resetSelectedProcessDefinition","resetErrorMessage","processDefinitionRepresentations","isProcessDefinitionsEmpty","currentProcessDefinition","setValue","getAlfrescoRepositoryName","alfrescoRepositoryName","ALFRESCO_REPOSITORY_NAME","this_1","formValues","startForm","cancelStartProcess","isProcessDefinitionEmpty","isStartFormMissingOrValid","validateForm","hasErrorMessage","onOutcomeClick","hasProcessName","displayFn","processName","displayDropdown","stopPropagation","inputAutocomplete","panelOpen","closePanel","openPanel","MatAutocompleteTrigger","ProcessFilterRequestRepresentation","ProcessListModule","AppsListComponent","layoutType","LAYOUT_GRID","appClick","appList","hasEmptyCustomContentTemplate","apps$","appsObserver","setDefaultLayoutType","app","emptyCustomContent","getDeployedApplications","filterApps","isDefaultApp","DEFAULT_TASKS_APP_THEME","DEFAULT_TASKS_APP_ICON","DEFAULT_TASKS_APP","getAppName","DEFAULT_TASKS_APP_NAME","selectApp","currentApp","apps","filteredApps","filtersAppId","LAYOUT_LIST","isList","isGrid","getTheme","getBackgroundIcon","SelectAppsDialogComponent","dialogRef","processApps","onStart","MatDialogRef","AppsListModule","TaskAttachmentListComponent","thumbnailService","ngZone","disabled","attachmentClick","hasCustomTemplate","attachments","loadAttachmentsByTaskId","emptyTemplate","hasCustomEmptyTemplate","run","createdBy","getMimeTypeIcon","getTaskRelatedContent","attachList","deleteAttachmentById","contentId","deleteRelatedContent","emitDocumentContent","openContent","isDisabled","NgZone","EmptyListComponent","ProcessAttachmentListComponent","loadAttachmentsByProcessInstanceId","getProcessRelatedContent","CreateProcessAttachmentComponent","onFileUpload","filesList","filesList_1","tslib_1.__values","filesList_1_1","createProcessRelatedContent","AttachmentComponent","createTaskRelatedContent","AttachmentModule","source","ProcessModule","forRoot","ngModule","TRANSLATION_PROVIDER","multi","ProcessModuleLazy","ɵ0$2"],"mappings":"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","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    ProcessFilterRequestRepresentation,\n    ProcessInstanceFilterRepresentation,\n    UserProcessInstanceFilterRepresentation\n} from '@alfresco/js-api';\n\nexport class FilterProcessRepresentationModel implements UserProcessInstanceFilterRepresentation {\n    appId: number;\n    filter: ProcessInstanceFilterRepresentation;\n    icon: string;\n    id: number;\n    index: number;\n    name: string;\n    recent: boolean;\n\n    constructor(obj: any) {\n        if (obj) {\n            this.id = obj.id || null;\n            this.appId = obj.appId || null;\n            this.name = obj.name || null;\n            this.recent = !!obj.recent;\n            this.icon = obj.icon || null;\n            this.filter = obj.filter || null;\n            this.index = obj.index;\n        }\n    }\n\n    hasFilter() {\n        return !!this.filter;\n    }\n}\n\n/**\n * This object represent the parameters of a process filter.\n */\nexport class ProcessFilterParamRepresentationModel implements ProcessFilterRequestRepresentation {\n\n    processDefinitionId?: string;\n    processInstanceId?: string;\n    appDefinitionId?: number;\n    state?: any;\n    sort?: any;\n    page?: number;\n    size?: number;\n\n    constructor(obj?: any) {\n        this.processDefinitionId = obj.processDefinitionId || null;\n        this.appDefinitionId = obj.appDefinitionId || null;\n        this.processInstanceId = obj.processInstanceId || null;\n        this.state = obj.state || null;\n        this.sort = obj.sort || null;\n        this.page = obj.page || null;\n        this.size = obj.size || null;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable, from, forkJoin, throwError } from 'rxjs';\nimport { FilterProcessRepresentationModel } from '../models/filter-process.model';\nimport { map, catchError } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProcessFilterService {\n\n    constructor(private alfrescoApiService: AlfrescoApiService) {\n    }\n\n    /**\n     * Gets all filters defined for a Process App.\n     * @param appId ID of the target app\n     * @returns Array of filter details\n     */\n    getProcessFilters(appId: number): Observable<FilterProcessRepresentationModel[]> {\n        return from(this.callApiProcessFilters(appId))\n            .pipe(\n                map((response: any) => {\n                    let filters: FilterProcessRepresentationModel[] = [];\n                    response.data.forEach((filter: FilterProcessRepresentationModel) => {\n                        let filterModel = new FilterProcessRepresentationModel(filter);\n                        filters.push(filterModel);\n                    });\n                    return filters;\n                }),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Retrieves the process filter by ID.\n     * @param filterId ID of the filter\n     * @param appId ID of the target app\n     * @returns Details of the filter\n     */\n    getProcessFilterById(filterId: number, appId?: number): Observable<FilterProcessRepresentationModel> {\n        return from(this.callApiProcessFilters(appId))\n            .pipe(\n                map((response: any) => {\n                    return response.data.find((filter) => filter.id === filterId);\n                }),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Retrieves the process filter by name.\n     * @param filterName Name of the filter\n     * @param appId ID of the target app\n     * @returns Details of the filter\n     */\n    getProcessFilterByName(filterName: string, appId?: number): Observable<FilterProcessRepresentationModel> {\n        return from(this.callApiProcessFilters(appId))\n            .pipe(\n                map((response: any) => {\n                    return response.data.find((filter) => filter.name === filterName);\n                }),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Creates and returns the default filters for an app.\n     * @param appId ID of the target app\n     * @returns Default filters just created\n     */\n    public createDefaultFilters(appId: number): Observable<FilterProcessRepresentationModel[]> {\n        let runningFilter = this.getRunningFilterInstance(appId);\n        let runningObservable = this.addProcessFilter(runningFilter);\n\n        let completedFilter = this.getCompletedFilterInstance(appId);\n        let completedObservable = this.addProcessFilter(completedFilter);\n\n        let allFilter = this.getAllFilterInstance(appId);\n        let allObservable = this.addProcessFilter(allFilter);\n\n        return new Observable((observer) => {\n            forkJoin(\n                runningObservable,\n                completedObservable,\n                allObservable\n            ).subscribe(\n                (res) => {\n                    let filters: FilterProcessRepresentationModel[] = [];\n                    res.forEach((filter) => {\n                        if (filter.name === runningFilter.name) {\n                            runningFilter.id = filter.id;\n                            filters.push(runningFilter);\n                        } else if (filter.name === completedFilter.name) {\n                            completedFilter.id = filter.id;\n                            filters.push(completedFilter);\n                        } else if (filter.name === allFilter.name) {\n                            allFilter.id = filter.id;\n                            filters.push(allFilter);\n                        }\n                    });\n                    observer.next(filters);\n                    observer.complete();\n                },\n                (err: any) => {\n                    this.handleProcessError(err);\n                });\n        });\n    }\n\n    /**\n     * Creates and returns a filter that matches \"running\" process instances.\n     * @param appId ID of the target app\n     * @returns Filter just created\n     */\n    public getRunningFilterInstance(appId: number): FilterProcessRepresentationModel {\n        return new FilterProcessRepresentationModel({\n            'name': 'Running',\n            'appId': appId,\n            'recent': true,\n            'icon': 'glyphicon-random',\n            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'running' }\n        });\n    }\n\n    /**\n     * Returns a static Completed filter instance.\n     * @param appId ID of the target app\n     * @returns Details of the filter\n     */\n    private getCompletedFilterInstance(appId: number): FilterProcessRepresentationModel {\n        return new FilterProcessRepresentationModel({\n            'name': 'Completed',\n            'appId': appId,\n            'recent': false,\n            'icon': 'glyphicon-ok-sign',\n            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed' }\n        });\n    }\n\n    /**\n     * Returns a static All filter instance.\n     * @param appId ID of the target app\n     * @returns Details of the filter\n     */\n    private getAllFilterInstance(appId: number): FilterProcessRepresentationModel {\n        return new FilterProcessRepresentationModel({\n            'name': 'All',\n            'appId': appId,\n            'recent': true,\n            'icon': 'glyphicon-th',\n            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'all' }\n        });\n    }\n\n    /**\n     * Adds a filter.\n     * @param filter The filter to add\n     * @returns The filter just added\n     */\n    addProcessFilter(filter: FilterProcessRepresentationModel): Observable<FilterProcessRepresentationModel> {\n        return from(this.alfrescoApiService.getInstance().activiti.userFiltersApi.createUserProcessInstanceFilter(filter))\n            .pipe(\n                map((response: FilterProcessRepresentationModel) => {\n                    return response;\n                }),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Calls `getUserProcessInstanceFilters` from the Alfresco JS API.\n     * @param appId ID of the target app\n     * @returns List of filter details\n     */\n    callApiProcessFilters(appId?: number) {\n        if (appId) {\n            return this.alfrescoApiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters({ appId: appId });\n        } else {\n            return this.alfrescoApiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters();\n        }\n    }\n\n    private handleProcessError(error: any) {\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* spellchecker: disable */\nexport class IconModel {\n    public static DEFAULT_TASKS_APP_MATERIAL_ICON: string = 'favorite_border';\n\n    private iconsMDL: Map<string, string>;\n\n    constructor() {\n        this.initIconsMDL();\n    }\n\n    mapGlyphiconToMaterialDesignIcons(icon: string) {\n        return this.iconsMDL.get(icon) ? this.iconsMDL.get(icon) : IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON;\n    }\n\n    /**\n     * Map all the bootstrap glyphicon icons with Material design material icon\n     */\n    initIconsMDL() {\n        this.iconsMDL = new Map<string, string>();\n\n        this.iconsMDL.set('glyphicon-asterisk', 'ac_unit');\n        this.iconsMDL.set('glyphicon-plus', 'add');\n        this.iconsMDL.set('glyphicon-euro', 'euro_symbol');\n        this.iconsMDL.set('glyphicon-cloud', 'cloud');\n        this.iconsMDL.set('glyphicon-envelope', 'mail');\n        this.iconsMDL.set('glyphicon-pencil', 'create');\n        this.iconsMDL.set('glyphicon-glass', 'local_bar');\n        this.iconsMDL.set('glyphicon-music', 'music_note');\n        this.iconsMDL.set('glyphicon-search', 'search');\n        this.iconsMDL.set('glyphicon-heart', 'favorite');\n        this.iconsMDL.set('glyphicon-heart-empty', 'favorite_border');\n        this.iconsMDL.set('glyphicon-star', 'star');\n        this.iconsMDL.set('glyphicon-star-empty', 'star_border');\n        this.iconsMDL.set('glyphicon-user', 'person');\n        this.iconsMDL.set('glyphicon-film', 'movie_creation');\n        this.iconsMDL.set('glyphicon-th-large', 'view_comfy');\n        this.iconsMDL.set('glyphicon-th', 'dashboard');\n        this.iconsMDL.set('glyphicon-th-list', 'list');\n        this.iconsMDL.set('glyphicon-ok', 'done');\n        this.iconsMDL.set('glyphicon-remove', 'cancel');\n        this.iconsMDL.set('glyphicon-zoom-in', 'zoom_in');\n        this.iconsMDL.set('glyphicon-zoom-out', 'zoom_out');\n        this.iconsMDL.set('glyphicon-off', 'highlight_off');\n        this.iconsMDL.set('glyphicon-signal', 'signal_cellular_4_bar');\n        this.iconsMDL.set('glyphicon-cog', 'settings');\n        this.iconsMDL.set('glyphicon-trash', 'delete');\n        this.iconsMDL.set('glyphicon-home', 'home');\n        this.iconsMDL.set('glyphicon-file', 'insert_drive_file');\n        this.iconsMDL.set('glyphicon-time', 'access_time');\n        this.iconsMDL.set('glyphicon-road', 'map');\n        this.iconsMDL.set('glyphicon-download-alt', 'file_download');\n        this.iconsMDL.set('glyphicon-download', 'file_download');\n        this.iconsMDL.set('glyphicon-upload', 'file_upload');\n        this.iconsMDL.set('glyphicon-inbox', 'inbox');\n        this.iconsMDL.set('glyphicon-play-circle', 'play_circle_outline');\n        this.iconsMDL.set('glyphicon-repeat', 'refresh');\n        this.iconsMDL.set('glyphicon-refresh', 'sync');\n        this.iconsMDL.set('glyphicon-list-alt', 'event_note');\n        this.iconsMDL.set('glyphicon-lock', 'lock_outline');\n        this.iconsMDL.set('glyphicon-flag', 'assistant_photo');\n        this.iconsMDL.set('glyphicon-headphones', 'headset');\n        this.iconsMDL.set('glyphicon-volume-up', 'volume_up');\n        this.iconsMDL.set('glyphicon-tag', 'local_offer');\n        this.iconsMDL.set('glyphicon-tags', 'local_offer');\n        this.iconsMDL.set('glyphicon-book', 'library_books');\n        this.iconsMDL.set('glyphicon-bookmark', 'collections_bookmark');\n        this.iconsMDL.set('glyphicon-print', 'local_printshop');\n        this.iconsMDL.set('glyphicon-camera', 'local_see');\n        this.iconsMDL.set('glyphicon-list', 'view_list');\n        this.iconsMDL.set('glyphicon-facetime-video', 'video_call');\n        this.iconsMDL.set('glyphicon-picture', 'photo');\n        this.iconsMDL.set('glyphicon-map-marker', 'add_location');\n        this.iconsMDL.set('glyphicon-adjust', 'brightness_4');\n        this.iconsMDL.set('glyphicon-tint', 'invert_colors');\n        this.iconsMDL.set('glyphicon-edit', 'edit');\n        this.iconsMDL.set('glyphicon-share', 'share');\n        this.iconsMDL.set('glyphicon-check', 'assignment_turned_in');\n        this.iconsMDL.set('glyphicon-move', 'open_with');\n        this.iconsMDL.set('glyphicon-play', 'play_arrow');\n        this.iconsMDL.set('glyphicon-eject', 'eject');\n        this.iconsMDL.set('glyphicon-plus-sign', 'add_circle');\n        this.iconsMDL.set('glyphicon-minus-sign', 'remove_circle');\n        this.iconsMDL.set('glyphicon-remove-sign', 'cancel');\n        this.iconsMDL.set('glyphicon-ok-sign', 'check_circle');\n        this.iconsMDL.set('glyphicon-question-sign', 'help');\n        this.iconsMDL.set('glyphicon-info-sign', 'info');\n        this.iconsMDL.set('glyphicon-screenshot', 'flare');\n        this.iconsMDL.set('glyphicon-remove-circle', 'cancel');\n        this.iconsMDL.set('glyphicon-ok-circle', 'add_circle');\n        this.iconsMDL.set('glyphicon-ban-circle', 'block');\n        this.iconsMDL.set('glyphicon-share-alt', 'redo');\n        this.iconsMDL.set('glyphicon-exclamation-sign', 'error');\n        this.iconsMDL.set('glyphicon-gift', 'giftcard');\n        this.iconsMDL.set('glyphicon-leaf', 'spa');\n        this.iconsMDL.set('glyphicon-fire', 'whatshot');\n        this.iconsMDL.set('glyphicon-eye-open', 'remove_red_eye');\n        this.iconsMDL.set('glyphicon-eye-close', 'remove_red_eye');\n        this.iconsMDL.set('glyphicon-warning-sign', 'warning');\n        this.iconsMDL.set('glyphicon-plane', 'airplanemode_active');\n        this.iconsMDL.set('glyphicon-calendar', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-random', 'shuffle');\n        this.iconsMDL.set('glyphicon-comment', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-magnet', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-retweet', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-shopping-cart', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-folder-close', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-folder-open', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-hdd', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-bullhorn', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-bell', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-certificate', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-thumbs-up', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-thumbs-down', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-hand-left', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-globe', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-wrench', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-tasks', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-filter', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-briefcase', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-dashboard', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-paperclip', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-link', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-phone', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-pushpin', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-usd', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-gbp', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-sort', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-flash', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-record', 'radio_button_checked');\n        this.iconsMDL.set('glyphicon-save', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-open', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-saved', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-send', 'send');\n        this.iconsMDL.set('glyphicon-floppy-disk', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-credit-card', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-cutlery', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-earphone', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-phone-alt', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-tower', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-stats', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-cloud-download', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-cloud-upload', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-tree-conifer', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-tree-deciduous', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-align-left', 'format_align_left');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppsProcessService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { ProcessInstanceFilterRepresentation, UserProcessInstanceFilterRepresentation } from '@alfresco/js-api';\nimport { Observable } from 'rxjs';\nimport { FilterProcessRepresentationModel } from '../models/filter-process.model';\nimport { ProcessFilterService } from './../services/process-filter.service';\nimport { IconModel } from '../../app-list/icon.model';\n\n@Component({\n    selector: 'adf-process-instance-filters',\n    templateUrl: './process-filters.component.html',\n    styleUrls: ['process-filters.component.scss']\n})\nexport class ProcessFiltersComponent implements OnInit, OnChanges {\n\n    /** The parameters to filter the task filter. If there is no match then the default one\n     * (ie, the first filter in the list) is selected.\n     */\n    @Input()\n    filterParam: FilterProcessRepresentationModel;\n\n    /** Emitted when the user selects a filter from the list. */\n    @Output()\n    filterClick: EventEmitter<UserProcessInstanceFilterRepresentation> = new EventEmitter<UserProcessInstanceFilterRepresentation>();\n\n    /** Emitted when the list of filters has been successfully loaded from the server. */\n    @Output()\n    success: EventEmitter<ProcessInstanceFilterRepresentation[]> = new EventEmitter<ProcessInstanceFilterRepresentation[]>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Display filters available to the current user for the application with the specified ID. */\n    @Input()\n    appId: number;\n\n    /** Display filters available to the current user for the application with the specified name. */\n    @Input()\n    appName: string;\n\n    /** Toggle to show or hide the filter's icon. */\n    @Input()\n    showIcon: boolean = true;\n\n    /** Emitted when a process filter is selected. */\n    @Output()\n    filterSelected: EventEmitter<ProcessInstanceFilterRepresentation> = new EventEmitter<ProcessInstanceFilterRepresentation>();\n\n    filter$: Observable<ProcessInstanceFilterRepresentation>;\n\n    currentFilter: ProcessInstanceFilterRepresentation;\n\n    filters: UserProcessInstanceFilterRepresentation [] = [];\n\n    private iconsMDL: IconModel;\n\n    constructor(private processFilterService: ProcessFilterService,\n                private appsProcessService: AppsProcessService) {\n    }\n\n    ngOnInit() {\n        this.iconsMDL = new IconModel();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const appId = changes['appId'];\n        const appName = changes['appName'];\n        const filter = changes['filterParam'];\n\n        if (appId && (appId.currentValue || appId.currentValue === null)) {\n            this.getFiltersByAppId(appId.currentValue);\n        } else if (appName && appName.currentValue) {\n            this.getFiltersByAppName(appName.currentValue);\n        } else if (filter && filter.currentValue !== filter.previousValue) {\n            this.selectProcessFilter(filter.currentValue);\n        }\n    }\n\n    /**\n     * Return the filter list filtered by appId\n     * @param appId - optional\n     */\n    getFiltersByAppId(appId?: number) {\n        this.processFilterService.getProcessFilters(appId).subscribe(\n            (res: ProcessInstanceFilterRepresentation[]) => {\n                if (res.length === 0 && this.isFilterListEmpty()) {\n                    this.processFilterService.createDefaultFilters(appId).subscribe(\n                        (resDefault: ProcessInstanceFilterRepresentation[]) => {\n                            this.resetFilter();\n                            this.filters = resDefault;\n                            this.selectProcessFilter(this.filterParam);\n                            this.success.emit(resDefault);\n                        },\n                        (errDefault: any) => {\n                            this.error.emit(errDefault);\n                        }\n                    );\n                } else {\n                    this.resetFilter();\n                    this.filters = res;\n                    this.selectProcessFilter(this.filterParam);\n                    this.success.emit(res);\n                }\n            },\n            (err: any) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    /**\n     * Return the filter list filtered by appName\n     * @param appName\n     */\n    getFiltersByAppName(appName: string) {\n        this.appsProcessService.getDeployedApplicationsByName(appName).subscribe(\n            (application) => {\n                this.getFiltersByAppId(application.id);\n                this.selectProcessFilter(this.filterParam);\n            },\n            (err) => {\n                this.error.emit(err);\n            });\n    }\n\n    /**\n     * Pass the selected filter as next\n     * @param filter\n     */\n    public selectFilter(filter: ProcessInstanceFilterRepresentation) {\n        this.currentFilter = filter;\n        this.filterClick.emit(filter);\n    }\n\n    /**\n     * Select the first filter of a list if present\n     */\n    public selectProcessFilter(filterParam: FilterProcessRepresentationModel) {\n        if (filterParam) {\n            this.filters.filter((processFilter: UserProcessInstanceFilterRepresentation, index) => {\n                if (filterParam.name && filterParam.name.toLowerCase() === processFilter.name.toLowerCase() ||\n                    filterParam.id === processFilter.id ||\n                    filterParam.index === index) {\n                    this.currentFilter = processFilter;\n                    this.filterSelected.emit(processFilter);\n                }\n            });\n        }\n        if (this.isCurrentFilterEmpty()) {\n            this.selectDefaultTaskFilter();\n        }\n    }\n\n    /**\n     * Select the Running filter\n     */\n    public selectRunningFilter() {\n        this.selectProcessFilter(this.processFilterService.getRunningFilterInstance(null));\n    }\n\n    /**\n     * Select as default task filter the first in the list\n     */\n    public selectDefaultTaskFilter() {\n        if (!this.isFilterListEmpty()) {\n            this.currentFilter = this.filters[0];\n            this.filterSelected.emit(this.filters[0]);\n        }\n    }\n\n    /**\n     * Return the current task\n     */\n    getCurrentFilter(): ProcessInstanceFilterRepresentation {\n        return this.currentFilter;\n    }\n\n    /**\n     * Check if the filter list is empty\n     */\n    isFilterListEmpty(): boolean {\n        return this.filters === undefined || (this.filters && this.filters.length === 0);\n    }\n\n    /**\n     * Reset the filters properties\n     */\n    private resetFilter() {\n        this.filters = [];\n        this.currentFilter = undefined;\n    }\n\n    private isCurrentFilterEmpty(): boolean {\n        return this.currentFilter === undefined || null;\n    }\n\n    /**\n     * Return current filter icon\n     */\n    getFilterIcon(icon): string {\n        return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(icon);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ProcessDefinitionRepresentation {\n    id: string;\n    name: string;\n    description: string;\n    key: string;\n    category: string;\n    version: number;\n    deploymentId: string;\n    tenantId: string;\n    metaDataValues: any[];\n    hasStartForm: boolean;\n\n    constructor(obj?: any) {\n        this.id = obj && obj.id || null;\n        this.name = obj && obj.name || null;\n        this.description = obj && obj.description || null;\n        this.key = obj && obj.key || null;\n        this.category = obj && obj.category || null;\n        this.version = obj && obj.version || 0;\n        this.deploymentId = obj && obj.deploymentId || null;\n        this.tenantId = obj && obj.tenantId || null;\n        this.metaDataValues = obj && obj.metaDataValues || [];\n        this.hasStartForm = obj && obj.hasStartForm === true ? true : false;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RestVariable } from '@alfresco/js-api';\n\nexport class ProcessInstanceVariable implements RestVariable {\n\n    name?: string;\n    scope?: string;\n    type?: string;\n    value?: string;\n    valueUrl?: string;\n\n    constructor(obj?: any) {\n        this.name = obj && obj.name !== undefined ? obj.name : null;\n        this.scope = obj && obj.scope !== undefined ? obj.scope : null;\n        this.value = obj && obj.value !== undefined ? obj.value : null;\n        this.valueUrl = obj && obj.valueUrl !== undefined ? obj.valueUrl : null;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LightUserRepresentation, ProcessInstanceRepresentation, RestVariable } from '@alfresco/js-api';\n\nexport class ProcessInstance implements ProcessInstanceRepresentation {\n\n    businessKey?: string;\n    ended?: Date;\n    graphicalNotationDefined?: boolean;\n    id?: string;\n    name?: string;\n    processDefinitionCategory?: string;\n    processDefinitionDeploymentId?: string;\n    processDefinitionDescription?: string;\n    processDefinitionId?: string;\n    processDefinitionKey?: string;\n    processDefinitionName?: string;\n    processDefinitionVersion?: number;\n    startFormDefined?: boolean;\n    started?: Date;\n    startedBy?: LightUserRepresentation;\n    tenantId?: string;\n    variables?: RestVariable[];\n\n    constructor(data?: any) {\n        this.businessKey = data && data.businessKey !== undefined ? data.businessKey : null;\n        this.ended = data && data.ended !== undefined ? data.ended : null;\n        this.graphicalNotationDefined = data && data.graphicalNotationDefined !== undefined ? data.graphicalNotationDefined : null;\n        this.id = data && data.id !== undefined ? data.id : null;\n        this.name = data && data.name !== undefined ? data.name : null;\n        this.processDefinitionCategory = data && data.processDefinitionCategory !== undefined ? data.processDefinitionCategory : null;\n        this.processDefinitionDeploymentId = data && data.processDefinitionDeploymentId !== undefined ? data.processDefinitionDeploymentId : null;\n        this.processDefinitionDescription = data && data.processDefinitionDescription !== undefined ? data.processDefinitionDescription : null;\n        this.processDefinitionId = data && data.processDefinitionId !== undefined ? data.processDefinitionId : null;\n        this.processDefinitionKey = data && data.processDefinitionKey !== undefined ? data.processDefinitionKey : null;\n        this.processDefinitionName = data && data.processDefinitionName !== undefined ? data.processDefinitionName : null;\n        this.processDefinitionVersion = data && data.processDefinitionVersion !== undefined ? data.processDefinitionVersion : null;\n        this.startFormDefined = data && data.startFormDefined !== undefined ? data.startFormDefined : null;\n        this.started = data && data.started !== undefined ? data.started : null;\n        this.startedBy = data && data.startedBy !== undefined ? data.startedBy : null;\n        this.tenantId = data && data.tenantId !== undefined ? data.tenantId : null;\n        this.variables = data && data.variables !== undefined ? data.variables : null;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ProcessInstance } from './process-instance.model';\n\nexport class ProcessListModel {\n    size: number;\n    total: number;\n    start: number;\n    length: number;\n    data: ProcessInstance [];\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.size = obj.size || null;\n            this.total = obj.total || null;\n            this.start = obj.start || null;\n            this.length = obj.length || null;\n            this.data = obj.data || [];\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, FormValues } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { RestVariable } from '@alfresco/js-api';\nimport { Observable, from, throwError, of } from 'rxjs';\nimport { TaskDetailsModel } from '../../task-list';\nimport { ProcessFilterParamRepresentationModel } from '../models/filter-process.model';\nimport { ProcessDefinitionRepresentation } from '../models/process-definition.model';\nimport { ProcessInstanceVariable } from '../models/process-instance-variable.model';\nimport { ProcessInstance } from '../models/process-instance.model';\nimport { ProcessListModel } from '../models/process-list.model';\nimport { map, catchError } from 'rxjs/operators';\n\ndeclare let moment: any;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProcessService {\n\n    constructor(private alfrescoApiService: AlfrescoApiService) {\n    }\n\n    /**\n     * Gets process instances for a filter and optionally a process definition.\n     * @param requestNode Filter for instances\n     * @param processDefinitionKey Limits returned instances to a process definition\n     * @returns List of process instances\n     */\n    getProcessInstances(requestNode: ProcessFilterParamRepresentationModel, processDefinitionKey?: string): Observable<ProcessListModel> {\n        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstances(requestNode))\n            .pipe(\n                map((res: any) => {\n                    if (processDefinitionKey) {\n                        const filtered = res.data.filter((process) => process.processDefinitionKey === processDefinitionKey);\n                        res.data = filtered;\n                        return res;\n                    } else {\n                        return res;\n                    }\n                }),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Gets processes for a filter and optionally a process definition.\n     * @param requestNode Filter for instances\n     * @param processDefinitionKey Limits returned instances to a process definition\n     * @returns List of processes\n     */\n    getProcesses(requestNode: ProcessFilterParamRepresentationModel, processDefinitionKey?: string): Observable<ProcessListModel> {\n        return this.getProcessInstances(requestNode, processDefinitionKey)\n            .pipe(catchError(() => {\n                return of(new ProcessListModel({}));\n            }));\n    }\n\n    /**\n     * Fetches the Process Audit information as a PDF.\n     * @param processId ID of the target process\n     * @returns Binary PDF data\n     */\n    fetchProcessAuditPdfById(processId: string): Observable<Blob> {\n        return from<Blob>(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditPdf(processId))\n            .pipe(\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Fetches the Process Audit information in a JSON format.\n     * @param processId ID of the target process\n     * @returns JSON data\n     */\n    fetchProcessAuditJsonById(processId: string): Observable<any> {\n        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditJson(processId))\n            .pipe(\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Gets Process Instance metadata.\n     * @param processInstanceId ID of the target process\n     * @returns Metadata for the instance\n     */\n    getProcess(processInstanceId: string): Observable<ProcessInstance> {\n        return from(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstance(processInstanceId))\n            .pipe(\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Gets task instances for a process instance.\n     * @param processInstanceId ID of the process instance\n     * @param state Task state filter (can be \"active\" or \"completed\")\n     * @returns Array of task instance details\n     */\n    getProcessTasks(processInstanceId: string, state?: string): Observable<TaskDetailsModel[]> {\n        let taskOpts = state ? {\n            processInstanceId: processInstanceId,\n            state: state\n        } : {\n                processInstanceId: processInstanceId\n            };\n        return from(this.alfrescoApiService.getInstance().activiti.taskApi.listTasks(taskOpts))\n            .pipe(\n                map(this.extractData),\n                map((tasks) => tasks.map((task: any) => {\n                    task.created = moment(task.created, 'YYYY-MM-DD').format();\n                    return task;\n                })),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Gets process definitions associated with an app.\n     * @param appId ID of a target app\n     * @returns Array of process definitions\n     */\n    getProcessDefinitions(appId?: number): Observable<ProcessDefinitionRepresentation[]> {\n        let opts = appId ? {\n            latest: true,\n            appDefinitionId: appId\n        } : {\n                latest: true\n            };\n        return from(\n            this.alfrescoApiService.getInstance().activiti.processApi.getProcessDefinitions(opts)\n        )\n            .pipe(\n                map(this.extractData),\n                map((processDefs) => processDefs.map((pd) => new ProcessDefinitionRepresentation(pd))),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Starts a process based on a process definition, name, form values or variables.\n     * @param processDefinitionId Process definition ID\n     * @param name Process name\n     * @param outcome Process outcome\n     * @param startFormValues Values for the start form\n     * @param variables Array of process instance variables\n     * @returns Details of the process instance just started\n     */\n    startProcess(processDefinitionId: string, name: string, outcome?: string, startFormValues?: FormValues, variables?: ProcessInstanceVariable[]): Observable<ProcessInstance> {\n        let startRequest: any = {\n            name: name,\n            processDefinitionId: processDefinitionId\n        };\n        if (outcome) {\n            startRequest.outcome = outcome;\n        }\n        if (startFormValues) {\n            startRequest.values = startFormValues;\n        }\n        if (variables) {\n            startRequest.variables = variables;\n        }\n        return from(\n            this.alfrescoApiService.getInstance().activiti.processApi.startNewProcessInstance(startRequest)\n        )\n            .pipe(\n                map((pd) => new ProcessInstance(pd)),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Cancels a process instance.\n     * @param processInstanceId ID of process to cancel\n     * @returns Null response notifying when the operation is complete\n     */\n    cancelProcess(processInstanceId: string): Observable<void> {\n        return from<void>(\n            this.alfrescoApiService.getInstance().activiti.processApi.deleteProcessInstance(processInstanceId)\n        )\n            .pipe(\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Gets the variables for a process instance.\n     * @param processInstanceId ID of the target process\n     * @returns Array of instance variable info\n     */\n    getProcessInstanceVariables(processInstanceId: string): Observable<ProcessInstanceVariable[]> {\n        return from(\n            this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.getProcessInstanceVariables(processInstanceId)\n        )\n            .pipe(\n                map((processVars: any[]) => processVars.map((currentProcessVar) => new ProcessInstanceVariable(currentProcessVar))),\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Creates or updates variables for a process instance.\n     * @param processInstanceId ID of the target process\n     * @param variables Variables to update\n     * @returns Array of instance variable info\n     */\n    createOrUpdateProcessInstanceVariables(processInstanceId: string, variables: RestVariable[]): Observable<ProcessInstanceVariable[]> {\n        return from(\n            this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.createOrUpdateProcessInstanceVariables(processInstanceId, variables)\n        ).pipe(\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    /**\n     * Deletes a variable for a process instance.\n     * @param processInstanceId ID of the target process\n     * @param variableName Name of the variable to delete\n     * @returns Null response notifying when the operation is complete\n     */\n    deleteProcessInstanceVariable(processInstanceId: string, variableName: string): Observable<void> {\n        return from<void>(\n            this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.deleteProcessInstanceVariable(processInstanceId, variableName)\n        )\n            .pipe(\n                catchError((err) => this.handleProcessError(err))\n            );\n    }\n\n    private extractData(res: any) {\n        return res.data || {};\n    }\n\n    private handleProcessError(error: any) {\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogService } from '@alfresco/adf-core';\nimport { DatePipe } from '@angular/common';\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { TaskDetailsEvent } from '../../task-list';\n\nimport { ProcessInstance } from '../models/process-instance.model';\nimport { ProcessService } from './../services/process.service';\nimport { ProcessInstanceHeaderComponent } from './process-instance-header.component';\nimport { ProcessInstanceTasksComponent } from './process-instance-tasks.component';\n\n@Component({\n    selector: 'adf-process-instance-details',\n    templateUrl: './process-instance-details.component.html',\n    styleUrls: ['./process-instance-details.component.css']\n})\nexport class ProcessInstanceDetailsComponent implements OnChanges {\n\n    /** (required) The numeric ID of the process instance to display. */\n    @Input()\n    processInstanceId: string;\n\n    @ViewChild('processInstanceHeader')\n    processInstanceHeader: ProcessInstanceHeaderComponent;\n\n    @ViewChild('processInstanceTasks')\n    tasksList: ProcessInstanceTasksComponent;\n\n    /** Toggles whether to show or hide the title. */\n    @Input()\n    showTitle: boolean = true;\n\n    /** Toggles whether to show or hide the refresh button. */\n    @Input()\n    showRefreshButton: boolean = true;\n\n    /** Emitted when the current process is cancelled by the user from within the component. */\n    @Output()\n    processCancelled: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when a task is clicked. */\n    @Output()\n    taskClick: EventEmitter<TaskDetailsEvent> = new EventEmitter<TaskDetailsEvent>();\n\n    processInstanceDetails: ProcessInstance;\n\n    /** Emitted when the \"show diagram\" button is clicked. */\n    @Output()\n    showProcessDiagram: EventEmitter<any> = new EventEmitter<any>();\n\n    /**\n     * Constructor\n     * @param translate Translation service\n     * @param activitiProcess   Process service\n     */\n    constructor(private activitiProcess: ProcessService,\n                private logService: LogService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let processInstanceId = changes['processInstanceId'];\n        if (processInstanceId && !processInstanceId.currentValue) {\n            this.reset();\n            return;\n        }\n        if (processInstanceId && processInstanceId.currentValue) {\n            this.load(processInstanceId.currentValue);\n            return;\n        }\n    }\n\n    /**\n     * Reset the task detail\n     */\n    reset() {\n        this.processInstanceDetails = null;\n    }\n\n    load(processId: string) {\n        if (processId) {\n            this.activitiProcess.getProcess(processId).subscribe(\n                (res: ProcessInstance) => {\n                    this.processInstanceDetails = res;\n                }\n            );\n        }\n    }\n\n    isRunning(): boolean {\n        return this.processInstanceDetails && !this.processInstanceDetails.ended;\n    }\n\n    cancelProcess() {\n        this.activitiProcess.cancelProcess(this.processInstanceId).subscribe(\n            (data) => {\n                this.processCancelled.emit(data);\n            }, (err) => {\n                this.error.emit(err);\n            });\n    }\n\n    // bubbles (taskClick) event\n    onTaskClicked(event: TaskDetailsEvent) {\n        this.taskClick.emit(event);\n    }\n\n    getProcessNameOrDescription(dateFormat): string {\n        let name = '';\n        if (this.processInstanceDetails) {\n            name = this.processInstanceDetails.name ||\n                this.processInstanceDetails.processDefinitionName + ' - ' + this.getFormatDate(this.processInstanceDetails.started, dateFormat);\n        }\n        return name;\n    }\n\n    getFormatDate(value, format: string) {\n        let datePipe = new DatePipe('en-US');\n        try {\n            return datePipe.transform(value, format);\n        } catch (err) {\n            this.logService.error(`ProcessListInstanceHeader: error parsing date ${value} to format ${format}`);\n        }\n    }\n\n    onShowProcessDiagram(processInstanceId: any) {\n        this.showProcessDiagram.emit({value: this.processInstanceId});\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { ContentService } from '@alfresco/adf-core';\nimport { Directive, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ProcessService } from './../services/process.service';\n\nconst JSON_FORMAT: string = 'json';\nconst PDF_FORMAT: string = 'pdf';\n\n@Directive({\n    selector: 'button[adf-process-audit]',\n    host: {\n        'role': 'button',\n        '(click)': 'onClickAudit()'\n    }\n})\nexport class ProcessAuditDirective implements OnChanges {\n\n    /** ID of the process. */\n    @Input('process-id')\n    processId: string;\n\n    /** Name of the file to download (for PDF downloads). */\n    @Input()\n    fileName: string = 'Audit';\n\n    /** Format for the audit information (can be \"pdf\" or \"json\"). */\n    @Input()\n    format: string = 'pdf';\n\n    /** Enables downloading of the audit file on clicking. */\n    @Input()\n    download: boolean = true;\n\n    /** Emitted when the decorated element is clicked. */\n    @Output()\n    clicked: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    public audit: any;\n\n    /**\n     *\n     * @param translateService\n     * @param processListService\n     */\n    constructor(private contentService: ContentService,\n                private processListService: ProcessService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!this.isValidType()) {\n            this.setDefaultFormatType();\n        }\n    }\n\n    isValidType() {\n        if (this.format && (this.isJsonFormat() || this.isPdfFormat())) {\n            return true;\n        }\n        return false;\n    }\n\n    setDefaultFormatType(): void {\n        this.format = PDF_FORMAT;\n    }\n\n    /**\n     * fetch the audit information in the requested format\n     */\n    fetchAuditInfo(): void {\n        if (this.isPdfFormat()) {\n            this.processListService.fetchProcessAuditPdfById(this.processId).subscribe(\n                (blob: Blob) => {\n                    this.audit = blob;\n                    if (this.download) {\n                        this.contentService.downloadBlob(this.audit, this.fileName + '.pdf');\n                    }\n                    this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        } else {\n            this.processListService.fetchProcessAuditJsonById(this.processId).subscribe(\n                (res) => {\n                    this.audit = res;\n                    this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n\n    onClickAudit() {\n        this.fetchAuditInfo();\n    }\n\n    isJsonFormat() {\n        return this.format === JSON_FORMAT;\n    }\n\n    isPdfFormat() {\n        return this.format === PDF_FORMAT;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfigService, CardViewDateItemModel, CardViewItem, CardViewBaseItemModel, CardViewTextItemModel, TranslationService } from '@alfresco/adf-core';\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { ProcessInstance } from '../models/process-instance.model';\n\n@Component({\n    selector: 'adf-process-instance-header',\n    templateUrl: './process-instance-header.component.html',\n    styleUrls: ['./process-instance-header.component.css']\n})\nexport class ProcessInstanceHeaderComponent implements OnChanges {\n\n    /** (**required**) Full details of the process instance to display information about. */\n    @Input()\n    processInstance: ProcessInstance;\n\n    properties: CardViewItem [];\n\n    constructor(private translationService: TranslationService,\n                private appConfig: AppConfigService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.refreshData();\n    }\n\n    refreshData(): void {\n        if (this.processInstance) {\n            const defaultProperties = this.initDefaultProperties();\n            const filteredProperties: string[] = this.appConfig.get('adf-process-instance-header.presets.properties');\n            this.properties = defaultProperties.filter((cardItem) => this.isValidSelection(filteredProperties, cardItem));\n        }\n    }\n\n    private initDefaultProperties(): any[] {\n        return [\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_PROCESS_LIST.PROPERTIES.STATUS',\n                    value: this.getProcessStatus(),\n                    key: 'status'\n                }),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_PROCESS_LIST.PROPERTIES.END_DATE',\n                    value: this.processInstance.ended,\n                    format: 'MMM DD YYYY',\n                    key: 'ended',\n                    default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.END_DATE_DEFAULT')\n                }),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_PROCESS_LIST.PROPERTIES.CATEGORY',\n                    value: this.processInstance.processDefinitionCategory,\n                    key: 'category',\n                    default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.CATEGORY_DEFAULT')\n                }),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_PROCESS_LIST.PROPERTIES.BUSINESS_KEY',\n                    value: this.processInstance.businessKey,\n                    key: 'businessKey',\n                    default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.BUSINESS_KEY_DEFAULT')\n                }),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_PROCESS_LIST.PROPERTIES.CREATED_BY',\n                    value: this.getStartedByFullName(),\n                    key: 'assignee',\n                    default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.CREATED_BY_DEFAULT')\n                }),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_PROCESS_LIST.PROPERTIES.CREATED',\n                    value: this.processInstance.started,\n                    format: 'MMM DD YYYY',\n                    key: 'created'\n                }),\n            new CardViewTextItemModel(\n                {label: 'ADF_PROCESS_LIST.PROPERTIES.ID',\n                value: this.processInstance.id,\n                key: 'id'\n            }),\n            new CardViewTextItemModel(\n                {label: 'ADF_PROCESS_LIST.PROPERTIES.DESCRIPTION',\n                value: this.processInstance.processDefinitionDescription,\n                key: 'description',\n                default: this.translationService.instant('ADF_PROCESS_LIST.PROPERTIES.DESCRIPTION_DEFAULT')\n            })\n        ];\n    }\n\n    private isValidSelection(filteredProperties: string[], cardItem: CardViewBaseItemModel): boolean {\n        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;\n    }\n\n    getProcessStatus(): string {\n        if (this.processInstance) {\n            return this.isRunning() ? 'Running' : 'Completed';\n        }\n    }\n\n    getStartedByFullName(): string {\n        let fullName = '';\n        if (this.processInstance && this.processInstance.startedBy) {\n            fullName += this.processInstance.startedBy.firstName || '';\n            fullName += fullName ? ' ' : '';\n            fullName += this.processInstance.startedBy.lastName || '';\n        }\n        return fullName;\n    }\n\n    isRunning(): boolean {\n        return this.processInstance && !this.processInstance.ended;\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskFilterRepresentation, UserTaskFilterRepresentation, TaskQueryRepresentation } from '@alfresco/js-api';\n\nexport class AppDefinitionRepresentationModel {\n    defaultAppId: string;\n    deploymentId: string;\n    name: string;\n    description: string;\n    theme: string;\n    icon: string;\n    id: number;\n    modelId: number;\n    tenantId: number;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.defaultAppId = obj.defaultAppId ? obj.defaultAppId : null;\n            this.deploymentId = obj.deploymentId ? obj.deploymentId : null;\n            this.name = obj.name ? obj.name : null;\n            this.description = obj.description ? obj.description : null;\n            this.theme = obj.theme ? obj.theme : null;\n            this.icon = obj.icon ? obj.icon : null;\n            this.id = obj.id ? obj.id : null;\n            this.modelId = obj.modelId ? obj.modelId : null;\n            this.tenantId = obj.tenantId ? obj.tenantId : null;\n        }\n    }\n}\n\nexport class FilterParamsModel {\n    id: number;\n    name: string;\n    index: number;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || null;\n            this.name = obj.name || null;\n            this.index = obj.index;\n        }\n    }\n}\n\nexport class FilterRepresentationModel implements UserTaskFilterRepresentation {\n    id: number;\n    appId: number;\n    name: string;\n    recent: boolean;\n    icon: string;\n    filter: TaskFilterRepresentation;\n    index: number;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || null;\n            this.appId = obj.appId || null;\n            this.name = obj.name || null;\n            this.recent = !!obj.recent;\n            this.icon = obj.icon || null;\n            this.filter = new UserTaskFilterRepresentation(obj.filter);\n            this.index = obj.index;\n        }\n    }\n\n    hasFilter() {\n        return this.filter ? true : false;\n    }\n}\n\nexport class TaskQueryRequestRepresentationModel extends TaskQueryRepresentation {\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport let taskPresetsDefaultModel = {\n    'default': [\n        {\n            'key': 'name',\n            'type': 'text',\n            'title': 'ADF_TASK_LIST.PROPERTIES.NAME',\n            'sortable': true\n        },\n        {\n            'key': 'created',\n            'type': 'text',\n            'title': 'ADF_TASK_LIST.PROPERTIES.CREATED',\n            'cssClass': 'hidden',\n            'sortable': true\n        },\n        {\n            'key': 'assignee',\n            'type': 'text',\n            'title': 'ADF_TASK_LIST.PROPERTIES.ASSIGNEE',\n            'cssClass': 'hidden',\n            'sortable': true\n        }\n    ]\n};\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This object represent of the Form.\n */\nexport class Form {\n\n    id: number;\n    name: string;\n\n    constructor(id: number, name: string) {\n        this.name = name;\n        this.id = id;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This object represent the details of a task.\n */\nimport { UserProcessModel } from '@alfresco/adf-core';\nimport { TaskRepresentation } from '@alfresco/js-api';\nimport { UserGroupModel } from './user-group.model';\n\nexport class TaskDetailsModel implements TaskRepresentation {\n    id?: string;\n    name?: string;\n    assignee?: UserProcessModel;\n    priority?: number;\n    adhocTaskCanBeReassigned?: boolean;\n    category?: string;\n    created?: Date;\n    description?: string;\n    parentName?: string;\n    dueDate?: Date;\n    duration?: number;\n    endDate?: Date;\n    executionId?: string;\n    formKey?: string;\n    initiatorCanCompleteTask?: boolean;\n    managerOfCandidateGroup?: boolean;\n    memberOfCandidateGroup?: boolean;\n    memberOfCandidateUsers?: boolean;\n    involvedGroups?: UserGroupModel [];\n    involvedPeople?: UserProcessModel [];\n    parentTaskId?: string;\n    parentTaskName?: string;\n    processDefinitionCategory?: string;\n    processDefinitionDeploymentId?: string;\n    processDefinitionDescription?: string;\n    processDefinitionId?: string;\n    processDefinitionKey?: string;\n    processDefinitionName?: string;\n    processDefinitionVersion?: number = 0;\n    processInstanceId?: string;\n    processInstanceName?: string;\n    processInstanceStartUserId?: string;\n    taskDefinitionKey?: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || null;\n            this.name = obj.name || null;\n            this.priority = obj.priority;\n            this.assignee = obj.assignee ? new UserProcessModel(obj.assignee) : null;\n            this.adhocTaskCanBeReassigned = obj.adhocTaskCanBeReassigned;\n            this.category = obj.category || null;\n            this.created = obj.created || null;\n            this.description = obj.description || null;\n            this.dueDate = obj.dueDate || null;\n            this.duration = obj.duration || null;\n            this.endDate = obj.endDate || null;\n            this.executionId = obj.executionId || null;\n            this.formKey = obj.formKey || null;\n            this.initiatorCanCompleteTask = !!obj.initiatorCanCompleteTask;\n            this.managerOfCandidateGroup = !!obj.managerOfCandidateGroup;\n            this.memberOfCandidateGroup = !!obj.memberOfCandidateGroup;\n            this.memberOfCandidateUsers = !!obj.memberOfCandidateUsers;\n            this.involvedGroups = obj.involvedGroups;\n            this.involvedPeople = obj.involvedPeople;\n            this.parentTaskId = obj.parentTaskId || null;\n            this.parentTaskName = obj.parentTaskName || null;\n            this.processDefinitionCategory = obj.processDefinitionCategory || null;\n            this.processDefinitionDeploymentId = obj.processDefinitionDeploymentId || null;\n            this.processDefinitionDescription = obj.processDefinitionDescription || null;\n            this.processDefinitionId = obj.processDefinitionId || null;\n            this.processDefinitionKey = obj.processDefinitionKey || null;\n            this.processDefinitionName = obj.processDefinitionName || null;\n            this.processDefinitionVersion = obj.processDefinitionVersion || 0;\n            this.processInstanceId = obj.processInstanceId || null;\n            this.processInstanceName = obj.processInstanceName || null;\n            this.processInstanceStartUserId = obj.processInstanceStartUserId || null;\n            this.taskDefinitionKey = obj.taskDefinitionKey || null;\n        }\n    }\n\n    getFullName(): string {\n        let fullName: string = '';\n\n        if (this.assignee) {\n            let firstName: string = this.assignee.firstName ? this.assignee.firstName : '';\n            let lastName: string = this.assignee.lastName ? this.assignee.lastName : '';\n            fullName = `${firstName} ${lastName}`;\n        }\n\n        return fullName.trim();\n    }\n\n    isCompleted(): boolean {\n        return !!this.endDate;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskDetailsModel } from './task-details.model';\n\nexport class TaskListModel  {\n    size?: number;\n    total?: number;\n    start?: number;\n    length?: number;\n    data?: TaskDetailsModel[] = [];\n\n    constructor(input?: any) {\n        if (input) {\n            Object.assign(this, input);\n            if (input.data) {\n                this.data = input.data.map((item: any) => {\n                    return new TaskDetailsModel(item);\n                });\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable, from, forkJoin, throwError, of } from 'rxjs';\nimport { map, catchError, switchMap, flatMap, filter } from 'rxjs/operators';\nimport { FilterRepresentationModel, TaskQueryRequestRepresentationModel } from '../models/filter.model';\nimport { Form } from '../models/form.model';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListModel } from '../models/task-list.model';\nimport {\n    TaskQueryRepresentation,\n    AssigneeIdentifierRepresentation\n} from '@alfresco/js-api';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskListService {\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Gets all the filters in the list that belong to a task.\n     * @param taskId ID of the target task\n     * @param filterList List of filters to search through\n     * @returns Filters belonging to the task\n     */\n    getFilterForTaskById(taskId: string, filterList: FilterRepresentationModel[]): Observable<FilterRepresentationModel> {\n        return from(filterList)\n            .pipe(\n                flatMap((data: FilterRepresentationModel) => this.isTaskRelatedToFilter(taskId, data)),\n                filter((data: FilterRepresentationModel) => data != null)\n            );\n    }\n\n    /**\n     * Gets the search query for a task based on the supplied filter.\n     * @param filter The filter to use\n     * @returns The search query\n     */\n    private generateTaskRequestNodeFromFilter(filterModel: FilterRepresentationModel): TaskQueryRequestRepresentationModel {\n        let requestNode = {\n            appDefinitionId: filterModel.appId,\n            assignment: filterModel.filter.assignment,\n            state: filterModel.filter.state,\n            sort: filterModel.filter.sort\n        };\n        return new TaskQueryRequestRepresentationModel(requestNode);\n    }\n\n    /**\n     * Checks if a taskId is filtered with the given filter.\n     * @param taskId ID of the target task\n     * @param filterModel The filter you want to check\n     * @returns The filter if it is related or null otherwise\n     */\n    isTaskRelatedToFilter(taskId: string, filterModel: FilterRepresentationModel): Observable<FilterRepresentationModel> {\n        let requestNodeForFilter = this.generateTaskRequestNodeFromFilter(filterModel);\n        return from(this.callApiTasksFiltered(requestNodeForFilter))\n            .pipe(\n                map((res: any) => {\n                    return res.data.find((element) => element.id === taskId) ? filterModel : null;\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Gets all the tasks matching the supplied query.\n     * @param requestNode Query to search for tasks\n     * @returns List of tasks\n     */\n    getTasks(requestNode: TaskQueryRequestRepresentationModel): Observable<TaskListModel> {\n        return from(this.callApiTasksFiltered(requestNode))\n            .pipe(\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Gets tasks matching a query and state value.\n     * @param requestNode Query to search for tasks\n     * @param state Task state. Can be \"open\" or \"completed\".\n     * @returns List of tasks\n     */\n    findTasksByState(requestNode: TaskQueryRequestRepresentationModel, state?: string): Observable<TaskListModel> {\n        if (state) {\n            requestNode.state = state;\n        }\n        return this.getTasks(requestNode)\n            .pipe(catchError(() => of(new TaskListModel())));\n    }\n\n    /**\n     * Gets all tasks matching a query and state value.\n     * @param requestNode Query to search for tasks.\n     * @param state Task state. Can be \"open\" or \"completed\".\n     * @returns List of tasks\n     */\n    findAllTaskByState(requestNode: TaskQueryRequestRepresentationModel, state?: string): Observable<TaskListModel> {\n        if (state) {\n            requestNode.state = state;\n        }\n        return this.getTotalTasks(requestNode)\n            .pipe(\n                switchMap((res: any) => {\n                    requestNode.size = res.total;\n                    return this.getTasks(requestNode);\n                })\n            );\n    }\n\n    /**\n     * Gets all tasks matching the supplied query but ignoring the task state.\n     * @param requestNode Query to search for tasks\n     * @returns List of tasks\n     */\n    findAllTasksWithoutState(requestNode: TaskQueryRequestRepresentationModel): Observable<TaskListModel> {\n        return forkJoin(\n            this.findTasksByState(requestNode, 'open'),\n            this.findAllTaskByState(requestNode, 'completed'),\n            (activeTasks: TaskListModel, completedTasks: TaskListModel) => {\n                const tasks = Object.assign({}, activeTasks);\n                tasks.total += completedTasks.total;\n                tasks.data = tasks.data.concat(completedTasks.data);\n                return tasks;\n            }\n        );\n    }\n\n    /**\n     * Gets details for a task.\n     * @param taskId ID of the target task.\n     * @returns Task details\n     */\n    getTaskDetails(taskId: string): Observable<TaskDetailsModel> {\n        return from(this.callApiTaskDetails(taskId))\n            .pipe(\n                map((details: any) => {\n                    return new TaskDetailsModel(details);\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Gets the checklist for a task.\n     * @param id ID of the target task\n     * @returns Array of checklist task details\n     */\n    getTaskChecklist(id: string): Observable<TaskDetailsModel[]> {\n        return from(this.callApiTaskChecklist(id))\n            .pipe(\n                map((response: any) => {\n                    const checklists: TaskDetailsModel[] = [];\n                    response.data.forEach((checklist) => {\n                        checklists.push(new TaskDetailsModel(checklist));\n                    });\n                    return checklists;\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Gets all available reusable forms.\n     * @returns Array of form details\n     */\n    getFormList(): Observable<Form[]> {\n        let opts = {\n            'filter': 'myReusableForms', // String | filter\n            'sort': 'modifiedDesc', // String | sort\n            'modelType': 2 // Integer | modelType\n        };\n\n        return from(this.apiService.getInstance().activiti.modelsApi.getModels(opts))\n            .pipe(\n                map((response: any) => {\n                    let forms: Form[] = [];\n                    response.data.forEach((form) => {\n                        forms.push(new Form(form.id, form.name));\n                    });\n                    return forms;\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Attaches a form to a task.\n     * @param taskId ID of the target task\n     * @param formId ID of the form to add\n     * @returns Null response notifying when the operation is complete\n     */\n    attachFormToATask(taskId: string, formId: number): Observable<any> {\n        return from(this.apiService.taskApi.attachForm(taskId, { 'formId': formId }))\n            .pipe(\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Adds a subtask (ie, a checklist task) to a parent task.\n     * @param task The task to add\n     * @returns The subtask that was added\n     */\n    addTask(task: TaskDetailsModel): Observable<TaskDetailsModel> {\n        return from(this.callApiAddTask(task))\n            .pipe(\n                map((response: TaskDetailsModel) => {\n                    return new TaskDetailsModel(response);\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Deletes a subtask (ie, a checklist task) from a parent task.\n     * @param taskId The task to delete\n     * @returns Null response notifying when the operation is complete\n     */\n    deleteTask(taskId: string): Observable<TaskDetailsModel> {\n        return from<TaskDetailsModel>(this.callApiDeleteTask(taskId))\n            .pipe(\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Deletes a form from a task.\n     * @param taskId Task id related to form\n     * @returns Null response notifying when the operation is complete\n     */\n    deleteForm(taskId: string): Observable<TaskDetailsModel> {\n        return from<TaskDetailsModel>(this.callApiDeleteForm(taskId))\n            .pipe(\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Gives completed status to a task.\n     * @param taskId ID of the target task\n     * @returns Null response notifying when the operation is complete\n     */\n    completeTask(taskId: string) {\n        return from(this.apiService.taskApi.completeTask(taskId))\n            .pipe(\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Gets the total number of the tasks found by a query.\n     * @param requestNode Query to search for tasks\n     * @returns Number of tasks\n     */\n    public getTotalTasks(requestNode: TaskQueryRequestRepresentationModel): Observable<any> {\n        requestNode.size = 0;\n        return from(this.callApiTasksFiltered(requestNode))\n            .pipe(\n                map((res: any) => {\n                    return res;\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Creates a new standalone task.\n     * @param task Details of the new task\n     * @returns Details of the newly created task\n     */\n    createNewTask(task: TaskDetailsModel): Observable<TaskDetailsModel> {\n        return from(this.callApiCreateTask(task))\n            .pipe(\n                map((response: TaskDetailsModel) => {\n                    return new TaskDetailsModel(response);\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Assigns a task to a user or group.\n     * @param taskId The task to assign\n     * @param requestNode User or group to assign the task to\n     * @returns Details of the assigned task\n     */\n    assignTask(taskId: string, requestNode: any): Observable<TaskDetailsModel> {\n        let assignee = { assignee: requestNode.id };\n        return from(this.callApiAssignTask(taskId, assignee))\n            .pipe(\n                map((response: TaskDetailsModel) => {\n                    return new TaskDetailsModel(response);\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Assigns a task to a user.\n     * @param taskId ID of the task to assign\n     * @param userId ID of the user to assign the task to\n     * @returns Details of the assigned task\n     */\n    assignTaskByUserId(taskId: string, userId: string): Observable<TaskDetailsModel> {\n        const assignee = <AssigneeIdentifierRepresentation> { assignee: userId };\n        return from(this.callApiAssignTask(taskId, assignee))\n            .pipe(\n                map((response: TaskDetailsModel) => {\n                    return new TaskDetailsModel(response);\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Claims a task for the current user.\n     * @param taskId ID of the task to claim\n     * @returns Details of the claimed task\n     */\n    claimTask(taskId: string): Observable<TaskDetailsModel> {\n        return from<TaskDetailsModel>(this.apiService.taskApi.claimTask(taskId))\n            .pipe(\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Un-claims a task for the current user.\n     * @param taskId ID of the task to unclaim\n     * @returns Null response notifying when the operation is complete\n     */\n    unclaimTask(taskId: string): Observable<TaskDetailsModel> {\n        return from<TaskDetailsModel>(this.apiService.taskApi.unclaimTask(taskId))\n            .pipe(\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Updates the details (name, description, due date) for a task.\n     * @param taskId ID of the task to update\n     * @param updated Data to update the task (as a `TaskUpdateRepresentation` instance).\n     * @returns Updated task details\n     */\n    updateTask(taskId: any, updated): Observable<TaskDetailsModel> {\n        return from(this.apiService.taskApi.updateTask(taskId, updated))\n            .pipe(\n                map((result) => <TaskDetailsModel> result),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Fetches the Task Audit information in PDF format.\n     * @param taskId ID of the target task\n     * @returns Binary PDF data\n     */\n    fetchTaskAuditPdfById(taskId: string): Observable<Blob> {\n        return from(this.apiService.taskApi.getTaskAuditPdf(taskId))\n            .pipe(\n                map((data) => <Blob> data),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Fetch the Task Audit information in JSON format\n     * @param taskId ID of the target task\n     * @returns JSON data\n     */\n    fetchTaskAuditJsonById(taskId: string): Observable<any> {\n        return from(this.apiService.taskApi.getTaskAuditJson(taskId))\n            .pipe(\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    private callApiTasksFiltered(requestNode: TaskQueryRepresentation): Promise<TaskListModel> {\n        return this.apiService.taskApi.listTasks(requestNode);\n    }\n\n    private callApiTaskDetails(taskId: string): Promise<TaskDetailsModel> {\n        return this.apiService.taskApi.getTask(taskId);\n    }\n\n    private callApiAddTask(task: TaskDetailsModel): Promise<TaskDetailsModel> {\n        return this.apiService.taskApi.addSubtask(task.parentTaskId, task);\n    }\n\n    private callApiDeleteTask(taskId: string): Promise<any> {\n        return this.apiService.taskApi.deleteTask(taskId);\n    }\n\n    private callApiDeleteForm(taskId: string): Promise<any> {\n        return this.apiService.taskApi.removeForm(taskId);\n    }\n\n    private callApiTaskChecklist(taskId: string): Promise<TaskListModel> {\n        return this.apiService.taskApi.getChecklist(taskId);\n    }\n\n    private callApiCreateTask(task: TaskDetailsModel): Promise<TaskDetailsModel> {\n        return this.apiService.taskApi.createNewTask(task);\n    }\n\n    private callApiAssignTask(taskId: string, requestNode: AssigneeIdentifierRepresentation): Promise<TaskDetailsModel> {\n        return this.apiService.taskApi.assignTask(taskId, requestNode);\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataRowEvent, DataTableAdapter, DataTableSchema, CustomEmptyContentTemplateDirective, CustomLoadingContentTemplateDirective } from '@alfresco/adf-core';\nimport {\n    AppConfigService, PaginationComponent, PaginatedComponent,\n    UserPreferencesService, UserPreferenceValues, PaginationModel } from '@alfresco/adf-core';\nimport {\n    AfterContentInit, Component, ContentChild, EventEmitter,\n    Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { TaskQueryRequestRepresentationModel } from '../models/filter.model';\nimport { TaskListModel } from '../models/task-list.model';\nimport { taskPresetsDefaultModel } from '../models/task-preset.model';\nimport { TaskListService } from './../services/tasklist.service';\nimport moment from 'moment-es6';\n\n@Component({\n    selector: 'adf-tasklist',\n    templateUrl: './task-list.component.html',\n    styleUrls: ['./task-list.component.css']\n})\nexport class TaskListComponent extends DataTableSchema implements OnChanges, AfterContentInit, PaginatedComponent {\n\n    static PRESET_KEY = 'adf-task-list.presets';\n    public FORMAT_DATE: string = 'll';\n\n    @ContentChild(CustomEmptyContentTemplateDirective)\n    customEmptyContent: CustomEmptyContentTemplateDirective;\n\n    @ContentChild(CustomLoadingContentTemplateDirective)\n    customLoadingContent: CustomLoadingContentTemplateDirective;\n\n    requestNode: TaskQueryRequestRepresentationModel;\n\n    /** The id of the app. */\n    @Input()\n    appId: number;\n\n    /** The Instance Id of the process. */\n    @Input()\n    processInstanceId: string;\n\n    /** The Definition Id of the process. */\n    @Input()\n    processDefinitionId: string;\n\n    /** Current state of the process. Possible values are: `completed`, `active`. */\n    @Input()\n    state: string;\n\n    /** The assignment of the process. Possible values are: \"assignee\" (the current user\n     * is the assignee), \"candidate\" (the current user is a task candidate, \"group_x\" (the task\n     * is assigned to a group where the current user is a member,\n     * no value (the current user is involved).\n     */\n    @Input()\n    assignment: string;\n\n    /** Define the sort order of the tasks. Possible values are : `created-desc`,\n     * `created-asc`, `due-desc`, `due-asc`\n     */\n    @Input()\n    sort: string;\n\n    /** Name of the tasklist. */\n    @Input()\n    name: string;\n\n    /** Define which task id should be selected after reloading. If the task id doesn't\n     * exist or nothing is passed then the first task will be selected.\n     */\n    @Input()\n    landingTaskId: string;\n\n    /**\n     * Data source object that represents the number and the type of the columns that\n     * you want to show.\n     */\n    @Input()\n    data: DataTableAdapter;\n\n    /** Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,\n     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for\n     * multiple rows.\n     */\n    @Input()\n    selectionMode: string = 'single'; // none|single|multiple\n\n    /** Toggles multiple row selection, renders checkboxes at the beginning of each row */\n    @Input()\n    multiselect: boolean = false;\n\n    /** Toggles default selection of the first row */\n    @Input()\n    selectFirstRow: boolean = true;\n\n    /** The id of a task */\n    @Input()\n    taskId: string;\n\n    /** Toggles inclusion of Process Instances */\n    @Input()\n    includeProcessInstance: boolean;\n\n    /** Starting point of the list within the full set of tasks. */\n    @Input()\n    start: number;\n\n    /** Emitted when a task in the list is clicked */\n    @Output()\n    rowClick: EventEmitter<string> = new EventEmitter<string>();\n\n    /** Emitted when rows are selected/unselected */\n    @Output()\n    rowsSelected: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n    /** Emitted when the task list is loaded */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    currentInstanceId: string;\n    selectedInstances: any[];\n    pagination: BehaviorSubject<PaginationModel>;\n\n    /** The page number of the tasks to fetch. */\n    @Input()\n    page: number = 0;\n\n    /** The number of tasks to fetch. Default value: 25. */\n    @Input()\n    size: number = PaginationComponent.DEFAULT_PAGINATION.maxItems;\n\n    /** Filter the tasks. Display only tasks with `created_date` after `dueAfter`. */\n    @Input()\n    dueAfter: string;\n\n    /** Filter the tasks. Display only tasks with `created_date` before `dueBefore`. */\n    @Input()\n    dueBefore: string;\n\n    rows: any[] = [];\n    isLoading: boolean = true;\n    sorting: any[] = ['created', 'desc'];\n\n    /**\n     * Toggles custom data source mode.\n     * When enabled the component reloads data from it's current source instead of the server side.\n     * This allows generating and displaying custom data sets (i.e. filtered out content).\n     *\n     * @memberOf TaskListComponent\n     */\n    hasCustomDataSource: boolean = false;\n\n    constructor(private taskListService: TaskListService,\n                appConfigService: AppConfigService,\n                private userPreferences: UserPreferencesService) {\n        super(appConfigService, TaskListComponent.PRESET_KEY, taskPresetsDefaultModel);\n        this.userPreferences.select(UserPreferenceValues.PaginationSize).subscribe((pageSize) => {\n            this.size = pageSize;\n        });\n\n        this.pagination = new BehaviorSubject<PaginationModel>(<PaginationModel> {\n            maxItems: this.size,\n            skipCount: 0,\n            totalItems: 0\n        });\n    }\n\n    ngAfterContentInit() {\n        this.createDatatableSchema();\n        if (this.data && this.data.getColumns().length === 0) {\n            this.data.setColumns(this.columns);\n        }\n\n        if (this.appId) {\n            this.reload();\n        }\n    }\n\n    setCustomDataSource(rows: any[]): void {\n        if (rows) {\n            this.rows = rows;\n            this.hasCustomDataSource = true;\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.isPropertyChanged(changes)) {\n            if (this.isSortChanged(changes)) {\n                this.sorting = this.sort ? this.sort.split('-') : this.sorting;\n            }\n            this.reload();\n        }\n    }\n\n    private isSortChanged(changes: SimpleChanges): boolean {\n        const actualSort = changes['sort'];\n        return actualSort && actualSort.currentValue && actualSort.currentValue !== actualSort.previousValue;\n    }\n\n    private isPropertyChanged(changes: SimpleChanges): boolean {\n        let changed: boolean = true;\n\n        let landingTaskId = changes['landingTaskId'];\n        let page = changes['page'];\n        let size = changes['size'];\n        if (landingTaskId && landingTaskId.currentValue && this.isEqualToCurrentId(landingTaskId.currentValue)) {\n            changed = false;\n        } else if (page && page.currentValue !== page.previousValue) {\n            changed = true;\n        } else if (size && size.currentValue !== size.previousValue) {\n            changed = true;\n        }\n\n        return changed;\n    }\n\n    reload(): void {\n        if (!this.hasCustomDataSource) {\n            this.requestNode = this.createRequestNode();\n            this.load(this.requestNode);\n        } else {\n            this.isLoading = false;\n        }\n    }\n\n    private load(requestNode: TaskQueryRequestRepresentationModel) {\n        this.isLoading = true;\n        this.loadTasksByState().subscribe(\n            (tasks) => {\n                this.rows = this.optimizeTaskDetails(tasks.data);\n                this.selectTask(this.landingTaskId);\n                this.success.emit(tasks);\n                this.isLoading = false;\n                this.pagination.next({\n                    count: tasks.data.length,\n                    maxItems: this.size,\n                    skipCount: this.page * this.size,\n                    totalItems: tasks.total\n                });\n            }, (error) => {\n                this.error.emit(error);\n                this.isLoading = false;\n            });\n    }\n\n    private loadTasksByState(): Observable<TaskListModel> {\n        return this.requestNode.state === 'all'\n            ? this.taskListService.findAllTasksWithoutState(this.requestNode)\n            : this.taskListService.findTasksByState(this.requestNode);\n    }\n\n    /**\n     * Select the task given in input if present\n     */\n    selectTask(taskIdSelected: string): void {\n        if (!this.isListEmpty()) {\n            let dataRow = null;\n            if (taskIdSelected) {\n                dataRow = this.rows.find((currentRow: any) => {\n                    return currentRow['id'] === taskIdSelected;\n                });\n            }\n            if (!dataRow && this.selectFirstRow) {\n                dataRow = this.rows[0];\n            }\n            if (dataRow) {\n                dataRow.isSelected = true;\n                this.currentInstanceId = dataRow['id'];\n            }\n        } else {\n            this.currentInstanceId = null;\n        }\n    }\n\n    /**\n     * Return the current id\n     */\n    getCurrentId(): string {\n        return this.currentInstanceId;\n    }\n\n    /**\n     * Check if the taskId is the same of the selected task\n     * @param taskId\n     */\n    isEqualToCurrentId(taskId: string): boolean {\n        return this.currentInstanceId === taskId;\n    }\n\n    /**\n     * Check if the list is empty\n     */\n    isListEmpty(): boolean {\n        return !this.rows || this.rows.length === 0;\n    }\n\n    onRowClick(item: DataRowEvent) {\n        this.currentInstanceId = item.value.getValue('id');\n        this.rowClick.emit(this.currentInstanceId);\n    }\n\n    onRowSelect(event: CustomEvent) {\n        this.selectedInstances = [...event.detail.selection];\n        this.rowsSelected.emit(this.selectedInstances);\n    }\n\n    onRowUnselect(event: CustomEvent) {\n        this.selectedInstances = [...event.detail.selection];\n        this.rowsSelected.emit(this.selectedInstances);\n    }\n\n    onRowKeyUp(event: CustomEvent) {\n        if (event.detail.keyboardEvent.key === 'Enter') {\n            event.preventDefault();\n            this.currentInstanceId = event.detail.row.getValue('id');\n            this.rowClick.emit(this.currentInstanceId);\n        }\n    }\n\n    /**\n     * Optimize name field\n     * @param instances\n     */\n    private optimizeTaskDetails(instances: any[]): any[] {\n        instances = instances.map((task) => {\n            if (!task.name) {\n                task.name = 'No name';\n            }\n            if (task.created) {\n                task.created = moment(task.created).format(this.FORMAT_DATE);\n            }\n            if (task.dueDate) {\n                task.dueDate = moment(task.dueDate).format(this.FORMAT_DATE);\n            }\n            if (task.endDate) {\n                task.endDate = moment(task.endDate).format(this.FORMAT_DATE);\n            }\n            return task;\n        });\n        return instances;\n    }\n\n    private createRequestNode() {\n\n        let requestNode = {\n            appDefinitionId: this.appId,\n            dueAfter: this.dueAfter ? moment(this.dueAfter).toDate() : null,\n            dueBefore: this.dueBefore ? moment(this.dueBefore).toDate() : null,\n            processInstanceId: this.processInstanceId,\n            processDefinitionId: this.processDefinitionId,\n            text: this.name,\n            assignment: this.assignment,\n            state: this.state,\n            sort: this.sort,\n            page: this.page,\n            size: this.size,\n            start: this.start,\n            taskId: this.taskId,\n            includeProcessInstance: this.includeProcessInstance\n        };\n        return new TaskQueryRequestRepresentationModel(requestNode);\n    }\n\n    updatePagination(params: PaginationModel) {\n        const needsReload = params.maxItems || params.skipCount;\n        this.size = params.maxItems;\n        this.page = this.currentPage(params.skipCount, params.maxItems);\n        if (needsReload) {\n            this.reload();\n        }\n    }\n\n    currentPage(skipCount: number, maxItems: number): number {\n        return (skipCount && maxItems) ? Math.floor(skipCount / maxItems) : 0;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListService } from './../services/tasklist.service';\n\n@Component({\n    selector: 'adf-checklist',\n    templateUrl: './checklist.component.html',\n    styleUrls: ['./checklist.component.scss']\n})\nexport class ChecklistComponent implements OnChanges {\n\n    /** (required) The id of the parent task to which subtasks are\n     * attached.\n     */\n    @Input()\n    taskId: string;\n\n    /** Toggle readonly state of the form. All form widgets\n     * will render as readonly if enabled.\n     */\n    @Input()\n    readOnly: boolean = false;\n\n    /** (required) The assignee id that the subtasks are assigned to. */\n    @Input()\n    assignee: string;\n\n    /** Emitted when a new checklist task is created. */\n    @Output()\n    checklistTaskCreated: EventEmitter<TaskDetailsModel> = new EventEmitter<TaskDetailsModel>();\n\n    /** Emitted when a checklist task is deleted. */\n    @Output()\n    checklistTaskDeleted: EventEmitter<string> = new EventEmitter<string>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    @ViewChild('dialog')\n    addNewDialog: any;\n\n    taskName: string;\n\n    checklist: TaskDetailsModel [] = [];\n\n    /**\n     * Constructor\n     * @param auth\n     * @param translate\n     */\n    constructor(private activitiTaskList: TaskListService,\n                private dialog: MatDialog) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let taskId = changes['taskId'];\n        if (taskId && taskId.currentValue) {\n            this.getTaskChecklist(taskId.currentValue);\n            return;\n        }\n    }\n\n    public getTaskChecklist(taskId: string) {\n        this.checklist = [];\n        if (this.taskId) {\n            this.activitiTaskList.getTaskChecklist(this.taskId).subscribe(\n                (taskDetailsModel: TaskDetailsModel[]) => {\n                    taskDetailsModel.forEach((task) => {\n                        this.checklist.push(task);\n                    });\n                },\n                (error) => {\n                    this.error.emit(error);\n                }\n            );\n        } else {\n            this.checklist = [];\n        }\n    }\n\n    showDialog() {\n        this.dialog.open(this.addNewDialog, { width: '350px' });\n    }\n\n    public add() {\n        let newTask = new TaskDetailsModel({\n            name: this.taskName,\n            parentTaskId: this.taskId,\n            assignee: { id: this.assignee }\n        });\n        this.activitiTaskList.addTask(newTask).subscribe(\n            (taskDetailsModel: TaskDetailsModel) => {\n                this.checklist.push(taskDetailsModel);\n                this.checklistTaskCreated.emit(taskDetailsModel);\n                this.taskName = '';\n            },\n            (error) => {\n                this.error.emit(error);\n            }\n        );\n        this.cancel();\n    }\n\n    public delete(taskId: string) {\n        this.activitiTaskList.deleteTask(taskId).subscribe(\n            () => {\n                this.checklist = this.checklist.filter((check) => check.id !== taskId);\n                this.checklistTaskDeleted.emit(taskId);\n            },\n            (error) => {\n                this.error.emit(error);\n            });\n    }\n\n    public cancel() {\n        this.dialog.closeAll();\n        this.taskName = '';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport {\n    BpmUserService,\n    CardViewDateItemModel,\n    CardViewItem,\n    CardViewMapItemModel,\n    CardViewTextItemModel,\n    CardViewBaseItemModel,\n    LogService,\n    TranslationService,\n    AppConfigService\n} from '@alfresco/adf-core';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListService } from './../services/tasklist.service';\n\n@Component({\n    selector: 'adf-task-header',\n    templateUrl: './task-header.component.html',\n    styleUrls: ['./task-header.component.scss']\n})\nexport class TaskHeaderComponent implements OnChanges, OnInit {\n\n    /** The name of the form. */\n    @Input()\n    formName: string = null;\n\n    /** (required) Details related to the task. */\n    @Input()\n    taskDetails: TaskDetailsModel;\n\n    /** Emitted when the task is claimed. */\n    @Output()\n    claim: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the task is unclaimed (ie, requeued). */\n    @Output()\n    unclaim: EventEmitter<any> = new EventEmitter<any>();\n\n    private currentUserId: number;\n\n    properties: CardViewItem [];\n    inEdit: boolean = false;\n\n    constructor(private activitiTaskService: TaskListService,\n                private bpmUserService: BpmUserService,\n                private translationService: TranslationService,\n                private logService: LogService,\n                private appConfig: AppConfigService) {\n    }\n\n    ngOnInit() {\n        this.loadCurrentBpmUserId();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.refreshData();\n    }\n\n    private initDefaultProperties(parentInfoMap) {\n        return [\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.ASSIGNEE',\n                    value: this.taskDetails.getFullName(),\n                    key: 'assignee',\n                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.ASSIGNEE_DEFAULT'),\n                    clickable: !this.isCompleted(),\n                    icon: 'create'\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.STATUS',\n                    value: this.getTaskStatus(),\n                    key: 'status'\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.PRIORITY',\n                    value: this.taskDetails.priority,\n                    key: 'priority',\n                    editable: true\n                }\n            ),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.DUE_DATE',\n                    value: this.taskDetails.dueDate,\n                    key: 'dueDate',\n                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.DUE_DATE_DEFAULT'),\n                    editable: true\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.CATEGORY',\n                    value: this.taskDetails.category,\n                    key: 'category',\n                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.CATEGORY_DEFAULT')\n                }\n            ),\n            new CardViewMapItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.PARENT_NAME',\n                    value: parentInfoMap,\n                    key: 'parentName',\n                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.PARENT_NAME_DEFAULT'),\n                    clickable: true\n                }\n            ),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.CREATED',\n                    value: this.taskDetails.created,\n                    key: 'created'\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.DURATION',\n                    value: this.getTaskDuration(),\n                    key: 'duration'\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.PARENT_TASK_ID',\n                    value: this.taskDetails.parentTaskId,\n                    key: 'parentTaskId'\n                }\n            ),\n            new CardViewDateItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.END_DATE',\n                    value: this.taskDetails.endDate,\n                    key: 'endDate'\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.ID',\n                    value: this.taskDetails.id,\n                    key: 'id'\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.DESCRIPTION',\n                    value: this.taskDetails.description,\n                    key: 'description',\n                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.DESCRIPTION_DEFAULT'),\n                    multiline: true,\n                    editable: true\n                }\n            ),\n            new CardViewTextItemModel(\n                {\n                    label: 'ADF_TASK_LIST.PROPERTIES.FORM_NAME',\n                    value: this.formName,\n                    key: 'formName',\n                    default: this.translationService.instant('ADF_TASK_LIST.PROPERTIES.FORM_NAME_DEFAULT'),\n                    clickable: !!this.formName,\n                    icon: 'create'\n                }\n            )\n        ];\n    }\n\n    /**\n     * Refresh the card data\n     */\n    refreshData() {\n        if (this.taskDetails) {\n            const parentInfoMap = this.getParentInfo();\n            const defaultProperties = this.initDefaultProperties(parentInfoMap);\n            const filteredProperties: string[] = this.appConfig.get('adf-task-header.presets.properties');\n            this.properties = defaultProperties.filter((cardItem) => this.isValidSelection(filteredProperties, cardItem));\n        }\n    }\n\n    private isValidSelection(filteredProperties: string[], cardItem: CardViewBaseItemModel): boolean {\n        return filteredProperties ? filteredProperties.indexOf(cardItem.key) >= 0 : true;\n    }\n\n    /**\n     * Loads current bpm userId\n     */\n    private loadCurrentBpmUserId(): void {\n        this.bpmUserService.getCurrentUserInfo().subscribe((res) => {\n            this.currentUserId = res ? +res.id : null;\n        });\n    }\n\n    /**\n     * Return the process parent information\n     */\n    getParentInfo() {\n        if (this.taskDetails.processInstanceId && this.taskDetails.processDefinitionName) {\n            return new Map([[this.taskDetails.processInstanceId, this.taskDetails.processDefinitionName]]);\n        }\n    }\n\n    /**\n     * Does the task have an assignee\n     */\n    public hasAssignee(): boolean {\n        return !!this.taskDetails.assignee ? true : false;\n    }\n\n    /**\n     * Returns true if the task is assigned to logged in user\n     */\n    public isAssignedTo(userId): boolean {\n        return this.hasAssignee() ? this.taskDetails.assignee.id === userId : false;\n    }\n\n    /**\n     * Return true if the task assigned\n     */\n    public isAssignedToCurrentUser(): boolean {\n        return this.hasAssignee() && this.isAssignedTo(this.currentUserId);\n    }\n\n    /**\n     * Return true if the user is a candidate member\n     */\n    isCandidateMember() {\n        return this.taskDetails.managerOfCandidateGroup || this.taskDetails.memberOfCandidateGroup || this.taskDetails.memberOfCandidateUsers;\n    }\n\n    /**\n     * Return true if the task claimable\n     */\n    public isTaskClaimable(): boolean {\n        return !this.hasAssignee() && this.isCandidateMember();\n    }\n\n    /**\n     * Return true if the task claimed by candidate member.\n     */\n    public isTaskClaimedByCandidateMember(): boolean {\n        return this.isCandidateMember() && this.isAssignedToCurrentUser() && !this.isCompleted();\n    }\n\n    /**\n     * Returns task's status\n     */\n    getTaskStatus(): string {\n        return (this.taskDetails && this.taskDetails.isCompleted()) ? 'Completed' : 'Running';\n    }\n\n    /**\n     * Claim task\n     *\n     * @param taskId\n     */\n    claimTask(taskId: string) {\n        this.activitiTaskService.claimTask(taskId).subscribe(\n            (res: any) => {\n                this.logService.info('Task claimed');\n                this.claim.emit(taskId);\n            });\n    }\n\n    /**\n     * Unclaim task\n     *\n     * @param taskId\n     */\n    unclaimTask(taskId: string) {\n        this.activitiTaskService.unclaimTask(taskId).subscribe(\n            (res: any) => {\n                this.logService.info('Task unclaimed');\n                this.unclaim.emit(taskId);\n            });\n    }\n\n    /**\n     * Returns true if the task is completed\n     */\n    isCompleted(): boolean {\n        return this.taskDetails && !!this.taskDetails.endDate;\n    }\n\n    getTaskDuration(): string {\n        return this.taskDetails.duration ? `${this.taskDetails.duration} ms` : '';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, ViewEncapsulation, ViewChild } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\nimport { ExternalAlfrescoApiService, AlfrescoApiService, AuthenticationService, LoginDialogPanelComponent, SitesService, SearchService } from '@alfresco/adf-core';\nimport { DocumentListService, ContentNodeSelectorService } from '@alfresco/adf-content-services';\nimport { AttachFileWidgetDialogComponentData } from './attach-file-widget-dialog-component.interface';\nimport { Node } from '@alfresco/js-api';\n\n@Component({\n    selector: 'adf-attach-file-widget-dialog',\n    templateUrl: './attach-file-widget-dialog.component.html',\n    styleUrls: ['./attach-file-widget-dialog.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [ AuthenticationService,\n                 DocumentListService,\n                 SitesService,\n                 ContentNodeSelectorService,\n                 SearchService,\n                 { provide: AlfrescoApiService, useClass: ExternalAlfrescoApiService} ]\n})\nexport class AttachFileWidgetDialogComponent {\n\n    @ViewChild('adfLoginPanel')\n    loginPanel: LoginDialogPanelComponent;\n\n    chosenNode: Node[];\n    buttonActionName;\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: AttachFileWidgetDialogComponentData,\n                private externalApiService: AlfrescoApiService) {\n        (<any> externalApiService).init(data.ecmHost, data.context);\n        this.buttonActionName = data.actionName ? `ATTACH-FILE.ACTIONS.${data.actionName.toUpperCase()}` : 'ATTACH-FILE.ACTIONS.CHOOSE';\n    }\n\n    isLoggedIn() {\n        return this.externalApiService.getInstance().isLoggedIn();\n    }\n\n    performLogin() {\n        this.loginPanel.submitForm();\n    }\n\n    close() {\n        this.data.selected.complete();\n    }\n\n    onSelect(nodeList: Node[]) {\n        if (nodeList && nodeList[0].isFile) {\n            this.chosenNode = nodeList;\n        } else {\n            this.chosenNode = null;\n        }\n    }\n\n    onClick(event: any) {\n        this.data.selected.next(this.chosenNode);\n        this.data.selected.complete();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MatDialog } from '@angular/material';\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { AttachFileWidgetDialogComponentData } from './attach-file-widget-dialog-component.interface';\nimport { Node } from '@alfresco/js-api';\nimport { AttachFileWidgetDialogComponent } from './attach-file-widget-dialog.component';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AttachFileWidgetDialogService {\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private dialog: MatDialog) {\n    }\n\n    /**\n     * Opens a dialog to choose a file to upload.\n     * @param action Name of the action to show in the title\n     * @param contentEntry Item to upload\n     * @returns Information about the chosen file(s)\n     */\n    openLogin(ecmHost: string, actionName?: string, context?: string): Observable<Node[]> {\n        let titleString: string = `Please log in for ${ecmHost}`;\n        const selected = new Subject<Node[]>();\n        selected.subscribe({\n            complete: this.close.bind(this)\n        });\n\n        const data: AttachFileWidgetDialogComponentData = {\n            title : titleString,\n            actionName,\n            selected,\n            ecmHost,\n            context,\n            isSelectionValid: this.isNodeFile.bind(this)\n        };\n\n        this.openLoginDialog(data, 'adf-attach-file-widget-dialog', '630px');\n        return selected;\n    }\n\n    private openLoginDialog(data: AttachFileWidgetDialogComponentData, currentPanelClass: string, chosenWidth: string) {\n        this.dialog.open(AttachFileWidgetDialogComponent, { data, panelClass: currentPanelClass, width: chosenWidth });\n    }\n\n    /** Closes the currently open dialog. */\n    close() {\n        this.dialog.closeAll();\n    }\n\n    private isNodeFile(entry: Node): boolean {\n        return entry.isFile;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector */\n\nimport { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport {\n    UploadWidgetComponent,\n    FormService,\n    LogService,\n    ThumbnailService,\n    ProcessContentService,\n    ActivitiContentService,\n    ContentService,\n    FormEvent,\n    AppConfigValues,\n    AppConfigService\n} from '@alfresco/adf-core';\nimport { ContentNodeDialogService } from '@alfresco/adf-content-services';\nimport { Node, RelatedContentRepresentation } from '@alfresco/js-api';\nimport { from, zip, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { AttachFileWidgetDialogService } from './attach-file-widget-dialog.service';\n\n@Component({\n    selector: 'attach-widget',\n    templateUrl: './attach-file-widget.component.html',\n    styleUrls: ['./attach-file-widget.component.scss'],\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class AttachFileWidgetComponent extends UploadWidgetComponent implements OnInit {\n\n    repositoryList = [];\n    private tempFilesList = [];\n\n    constructor(public formService: FormService,\n                private logger: LogService,\n                public thumbnails: ThumbnailService,\n                public processContentService: ProcessContentService,\n                private activitiContentService: ActivitiContentService,\n                private contentService: ContentService,\n                private contentDialog: ContentNodeDialogService,\n                private appConfigService: AppConfigService,\n                private attachDialogService: AttachFileWidgetDialogService) {\n        super(formService, logger, thumbnails, processContentService);\n    }\n\n    ngOnInit() {\n        if (this.field &&\n            this.field.value &&\n            this.field.value.length > 0) {\n            this.hasFile = true;\n        }\n        this.getMultipleFileParam();\n\n        this.activitiContentService.getAlfrescoRepositories(null, true).subscribe((repoList) => {\n            this.repositoryList = repoList;\n        });\n\n        this.formService.taskSaved.subscribe((formSaved: FormEvent) => {\n            if (formSaved.form.id === this.field.form.id) {\n                this.tempFilesList = [];\n            }\n        });\n    }\n\n    isFileSourceConfigured(): boolean {\n        return !!this.field.params && !!this.field.params.fileSource;\n    }\n\n    isMultipleSourceUpload(): boolean {\n        return !this.field.readOnly && this.isFileSourceConfigured() && !this.isOnlyLocalSourceSelected();\n    }\n\n    isAllFileSourceSelected(): boolean {\n        return this.field.params &&\n            this.field.params.fileSource &&\n            this.field.params.fileSource.serviceId === 'all-file-sources';\n    }\n\n    isOnlyLocalSourceSelected(): boolean {\n        return this.field.params &&\n            this.field.params.fileSource &&\n            this.field.params.fileSource.serviceId === 'local-file';\n    }\n\n    isSimpleUploadButton(): boolean {\n        return this.isUploadButtonVisible() &&\n            !this.isFileSourceConfigured() ||\n            this.isOnlyLocalSourceSelected();\n    }\n\n    isUploadButtonVisible(): boolean {\n        return (!this.hasFile || this.multipleOption) && !this.field.readOnly;\n    }\n\n    isDefinedSourceFolder(): boolean {\n        return !!this.field.params &&\n            !!this.field.params.fileSource &&\n            !!this.field.params.fileSource.selectedFolder;\n    }\n\n    isTemporaryFile(file): boolean {\n        return this.tempFilesList.findIndex((elem) => elem.name === file.name) >= 0;\n    }\n\n    openSelectDialogFromFileSource() {\n        let params = this.field.params;\n        if (this.isDefinedSourceFolder()) {\n            this.contentDialog.openFileBrowseDialogByFolderId(params.fileSource.selectedFolder.pathId).subscribe(\n                (selections: Node[]) => {\n                    this.tempFilesList.push(...selections);\n                    this.uploadFileFromCS(selections,\n                        this.field.params.fileSource.selectedFolder.accountId,\n                        this.field.params.fileSource.selectedFolder.siteId);\n                });\n        }\n    }\n\n    onAttachFileChanged(event: any) {\n        this.tempFilesList.push(...Array.from(event.target.files));\n        this.onFileChanged(event);\n    }\n\n    onRemoveAttachFile(file: File | RelatedContentRepresentation) {\n        if (this.isTemporaryFile(file)) {\n            this.tempFilesList.splice(this.tempFilesList.indexOf((<RelatedContentRepresentation> file).contentBlob), 1);\n        }\n        this.removeFile(file);\n    }\n\n    onAttachFileClicked(file: any) {\n        if (file.isExternal) {\n            this.logger.info(`The file ${file.name} comes from an external source and cannot be showed at this moment`);\n            return;\n        }\n        if (this.isTemporaryFile(file)) {\n            this.formService.formContentClicked.next(file);\n        } else {\n            this.fileClicked(file);\n        }\n    }\n\n    downloadContent(file: any | RelatedContentRepresentation): void {\n        if (this.isTemporaryFile(file)) {\n            this.contentService.downloadBlob((<RelatedContentRepresentation> file).contentBlob, file.name);\n        } else {\n            this.processContentService.getFileRawContent((<any> file).id).subscribe(\n                (blob: Blob) => {\n                    this.contentService.downloadBlob(blob, (<any> file).name);\n                },\n                (err) => {\n                    this.logger.error('Impossible retrieve content for download');\n                }\n            );\n        }\n    }\n\n    openSelectDialog(repository) {\n        const accountIdentifier = 'alfresco-' + repository.id + '-' + repository.name;\n        let currentECMHost = this.getDomainHost(this.appConfigService.get(AppConfigValues.ECMHOST));\n        let chosenRepositoryHost = this.getDomainHost(repository.repositoryUrl);\n        if (chosenRepositoryHost !== currentECMHost) {\n            let formattedRepositoryHost = repository.repositoryUrl.replace('/alfresco', '');\n            this.attachDialogService.openLogin(formattedRepositoryHost).subscribe(\n                (selections: any[]) => {\n                    selections.forEach((node) => node.isExternal = true);\n                    this.tempFilesList.push(...selections);\n                    this.uploadFileFromCS(selections, accountIdentifier);\n                });\n        } else {\n            this.contentDialog.openFileBrowseDialogBySite().subscribe(\n                (selections: Node[]) => {\n                    this.tempFilesList.push(...selections);\n                    this.uploadFileFromCS(selections, accountIdentifier);\n                });\n        }\n    }\n\n    private uploadFileFromCS(fileNodeList: any[], accountId: string, siteId?: string) {\n        const filesSaved = [];\n        from(fileNodeList).pipe(\n            mergeMap((node) =>\n                zip(\n                    of(node.content.mimeType),\n                    this.activitiContentService.applyAlfrescoNode(node, siteId, accountId),\n                    of(node.isExternal)\n                )\n            )\n        )\n            .subscribe(([mimeType, res, isExternal]) => {\n                    res.mimeType = mimeType;\n                    res.isExternal = isExternal;\n                    filesSaved.push(res);\n                },\n                (error) => {\n                    this.logger.error(error);\n                },\n                () => {\n                    this.field.value = filesSaved;\n                    this.field.json.value = filesSaved;\n                    this.hasFile = true;\n                });\n    }\n\n    private getDomainHost(urlToCheck) {\n        let result = urlToCheck.match('^(?:https?:\\/\\/)?(?:[^@\\/\\n]+@)?(?:www\\.)?([^:\\/?\\n]+)');\n        return result[1];\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:component-selector*/\n\nimport { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport {\n    WidgetComponent,\n    FormService,\n    NodesApiService\n} from '@alfresco/adf-core';\nimport { ContentNodeDialogService } from '@alfresco/adf-content-services';\nimport { Node } from '@alfresco/js-api';\n\n@Component({\n    selector: 'attach-folder-widget',\n    templateUrl: './attach-folder-widget.component.html',\n    styleUrls: ['./attach-folder-widget.component.scss'],\n    host: {\n        '(click)': 'event($event)',\n        '(blur)': 'event($event)',\n        '(change)': 'event($event)',\n        '(focus)': 'event($event)',\n        '(focusin)': 'event($event)',\n        '(focusout)': 'event($event)',\n        '(input)': 'event($event)',\n        '(invalid)': 'event($event)',\n        '(select)': 'event($event)'\n    },\n    encapsulation: ViewEncapsulation.None\n})\nexport class AttachFolderWidgetComponent extends WidgetComponent implements OnInit {\n\n    hasFolder: boolean = false;\n    selectedFolderName: string = '';\n\n    constructor(private contentDialog: ContentNodeDialogService,\n                public formService: FormService,\n                private nodeService: NodesApiService) {\n        super();\n    }\n\n    ngOnInit() {\n        if (this.field &&\n            this.field.value) {\n            this.hasFolder = true;\n            this.nodeService.getNode(this.field.value).subscribe((node: Node) => {\n                this.selectedFolderName = node.name;\n            });\n        }\n    }\n\n    isDefinedSourceFolder(): boolean {\n        return !!this.field.params &&\n            !!this.field.params.folderSource &&\n            !!this.field.params.folderSource.selectedFolder;\n    }\n\n    openSelectDialogFromFileSource() {\n        let params = this.field.params;\n        if (this.isDefinedSourceFolder()) {\n            this.contentDialog.openFolderBrowseDialogByFolderId(params.folderSource.selectedFolder.pathId).subscribe(\n                (selections: Node[]) => {\n                    this.selectedFolderName = selections[0].name;\n                    this.field.value = selections[0].id;\n                    this.hasFolder = true;\n                });\n        } else {\n            this.contentDialog.openFolderBrowseDialogBySite().subscribe(\n                (selections: Node[]) => {\n                    this.selectedFolderName = selections[0].name;\n                    this.field.value = selections[0].id;\n                    this.hasFolder = true;\n                });\n        }\n    }\n\n    removeFolder() {\n        this.field.value = null;\n        this.selectedFolderName = '';\n        this.hasFolder = false;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport {\n    MAT_LABEL_GLOBAL_OPTIONS, MatAutocompleteModule, MatButtonModule, MatCardModule, MatCheckboxModule,\n    MatChipsModule, MatDatepickerModule, MatDialogModule, MatGridListModule, MatIconModule,\n    MatInputModule, MatListModule, MatNativeDateModule, MatOptionModule, MatProgressSpinnerModule, MatRadioModule,\n    MatRippleModule, MatSelectModule, MatSlideToggleModule, MatTableModule, MatTabsModule,\n    MatTooltipModule, MatMenuModule\n} from '@angular/material';\n\nexport function modules() {\n    return [\n        MatAutocompleteModule, MatButtonModule, MatCardModule, MatDialogModule,\n        MatCheckboxModule, MatDatepickerModule, MatGridListModule, MatIconModule, MatInputModule,\n        MatListModule, MatOptionModule, MatRadioModule, MatSelectModule, MatSlideToggleModule, MatTableModule,\n        MatTabsModule, MatProgressSpinnerModule, MatNativeDateModule, MatRippleModule, MatTooltipModule,\n        MatChipsModule, MatMenuModule\n    ];\n}\n\n@NgModule({\n    providers: [\n        {provide: MAT_LABEL_GLOBAL_OPTIONS, useValue: { float: 'never' }}\n    ],\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { ContentNodeSelectorModule } from '@alfresco/adf-content-services';\n\nimport { AttachFileWidgetComponent } from './attach-file-widget.component';\nimport { AttachFolderWidgetComponent } from './attach-folder-widget.component';\nimport { AttachFileWidgetDialogComponent } from './attach-file-widget-dialog.component';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        ContentNodeSelectorModule,\n        MaterialModule\n    ],\n    entryComponents: [\n        AttachFileWidgetComponent,\n        AttachFolderWidgetComponent,\n        AttachFileWidgetDialogComponent\n    ],\n    declarations: [\n        AttachFileWidgetComponent,\n        AttachFolderWidgetComponent,\n        AttachFileWidgetDialogComponent\n    ],\n    exports: [\n        AttachFileWidgetComponent,\n        AttachFolderWidgetComponent,\n        AttachFileWidgetDialogComponent\n    ]\n})\nexport class ContentWidgetModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PeopleProcessService, UserProcessModel } from '@alfresco/adf-core';\nimport {\n    AuthenticationService,\n    CardViewUpdateService,\n    ClickNotification,\n    LogService,\n    UpdateNotification,\n    FormRenderingService,\n    CommentsComponent\n} from '@alfresco/adf-core';\nimport {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material';\nimport { Observable, Observer } from 'rxjs';\nimport { ContentLinkModel, FormFieldValidator, FormModel, FormOutcomeEvent } from '@alfresco/adf-core';\nimport { TaskQueryRequestRepresentationModel } from '../models/filter.model';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListService } from './../services/tasklist.service';\nimport { AttachFileWidgetComponent, AttachFolderWidgetComponent } from '../../content-widget';\nimport { UserRepresentation } from '@alfresco/js-api';\nimport { share } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-task-details',\n    templateUrl: './task-details.component.html',\n    styleUrls: ['./task-details.component.scss']\n})\nexport class TaskDetailsComponent implements OnInit, OnChanges {\n\n    @ViewChild('activitiComments')\n    activitiComments: CommentsComponent;\n\n    @ViewChild('activitiChecklist')\n    activitiChecklist: any;\n\n    @ViewChild('errorDialog')\n    errorDialog: TemplateRef<any>;\n\n    /** Toggles debug mode. */\n    @Input()\n    debugMode: boolean = false;\n\n    /** (**required**) The id of the task whose details we are asking for. */\n    @Input()\n    taskId: string;\n\n    /** Automatically renders the next task when the current one is completed. */\n    @Input()\n    showNextTask: boolean = true;\n\n    /** Toggles task details Header component. */\n    @Input()\n    showHeader: boolean = true;\n\n    /** Toggles collapsed/expanded state of the Header component. */\n    @Input()\n    showHeaderContent: boolean = true;\n\n    /** Toggles `Involve People` feature for the Header component. */\n    @Input()\n    showInvolvePeople: boolean = true;\n\n    /** Toggles `Comments` feature for the Header component. */\n    @Input()\n    showComments: boolean = true;\n\n    /** Toggles `Checklist` feature for the Header component. */\n    @Input()\n    showChecklist: boolean = true;\n\n    /** Toggles rendering of the form title. */\n    @Input()\n    showFormTitle: boolean = false;\n\n    /** Toggles rendering of the `Complete` outcome button. */\n    @Input()\n    showFormCompleteButton: boolean = true;\n\n    /** Toggles rendering of the `Save` outcome button. */\n    @Input()\n    showFormSaveButton: boolean = true;\n\n    /** Toggles read-only state of the form. All form widgets render as read-only\n     * if enabled.\n     */\n    @Input()\n    readOnlyForm: boolean = false;\n\n    /** Toggles rendering of the `Refresh` button. */\n    @Input()\n    showFormRefreshButton: boolean = true;\n\n    /** Field validators for use with the form. */\n    @Input()\n    fieldValidators: FormFieldValidator[] = [];\n\n    /** Emitted when the form is submitted with the `Save` or custom outcomes. */\n    @Output()\n    formSaved: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    /** Emitted when the form is submitted with the `Complete` outcome. */\n    @Output()\n    formCompleted: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    /** Emitted when the form field content is clicked. */\n    @Output()\n    formContentClicked: EventEmitter<ContentLinkModel> = new EventEmitter<ContentLinkModel>();\n\n    /** Emitted when the form is loaded or reloaded. */\n    @Output()\n    formLoaded: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    /** Emitted when a checklist task is created. */\n    @Output()\n    taskCreated: EventEmitter<TaskDetailsModel> = new EventEmitter<TaskDetailsModel>();\n\n    /** Emitted when a checklist task is deleted. */\n    @Output()\n    taskDeleted: EventEmitter<string> = new EventEmitter<string>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when any outcome is executed. Default behaviour can be prevented\n     * via `event.preventDefault()`.\n     */\n    @Output()\n    executeOutcome: EventEmitter<FormOutcomeEvent> = new EventEmitter<FormOutcomeEvent>();\n\n    /** Emitted when a task is assigned. */\n    @Output()\n    assignTask: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emitted when a task is claimed. */\n    @Output()\n    claimedTask: EventEmitter<string> = new EventEmitter<string>();\n\n    /** Emitted when a task is unclaimed. */\n    @Output()\n    unClaimedTask: EventEmitter<string> = new EventEmitter<string>();\n\n    taskDetails: TaskDetailsModel;\n    taskFormName: string = null;\n\n    taskPeople: UserProcessModel[] = [];\n\n    noTaskDetailsTemplateComponent: TemplateRef<any>;\n\n    showAssignee: boolean = false;\n    showAttachForm: boolean = false;\n    internalReadOnlyForm: boolean = false;\n\n    private peopleSearchObserver: Observer<UserProcessModel[]>;\n    public errorDialogRef: MatDialogRef<TemplateRef<any>>;\n\n    peopleSearch: Observable<UserProcessModel[]>;\n\n    currentLoggedUser: UserRepresentation;\n    data: any;\n\n    constructor(private taskListService: TaskListService,\n                private authService: AuthenticationService,\n                private peopleProcessService: PeopleProcessService,\n                private formRenderingService: FormRenderingService,\n                private logService: LogService,\n                private cardViewUpdateService: CardViewUpdateService,\n                private dialog: MatDialog) {\n\n        this.formRenderingService.setComponentTypeResolver('select-folder', () => AttachFolderWidgetComponent, true);\n        this.formRenderingService.setComponentTypeResolver('upload', () => AttachFileWidgetComponent, true);\n        this.peopleSearch = new Observable<UserProcessModel[]>((observer) => this.peopleSearchObserver = observer)\n            .pipe(share());\n        this.authService.getBpmLoggedUser().subscribe((user: UserRepresentation) => {\n            this.currentLoggedUser = user;\n        });\n    }\n\n    ngOnInit() {\n        if (this.taskId) {\n            this.loadDetails(this.taskId);\n        }\n\n        this.cardViewUpdateService.itemUpdated$.subscribe(this.updateTaskDetails.bind(this));\n        this.cardViewUpdateService.itemClicked$.subscribe(this.clickTaskDetails.bind(this));\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        let taskId = changes.taskId;\n        this.showAssignee = false;\n\n        if (taskId && !taskId.currentValue) {\n            this.reset();\n        } else if (taskId && taskId.currentValue) {\n            this.loadDetails(taskId.currentValue);\n        }\n    }\n\n    isStandaloneTask(): boolean {\n        return !(this.taskDetails && (!!this.taskDetails.processDefinitionId));\n    }\n\n    isStandaloneTaskWithForm(): boolean {\n        return this.isStandaloneTask() && this.hasFormKey();\n    }\n\n    isStandaloneTaskWithoutForm(): boolean {\n        return this.isStandaloneTask() && !this.hasFormKey();\n    }\n\n    isFormComponentVisible(): boolean {\n        return this.hasFormKey() && !this.isShowAttachForm();\n    }\n\n    isTaskStandaloneComponentVisible(): boolean {\n        return this.isStandaloneTaskWithoutForm() && !this.isShowAttachForm();\n    }\n\n    isShowAttachForm(): boolean {\n        return this.showAttachForm;\n    }\n\n    /**\n     * Reset the task details\n     */\n    private reset() {\n        this.taskDetails = null;\n    }\n\n    /**\n     * Check if the task has a form\n     */\n    hasFormKey(): boolean {\n        return (this.taskDetails && (!!this.taskDetails.formKey));\n    }\n\n    isTaskActive() {\n        return this.taskDetails && this.taskDetails.duration === null;\n    }\n\n    /**\n     * Save a task detail and update it after a successful response\n     *\n     * @param updateNotification\n     */\n    private updateTaskDetails(updateNotification: UpdateNotification) {\n        this.taskListService.updateTask(this.taskId, updateNotification.changed)\n            .subscribe(\n                () => {\n                    this.loadDetails(this.taskId);\n                }\n            );\n    }\n\n    private clickTaskDetails(clickNotification: ClickNotification) {\n        if (clickNotification.target.key === 'assignee') {\n            this.showAssignee = true;\n        }\n        if (clickNotification.target.key === 'formName') {\n            this.showAttachForm = true;\n        }\n    }\n\n    /**\n     * Load the activiti task details\n     * @param taskId\n     */\n    private loadDetails(taskId: string) {\n        this.taskPeople = [];\n        this.taskFormName = null;\n\n        if (taskId) {\n            this.taskListService.getTaskDetails(taskId).subscribe(\n                (res: TaskDetailsModel) => {\n                    this.showAttachForm = false;\n                    this.taskDetails = res;\n\n                    if (this.taskDetails.name === 'null') {\n                        this.taskDetails.name = 'No name';\n                    }\n\n                    let endDate: any = res.endDate;\n                    if (endDate && !isNaN(endDate.getTime())) {\n                        this.internalReadOnlyForm = true;\n                    } else {\n                        this.internalReadOnlyForm = this.readOnlyForm;\n                    }\n\n                    if (this.taskDetails && this.taskDetails.involvedPeople) {\n                        this.taskDetails.involvedPeople.forEach((user) => {\n                            this.taskPeople.push(new UserProcessModel(user));\n                        });\n                    }\n                });\n        }\n    }\n\n    isAssigned(): boolean {\n        return !!this.taskDetails.assignee;\n    }\n\n    private hasEmailAddress(): boolean {\n        return this.taskDetails.assignee.email ? true : false;\n    }\n\n    isAssignedToMe(): boolean {\n        return this.isAssigned() && this.hasEmailAddress() ?\n            this.isEmailEqual(this.taskDetails.assignee.email, this.currentLoggedUser.email) :\n            this.isExternalIdEqual(this.taskDetails.assignee.externalId, this.currentLoggedUser.externalId);\n    }\n\n    private isEmailEqual(assigneeMail, currentLoggedEmail): boolean {\n        return assigneeMail.toLocaleLowerCase() === currentLoggedEmail.toLocaleLowerCase();\n    }\n\n    private isExternalIdEqual(assigneeExternalId, currentUserExternalId): boolean {\n        return assigneeExternalId.toLocaleLowerCase() === currentUserExternalId.toLocaleLowerCase();\n    }\n\n    isCompleteButtonEnabled(): boolean {\n        return this.isAssignedToMe() || this.canInitiatorComplete();\n    }\n\n    isCompleteButtonVisible(): boolean {\n        return !this.hasFormKey() && this.isTaskActive() && this.isCompleteButtonEnabled();\n    }\n\n    canInitiatorComplete(): boolean {\n        return this.taskDetails.initiatorCanCompleteTask;\n    }\n\n    isSaveButtonVisible(): boolean {\n        return this.hasSaveButton() && (!this.canInitiatorComplete() || this.isAssignedToMe());\n    }\n\n    hasSaveButton(): boolean {\n        return this.showFormSaveButton;\n    }\n\n    /**\n     * Retrieve the next open task\n     * @param processInstanceId\n     * @param processDefinitionId\n     */\n    private loadNextTask(processInstanceId: string, processDefinitionId: string): void {\n        let requestNode = new TaskQueryRequestRepresentationModel(\n            {\n                processInstanceId: processInstanceId,\n                processDefinitionId: processDefinitionId\n            }\n        );\n        this.taskListService.getTasks(requestNode).subscribe(\n            (response) => {\n                if (response && response.length > 0) {\n                    this.taskDetails = new TaskDetailsModel(response[0]);\n                } else {\n                    this.reset();\n                }\n            }, (error) => {\n                this.error.emit(error);\n            });\n    }\n\n    /**\n     * Complete button clicked\n     */\n    onComplete(): void {\n        this.taskListService.completeTask(this.taskId).subscribe(\n            (res) => this.onFormCompleted(null)\n        );\n    }\n\n    onShowAttachForm() {\n        this.showAttachForm = true;\n    }\n\n    onCancelAttachForm() {\n        this.showAttachForm = false;\n    }\n\n    onCompleteAttachForm() {\n        this.showAttachForm = false;\n        this.loadDetails(this.taskId);\n    }\n\n    onFormContentClick(content: ContentLinkModel): void {\n        this.formContentClicked.emit(content);\n    }\n\n    onFormSaved(form: FormModel): void {\n        this.formSaved.emit(form);\n    }\n\n    onFormCompleted(form: FormModel): void {\n        this.formCompleted.emit(form);\n        if (this.showNextTask && (this.taskDetails.processInstanceId || this.taskDetails.processDefinitionId)) {\n            this.loadNextTask(this.taskDetails.processInstanceId, this.taskDetails.processDefinitionId);\n        }\n    }\n\n    onFormLoaded(form: FormModel): void {\n        this.taskFormName = (form && form.name ? form.name : null);\n        this.formLoaded.emit(form);\n    }\n\n    onChecklistTaskCreated(task: TaskDetailsModel): void {\n        this.taskCreated.emit(task);\n    }\n\n    onChecklistTaskDeleted(taskId: string): void {\n        this.taskDeleted.emit(taskId);\n    }\n\n    onFormError(error: any): void {\n        this.errorDialogRef = this.dialog.open(this.errorDialog, { width: '500px' });\n        this.error.emit(error);\n    }\n\n    onFormExecuteOutcome(event: FormOutcomeEvent): void {\n        this.executeOutcome.emit(event);\n    }\n\n    closeErrorDialog(): void {\n        this.dialog.closeAll();\n    }\n\n    onClaimAction(taskId: string): void {\n        this.claimedTask.emit(taskId);\n        this.loadDetails(taskId);\n    }\n\n    onUnclaimAction(taskId: string): void {\n        this.unClaimedTask.emit(taskId);\n        this.loadDetails(taskId);\n    }\n\n    isCompletedTask(): boolean {\n        return this.taskDetails && this.taskDetails.endDate ? true : undefined;\n    }\n\n    searchUser(searchedWord: string) {\n        this.peopleProcessService.getWorkflowUsers(null, searchedWord)\n            .subscribe((users) => {\n                users = users.filter((user) => user.id !== this.taskDetails.assignee.id);\n                this.peopleSearchObserver.next(users);\n            }, (error) => this.logService.error('Could not load users'));\n    }\n\n    onCloseSearch() {\n        this.showAssignee = false;\n    }\n\n    assignTaskToUser(selectedUser: UserProcessModel) {\n        this.taskListService.assignTask(this.taskDetails.id, selectedUser).subscribe(\n            (res: any) => {\n                this.logService.info('Task Assigned to ' + selectedUser.email);\n                this.assignTask.emit();\n            });\n        this.showAssignee = false;\n    }\n\n    getTaskHeaderViewClass(): string {\n        if (this.showAssignee) {\n            return 'assign-edit-view';\n        } else {\n            return 'default-view';\n        }\n    }\n\n    isReadOnlyComment(): boolean {\n        return (this.taskDetails && this.taskDetails.isCompleted()) && (this.taskPeople && this.taskPeople.length === 0);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AfterContentInit,\n    ContentChild,\n    Directive,\n    TemplateRef\n} from '@angular/core';\nimport { TaskDetailsComponent } from './task-details.component';\n\n/**\n * Directive selectors without adf- prefix will be deprecated on 3.0.0\n */\n@Directive({\n    selector: 'adf-no-task-details-template, no-task-details-template'\n})\nexport class NoTaskDetailsTemplateDirective implements AfterContentInit {\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    constructor(\n        private activitiTaskDetails: TaskDetailsComponent) {\n    }\n\n    ngAfterContentInit() {\n        this.activitiTaskDetails.noTaskDetailsTemplateComponent = this.template;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable, forkJoin, from, throwError } from 'rxjs';\nimport { FilterRepresentationModel } from '../models/filter.model';\nimport { map, catchError } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskFilterService {\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Creates and returns the default filters for a process app.\n     * @param appId ID of the target app\n     * @returns Array of default filters just created\n     */\n    public createDefaultFilters(appId: number): Observable<FilterRepresentationModel[]> {\n        let involvedTasksFilter = this.getInvolvedTasksFilterInstance(appId);\n        let involvedObservable = this.addFilter(involvedTasksFilter);\n\n        let myTasksFilter = this.getMyTasksFilterInstance(appId);\n        let myTaskObservable = this.addFilter(myTasksFilter);\n\n        let queuedTasksFilter = this.getQueuedTasksFilterInstance(appId);\n        let queuedObservable = this.addFilter(queuedTasksFilter);\n\n        let completedTasksFilter = this.getCompletedTasksFilterInstance(appId);\n        let completeObservable = this.addFilter(completedTasksFilter);\n\n        return new Observable((observer) => {\n            forkJoin(\n                involvedObservable,\n                myTaskObservable,\n                queuedObservable,\n                completeObservable\n            ).subscribe(\n                (res) => {\n                    let filters: FilterRepresentationModel[] = [];\n                    res.forEach((filter) => {\n                        if (filter.name === involvedTasksFilter.name) {\n                            involvedTasksFilter.id = filter.id;\n                            filters.push(involvedTasksFilter);\n                        } else if (filter.name === myTasksFilter.name) {\n                            myTasksFilter.id = filter.id;\n                            filters.push(myTasksFilter);\n                        } else if (filter.name === queuedTasksFilter.name) {\n                            queuedTasksFilter.id = filter.id;\n                            filters.push(queuedTasksFilter);\n                        } else if (filter.name === completedTasksFilter.name) {\n                            completedTasksFilter.id = filter.id;\n                            filters.push(completedTasksFilter);\n                        }\n                    });\n                    observer.next(filters);\n                    observer.complete();\n                },\n                (err: any) => {\n                    this.logService.error(err);\n                });\n        });\n    }\n\n    /**\n     * Gets all task filters for a process app.\n     * @param appId Optional ID for a specific app\n     * @returns Array of task filter details\n     */\n    getTaskListFilters(appId?: number): Observable<FilterRepresentationModel[]> {\n        return from(this.callApiTaskFilters(appId))\n            .pipe(\n                map((response: any) => {\n                    const filters: FilterRepresentationModel[] = [];\n                    response.data.forEach((filter: FilterRepresentationModel) => {\n                        const filterModel = new FilterRepresentationModel(filter);\n                        filters.push(filterModel);\n                    });\n                    return filters;\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Gets a task filter by ID.\n     * @param filterId ID of the filter\n     * @param appId ID of the app for the filter\n     * @returns Details of task filter\n     */\n    getTaskFilterById(filterId: number, appId?: number): Observable<FilterRepresentationModel> {\n        return from(this.callApiTaskFilters(appId)).pipe(\n            map((response) => response.data.find((filter) => filter.id === filterId)),\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Gets a task filter by name.\n     * @param taskName Name of the filter\n     * @param appId ID of the app for the filter\n     * @returns Details of task filter\n     */\n    getTaskFilterByName(taskName: string, appId?: number): Observable<FilterRepresentationModel> {\n        return from(this.callApiTaskFilters(appId)).pipe(\n            map((response) => response.data.find((filter) => filter.name === taskName)),\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Adds a new task filter\n     * @param filter The new filter to add\n     * @returns Details of task filter just added\n     */\n    addFilter(filter: FilterRepresentationModel): Observable<FilterRepresentationModel> {\n        return from(this.apiService.getInstance().activiti.userFiltersApi.createUserTaskFilter(filter))\n            .pipe(\n                map((response: FilterRepresentationModel) => {\n                    return response;\n                }),\n                catchError((err) => this.handleError(err))\n            );\n    }\n\n    /**\n     * Calls `getUserTaskFilters` from the Alfresco JS API.\n     * @param appId ID of the target app\n     * @returns List of task filters\n     */\n    callApiTaskFilters(appId?: number): Promise<any> {\n        if (appId) {\n            return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters({appId: appId});\n        } else {\n            return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters();\n        }\n    }\n\n    /**\n     * Creates and returns a filter for \"Involved\" task instances.\n     * @param appId ID of the target app\n     * @returns The newly created filter\n     */\n    getInvolvedTasksFilterInstance(appId: number): FilterRepresentationModel {\n        return new FilterRepresentationModel({\n            'name': 'Involved Tasks',\n            'appId': appId,\n            'recent': false,\n            'icon': 'glyphicon-align-left',\n            'filter': {'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'involved'}\n        });\n    }\n\n    /**\n     * Creates and returns a filter for \"My Tasks\" task instances.\n     * @param appId ID of the target app\n     * @returns The newly created filter\n     */\n    getMyTasksFilterInstance(appId: number): FilterRepresentationModel {\n        return new FilterRepresentationModel({\n            'name': 'My Tasks',\n            'appId': appId,\n            'recent': false,\n            'icon': 'glyphicon-inbox',\n            'filter': {'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'assignee'}\n        });\n    }\n\n    /**\n     * Creates and returns a filter for \"Queued Tasks\" task instances.\n     * @param appId ID of the target app\n     * @returns The newly created filter\n     */\n    getQueuedTasksFilterInstance(appId: number): FilterRepresentationModel {\n        return new FilterRepresentationModel({\n            'name': 'Queued Tasks',\n            'appId': appId,\n            'recent': false,\n            'icon': 'glyphicon-record',\n            'filter': {'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'candidate'}\n        });\n    }\n\n    /**\n     * Creates and returns a filter for \"Completed\" task instances.\n     * @param appId ID of the target app\n     * @returns The newly created filter\n     */\n    getCompletedTasksFilterInstance(appId: number): FilterRepresentationModel {\n        return new FilterRepresentationModel({\n            'name': 'Completed Tasks',\n            'appId': appId,\n            'recent': true,\n            'icon': 'glyphicon-ok-sign',\n            'filter': {'sort': 'created-desc', 'name': '', 'state': 'completed', 'assignment': 'involved'}\n        });\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppsProcessService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { FilterParamsModel, FilterRepresentationModel } from '../models/filter.model';\nimport { TaskFilterService } from './../services/task-filter.service';\nimport { TaskListService } from './../services/tasklist.service';\nimport { IconModel } from '../../app-list/icon.model';\n\n@Component({\n    selector: 'adf-task-filters',\n    templateUrl: './task-filters.component.html',\n    styleUrls: ['task-filters.component.scss']\n})\nexport class TaskFiltersComponent implements OnInit, OnChanges {\n\n    /** Parameters to use for the task filter. If there is no match then\n     * the default filter (the first one the list) is selected.\n     */\n    @Input()\n    filterParam: FilterParamsModel;\n\n    /** Emitted when a filter in the list is clicked. */\n    @Output()\n    filterClick: EventEmitter<FilterRepresentationModel> = new EventEmitter<FilterRepresentationModel>();\n\n    /** Emitted when the list is loaded. */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an error occurs during loading. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Display filters available to the current user for the application with the specified ID. */\n    @Input()\n    appId: number;\n\n    /** Display filters available to the current user for the application with the specified name. */\n    @Input()\n    appName: string;\n\n    /** Toggles display of the filter's icon. */\n    @Input()\n    showIcon: boolean;\n\n    filter$: Observable<FilterRepresentationModel>;\n\n    currentFilter: FilterRepresentationModel;\n\n    filters: FilterRepresentationModel [] = [];\n\n    private iconsMDL: IconModel;\n\n    constructor(private taskFilterService: TaskFilterService,\n                private taskListService: TaskListService,\n                private appsProcessService: AppsProcessService) {\n    }\n\n    ngOnInit() {\n        this.iconsMDL = new IconModel();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const appName = changes['appName'];\n        const appId = changes['appId'];\n        const filter = changes['filterParam'];\n        if (appName && appName.currentValue) {\n            this.getFiltersByAppName(appName.currentValue);\n        } else if (appId && appId.currentValue !== appId.previousValue) {\n            this.getFiltersByAppId(appId.currentValue);\n        } else if (filter && filter.currentValue !== filter.previousValue) {\n            this.selectFilter(filter.currentValue);\n        }\n    }\n\n    /**\n     * Return the task list filtered by appId or by appName\n     * @param appId\n     * @param appName\n     */\n    getFilters(appId?: number, appName?: string) {\n        appName ? this.getFiltersByAppName(appName) : this.getFiltersByAppId(appId);\n    }\n\n    /**\n     * Return the filter list filtered by appId\n     * @param appId - optional\n     */\n    getFiltersByAppId(appId?: number) {\n        this.taskFilterService.getTaskListFilters(appId).subscribe(\n            (res: FilterRepresentationModel[]) => {\n                if (res.length === 0 && this.isFilterListEmpty()) {\n                    this.createFiltersByAppId(appId);\n                } else {\n                    this.resetFilter();\n                    this.filters = res;\n                    this.selectFilter(this.filterParam);\n                    this.success.emit(res);\n                }\n            },\n            (err: any) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    /**\n     * Return the filter list filtered by appName\n     * @param appName\n     */\n    getFiltersByAppName(appName: string) {\n        this.appsProcessService.getDeployedApplicationsByName(appName).subscribe(\n            (application) => {\n                this.getFiltersByAppId(application.id);\n            },\n            (err) => {\n                this.error.emit(err);\n            });\n    }\n\n    /**\n     * Create default filters by appId\n     * @param appId\n     */\n    createFiltersByAppId(appId?: number) {\n        this.taskFilterService.createDefaultFilters(appId).subscribe(\n            (resDefault: FilterRepresentationModel[]) => {\n                this.resetFilter();\n                this.filters = resDefault;\n                this.selectFilter(this.filterParam);\n                this.success.emit(resDefault);\n            },\n            (errDefault: any) => {\n                this.error.emit(errDefault);\n            }\n        );\n    }\n\n    /**\n     * Pass the selected filter as next\n     * @param filter\n     */\n    public selectFilter(newFilter: FilterParamsModel) {\n        if (newFilter) {\n            this.currentFilter = this.filters.find( (filter, index) =>\n                newFilter.index === index ||\n                newFilter.id === filter.id ||\n                (newFilter.name &&\n                    (newFilter.name.toLocaleLowerCase() === filter.name.toLocaleLowerCase())\n                ));\n        }\n        if (!this.currentFilter) {\n            this.selectDefaultTaskFilter();\n        }\n    }\n\n    public selectFilterAndEmit(newFilter: FilterParamsModel) {\n        this.selectFilter(newFilter);\n        this.filterClick.emit(this.currentFilter);\n    }\n\n    /**\n     * Select filter with task\n     * @param taskId\n     */\n    public selectFilterWithTask(taskId: string) {\n        let filteredFilterList: FilterRepresentationModel[] = [];\n        this.taskListService.getFilterForTaskById(taskId, this.filters).subscribe(\n            (filter: FilterRepresentationModel) => {\n                filteredFilterList.push(filter);\n            },\n            (err) => {\n                this.error.emit(err);\n            },\n            () => {\n                if (filteredFilterList.length > 0) {\n                    this.selectFilter(filteredFilterList[0]);\n                    this.filterClick.emit(this.currentFilter);\n                }\n            });\n    }\n\n    /**\n     * Select as default task filter the first in the list\n     * @param filteredFilterList\n     */\n    public selectDefaultTaskFilter() {\n        if (!this.isFilterListEmpty()) {\n            this.currentFilter = this.filters[0];\n        }\n    }\n\n    /**\n     * Return the current task\n     */\n    getCurrentFilter(): FilterRepresentationModel {\n        return this.currentFilter;\n    }\n\n    /**\n     * Check if the filter list is empty\n     */\n    isFilterListEmpty(): boolean {\n        return this.filters === undefined || (this.filters && this.filters.length === 0);\n    }\n\n    /**\n     * Reset the filters properties\n     */\n    private resetFilter() {\n        this.filters = [];\n        this.currentFilter = undefined;\n    }\n\n    /**\n     * Return current filter icon\n     */\n    getFilterIcon(icon): string {\n        return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(icon);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { ContentService } from '@alfresco/adf-core';\nimport { Directive, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { TaskListService } from './../services/tasklist.service';\n\nconst JSON_FORMAT: string = 'json';\nconst PDF_FORMAT: string = 'pdf';\n\n@Directive({\n    selector: 'button[adf-task-audit]',\n    host: {\n        'role': 'button',\n        '(click)': 'onClickAudit()'\n    }\n})\nexport class TaskAuditDirective implements OnChanges {\n\n    /** (**required**) The id of the task. */\n    @Input('task-id')\n    taskId: string;\n\n    /** Name of the downloaded file (for PDF downloads). */\n    @Input()\n    fileName: string = 'Audit';\n\n    /** Format of the audit information. Can be \"pdf\" or \"json\". */\n    @Input()\n    format: string = 'pdf';\n\n    /** Enables downloading of the audit when the decorated element is clicked. */\n    @Input()\n    download: boolean = true;\n\n    /** Emitted when the decorated element is clicked. */\n    @Output()\n    clicked: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    public audit: any;\n\n    /**\n     *\n     * @param translateService\n     * @param taskListService\n     */\n    constructor(private contentService: ContentService,\n                private taskListService: TaskListService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!this.isValidType()) {\n            this.setDefaultFormatType();\n        }\n    }\n\n    isValidType() {\n        if (this.format && (this.isJsonFormat() || this.isPdfFormat())) {\n            return true;\n        }\n        return false;\n    }\n\n    setDefaultFormatType(): void {\n        this.format = PDF_FORMAT;\n    }\n\n    /**\n     * fetch the audit information in the requested format\n     */\n    fetchAuditInfo(): void {\n        if (this.isPdfFormat()) {\n            this.taskListService.fetchTaskAuditPdfById(this.taskId).subscribe(\n                (blob: Blob) => {\n                    this.audit = blob;\n                    if (this.download) {\n                        this.contentService.downloadBlob(this.audit, this.fileName + '.pdf');\n                    }\n                    this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        } else {\n            this.taskListService.fetchTaskAuditJsonById(this.taskId).subscribe(\n                (res) => {\n                    this.audit = res;\n                    this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n\n    onClickAudit() {\n        this.fetchAuditInfo();\n    }\n\n    isJsonFormat() {\n        return this.format === JSON_FORMAT;\n    }\n\n    isPdfFormat() {\n        return this.format === PDF_FORMAT;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogService, UserPreferencesService, UserPreferenceValues, UserProcessModel, FormFieldModel, FormModel } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { MOMENT_DATE_FORMATS, MomentDateAdapter } from '@alfresco/adf-core';\nimport moment from 'moment-es6';\nimport { Moment } from 'moment';\nimport { Observable, of } from 'rxjs';\nimport { Form } from '../models/form.model';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListService } from './../services/tasklist.service';\nimport { switchMap, defaultIfEmpty } from 'rxjs/operators';\nimport { FormBuilder, AbstractControl, Validators, FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n    selector: 'adf-start-task',\n    templateUrl: './start-task.component.html',\n    styleUrls: ['./start-task.component.scss'],\n    providers: [\n        { provide: DateAdapter, useClass: MomentDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS }],\n    encapsulation: ViewEncapsulation.None\n})\nexport class StartTaskComponent implements OnInit {\n\n    public FORMAT_DATE: string = 'DD/MM/YYYY';\n    MAX_LENGTH: number = 255;\n\n    /** (required) The id of the app. */\n    @Input()\n    appId: number;\n\n    /** Default Task Name. */\n    @Input()\n    name: string = '';\n\n    /** Emitted when the task is successfully created. */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the cancel button is clicked by the user. */\n    @Output()\n    cancel: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    taskDetailsModel: TaskDetailsModel = new TaskDetailsModel();\n    forms$: Observable<Form[]>;\n    assigneeId: number;\n    field: FormFieldModel;\n    taskForm: FormGroup;\n    dateError: boolean = false;\n    maxTaskNameLength: number = this.MAX_LENGTH;\n    loading = false;\n\n    /**\n     * Constructor\n     * @param auth\n     * @param translate\n     * @param taskService\n     */\n    constructor(private taskService: TaskListService,\n                private dateAdapter: DateAdapter<Moment>,\n                private userPreferencesService: UserPreferencesService,\n                private formBuilder: FormBuilder,\n                private logService: LogService) {\n    }\n\n    ngOnInit() {\n        if (this.name) {\n            this.taskDetailsModel.name = this.name;\n        }\n\n        this.validateMaxTaskNameLength();\n\n        this.field = new FormFieldModel(new FormModel(), { id: this.assigneeId, value: this.assigneeId, placeholder: 'Assignee' });\n        this.userPreferencesService.select(UserPreferenceValues.Locale).subscribe((locale) => {\n            this.dateAdapter.setLocale(locale);\n        });\n\n        this.loadFormsTask();\n        this.buildForm();\n    }\n\n    buildForm() {\n        this.taskForm = this.formBuilder.group({\n            name: new FormControl(this.taskDetailsModel.name, [Validators.required, Validators.maxLength(this.maxTaskNameLength)]),\n            description: new FormControl(''),\n            formKey: new FormControl('')\n        });\n\n        this.taskForm.valueChanges.subscribe((taskFormValues) => this.setTaskDetails(taskFormValues));\n    }\n\n    setTaskDetails(form) {\n        this.taskDetailsModel.name = form.name;\n        this.taskDetailsModel.description = form.description;\n        this.taskDetailsModel.formKey = form.formKey ? form.formKey.toString() : null;\n    }\n\n    isFormValid() {\n        return this.taskForm.valid && !this.dateError && !this.loading;\n    }\n\n    public saveTask(): void {\n        this.loading = true;\n        if (this.appId) {\n            this.taskDetailsModel.category = this.appId.toString();\n        }\n        this.taskService.createNewTask(this.taskDetailsModel)\n            .pipe(\n                switchMap((createRes: any) =>\n                    this.attachForm(createRes.id, this.taskDetailsModel.formKey).pipe(\n                        defaultIfEmpty(createRes),\n                        switchMap((attachRes: any) =>\n                            this.assignTaskByUserId(createRes.id, this.assigneeId).pipe(\n                                defaultIfEmpty(attachRes ? attachRes : createRes)\n                            )\n                        )\n                    )\n                )\n            )\n            .subscribe(\n                (res: any) => {\n                    this.loading = false;\n                    this.success.emit(res);\n                },\n                (err) => {\n                    this.loading = false;\n                    this.error.emit(err);\n                    this.logService.error('An error occurred while creating new task');\n                });\n    }\n\n    getAssigneeId(userId) {\n        this.assigneeId = userId;\n    }\n\n    private attachForm(taskId: string, formKey: string): Observable<any> {\n        let response = of();\n        if (taskId && formKey) {\n            response = this.taskService.attachFormToATask(taskId, parseInt(formKey, 10));\n        }\n        return response;\n    }\n\n    private assignTaskByUserId(taskId: string, userId: any): Observable<any> {\n        let response = of();\n        if (taskId && userId) {\n            response = this.taskService.assignTaskByUserId(taskId, userId);\n        }\n        return response;\n    }\n\n    public onCancel(): void {\n        this.cancel.emit();\n    }\n\n    private loadFormsTask(): void {\n        this.forms$ = this.taskService.getFormList();\n    }\n\n    public isUserNameEmpty(user: UserProcessModel): boolean {\n        return !user || (this.isEmpty(user.firstName) && this.isEmpty(user.lastName));\n    }\n\n    private isEmpty(data: string): boolean {\n        return data === undefined || data === null || data.trim().length === 0;\n    }\n\n    public getDisplayUser(firstName: string, lastName: string, delimiter: string = '-'): string {\n        firstName = (firstName !== null ? firstName : '');\n        lastName = (lastName !== null ? lastName : '');\n        return firstName + delimiter + lastName;\n    }\n\n    onDateChanged(newDateValue: any) {\n        this.dateError = false;\n\n        if (newDateValue) {\n            let momentDate;\n\n            if (typeof newDateValue === 'string') {\n                momentDate = moment(newDateValue, this.FORMAT_DATE, true);\n            } else {\n                momentDate = newDateValue;\n            }\n\n            if (momentDate.isValid()) {\n                this.taskDetailsModel.dueDate = momentDate.toDate();\n            } else {\n                this.dateError = true;\n                this.taskDetailsModel.dueDate = null;\n            }\n        } else {\n            this.taskDetailsModel.dueDate = null;\n        }\n    }\n\n    private validateMaxTaskNameLength() {\n        if (this.maxTaskNameLength > this.MAX_LENGTH) {\n            this.maxTaskNameLength = this.MAX_LENGTH;\n            this.logService.log(`the task name length cannot be greater than ${this.MAX_LENGTH}`);\n        }\n    }\n\n    get nameController(): AbstractControl {\n        return this.taskForm.get('name');\n    }\n\n    get descriptionController(): AbstractControl {\n        return this.taskForm.get('description');\n    }\n\n    get formKeyController(): AbstractControl {\n        return this.taskForm.get('formKey');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'adf-task-standalone',\n    templateUrl: './task-standalone.component.html',\n    styleUrls: ['./task-standalone.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class TaskStandaloneComponent {\n\n    /** Name of the task. */\n    @Input()\n    taskName;\n\n    /** Id of the task. */\n    @Input()\n    taskId;\n\n    /** If true then Task completed message is shown and `Complete` and `Cancel` buttons are hidden. */\n    @Input()\n    isCompleted: boolean = false;\n\n    /** Toggles rendering of the `Complete` button. */\n    @Input()\n    hasCompletePermission: boolean = true;\n\n    // TODO: rename all with show prefix\n    /** Toggles rendering of the `Cancel` button. */\n    @Input()\n    hideCancelButton: boolean = true;\n\n    /** Emitted when the \"Cancel\" button is clicked. */\n    @Output()\n    cancel: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emitted when the form associated with the task is completed. */\n    @Output()\n    complete: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emitted when the form associated with the form task is attached. */\n    @Output()\n    showAttachForm: EventEmitter<void> = new EventEmitter<void>();\n\n    constructor() { }\n\n    onCancelButtonClick(): void {\n        this.cancel.emit();\n    }\n\n    onCompleteButtonClick(): void {\n        this.complete.emit();\n    }\n\n    hasCompleteButton(): boolean {\n        return this.hasCompletePermission && !this.isCompleted;\n    }\n\n    hasCancelButton(): boolean {\n        return !this.hideCancelButton && !this.isCompleted;\n    }\n\n    hasAttachFormButton(): boolean {\n        return !this.isCompleted;\n    }\n\n    onShowAttachForm() {\n        this.showAttachForm.emit();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormService, LogService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\nimport { Form } from '../models/form.model';\nimport { TaskListService } from './../services/tasklist.service';\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n    selector: 'adf-attach-form',\n    templateUrl: './attach-form.component.html',\n    styleUrls: ['./attach-form.component.scss']\n})\n\nexport class AttachFormComponent implements OnInit, OnChanges {\n    constructor(private taskService: TaskListService,\n                private logService: LogService,\n                private formService: FormService) { }\n\n    /** Id of the task. */\n    @Input()\n    taskId;\n\n    /** Identifier of the form to attach. */\n    @Input()\n    formKey;\n\n    /** Emitted when the \"Cancel\" button is clicked. */\n    @Output()\n    cancelAttachForm: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emitted when the form is attached successfully. */\n    @Output()\n    success: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    forms: Form[];\n\n    formId: number;\n    disableSubmit: boolean = true;\n    selectedFormId: number;\n\n    attachFormControl: FormControl;\n\n    ngOnInit() {\n        this.attachFormControl = new FormControl('', Validators.required);\n        this.attachFormControl.valueChanges.subscribe( (currentValue) => {\n            if (this.attachFormControl.valid) {\n                if ( this.formId !== currentValue) {\n                    this.disableSubmit = false;\n                } else {\n                    this.disableSubmit = true;\n                }\n            }\n        });\n    }\n\n    ngOnChanges() {\n        this.formId = undefined;\n        this.disableSubmit = true;\n        this.loadFormsTask();\n        if (this.formKey) {\n            this.onFormAttached();\n        }\n    }\n\n    onCancelButtonClick(): void {\n        this.selectedFormId = this.formId;\n        this.cancelAttachForm.emit();\n    }\n\n    onRemoveButtonClick(): void {\n        this.taskService.deleteForm(this.taskId).subscribe(\n            () => {\n                this.formId = this.selectedFormId = null;\n                this.success.emit();\n            },\n            (err) => {\n                this.error.emit(err);\n                this.logService.error('An error occurred while trying to delete the form');\n            });\n    }\n\n    onAttachFormButtonClick(): void {\n        this.attachForm(this.taskId, this.selectedFormId);\n    }\n\n    private loadFormsTask(): void {\n        this.taskService.getFormList().subscribe((form: Form[]) => {\n                this.forms = form;\n            },\n            (err) => {\n                this.error.emit(err);\n                this.logService.error('An error occurred while trying to get the forms');\n            });\n    }\n\n    private onFormAttached() {\n        this.formService.getTaskForm(this.taskId)\n            .subscribe((res) => {\n                this.formService.getFormDefinitionByName(res.name).subscribe((formDef) => {\n                    this.formId = this.selectedFormId = formDef;\n                });\n            }, (err) => {\n                this.error.emit(err);\n                this.logService.error('Could not load forms');\n            });\n    }\n\n    private attachForm(taskId: string, formId: number) {\n        if (taskId && formId) {\n            this.taskService.attachFormToATask(taskId, formId)\n                .subscribe(() => {\n                    this.success.emit();\n                }, (err) => {\n                    this.error.emit(err);\n                    this.logService.error('Could not attach form');\n                });\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, AppConfigService, UploadService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProcessUploadService extends UploadService {\n\n    constructor(apiService: AlfrescoApiService, appConfigService: AppConfigService) {\n        super(apiService, appConfigService);\n    }\n\n    getUploadPromise(file: any): any {\n        let opts = {\n            isRelatedContent: true\n        };\n        let processInstanceId = file.options.parentId;\n        let promise = this.apiService.getInstance().activiti.contentApi.createRelatedContentOnProcessInstance(processInstanceId, file.file, opts);\n\n        promise.catch((err) => this.handleError(err));\n\n        return promise;\n    }\n\n    private handleError(error: any) {\n        return throwError(error || 'Server error');\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, AppConfigService, UploadService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskUploadService extends UploadService {\n\n    constructor(apiService: AlfrescoApiService, appConfigService: AppConfigService) {\n        super(apiService, appConfigService);\n    }\n\n    getUploadPromise(file: any): any {\n        let opts = {\n            isRelatedContent: true\n        };\n        let taskId = file.options.parentId;\n        let promise = this.apiService.getInstance().activiti.contentApi.createRelatedContentOnTask(taskId, file.file, opts);\n\n        promise.catch((err) => this.handleError(err));\n\n        return promise;\n    }\n\n    private handleError(error: any) {\n        return throwError(error || 'Server error');\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This object represent of the StartTaskModel.\n */\nimport { UserProcessModel } from '@alfresco/adf-core';\n\nexport class StartTaskModel {\n\n    name: string;\n    description: string;\n    assignee: UserProcessModel;\n    dueDate: any;\n    formKey: any;\n    category: string;\n\n    constructor(obj?: any) {\n        this.name = obj && obj.name || null;\n        this.description = obj && obj.description || null;\n        this.assignee = obj && obj.assignee ? new UserProcessModel(obj.assignee) : null;\n        this.dueDate = obj && obj.dueDate || null;\n        this.formKey = obj && obj.formKey || null;\n        this.category = obj && obj.category || null;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TaskDetailsModel } from './task-details.model';\n\nexport class TaskDetailsEvent {\n\n    private _value: TaskDetailsModel;\n    private _defaultPrevented: boolean = false;\n\n    get value(): TaskDetailsModel {\n        return this._value;\n    }\n\n    get defaultPrevented() {\n        return this._defaultPrevented;\n    }\n\n    constructor(value: TaskDetailsModel) {\n        this._value = value;\n    }\n\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This object represent the User Event.\n */\nexport class UserEventModel {\n    type: string = '';\n    value: any = {};\n\n    constructor(obj?: any) {\n        this.type = obj && obj.type;\n        this.value = obj && obj.value || {};\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This object represent the process service user group.*\n */\n\nexport class UserGroupModel {\n    id?: number;\n    name?: string;\n    externalId?: string;\n    status?: string;\n    groups?: any = {};\n\n    constructor(obj?: any) {\n        this.id = obj && obj.id;\n        this.name = obj && obj.name;\n        this.externalId = obj && obj.externalId;\n        this.status = obj && obj.status;\n        this.groups = obj && obj.groups;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommentModel, CommentProcessService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-process-instance-comments',\n    templateUrl: './process-comments.component.html',\n    styleUrls: ['./process-comments.component.scss']\n})\nexport class ProcessCommentsComponent implements OnChanges {\n\n    /** (**required**) The numeric ID of the process instance to display comments for. */\n    @Input()\n    processInstanceId: string;\n\n    /** Should the comments be read-only? */\n    @Input()\n    readOnly: boolean = true;\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    comments: CommentModel [] = [];\n\n    private commentObserver: Observer<CommentModel>;\n    comment$: Observable<CommentModel>;\n\n    message: string;\n\n    beingAdded: boolean = false;\n\n    constructor(private commentProcessService: CommentProcessService) {\n        this.comment$ = new Observable<CommentModel>((observer) =>  this.commentObserver = observer)\n            .pipe(share());\n        this.comment$.subscribe((comment: CommentModel) => {\n            this.comments.push(comment);\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let processInstanceId = changes['processInstanceId'];\n        if (processInstanceId) {\n            if (processInstanceId.currentValue) {\n                this.getProcessInstanceComments(processInstanceId.currentValue);\n            } else {\n                this.resetComments();\n            }\n        }\n    }\n\n    private getProcessInstanceComments(processInstanceId: string): void {\n        this.resetComments();\n        if (processInstanceId) {\n            this.commentProcessService.getProcessInstanceComments(processInstanceId).subscribe(\n                (res: CommentModel[]) => {\n                    res = res.sort((comment1: CommentModel, comment2: CommentModel) => {\n                        let date1 = new Date(comment1.created);\n                        let date2 = new Date(comment2.created);\n                        return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;\n                    });\n                    res.forEach((comment) => {\n                        this.commentObserver.next(comment);\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        }\n    }\n\n    private resetComments(): void {\n        this.comments = [];\n    }\n\n    add(): void {\n        if (this.message && this.message.trim() && !this.beingAdded) {\n            this.beingAdded = true;\n            this.commentProcessService.addProcessInstanceComment(this.processInstanceId, this.message)\n                .subscribe(\n                    (res: CommentModel) => {\n                        this.comments.unshift(res);\n                        this.message = '';\n                        this.beingAdded = false;\n\n                    },\n                    (err) => {\n                        this.error.emit(err);\n                        this.beingAdded = false;\n                    }\n                );\n        }\n    }\n\n    clear(): void {\n        this.message = '';\n    }\n\n    isReadOnly(): boolean {\n        return this.readOnly;\n    }\n\n    onError(error: any) {\n        this.error.emit(error);\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule } from '@alfresco/adf-core';\n\nimport { ProcessCommentsComponent } from './process-comments.component';\n\n@NgModule({\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        CommonModule,\n        CoreModule.forChild()\n    ],\n    declarations: [\n        ProcessCommentsComponent\n    ],\n    exports: [\n        ProcessCommentsComponent\n    ]\n})\nexport class ProcessCommentsModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogService, UserProcessModel } from '@alfresco/adf-core';\nimport { PeopleProcessService } from '@alfresco/adf-core';\nimport { AfterViewInit, Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { UserEventModel } from '../../../task-list/models/user-event.model';\nimport { PeopleSearchComponent } from '../people-search/people-search.component';\nimport { share } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-people',\n    templateUrl: './people.component.html',\n    styleUrls: ['./people.component.scss']\n})\nexport class PeopleComponent implements OnInit, AfterViewInit {\n\n    /** The array of User objects to display. */\n    @Input()\n    people: UserProcessModel[] = [];\n\n    /** The numeric ID of the task. */\n    @Input()\n    taskId: string = '';\n\n    /** Should the data be read-only? */\n    @Input()\n    readOnly: boolean = false;\n\n    @ViewChild('peopleSearch')\n    peopleSearch: PeopleSearchComponent;\n\n    showAssignment: boolean = false;\n\n    private peopleSearchObserver: Observer<UserProcessModel[]>;\n    peopleSearch$: Observable<UserProcessModel[]>;\n\n    constructor(private logService: LogService, public peopleProcessService: PeopleProcessService) {\n        this.peopleSearch$ = new Observable<UserProcessModel[]>((observer) => this.peopleSearchObserver = observer)\n            .pipe(\n                share()\n            );\n    }\n\n    ngOnInit() {\n    }\n\n    ngAfterViewInit() {\n    }\n\n    involveUserAndCloseSearch() {\n        if (this.peopleSearch) {\n            this.peopleSearch.involveUserAndClose();\n        }\n    }\n\n    involveUserWithoutCloseSearch() {\n        if (this.peopleSearch) {\n            this.peopleSearch.involveUser();\n        }\n    }\n\n    searchUser(searchedWord: string) {\n        this.peopleProcessService.getWorkflowUsers(this.taskId, searchedWord)\n            .subscribe((users) => {\n                this.peopleSearchObserver.next(users);\n            }, (error) => this.logService.error(error));\n    }\n\n    involveUser(user: UserProcessModel) {\n        this.peopleProcessService.involveUserWithTask(this.taskId, user.id.toString())\n            .subscribe(() => {\n                this.people = [...this.people, user];\n            }, (error) => this.logService.error('Impossible to involve user with task'));\n    }\n\n    removeInvolvedUser(user: UserProcessModel) {\n        this.peopleProcessService.removeInvolvedUser(this.taskId, user.id.toString())\n            .subscribe(() => {\n                this.people = this.people.filter((involvedUser) => {\n                    return involvedUser.id !== user.id;\n                });\n            }, (error) => this.logService.error('Impossible to remove involved user from task'));\n    }\n\n    getDisplayUser(firstName: string, lastName: string, delimiter: string = '-'): string {\n        firstName = (firstName !== null ? firstName : '');\n        lastName = (lastName !== null ? lastName : '');\n        return firstName + delimiter + lastName;\n    }\n\n    getInitialUserName(firstName: string, lastName: string) {\n        firstName = (firstName !== null && firstName !== '' ? firstName[0] : '');\n        lastName = (lastName !== null && lastName !== '' ? lastName[0] : '');\n        return this.getDisplayUser(firstName, lastName, '');\n    }\n\n    onAddAssignment() {\n        this.showAssignment = true;\n    }\n\n    onClickAction(event: UserEventModel) {\n        if (event.type === 'remove') {\n            this.removeInvolvedUser(event.value);\n        }\n    }\n\n    hasPeople() {\n        return this.people && this.people.length > 0;\n    }\n\n    isEditMode() {\n        return !this.readOnly;\n    }\n\n    onCloseSearch() {\n        this.showAssignment = false;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataTableComponent } from '@alfresco/adf-core';\nimport { DataColumnListComponent, UserProcessModel } from '@alfresco/adf-core';\nimport { AfterContentInit, AfterViewInit, Component, ContentChild, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { UserEventModel } from '../../../task-list/models/user-event.model';\n\n@Component({\n    selector: 'adf-people-list',\n    templateUrl: './people-list.component.html',\n    styleUrls: ['./people-list.component.scss']\n})\n\nexport class PeopleListComponent implements AfterViewInit, AfterContentInit {\n\n    @ContentChild(DataColumnListComponent) columnList: DataColumnListComponent;\n\n    @ViewChild('dataTable')\n    peopleDataTable: DataTableComponent;\n\n    /** The array of user data used to populate the people list. */\n    @Input()\n    users: UserProcessModel[];\n\n    /** Toggles whether or not actions should be visible, i.e. the 'Three-Dots' menu. */\n    @Input()\n    actions: boolean = false;\n\n    /** Emitted when the user clicks a row in the people list. */\n    @Output()\n    clickRow: EventEmitter<UserProcessModel> = new EventEmitter<UserProcessModel>();\n\n    /** Emitted when the user clicks in the 'Three Dots' drop down menu for a row. */\n    @Output()\n    clickAction: EventEmitter<UserEventModel> = new EventEmitter<UserEventModel>();\n\n    user: UserProcessModel;\n\n    ngAfterContentInit() {\n        this.peopleDataTable.columnList = this.columnList;\n    }\n\n    ngAfterViewInit() {\n    }\n\n    selectUser(event: any) {\n        this.user = event.value.obj;\n        this.clickRow.emit(this.user);\n    }\n\n    hasActions(): boolean {\n        return this.actions;\n    }\n\n    onShowRowActionsMenu(event: any) {\n\n        let removeAction = {\n            title: 'Remove',\n            name: 'remove'\n        };\n\n        event.value.actions = [\n            removeAction\n        ];\n    }\n\n    onExecuteRowAction(event: any) {\n        let args = event.value;\n        let action = args.action;\n        this.clickAction.emit(new UserEventModel({type: action.name, value: args.row.obj}));\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserProcessModel } from '@alfresco/adf-core';\nimport { Component, EventEmitter, OnInit, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { PerformSearchCallback } from '../../interfaces/perform-search-callback.interface';\nimport { map } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-people-search',\n    templateUrl: './people-search.component.html',\n    styleUrls: ['./people-search.component.scss'],\n    host: {\n        'class': 'adf-people-search'\n    },\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class PeopleSearchComponent implements OnInit {\n\n    /** Parameters for displaying the list. */\n    @Input()\n    results: Observable<UserProcessModel[]>;\n\n    /** Emitted when a search is performed with a new keyword. */\n    @Output()\n    searchPeople: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when a user is selected and the action button is clicked. */\n    @Output()\n    success: EventEmitter<UserProcessModel> = new EventEmitter<UserProcessModel>();\n\n    /** Emitted when the \"close\" button is clicked. */\n    @Output()\n    closeSearch = new EventEmitter();\n\n    filteredResults$: Observable<UserProcessModel[]>;\n    selectedUser: UserProcessModel = {};\n    performSearch: PerformSearchCallback;\n\n    constructor() {}\n\n    ngOnInit() {\n        this.filteredResults$ = this.results\n            .pipe(\n                map((users) => {\n                    return users.filter((user) => user.id !== this.selectedUser.id);\n                })\n            );\n        this.performSearch = this.performSearchCallback.bind(this);\n    }\n\n    private performSearchCallback(event): Observable<UserProcessModel[]> {\n        this.searchPeople.emit(event);\n        return this.filteredResults$;\n    }\n\n    onRowClick(user: UserProcessModel) {\n        this.selectedUser = user;\n    }\n\n    closeSearchList() {\n        this.closeSearch.emit();\n    }\n\n    involveUserAndClose() {\n        this.involveUser();\n        this.closeSearchList();\n    }\n\n    involveUser() {\n        if (this.selectedUser === undefined) {\n            return;\n        }\n        this.success.emit(this.selectedUser);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function getDisplayUser(firstName: string, lastName: string, delimiter: string = '-'): string {\n    firstName = (firstName !== null ? firstName : '');\n    lastName = (lastName !== null ? lastName : '');\n    return firstName + delimiter + lastName;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UserProcessModel, TranslationService, PeopleProcessService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { debounceTime, switchMap } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { PerformSearchCallback } from '../../interfaces/perform-search-callback.interface';\nimport { getDisplayUser } from '../../helpers/getDisplayUser';\n\n@Component({\n    selector: 'adf-people-search-field',\n    templateUrl: './people-search-field.component.html',\n    styleUrls: ['./people-search-field.component.scss'],\n    host: { 'class': 'adf-people-search-field' },\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class PeopleSearchFieldComponent {\n\n    @Input()\n    performSearch: PerformSearchCallback;\n\n    @Input()\n    placeholder: string;\n\n    @Output()\n    rowClick: EventEmitter<UserProcessModel> = new EventEmitter<UserProcessModel>();\n\n    users$: Observable<UserProcessModel[]>;\n    searchUser: FormControl = new FormControl();\n\n    defaultPlaceholder = 'ADF_TASK_LIST.PEOPLE.SEARCH_USER';\n\n    constructor(public peopleProcessService: PeopleProcessService,\n                private translationService: TranslationService) {\n        this.users$ = this.searchUser.valueChanges\n            .pipe(\n                debounceTime(200),\n                switchMap((searchWord: string) => {\n                    if (searchWord && searchWord.trim()) {\n                        return this.performSearch(searchWord);\n                    } else {\n                        return of([]);\n                    }\n                })\n            );\n\n        this.defaultPlaceholder = this.translationService.instant(this.defaultPlaceholder);\n    }\n\n    public reset() {\n        this.searchUser.reset();\n    }\n\n    get searchPlaceholder() {\n        return this.placeholder || this.defaultPlaceholder;\n    }\n\n    onRowClick(event) {\n        this.rowClick.emit(event);\n    }\n\n    getDisplayUser(firstName: string, lastName: string, delimiter: string = '-'): string {\n        return getDisplayUser(firstName, lastName, delimiter);\n    }\n\n    getInitialUserName(firstName: string, lastName: string) {\n        firstName = (firstName !== null && firstName !== '' ? firstName[0] : '');\n        lastName = (lastName !== null && lastName !== '' ? lastName[0] : '');\n        return this.getDisplayUser(firstName, lastName, '');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewChild, ViewEncapsulation, EventEmitter, Input, Output } from '@angular/core';\nimport { PerformSearchCallback } from '../../interfaces/perform-search-callback.interface';\nimport { PeopleProcessService, UserProcessModel, LogService, TranslationService } from '@alfresco/adf-core';\nimport { PeopleSearchFieldComponent } from '../people-search-field/people-search-field.component';\nimport { getDisplayUser } from '../../helpers/getDisplayUser';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nconst DEFAULT_ASSIGNEE_PLACEHOLDER = 'ADF_TASK_LIST.PEOPLE.ASSIGNEE';\n\n@Component({\n    selector: 'adf-people-selector',\n    templateUrl: './people-selector.component.html',\n    styleUrls: ['./people-selector.component.scss'],\n    host: { 'class': 'adf-people-selector' },\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class PeopleSelectorComponent {\n\n    @Input()\n    peopleId: UserProcessModel;\n\n    // Poorly documented Angular magic for [(peopleId)]\n    @Output()\n    peopleIdChange: EventEmitter<number>;\n\n    @ViewChild('peopleSearchField')\n    searchFieldComponent: PeopleSearchFieldComponent;\n\n    performSearch: PerformSearchCallback;\n    selectedUser: UserProcessModel;\n    defaultPlaceholder: string;\n\n    constructor(\n        private peopleProcessService: PeopleProcessService,\n        private logService: LogService,\n        private translationService: TranslationService) {\n\n        this.peopleIdChange = new EventEmitter();\n        this.performSearch = this.searchUser.bind(this);\n        this.defaultPlaceholder = this.translationService.instant(DEFAULT_ASSIGNEE_PLACEHOLDER);\n    }\n\n    searchUser(searchWord: string): Observable<{} | UserProcessModel[]> {\n        return this.peopleProcessService.getWorkflowUsers(undefined, searchWord)\n            .pipe(\n                catchError(this.onSearchUserError.bind(this))\n            );\n    }\n\n    private onSearchUserError(): Observable<UserProcessModel[]> {\n        this.logService.error('getWorkflowUsers threw error');\n        return of([]);\n    }\n\n    userSelected(user: UserProcessModel): void {\n        this.updateUserSelection(user);\n    }\n\n    userDeselected(): void {\n        this.updateUserSelection(undefined);\n    }\n\n    private updateUserSelection(user: UserProcessModel): void {\n        this.selectedUser = user;\n        this.peopleIdChange.emit(user && user.id || undefined);\n        this.searchFieldComponent.reset();\n    }\n\n    get placeholder() {\n        if (!this.selectedUser) {\n            return this.defaultPlaceholder;\n        }\n\n        return getDisplayUser(this.selectedUser.firstName, this.selectedUser.lastName, ' ');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Directive } from '@angular/core';\n\n/**\n * Directive selectors without adf- prefix will be deprecated on 3.0.0\n */\n@Directive({ selector: 'adf-people-search-action-label, people-search-action-label' })\nexport class PeopleSearchActionLabelDirective { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Directive } from '@angular/core';\n\n/**\n * Directive selectors without adf- prefix will be deprecated on 3.0.0\n */\n@Directive({ selector: 'adf-people-search-title, people-search-title' })\nexport class PeopleSearchTitleDirective { }\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CoreModule } from '@alfresco/adf-core';\nimport { PeopleComponent } from './components/people/people.component';\nimport { PeopleListComponent } from './components/people-list/people-list.component';\nimport { PeopleSearchComponent } from './components/people-search/people-search.component';\nimport { PeopleSearchFieldComponent } from './components/people-search-field/people-search-field.component';\nimport { PeopleSelectorComponent } from './components/people-selector/people-selector.component';\n\nimport { PeopleSearchActionLabelDirective } from './directives/people-search-action-label.directive';\nimport { PeopleSearchTitleDirective } from './directives/people-search-title.directive';\n\n@NgModule({\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        CommonModule,\n        CoreModule.forChild()\n    ],\n    declarations: [\n        PeopleComponent,\n        PeopleSearchComponent,\n        PeopleSearchFieldComponent,\n        PeopleSelectorComponent,\n        PeopleSearchTitleDirective,\n        PeopleSearchActionLabelDirective,\n        PeopleListComponent\n    ],\n    exports: [\n        PeopleComponent,\n        PeopleSearchComponent,\n        PeopleSearchFieldComponent,\n        PeopleSelectorComponent,\n        PeopleSearchTitleDirective,\n        PeopleSearchActionLabelDirective,\n        PeopleListComponent\n    ]\n})\nexport class PeopleModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { ProcessCommentsModule } from '../process-comments/process-comments.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MaterialModule } from '../material.module';\nimport { PeopleModule } from '../people/people.module';\nimport { ContentWidgetModule } from '../content-widget/content-widget.module';\n\nimport { ChecklistComponent } from './components/checklist.component';\nimport { NoTaskDetailsTemplateDirective } from './components/no-task-detail-template.directive';\nimport { StartTaskComponent } from './components/start-task.component';\nimport { TaskAuditDirective } from './components/task-audit.directive';\nimport { TaskDetailsComponent } from './components/task-details.component';\nimport { TaskFiltersComponent } from './components/task-filters.component';\nimport { TaskHeaderComponent } from './components/task-header.component';\nimport { TaskListComponent } from './components/task-list.component';\nimport { TaskStandaloneComponent } from './components/task-standalone.component';\nimport { AttachFormComponent } from './components/attach-form.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule.forChild(),\n        PeopleModule,\n        ProcessCommentsModule,\n        ContentWidgetModule\n    ],\n    declarations: [\n        NoTaskDetailsTemplateDirective,\n        TaskFiltersComponent,\n        TaskListComponent,\n        TaskDetailsComponent,\n        TaskAuditDirective,\n        ChecklistComponent,\n        TaskHeaderComponent,\n        StartTaskComponent,\n        TaskStandaloneComponent,\n        AttachFormComponent\n    ],\n    exports: [\n        NoTaskDetailsTemplateDirective,\n        TaskFiltersComponent,\n        TaskListComponent,\n        TaskDetailsComponent,\n        TaskAuditDirective,\n        ChecklistComponent,\n        TaskHeaderComponent,\n        StartTaskComponent,\n        TaskStandaloneComponent,\n        AttachFormComponent\n    ]\n})\nexport class TaskListModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogService } from '@alfresco/adf-core';\nimport { DatePipe } from '@angular/common';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { Observable, Observer } from 'rxjs';\nimport { TaskDetailsEvent, TaskDetailsModel } from '../../task-list';\nimport { ProcessInstance } from '../models/process-instance.model';\nimport { ProcessService } from './../services/process.service';\nimport { share } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-process-instance-tasks',\n    templateUrl: './process-instance-tasks.component.html',\n    styleUrls: ['./process-instance-tasks.component.css']\n})\nexport class ProcessInstanceTasksComponent implements OnInit, OnChanges {\n\n    /** (**required**) The ID of the process instance to display tasks for. */\n    @Input()\n    processInstanceDetails: ProcessInstance;\n\n    /** Toggles whether to show a refresh button next to the list of tasks to allow\n     * it to be updated from the server.\n     */\n    @Input()\n    showRefreshButton: boolean = true;\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    activeTasks: TaskDetailsModel[] = [];\n    completedTasks: TaskDetailsModel[] = [];\n\n    private taskObserver: Observer<TaskDetailsModel>;\n    private completedTaskObserver: Observer<TaskDetailsModel>;\n\n    task$: Observable<TaskDetailsModel>;\n    completedTask$: Observable<TaskDetailsModel>;\n\n    message: string;\n    processId: string;\n\n    @ViewChild('startDialog')\n    startDialog: any;\n\n    @ViewChild('taskDetails')\n    taskDetails: any;\n\n    /** Emitted when a task is clicked. */\n    @Output()\n    taskClick: EventEmitter<TaskDetailsEvent> = new EventEmitter<TaskDetailsEvent>();\n\n    constructor(private activitiProcess: ProcessService,\n                private logService: LogService,\n                private dialog: MatDialog) {\n        this.task$ = new Observable<TaskDetailsModel>((observer) => this.taskObserver = observer)\n            .pipe(share());\n        this.completedTask$ = new Observable<TaskDetailsModel>((observer) => this.completedTaskObserver = observer)\n            .pipe(share());\n    }\n\n    ngOnInit() {\n        this.task$.subscribe((task: TaskDetailsModel) => {\n            this.activeTasks.push(task);\n        });\n        this.completedTask$.subscribe((task: TaskDetailsModel) => {\n            this.completedTasks.push(task);\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let processInstanceDetails = changes['processInstanceDetails'];\n        if (processInstanceDetails && processInstanceDetails.currentValue) {\n            this.load(processInstanceDetails.currentValue.id);\n        }\n    }\n\n    load(processInstanceId: string) {\n        this.loadActive(processInstanceId);\n        this.loadCompleted(processInstanceId);\n    }\n\n    loadActive(processInstanceId: string) {\n        this.activeTasks = [];\n        if (processInstanceId) {\n            this.activitiProcess.getProcessTasks(processInstanceId, null).subscribe(\n                (res: TaskDetailsModel[]) => {\n                    res.forEach((task) => {\n                        this.taskObserver.next(task);\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        } else {\n            this.activeTasks = [];\n        }\n    }\n\n    loadCompleted(processInstanceId: string) {\n        this.completedTasks = [];\n        if (processInstanceId) {\n            this.activitiProcess.getProcessTasks(processInstanceId, 'completed').subscribe(\n                (res: TaskDetailsModel[]) => {\n                    res.forEach((task) => {\n                        this.completedTaskObserver.next(task);\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        } else {\n            this.completedTasks = [];\n        }\n    }\n\n    hasStartFormDefined(): boolean {\n        return this.processInstanceDetails && this.processInstanceDetails.startFormDefined === true;\n    }\n\n    getUserFullName(user: any) {\n        if (user) {\n            return (user.firstName && user.firstName !== 'null'\n                    ? user.firstName + ' ' : '') +\n                user.lastName;\n        }\n        return 'Nobody';\n    }\n\n    getFormatDate(value, format: string) {\n        let datePipe = new DatePipe('en-US');\n        try {\n            return datePipe.transform(value, format);\n        } catch (err) {\n            this.logService.error(`ProcessListInstanceTask: error parsing date ${value} to format ${format}`);\n        }\n    }\n\n    clickTask($event: any, task: TaskDetailsModel) {\n        let args = new TaskDetailsEvent(task);\n        this.taskClick.emit(args);\n    }\n\n    clickStartTask() {\n        this.processId = this.processInstanceDetails.id;\n        this.showStartDialog();\n    }\n\n    showStartDialog() {\n        this.dialog.open(this.startDialog, { height: '500px', width: '700px' });\n    }\n\n    closeStartDialog() {\n        this.dialog.closeAll();\n    }\n\n    onRefreshClicked() {\n        this.load(this.processInstanceDetails.id);\n    }\n\n    onFormContentClick() {\n        this.closeStartDialog();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport let processPresetsDefaultModel = {\n    'default': [\n        {\n            'key': 'name',\n            'type': 'text',\n            'title': 'ADF_PROCESS_LIST.PROPERTIES.NAME',\n            'sortable': true\n        },\n        {\n            'key': 'created',\n            'type': 'text',\n            'title': 'ADF_PROCESS_LIST.PROPERTIES.CREATED',\n            'cssClass': 'hidden',\n            'sortable': true\n        }\n    ]\n};\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    DataTableSchema,\n    DataRowEvent,\n    DataTableAdapter,\n    CustomEmptyContentTemplateDirective,\n    CustomLoadingContentTemplateDirective\n} from '@alfresco/adf-core';\nimport {\n    AppConfigService,\n    PaginatedComponent,\n    PaginationComponent,\n    PaginationModel,\n    UserPreferencesService\n} from '@alfresco/adf-core';\nimport { DatePipe } from '@angular/common';\nimport {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges\n} from '@angular/core';\nimport { ProcessFilterParamRepresentationModel } from '../models/filter-process.model';\nimport { processPresetsDefaultModel } from '../models/process-preset.model';\nimport { ProcessService } from '../services/process.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { ProcessListModel } from '../models/process-list.model';\nimport moment from 'moment-es6';\n\n@Component({\n    selector: 'adf-process-instance-list',\n    styleUrls: ['./process-list.component.css'],\n    templateUrl: './process-list.component.html'\n})\nexport class ProcessInstanceListComponent extends DataTableSchema  implements OnChanges, AfterContentInit, PaginatedComponent {\n\n    static PRESET_KEY = 'adf-process-list.presets';\n    public FORMAT_DATE: string = 'll';\n\n    @ContentChild(CustomEmptyContentTemplateDirective)\n    customEmptyContent: CustomEmptyContentTemplateDirective;\n\n    @ContentChild(CustomLoadingContentTemplateDirective)\n    customLoadingContent: CustomLoadingContentTemplateDirective;\n\n    /** The id of the app. */\n    @Input()\n    appId: number;\n\n    /** The Definition Id of the process. */\n    @Input()\n    processDefinitionId: string;\n\n    /** The id of the process instance. */\n    @Input()\n    processInstanceId: number|string;\n\n    /** Defines the state of the processes. Possible values are `running`, `completed` and `all` */\n    @Input()\n    state: string;\n\n    /** Defines the sort ordering of the list. Possible values are `created-desc`, `created-asc`,\n     * `ended-desc`, `ended-asc`.\n     */\n    @Input()\n    sort: string;\n\n    /** The page number of the processes to fetch. */\n    @Input()\n    page: number = 0;\n\n    /** The number of processes to fetch in each page. */\n    @Input()\n    size: number = PaginationComponent.DEFAULT_PAGINATION.maxItems;\n\n    /** Data source to define the datatable. */\n    @Input()\n    data: DataTableAdapter;\n\n    /** Toggles multiple row selection, which renders checkboxes at the beginning of each row */\n    @Input()\n    multiselect: boolean = false;\n\n    /** Row selection mode. Can be none, `single` or `multiple`. For `multiple` mode,\n     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for\n     * multiple rows.\n     */\n    @Input()\n    selectionMode: string = 'single'; // none|single|multiple\n\n    /** Toggles default selection of the first row */\n    @Input()\n    selectFirstRow: boolean = true;\n\n    /** Emitted when a row in the process list is clicked. */\n    @Output()\n    rowClick: EventEmitter<string> = new EventEmitter<string>();\n\n    /** Emitted when the list of process instances has been loaded successfully from the server. */\n    @Output()\n    success: EventEmitter<ProcessListModel> = new EventEmitter<ProcessListModel>();\n\n    /** Emitted when an error occurs while loading the list of process instances from the server. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    requestNode: ProcessFilterParamRepresentationModel;\n    currentInstanceId: string;\n    isLoading: boolean = true;\n    rows: any[] = [];\n    sorting: any[] = ['created', 'desc'];\n\n    pagination: BehaviorSubject<PaginationModel>;\n\n    constructor(private processService: ProcessService,\n                private userPreferences: UserPreferencesService,\n                appConfig: AppConfigService) {\n        super(appConfig, ProcessInstanceListComponent.PRESET_KEY, processPresetsDefaultModel);\n        this.size = this.userPreferences.paginationSize;\n\n        this.pagination = new BehaviorSubject<PaginationModel>(<PaginationModel> {\n            maxItems: this.size,\n            skipCount: 0,\n            totalItems: 0\n        });\n    }\n\n    ngAfterContentInit() {\n        this.createDatatableSchema();\n        if (this.data && this.data.getColumns().length === 0) {\n            this.data.setColumns(this.columns);\n        }\n\n        if (this.appId != null) {\n            this.reload();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.isPropertyChanged(changes)) {\n            if (this.isSortChanged(changes)) {\n                this.sorting = this.sort ? this.sort.split('-') : this.sorting;\n            }\n            this.reload();\n        }\n    }\n\n    private isSortChanged(changes: SimpleChanges): boolean {\n        const actualSort = changes['sort'];\n        return actualSort && actualSort.currentValue && actualSort.currentValue !== actualSort.previousValue;\n    }\n\n    private isPropertyChanged(changes: SimpleChanges): boolean {\n        let changed: boolean = false;\n\n        let appId = changes['appId'];\n        let processDefinitionId = changes['processDefinitionId'];\n        let processInstanceId = changes['processInstanceId'];\n        let state = changes['state'];\n        let sort = changes['sort'];\n        let page = changes['page'];\n        let size = changes['size'];\n\n        if (appId && appId.currentValue) {\n            changed = true;\n        } else if (processDefinitionId) {\n            changed = true;\n        } else if (processInstanceId) {\n            changed = true;\n        } else if (state && state.currentValue) {\n            changed = true;\n        } else if (sort && sort.currentValue) {\n            changed = true;\n        } else if (page && page.currentValue !== page.previousValue) {\n            changed = true;\n        } else if (size && size.currentValue !== size.previousValue) {\n            changed = true;\n        }\n        return changed;\n    }\n\n    public reload() {\n        this.requestNode = this.createRequestNode();\n        this.load(this.requestNode);\n    }\n\n    private load(requestNode: ProcessFilterParamRepresentationModel) {\n        this.isLoading = true;\n        this.processService.getProcesses(requestNode)\n            .subscribe(\n                (response) => {\n                    this.rows = this.optimizeProcessDetails(response.data);\n                    this.selectFirst();\n                    this.success.emit(response);\n                    this.isLoading = false;\n                    this.pagination.next({\n                        count: response.data.length,\n                        maxItems: this.size,\n                        skipCount: this.page * this.size,\n                        totalItems: response.total\n                    });\n                },\n                (error) => {\n                    this.error.emit(error);\n                    this.isLoading = false;\n                });\n    }\n\n    /**\n     * Select the first instance of a list if present\n     */\n    selectFirst() {\n        if (this.selectFirstRow) {\n            if (!this.isListEmpty()) {\n                let dataRow = this.rows[0];\n                dataRow.isSelected = true;\n                this.currentInstanceId = dataRow['id'];\n            } else {\n                this.currentInstanceId = null;\n            }\n        }\n    }\n\n    /**\n     * Return the current id\n     */\n    getCurrentId(): string {\n        return this.currentInstanceId;\n    }\n\n    /**\n     * Check if the list is empty\n     */\n    isListEmpty(): boolean {\n        return !this.rows || this.rows.length === 0;\n    }\n\n    /**\n     * Emit the event rowClick passing the current task id when the row is clicked\n     * @param event\n     */\n    onRowClick(event: DataRowEvent) {\n        let item = event;\n        this.currentInstanceId = item.value.getValue('id');\n        this.rowClick.emit(this.currentInstanceId);\n    }\n\n    /**\n     * Emit the event rowClick passing the current task id when pressed the Enter key on the selected row\n     * @param event\n     */\n    onRowKeyUp(event: CustomEvent) {\n        if (event.detail.keyboardEvent.key === 'Enter') {\n            event.preventDefault();\n            this.currentInstanceId = event.detail.row.getValue('id');\n            this.rowClick.emit(this.currentInstanceId);\n        }\n    }\n\n    /**\n     * Optimize name field\n     * @param instances\n     */\n    private optimizeProcessDetails(instances: any[]): any[] {\n        instances = instances.map((instance) => {\n            instance.name = this.getProcessNameOrDescription(instance, 'medium');\n            if (instance.started) {\n                instance.started = moment(instance.started).format(this.FORMAT_DATE);\n            }\n            return instance;\n        });\n        return instances;\n    }\n\n    getProcessNameOrDescription(processInstance, dateFormat): string {\n        let name = '';\n        if (processInstance) {\n            name = processInstance.name ||\n                processInstance.processDefinitionName + ' - ' + this.getFormatDate(processInstance.started, dateFormat);\n        }\n        return name;\n    }\n\n    getFormatDate(value, format: string) {\n        let datePipe = new DatePipe('en-US');\n        try {\n            return datePipe.transform(value, format);\n        } catch (err) {\n            return '';\n        }\n    }\n\n    private createRequestNode() {\n        let requestNode = {\n            appDefinitionId: this.appId,\n            processDefinitionId: this.processDefinitionId,\n            processInstanceId: this.processInstanceId,\n            state: this.state,\n            sort: this.sort,\n            page: this.page,\n            size: this.size,\n            start: 0\n        };\n        return new ProcessFilterParamRepresentationModel(requestNode);\n    }\n\n    updatePagination(params: PaginationModel) {\n        const needsReload = params.maxItems || params.skipCount;\n        this.size = params.maxItems;\n        this.page = this.currentPage(params.skipCount, params.maxItems);\n        if (needsReload) {\n            this.reload();\n        }\n    }\n\n    currentPage(skipCount: number, maxItems: number): number {\n        return (skipCount && maxItems) ? Math.floor(skipCount / maxItems) : 0;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component, EventEmitter, Input, OnChanges, OnInit,\n    Output, SimpleChanges, ViewChild, ViewEncapsulation\n} from '@angular/core';\nimport {\n    ActivitiContentService, AppConfigService, AppConfigValues,\n    StartFormComponent, FormRenderingService, FormValues\n} from '@alfresco/adf-core';\nimport { ProcessInstanceVariable } from '../models/process-instance-variable.model';\nimport { ProcessDefinitionRepresentation } from './../models/process-definition.model';\nimport { ProcessInstance } from './../models/process-instance.model';\nimport { ProcessService } from './../services/process.service';\nimport { AttachFileWidgetComponent, AttachFolderWidgetComponent } from '../../content-widget';\nimport { FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MatAutocompleteTrigger } from '@angular/material';\n\n@Component({\n    selector: 'adf-start-process',\n    templateUrl: './start-process.component.html',\n    styleUrls: ['./start-process.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class StartProcessInstanceComponent implements OnChanges, OnInit {\n\n    MAX_LENGTH: number = 255;\n\n    /** (optional) Limit the list of processes that can be started to those\n     * contained in the specified app.\n     */\n    @Input()\n    appId: number;\n\n    /** (optional) Definition name of the process to start. */\n    @Input()\n    processDefinitionName: string;\n\n    /** Variables in the input to the process\n     * [RestVariable](https://github.com/Alfresco/alfresco-js-api/tree/master/src/alfresco-activiti-rest-api/docs/RestVariable.md).\n     */\n    @Input()\n    variables: ProcessInstanceVariable[];\n\n    /** Parameter to pass form field values in the start form if one is associated. */\n    @Input()\n    values: FormValues;\n\n    /** (optional) Name to assign to the current process. */\n    @Input()\n    name: string = '';\n\n    /** Hide or show the process selection dropdown. */\n    @Input()\n    showSelectProcessDropdown: boolean = true;\n\n    /** (optional) Parameter to enable selection of process when filtering. */\n    @Input()\n    processFilterSelector: boolean = true;\n\n    /** Emitted when the process starts. */\n    @Output()\n    start: EventEmitter<ProcessInstance> = new EventEmitter<ProcessInstance>();\n\n    /** Emitted when the process is canceled. */\n    @Output()\n    cancel: EventEmitter<ProcessInstance> = new EventEmitter<ProcessInstance>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<ProcessInstance> = new EventEmitter<ProcessInstance>();\n\n    @ViewChild('startForm')\n    startForm: StartFormComponent;\n\n    @ViewChild(MatAutocompleteTrigger)\n    inputAutocomplete: MatAutocompleteTrigger;\n\n    processDefinitions: ProcessDefinitionRepresentation[] = [];\n    selectedProcessDef: ProcessDefinitionRepresentation = new ProcessDefinitionRepresentation();\n    errorMessageId: string = '';\n    processNameInput: FormControl;\n    processDefinitionInput: FormControl;\n    filteredProcesses: Observable<ProcessDefinitionRepresentation[]>;\n    maxProcessNameLength: number = this.MAX_LENGTH;\n\n    constructor(private activitiProcess: ProcessService,\n                private formRenderingService: FormRenderingService,\n                private activitiContentService: ActivitiContentService,\n                private appConfig: AppConfigService) {\n        this.formRenderingService.setComponentTypeResolver('upload', () => AttachFileWidgetComponent, true);\n        this.formRenderingService.setComponentTypeResolver('select-folder', () => AttachFolderWidgetComponent, true);\n    }\n\n    ngOnInit() {\n        this.processNameInput = new FormControl(this.name, [Validators.required, Validators.maxLength(this.maxProcessNameLength)]);\n        this.processDefinitionInput = new FormControl();\n\n        this.loadStartProcess();\n\n        this.processNameInput.valueChanges.subscribe((name) => this.name = name);\n        this.filteredProcesses = this.processDefinitionInput.valueChanges\n            .pipe(\n                map((value) => this._filter(value))\n            );\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['values'] && changes['values'].currentValue) {\n            this.moveNodeFromCStoPS();\n        }\n\n        if (changes['appId'] && changes['appId'].currentValue) {\n            this.appId = changes['appId'].currentValue;\n        }\n\n        this.loadStartProcess();\n    }\n\n    private _filter(value: string): ProcessDefinitionRepresentation[] {\n        if (value !== null && value !== undefined) {\n            const filterValue = value.toLowerCase();\n            let filteredProcess = this.processDefinitions.filter((option) => option.name.toLowerCase().includes(filterValue));\n\n            if (this.processFilterSelector) {\n                this.selectedProcessDef = this.getSelectedProcess(filterValue);\n            }\n            return filteredProcess;\n        }\n    }\n\n    getSelectedProcess(selectedProcess) {\n        let processSelected = this.processDefinitions.find((process) => process.name.toLowerCase() === selectedProcess);\n\n        if (!processSelected) {\n            processSelected = new ProcessDefinitionRepresentation();\n        }\n        return processSelected;\n    }\n\n    public loadStartProcess() {\n        this.resetSelectedProcessDefinition();\n        this.resetErrorMessage();\n\n        this.activitiProcess.getProcessDefinitions(this.appId).subscribe(\n            (processDefinitionRepresentations: ProcessDefinitionRepresentation[]) => {\n                this.processDefinitions = processDefinitionRepresentations;\n\n                if (!this.isProcessDefinitionsEmpty()) {\n\n                    if (this.processDefinitions.length === 1) {\n                        this.selectedProcessDef = this.processDefinitions[0];\n                    }\n\n                    if (this.processDefinitionName) {\n                        let selectedProcess = this.processDefinitions.find((currentProcessDefinition) => {\n                            return currentProcessDefinition.name === this.processDefinitionName;\n                        });\n                        if (selectedProcess) {\n                            this.selectedProcessDef = selectedProcess;\n                        }\n                    }\n\n                    this.processDefinitionInput.setValue(this.selectedProcessDef.name);\n                }\n            },\n            () => {\n                this.errorMessageId = 'ADF_PROCESS_LIST.START_PROCESS.ERROR.LOAD_PROCESS_DEFS';\n            });\n    }\n\n    isProcessDefinitionsEmpty(): boolean {\n        return this.processDefinitions.length === 0;\n    }\n\n    getAlfrescoRepositoryName(): string {\n        let alfrescoRepositoryName = this.appConfig.get<string>(AppConfigValues.ALFRESCO_REPOSITORY_NAME);\n        if (!alfrescoRepositoryName) {\n            alfrescoRepositoryName = 'alfresco-1';\n        }\n        return alfrescoRepositoryName + 'Alfresco';\n    }\n\n    moveNodeFromCStoPS() {\n        let accountIdentifier = this.getAlfrescoRepositoryName();\n\n        for (let key in this.values) {\n            if (this.values.hasOwnProperty(key)) {\n                let currentValue = this.values[key];\n\n                if (currentValue.isFile) {\n                    this.activitiContentService.applyAlfrescoNode(currentValue, null, accountIdentifier).subscribe((res) => {\n                        this.values[key] = [res];\n                    });\n                }\n            }\n        }\n    }\n\n    public startProcess(outcome?: string) {\n        if (this.selectedProcessDef && this.selectedProcessDef.id && this.name) {\n            this.resetErrorMessage();\n            let formValues = this.startForm ? this.startForm.form.values : undefined;\n            this.activitiProcess.startProcess(this.selectedProcessDef.id, this.name, outcome, formValues, this.variables).subscribe(\n                (res) => {\n                    this.name = '';\n                    this.start.emit(res);\n                },\n                (err) => {\n                    this.errorMessageId = 'ADF_PROCESS_LIST.START_PROCESS.ERROR.START';\n                    this.error.error(err);\n                }\n            );\n        }\n    }\n\n    public cancelStartProcess() {\n        this.cancel.emit();\n    }\n\n    hasStartForm(): boolean {\n        return this.selectedProcessDef && this.selectedProcessDef.hasStartForm;\n    }\n\n    isProcessDefinitionEmpty() {\n        return this.processDefinitions ? (this.processDefinitions.length > 0 || this.errorMessageId) : this.errorMessageId;\n    }\n\n    isStartFormMissingOrValid(): boolean {\n        if (this.startForm) {\n            return this.startForm.form && this.startForm.form.isValid;\n        } else {\n            return true;\n        }\n    }\n\n    validateForm(): boolean {\n        return this.selectedProcessDef && this.selectedProcessDef.id && this.processNameInput.valid && this.isStartFormMissingOrValid();\n    }\n\n    private resetSelectedProcessDefinition() {\n        this.selectedProcessDef = new ProcessDefinitionRepresentation();\n    }\n\n    private resetErrorMessage(): void {\n        this.errorMessageId = '';\n    }\n\n    hasErrorMessage(): boolean {\n        return this.processDefinitions.length === 0 && !this.errorMessageId;\n    }\n\n    public onOutcomeClick(outcome: string) {\n        this.startProcess(outcome);\n    }\n\n    public reset() {\n        this.resetSelectedProcessDefinition();\n        this.name = '';\n        if (this.startForm) {\n            this.startForm.data = {};\n        }\n        this.resetErrorMessage();\n    }\n\n    hasProcessName(): boolean {\n        return this.name ? true : false;\n    }\n\n    displayFn(process: any) {\n        if (process) {\n            let processName = process;\n            if (typeof process !== 'string') {\n                processName = process.name;\n            }\n            return processName;\n        }\n    }\n\n    displayDropdown(event) {\n        event.stopPropagation();\n        if (!this.inputAutocomplete.panelOpen) {\n            this.processDefinitionInput.setValue('');\n            this.inputAutocomplete.openPanel();\n        } else {\n            this.inputAutocomplete.closePanel();\n        }\n    }\n\n    get nameController(): AbstractControl {\n        return this.processNameInput;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ProcessFilterRequestRepresentation {\n    processDefinitionId: string;\n    appDefinitionId: string;\n    state: string;\n    sort: string;\n    page: number;\n    size: number;\n\n    constructor(obj?: any) {\n        this.processDefinitionId = obj && obj.processDefinitionId || null;\n        this.appDefinitionId = obj && obj.appDefinitionId || null;\n        this.state = obj && obj.state || null;\n        this.sort = obj && obj.sort || null;\n        this.page = obj && obj.page || 0;\n        this.size = obj && obj.size || 25;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { MaterialModule } from '../material.module';\nimport { ProcessCommentsModule } from '../process-comments/process-comments.module';\nimport { TaskListModule } from '../task-list/task-list.module';\nimport { PeopleModule } from '../people/people.module';\nimport { ContentWidgetModule } from '../content-widget/content-widget.module';\n\nimport { ProcessAuditDirective } from './components/process-audit.directive';\nimport { ProcessFiltersComponent } from './components/process-filters.component';\nimport { ProcessInstanceDetailsComponent } from './components/process-instance-details.component';\nimport { ProcessInstanceHeaderComponent } from './components/process-instance-header.component';\nimport { ProcessInstanceTasksComponent } from './components/process-instance-tasks.component';\nimport { ProcessInstanceListComponent } from './components/process-list.component';\nimport { StartProcessInstanceComponent } from './components/start-process.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FlexLayoutModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule.forChild(),\n        TaskListModule,\n        PeopleModule,\n        ContentWidgetModule,\n        ProcessCommentsModule\n    ],\n    declarations: [\n        ProcessInstanceListComponent,\n        ProcessFiltersComponent,\n        ProcessInstanceDetailsComponent,\n        ProcessAuditDirective,\n        ProcessInstanceHeaderComponent,\n        ProcessInstanceTasksComponent,\n        StartProcessInstanceComponent\n    ],\n    exports: [\n        ProcessInstanceListComponent,\n        ProcessFiltersComponent,\n        ProcessInstanceDetailsComponent,\n        ProcessAuditDirective,\n        ProcessInstanceHeaderComponent,\n        ProcessInstanceTasksComponent,\n        StartProcessInstanceComponent\n    ]\n})\nexport class ProcessListModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppsProcessService, TranslationService, CustomEmptyContentTemplateDirective } from '@alfresco/adf-core';\nimport { AfterContentInit, Component, EventEmitter, Input, OnInit, Output, ContentChild } from '@angular/core';\nimport { Observable, Observer, of } from 'rxjs';\nimport { AppDefinitionRepresentationModel } from '../task-list';\nimport { IconModel } from './icon.model';\nimport { share } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-apps',\n    templateUrl: 'apps-list.component.html',\n    styleUrls: ['./apps-list.component.scss']\n})\nexport class AppsListComponent implements OnInit, AfterContentInit {\n\n    public static LAYOUT_LIST: string = 'LIST';\n    public static LAYOUT_GRID: string = 'GRID';\n    public static DEFAULT_TASKS_APP: string = 'tasks';\n    public static DEFAULT_TASKS_APP_NAME: string = 'ADF_TASK_LIST.APPS.TASK_APP_NAME';\n    public static DEFAULT_TASKS_APP_THEME: string = 'theme-2';\n    public static DEFAULT_TASKS_APP_ICON: string = 'glyphicon-asterisk';\n    public static DEFAULT_TASKS_APP_MATERIAL_ICON: string = 'favorite_border';\n\n    @ContentChild(CustomEmptyContentTemplateDirective)\n    emptyCustomContent: CustomEmptyContentTemplateDirective;\n\n    /** (**required**) Defines the layout of the apps. There are two possible\n     * values, \"GRID\" and \"LIST\".\n     */\n    @Input()\n    layoutType: string = AppsListComponent.LAYOUT_GRID;\n\n    /** Provides a way to filter the apps to show. */\n    @Input()\n    filtersAppId: any[];\n\n    /** Emitted when an app entry is clicked. */\n    @Output()\n    appClick: EventEmitter<AppDefinitionRepresentationModel> = new EventEmitter<AppDefinitionRepresentationModel>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    private appsObserver: Observer<AppDefinitionRepresentationModel>;\n    apps$: Observable<AppDefinitionRepresentationModel>;\n\n    currentApp: AppDefinitionRepresentationModel;\n\n    appList: AppDefinitionRepresentationModel [] = [];\n\n    private iconsMDL: IconModel;\n\n    loading: boolean = false;\n\n    hasEmptyCustomContentTemplate: boolean = false;\n\n    constructor(\n        private appsProcessService: AppsProcessService,\n        private translationService: TranslationService) {\n            this.apps$ = new Observable<AppDefinitionRepresentationModel>((observer) => this.appsObserver = observer)\n                .pipe(share());\n    }\n\n    ngOnInit() {\n        if (!this.isValidType()) {\n            this.setDefaultLayoutType();\n        }\n\n        this.apps$.subscribe((app: any) => {\n            this.appList.push(app);\n        });\n        this.iconsMDL = new IconModel();\n        this.load();\n    }\n\n    ngAfterContentInit() {\n        if (this.emptyCustomContent) {\n            this.hasEmptyCustomContentTemplate = true;\n        }\n    }\n\n    private load() {\n        this.loading = true;\n        this.appsProcessService.getDeployedApplications()\n        .subscribe(\n            (res: AppDefinitionRepresentationModel[]) => {\n                this.filterApps(res).forEach((app: AppDefinitionRepresentationModel) => {\n                    if (this.isDefaultApp(app)) {\n                        app.theme = AppsListComponent.DEFAULT_TASKS_APP_THEME;\n                        app.icon = AppsListComponent.DEFAULT_TASKS_APP_ICON;\n                        this.appsObserver.next(app);\n                    } else if (app.deploymentId) {\n                        this.appsObserver.next(app);\n                    }\n                    this.loading = false;\n                });\n            },\n            (err) => {\n                this.error.emit(err);\n                this.loading = false;\n            }\n        );\n    }\n\n    isDefaultApp(app) {\n        return app.defaultAppId === AppsListComponent.DEFAULT_TASKS_APP;\n    }\n\n    getAppName(app) {\n        return this.isDefaultApp(app)\n            ? this.translationService.get(AppsListComponent.DEFAULT_TASKS_APP_NAME)\n            : of(app.name);\n    }\n\n    /**\n     * Pass the selected app as next\n     * @param app\n     */\n    public selectApp(app: AppDefinitionRepresentationModel) {\n        this.currentApp = app;\n        this.appClick.emit(app);\n    }\n\n    /**\n     * Return true if the appId is the current app\n     * @param appId\n     */\n    isSelected(appId: number): boolean {\n        return (this.currentApp !== undefined && appId === this.currentApp.id);\n    }\n\n    private filterApps(apps: AppDefinitionRepresentationModel []): AppDefinitionRepresentationModel[] {\n        let filteredApps: AppDefinitionRepresentationModel[] = [];\n        if (this.filtersAppId) {\n            apps.filter((app: AppDefinitionRepresentationModel) => {\n                this.filtersAppId.forEach((filter) => {\n                    if (app.defaultAppId === filter.defaultAppId ||\n                        app.deploymentId === filter.deploymentId ||\n                        app.name === filter.name ||\n                        app.id === filter.id ||\n                        app.modelId === filter.modelId ||\n                        app.tenantId === filter.tenantId) {\n                        filteredApps.push(app);\n                    }\n                });\n            });\n        } else {\n            return apps;\n        }\n        return filteredApps;\n    }\n\n    /**\n     * Check if the value of the layoutType property is an allowed value\n     */\n    isValidType(): boolean {\n        if (this.layoutType && (this.layoutType === AppsListComponent.LAYOUT_LIST || this.layoutType === AppsListComponent.LAYOUT_GRID)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Assign the default value to LayoutType\n     */\n    setDefaultLayoutType(): void {\n        this.layoutType = AppsListComponent.LAYOUT_GRID;\n    }\n\n    /**\n     * Return true if the layout type is LIST\n     */\n    isList(): boolean {\n        return this.layoutType === AppsListComponent.LAYOUT_LIST;\n    }\n\n    /**\n     * Return true if the layout type is GRID\n     */\n    isGrid(): boolean {\n        return this.layoutType === AppsListComponent.LAYOUT_GRID;\n    }\n\n    isEmpty(): boolean {\n        return this.appList.length === 0;\n    }\n\n    isLoading(): boolean {\n        return this.loading;\n    }\n\n    getTheme(app: AppDefinitionRepresentationModel): string {\n        return app.theme ? app.theme : '';\n    }\n\n    getBackgroundIcon(app: AppDefinitionRepresentationModel): string {\n        return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(app.icon);\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppsProcessService } from '@alfresco/adf-core';\nimport { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\n\n@Component({\n    selector: 'adf-select-apps-dialog',\n    templateUrl: 'select-apps-dialog-component.html'\n})\nexport class SelectAppsDialogComponent {\n\n    processApps: any;\n\n    selectedProcess: any;\n\n    constructor(private appsProcessService: AppsProcessService,\n                public dialogRef: MatDialogRef<SelectAppsDialogComponent>,\n                @Inject(MAT_DIALOG_DATA) public data: any) {\n\n        this.appsProcessService.getDeployedApplications().subscribe(\n            (apps: any[]) => {\n                this.processApps = apps.filter((currentApp) => {\n                    return currentApp.id;\n                });\n            }\n        );\n    }\n\n    onStart(): void {\n        this.dialogRef.close(this.selectedProcess);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\n\nimport { AppsListComponent } from './apps-list.component';\nimport { SelectAppsDialogComponent } from './select-apps-dialog-component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FlexLayoutModule,\n        CoreModule.forChild()\n    ],\n    declarations: [\n        AppsListComponent,\n        SelectAppsDialogComponent\n    ],\n    exports: [\n        AppsListComponent,\n        SelectAppsDialogComponent\n    ],\n    entryComponents: [\n        SelectAppsDialogComponent\n    ]\n})\nexport class AppsListModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentService, ThumbnailService, EmptyListComponent } from '@alfresco/adf-core';\nimport {\n    AfterContentInit,\n    ContentChild,\n    Component,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ProcessContentService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-task-attachment-list',\n    styleUrls: ['./task-attachment-list.component.scss'],\n    templateUrl: './task-attachment-list.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class TaskAttachmentListComponent implements OnChanges, AfterContentInit {\n\n    @ContentChild(EmptyListComponent)\n    emptyTemplate: EmptyListComponent;\n\n    /** (**required**) The ID of the task to display. */\n    @Input()\n    taskId: string;\n\n    /** Disable/Enable read only mode for attachment list. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Emitted when the attachment is double-clicked or a view\n     * option is selected from the context menu by the user from within the component.\n     * Returns a Blob representing the clicked object.\n     */\n    @Output()\n    attachmentClick = new EventEmitter();\n\n    /** Emitted when the attachment list has fetched all the attachments.\n     * Returns a list of attachments.\n     */\n    @Output()\n    success = new EventEmitter();\n\n    /** Emitted when an error occurs while fetching the attachments. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    hasCustomTemplate: boolean = false;\n\n    attachments: any[] = [];\n    isLoading: boolean = false;\n\n    constructor(private activitiContentService: ProcessContentService,\n                private contentService: ContentService,\n                private thumbnailService: ThumbnailService,\n                private ngZone: NgZone) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['taskId'] && changes['taskId'].currentValue) {\n            this.loadAttachmentsByTaskId(changes['taskId'].currentValue);\n        }\n    }\n\n    ngAfterContentInit() {\n        if (this.emptyTemplate) {\n            this.hasCustomTemplate = true;\n        }\n    }\n\n    reset(): void {\n        this.attachments = [];\n    }\n\n    hasCustomEmptyTemplate() {\n        return !!this.emptyTemplate;\n    }\n\n    reload(): void {\n        this.ngZone.run(() => {\n            this.loadAttachmentsByTaskId(this.taskId);\n        });\n    }\n\n    add(content: any): void {\n        this.ngZone.run(() => {\n            this.attachments.push({\n                id: content.id,\n                name: content.name,\n                created: content.created,\n                createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,\n                icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)\n            });\n        });\n    }\n\n    private loadAttachmentsByTaskId(taskId: string) {\n        if (taskId) {\n            this.isLoading = true;\n            this.reset();\n            const opts = 'true';\n            this.activitiContentService.getTaskRelatedContent(taskId, opts).subscribe(\n                (res: any) => {\n                    let attachList = [];\n                    res.data.forEach((content) => {\n                        attachList.push({\n                            id: content.id,\n                            name: content.name,\n                            created: content.created,\n                            createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,\n                            icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)\n                        });\n                    });\n                    this.attachments = attachList;\n                    this.success.emit(this.attachments);\n                    this.isLoading = false;\n                },\n                (err) => {\n                    this.error.emit(err);\n                    this.isLoading = false;\n                });\n        }\n    }\n\n    deleteAttachmentById(contentId: number) {\n        if (contentId) {\n            this.activitiContentService.deleteRelatedContent(contentId).subscribe(\n                (res: any) => {\n                    this.attachments = this.attachments.filter((content) => {\n                        return content.id !== contentId;\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n\n    isEmpty(): boolean {\n        return this.attachments && this.attachments.length === 0;\n    }\n\n    onShowRowActionsMenu(event: any) {\n        let viewAction = {\n            title: 'ADF_TASK_LIST.MENU_ACTIONS.VIEW_CONTENT',\n            name: 'view'\n        };\n\n        let removeAction = {\n            title: 'ADF_TASK_LIST.MENU_ACTIONS.REMOVE_CONTENT',\n            name: 'remove'\n        };\n\n        let downloadAction = {\n            title: 'ADF_TASK_LIST.MENU_ACTIONS.DOWNLOAD_CONTENT',\n            name: 'download'\n        };\n\n        event.value.actions = [\n            viewAction,\n            downloadAction\n        ];\n\n        if (!this.disabled) {\n            event.value.actions.splice(1, 0, removeAction);\n        }\n    }\n\n    onExecuteRowAction(event: any) {\n        let args = event.value;\n        let action = args.action;\n        if (action.name === 'view') {\n            this.emitDocumentContent(args.row.obj);\n        } else if (action.name === 'remove') {\n            this.deleteAttachmentById(args.row.obj.id);\n        } else if (action.name === 'download') {\n            this.downloadContent(args.row.obj);\n        }\n    }\n\n    openContent(event: any): void {\n        let content = event.value.obj;\n        this.emitDocumentContent(content);\n    }\n\n    emitDocumentContent(content: any) {\n        this.activitiContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => {\n                content.contentBlob = blob;\n                this.attachmentClick.emit(content);\n            },\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    downloadContent(content: any): void {\n        this.activitiContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => this.contentService.downloadBlob(blob, content.name),\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    isDisabled(): boolean {\n        return this.disabled;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentService, EmptyListComponent , ThumbnailService } from '@alfresco/adf-core';\nimport { AfterContentInit, ContentChild, Component, EventEmitter, Input, NgZone, OnChanges, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { ProcessContentService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-process-attachment-list',\n    styleUrls: ['./process-attachment-list.component.scss'],\n    templateUrl: './process-attachment-list.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class ProcessAttachmentListComponent implements OnChanges, AfterContentInit {\n\n    @ContentChild(EmptyListComponent)\n    emptyTemplate: EmptyListComponent;\n\n    /** (**required**) The ID of the process instance to display. */\n    @Input()\n    processInstanceId: string;\n\n    /** Disable/Enable read-only mode for attachment list. */\n    @Input()\n    disabled: boolean = false;\n\n    /** Emitted when the attachment is double-clicked or the\n     * view option is selected from the context menu by the user from\n     * within the component. Returns a Blob representing the object\n     * that was clicked.\n     */\n    @Output()\n    attachmentClick = new EventEmitter();\n\n    /** Emitted when the attachment list has fetched all the attachments.\n     * Returns a list of attachments.\n     */\n    @Output()\n    success = new EventEmitter();\n\n    /** Emitted when the attachment list is not able to fetch the attachments\n     * (eg, following a network error).\n     */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    hasCustomTemplate: boolean = false;\n\n    attachments: any[] = [];\n    isLoading: boolean = false;\n\n    constructor(private activitiContentService: ProcessContentService,\n                private contentService: ContentService,\n                private thumbnailService: ThumbnailService,\n                private ngZone: NgZone) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {\n            this.loadAttachmentsByProcessInstanceId(changes['processInstanceId'].currentValue);\n        }\n    }\n\n    ngAfterContentInit() {\n        if (this.emptyTemplate) {\n            this.hasCustomTemplate = true;\n        }\n    }\n\n    reset() {\n        this.attachments = [];\n    }\n\n    reload(): void {\n        this.ngZone.run(() => {\n            this.loadAttachmentsByProcessInstanceId(this.processInstanceId);\n        });\n    }\n\n    hasCustomEmptyTemplate() {\n        return !!this.emptyTemplate;\n    }\n\n    add(content: any): void {\n        this.ngZone.run(() => {\n            this.attachments.push({\n                id: content.id,\n                name: content.name,\n                created: content.created,\n                createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,\n                icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)\n            });\n        });\n    }\n\n    private loadAttachmentsByProcessInstanceId(processInstanceId: string) {\n        if (processInstanceId) {\n            this.reset();\n            this.isLoading = true;\n            const opts: string =  'true';\n            this.activitiContentService.getProcessRelatedContent(processInstanceId, opts).subscribe(\n                (res: any) => {\n                    res.data.forEach((content) => {\n                        this.attachments.push({\n                            id: content.id,\n                            name: content.name,\n                            created: content.created,\n                            createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,\n                            icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)\n                        });\n                    });\n                    this.success.emit(this.attachments);\n                    this.isLoading = false;\n                },\n                (err) => {\n                    this.error.emit(err);\n                    this.isLoading = false;\n                });\n        }\n    }\n\n    private deleteAttachmentById(contentId: number) {\n        if (contentId) {\n            this.activitiContentService.deleteRelatedContent(contentId).subscribe(\n                (res: any) => {\n                    this.attachments = this.attachments.filter((content) => {\n                        return content.id !== contentId;\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n\n    isEmpty(): boolean {\n        return this.attachments && this.attachments.length === 0;\n    }\n\n    onShowRowActionsMenu(event: any) {\n        let viewAction = {\n            title: 'ADF_PROCESS_LIST.MENU_ACTIONS.VIEW_CONTENT',\n            name: 'view'\n        };\n\n        let removeAction = {\n            title: 'ADF_PROCESS_LIST.MENU_ACTIONS.REMOVE_CONTENT',\n            name: 'remove'\n        };\n\n        let downloadAction = {\n            title: 'ADF_PROCESS_LIST.MENU_ACTIONS.DOWNLOAD_CONTENT',\n            name: 'download'\n        };\n\n        event.value.actions = [\n            viewAction,\n            downloadAction\n        ];\n\n        if (!this.disabled) {\n            event.value.actions.splice(1, 0, removeAction);\n        }\n    }\n\n    onExecuteRowAction(event: any) {\n        let args = event.value;\n        let action = args.action;\n        if (action.name === 'view') {\n            this.emitDocumentContent(args.row.obj);\n        } else if (action.name === 'remove') {\n            this.deleteAttachmentById(args.row.obj.id);\n        } else if (action.name === 'download') {\n            this.downloadContent(args.row.obj);\n        }\n    }\n\n    openContent(event: any): void {\n        let content = event.value.obj;\n        this.emitDocumentContent(content);\n    }\n\n    emitDocumentContent(content: any) {\n        this.activitiContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => {\n                content.contentBlob = blob;\n                this.attachmentClick.emit(content);\n            },\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    downloadContent(content: any): void {\n        this.activitiContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => this.contentService.downloadBlob(blob, content.name),\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n\n    isDisabled(): boolean {\n        return this.disabled;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ProcessContentService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-create-process-attachment',\n    styleUrls: ['./create-process-attachment.component.css'],\n    templateUrl: './create-process-attachment.component.html'\n})\nexport class CreateProcessAttachmentComponent implements OnChanges {\n\n    /** (required) The ID of the process instance to display. */\n    @Input()\n    processInstanceId: string;\n\n    /** Emitted when an error occurs while creating or uploading an attachment\n     * from the user within the component.\n     */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an attachment is successfully created or uploaded\n     * from within the component.\n     */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private activitiContentService: ProcessContentService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {\n            this.processInstanceId = changes['processInstanceId'].currentValue;\n        }\n    }\n\n    onFileUpload(event: any) {\n        let filesList: File[] = event.detail.files.map((obj) => obj.file);\n\n        for (let fileInfoObj of filesList) {\n            let file: File = fileInfoObj;\n            let opts = {\n                isRelatedContent: true\n            };\n            this.activitiContentService.createProcessRelatedContent(this.processInstanceId, file, opts).subscribe(\n                (res) => {\n                    this.success.emit(res);\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ProcessContentService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-create-task-attachment',\n    styleUrls: ['./create-task-attachment.component.scss'],\n    templateUrl: './create-task-attachment.component.html'\n})\nexport class AttachmentComponent implements OnChanges {\n\n    /** (required) The numeric ID of the task to display. */\n    @Input()\n    taskId: string;\n\n    /** Emitted when an error occurs while creating or uploading an\n     *  attachment from the user within the component.\n     */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when an attachment is created or uploaded successfully\n     * from within the component.\n     */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private activitiContentService: ProcessContentService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['taskId'] && changes['taskId'].currentValue) {\n            this.taskId = changes['taskId'].currentValue;\n        }\n    }\n\n    onFileUpload(event: any) {\n        let filesList: File[] = event.detail.files.map((obj) => obj.file);\n\n        for (let fileInfoObj of filesList) {\n            let file: File = fileInfoObj;\n            let opts = {\n                isRelatedContent: true\n            };\n            this.activitiContentService.createTaskRelatedContent(this.taskId, file, opts).subscribe(\n                (res) => {\n                    this.success.emit(res);\n                },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { TaskAttachmentListComponent } from './task-attachment-list.component';\nimport { ProcessAttachmentListComponent } from './process-attachment-list.component';\nimport { CreateProcessAttachmentComponent } from './create-process-attachment.component';\nimport { AttachmentComponent } from './create-task-attachment.component';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        MaterialModule\n    ],\n    declarations: [\n        TaskAttachmentListComponent,\n        ProcessAttachmentListComponent,\n        CreateProcessAttachmentComponent,\n        CreateProcessAttachmentComponent,\n        AttachmentComponent\n    ],\n    exports: [\n        TaskAttachmentListComponent,\n        ProcessAttachmentListComponent,\n        CreateProcessAttachmentComponent,\n        CreateProcessAttachmentComponent,\n        AttachmentComponent\n    ]\n})\nexport class AttachmentModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule, TRANSLATION_PROVIDER } from '@alfresco/adf-core';\n\nimport { MaterialModule } from './material.module';\n\nimport { ProcessListModule } from './process-list/process-list.module';\nimport { TaskListModule } from './task-list/task-list.module';\nimport { AppsListModule } from './app-list/apps-list.module';\nimport { ProcessCommentsModule } from './process-comments/process-comments.module';\nimport { AttachmentModule } from './attachment/attachment.module';\nimport { PeopleModule } from './people/people.module';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        ProcessCommentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        ProcessListModule,\n        TaskListModule,\n        AppsListModule,\n        AttachmentModule,\n        PeopleModule\n    ],\n    providers: [\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'adf-process-services',\n                source: 'assets/adf-process-services'\n            }\n        }\n    ],\n    exports: [\n        CommonModule,\n        ProcessCommentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ProcessListModule,\n        TaskListModule,\n        AppsListModule,\n        AttachmentModule,\n        PeopleModule\n    ]\n})\nexport class ProcessModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ProcessModule,\n            providers: [\n                {\n                    provide: TRANSLATION_PROVIDER,\n                    multi: true,\n                    useValue: {\n                        name: 'adf-process-services',\n                        source: 'assets/adf-process-services'\n                    }\n                }\n            ]\n        };\n    }\n\n    static forChild(): ModuleWithProviders {\n        return {\n            ngModule: ProcessModuleLazy\n        };\n    }\n}\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        ProcessCommentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        ProcessListModule,\n        TaskListModule,\n        AppsListModule,\n        AttachmentModule,\n        PeopleModule\n    ],\n    exports: [\n        CommonModule,\n        ProcessCommentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ProcessListModule,\n        TaskListModule,\n        AppsListModule,\n        AttachmentModule,\n        PeopleModule\n    ]\n})\nexport class ProcessModuleLazy {}\n"]}
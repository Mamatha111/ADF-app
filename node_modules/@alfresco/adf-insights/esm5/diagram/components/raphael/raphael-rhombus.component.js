/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './models/point';
import { RaphaelBase } from './raphael-base';
import { RaphaelService } from './raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
var RaphaelRhombusDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RaphaelRhombusDirective, _super);
    function RaphaelRhombusDirective(elementRef, raphaelService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.error = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    RaphaelRhombusDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var opts = { 'stroke-width': this.strokeWidth, 'fill': this.fillColors, 'stroke': this.stroke, 'fill-opacity': this.fillOpacity };
        /** @type {?} */
        var elementDraw = this.draw(this.center, this.width, this.height, opts);
        elementDraw.node.id = this.elementId;
    };
    /**
     * @param {?} center
     * @param {?} width
     * @param {?} height
     * @param {?=} opts
     * @return {?}
     */
    RaphaelRhombusDirective.prototype.draw = /**
     * @param {?} center
     * @param {?} width
     * @param {?} height
     * @param {?=} opts
     * @return {?}
     */
    function (center, width, height, opts) {
        return this.paper.path('M' + center.x + ' ' + (center.y + (height / 2)) +
            'L' + (center.x + (width / 2)) + ' ' + (center.y + height) +
            'L' + (center.x + width) + ' ' + (center.y + (height / 2)) +
            'L' + (center.x + (width / 2)) + ' ' + center.y + 'z').attr(opts);
    };
    RaphaelRhombusDirective.decorators = [
        { type: Directive, args: [{ selector: 'adf-raphael-rhombus, raphael-rhombus' },] }
    ];
    /** @nocollapse */
    RaphaelRhombusDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: RaphaelService }
    ]; };
    RaphaelRhombusDirective.propDecorators = {
        center: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        fillColors: [{ type: Input }],
        stroke: [{ type: Input }],
        strokeWidth: [{ type: Input }],
        fillOpacity: [{ type: Input }],
        elementId: [{ type: Input }],
        error: [{ type: Output }]
    };
    return RaphaelRhombusDirective;
}(RaphaelBase));
export { RaphaelRhombusDirective };
if (false) {
    /** @type {?} */
    RaphaelRhombusDirective.prototype.center;
    /** @type {?} */
    RaphaelRhombusDirective.prototype.width;
    /** @type {?} */
    RaphaelRhombusDirective.prototype.height;
    /** @type {?} */
    RaphaelRhombusDirective.prototype.fillColors;
    /** @type {?} */
    RaphaelRhombusDirective.prototype.stroke;
    /** @type {?} */
    RaphaelRhombusDirective.prototype.strokeWidth;
    /** @type {?} */
    RaphaelRhombusDirective.prototype.fillOpacity;
    /** @type {?} */
    RaphaelRhombusDirective.prototype.elementId;
    /** @type {?} */
    RaphaelRhombusDirective.prototype.error;
    /** @type {?} */
    RaphaelRhombusDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1yaG9tYnVzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtaW5zaWdodHMvIiwic291cmNlcyI6WyJkaWFncmFtL2NvbXBvbmVudHMvcmFwaGFlbC9yYXBoYWVsLXJob21idXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7OztBQUtuRDtJQUM2QyxtREFBVztJQTRCcEQsaUNBQW1CLFVBQXNCLEVBQzdCLGNBQThCO1FBRDFDLFlBRUksa0JBQU0sVUFBVSxFQUFFLGNBQWMsQ0FBQyxTQUNwQztRQUhrQixnQkFBVSxHQUFWLFVBQVUsQ0FBWTtRQUZ6QyxXQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7SUFLM0IsQ0FBQzs7OztJQUVELDBDQUFROzs7SUFBUjs7WUFFUSxJQUFJLEdBQUcsRUFBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBQzs7WUFDM0gsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDO1FBQ3ZFLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDekMsQ0FBQzs7Ozs7Ozs7SUFFTSxzQ0FBSTs7Ozs7OztJQUFYLFVBQVksTUFBYSxFQUFFLEtBQWEsRUFBRSxNQUFjLEVBQUUsSUFBVTtRQUNoRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDbkUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1lBQzFELEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMxRCxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUN4RCxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQixDQUFDOztnQkEvQ0osU0FBUyxTQUFDLEVBQUMsUUFBUSxFQUFFLHNDQUFzQyxFQUFDOzs7O2dCQVJ6QyxVQUFVO2dCQUdyQixjQUFjOzs7eUJBT2xCLEtBQUs7d0JBR0wsS0FBSzt5QkFHTCxLQUFLOzZCQUdMLEtBQUs7eUJBR0wsS0FBSzs4QkFHTCxLQUFLOzhCQUdMLEtBQUs7NEJBR0wsS0FBSzt3QkFHTCxNQUFNOztJQXNCWCw4QkFBQztDQUFBLEFBaERELENBQzZDLFdBQVcsR0ErQ3ZEO1NBL0NZLHVCQUF1Qjs7O0lBQ2hDLHlDQUNjOztJQUVkLHdDQUNjOztJQUVkLHlDQUNlOztJQUVmLDZDQUNnQjs7SUFFaEIseUNBQ1k7O0lBRVosOENBQ2lCOztJQUVqQiw4Q0FDaUI7O0lBRWpCLDRDQUNrQjs7SUFFbEIsd0NBQzJCOztJQUVmLDZDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi9tb2RlbHMvcG9pbnQnO1xuaW1wb3J0IHsgUmFwaGFlbEJhc2UgfSBmcm9tICcuL3JhcGhhZWwtYmFzZSc7XG5pbXBvcnQgeyBSYXBoYWVsU2VydmljZSB9IGZyb20gJy4vcmFwaGFlbC5zZXJ2aWNlJztcblxuLyoqXG4gKiBEaXJlY3RpdmUgc2VsZWN0b3JzIHdpdGhvdXQgYWRmLSBwcmVmaXggd2lsbCBiZSBkZXByZWNhdGVkIG9uIDMuMC4wXG4gKi9cbkBEaXJlY3RpdmUoe3NlbGVjdG9yOiAnYWRmLXJhcGhhZWwtcmhvbWJ1cywgcmFwaGFlbC1yaG9tYnVzJ30pXG5leHBvcnQgY2xhc3MgUmFwaGFlbFJob21idXNEaXJlY3RpdmUgZXh0ZW5kcyBSYXBoYWVsQmFzZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQElucHV0KClcbiAgICBjZW50ZXI6IFBvaW50O1xuXG4gICAgQElucHV0KClcbiAgICB3aWR0aDogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICBoZWlnaHQ6IG51bWJlcjtcblxuICAgIEBJbnB1dCgpXG4gICAgZmlsbENvbG9yczogYW55O1xuXG4gICAgQElucHV0KClcbiAgICBzdHJva2U6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgc3Ryb2tlV2lkdGg6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgZmlsbE9wYWNpdHk6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgZWxlbWVudElkOiBzdHJpbmc7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHJhcGhhZWxTZXJ2aWNlOiBSYXBoYWVsU2VydmljZSkge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmLCByYXBoYWVsU2VydmljZSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG5cbiAgICAgICAgbGV0IG9wdHMgPSB7J3N0cm9rZS13aWR0aCc6IHRoaXMuc3Ryb2tlV2lkdGgsICdmaWxsJzogdGhpcy5maWxsQ29sb3JzLCAnc3Ryb2tlJzogdGhpcy5zdHJva2UsICdmaWxsLW9wYWNpdHknOiB0aGlzLmZpbGxPcGFjaXR5fTtcbiAgICAgICAgbGV0IGVsZW1lbnREcmF3ID0gdGhpcy5kcmF3KHRoaXMuY2VudGVyLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgb3B0cyk7XG4gICAgICAgIGVsZW1lbnREcmF3Lm5vZGUuaWQgPSB0aGlzLmVsZW1lbnRJZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdyhjZW50ZXI6IFBvaW50LCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgb3B0cz86IGFueSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXBlci5wYXRoKCdNJyArIGNlbnRlci54ICsgJyAnICsgKGNlbnRlci55ICsgKGhlaWdodCAvIDIpKSArXG4gICAgICAgICAgICAnTCcgKyAoY2VudGVyLnggKyAod2lkdGggLyAyKSkgKyAnICcgKyAoY2VudGVyLnkgKyBoZWlnaHQpICtcbiAgICAgICAgICAgICdMJyArIChjZW50ZXIueCArIHdpZHRoKSArICcgJyArIChjZW50ZXIueSArIChoZWlnaHQgLyAyKSkgK1xuICAgICAgICAgICAgJ0wnICsgKGNlbnRlci54ICsgKHdpZHRoIC8gMikpICsgJyAnICsgY2VudGVyLnkgKyAneidcbiAgICAgICAgKS5hdHRyKG9wdHMpO1xuICAgIH1cbn1cbiJdfQ==
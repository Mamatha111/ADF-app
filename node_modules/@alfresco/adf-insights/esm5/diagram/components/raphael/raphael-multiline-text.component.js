/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './models/point';
import { RaphaelBase } from './raphael-base';
import { RaphaelService } from './raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
var RaphaelMultilineTextDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RaphaelMultilineTextDirective, _super);
    function RaphaelMultilineTextDirective(elementRef, raphaelService) {
        var _this = _super.call(this, elementRef, raphaelService) || this;
        _this.elementRef = elementRef;
        _this.error = new EventEmitter();
        _this.TEXT_PADDING = 3;
        return _this;
    }
    /**
     * @return {?}
     */
    RaphaelMultilineTextDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.text === null || this.text === undefined) {
            this.text = '';
        }
        this.draw(this.position, this.text);
    };
    /**
     * @param {?} position
     * @param {?} text
     * @return {?}
     */
    RaphaelMultilineTextDirective.prototype.draw = /**
     * @param {?} position
     * @param {?} text
     * @return {?}
     */
    function (position, text) {
        /** @type {?} */
        var textPaper = this.paper.text(position.x + this.TEXT_PADDING, position.y + this.TEXT_PADDING, text).attr({
            'text-anchor': 'middle',
            'font-family': 'Arial',
            'font-size': '11',
            'fill': '#373e48'
        });
        /** @type {?} */
        var formattedText = this.formatText(textPaper, text, this.elementWidth);
        textPaper.attr({
            'text': formattedText
        });
        textPaper.transform(this.transform);
        return textPaper;
    };
    /**
     * @private
     * @param {?} textPaper
     * @param {?} text
     * @param {?} elementWidth
     * @return {?}
     */
    RaphaelMultilineTextDirective.prototype.formatText = /**
     * @private
     * @param {?} textPaper
     * @param {?} text
     * @param {?} elementWidth
     * @return {?}
     */
    function (textPaper, text, elementWidth) {
        /** @type {?} */
        var pText = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        textPaper.attr({
            'text': pText
        });
        /** @type {?} */
        var letterWidth = textPaper.getBBox().width / text.length;
        /** @type {?} */
        var removedLineBreaks = text.split('\n');
        /** @type {?} */
        var actualRowLength = 0;
        /** @type {?} */
        var formattedText = [];
        removedLineBreaks.forEach(function (sentence) {
            /** @type {?} */
            var words = sentence.split(' ');
            words.forEach(function (word) {
                /** @type {?} */
                var length = word.length;
                if (actualRowLength + (length * letterWidth) > elementWidth) {
                    formattedText.push('\n');
                    actualRowLength = 0;
                }
                actualRowLength += length * letterWidth;
                formattedText.push(word + ' ');
            });
            formattedText.push('\n');
            actualRowLength = 0;
        });
        return formattedText.join('');
    };
    RaphaelMultilineTextDirective.decorators = [
        { type: Directive, args: [{ selector: 'adf-raphael-multiline-text, raphael-multiline-text' },] }
    ];
    /** @nocollapse */
    RaphaelMultilineTextDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: RaphaelService }
    ]; };
    RaphaelMultilineTextDirective.propDecorators = {
        paper: [{ type: Input }],
        position: [{ type: Input }],
        transform: [{ type: Input }],
        text: [{ type: Input }],
        elementWidth: [{ type: Input }],
        error: [{ type: Output }]
    };
    return RaphaelMultilineTextDirective;
}(RaphaelBase));
export { RaphaelMultilineTextDirective };
if (false) {
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.paper;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.position;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.transform;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.text;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.elementWidth;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.error;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.TEXT_PADDING;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1tdWx0aWxpbmUtdGV4dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL3JhcGhhZWwvcmFwaGFlbC1tdWx0aWxpbmUtdGV4dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7O0FBS25EO0lBQ21ELHlEQUFXO0lBcUIxRCx1Q0FBbUIsVUFBc0IsRUFDN0IsY0FBOEI7UUFEMUMsWUFFSSxrQkFBTSxVQUFVLEVBQUUsY0FBYyxDQUFDLFNBQ3BDO1FBSGtCLGdCQUFVLEdBQVYsVUFBVSxDQUFZO1FBSnpDLFdBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTNCLGtCQUFZLEdBQUcsQ0FBQyxDQUFDOztJQUtqQixDQUFDOzs7O0lBRUQsZ0RBQVE7OztJQUFSO1FBQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUMvQyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztTQUNsQjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7Ozs7O0lBRUQsNENBQUk7Ozs7O0lBQUosVUFBSyxRQUFlLEVBQUUsSUFBWTs7WUFDMUIsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3ZHLGFBQWEsRUFBRSxRQUFRO1lBQ3ZCLGFBQWEsRUFBRSxPQUFPO1lBQ3RCLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLE1BQU0sRUFBRSxTQUFTO1NBQ3BCLENBQUM7O1lBRUUsYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ3ZFLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDWCxNQUFNLEVBQUUsYUFBYTtTQUN4QixDQUFDLENBQUM7UUFDSCxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwQyxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDOzs7Ozs7OztJQUVPLGtEQUFVOzs7Ozs7O0lBQWxCLFVBQW1CLFNBQVMsRUFBRSxJQUFJLEVBQUUsWUFBWTs7WUFDeEMsS0FBSyxHQUFHLHNEQUFzRDtRQUNsRSxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQ1gsTUFBTSxFQUFFLEtBQUs7U0FDaEIsQ0FBQyxDQUFDOztZQUNDLFdBQVcsR0FBRyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNOztZQUNyRCxpQkFBaUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQzs7WUFDcEMsZUFBZSxHQUFHLENBQUM7O1lBQUUsYUFBYSxHQUFHLEVBQUU7UUFDM0MsaUJBQWlCLENBQUMsT0FBTyxDQUFDLFVBQUMsUUFBUTs7Z0JBQzNCLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUMvQixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBSTs7b0JBQ1gsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNO2dCQUN4QixJQUFJLGVBQWUsR0FBRyxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsR0FBRyxZQUFZLEVBQUU7b0JBQ3pELGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3pCLGVBQWUsR0FBRyxDQUFDLENBQUM7aUJBQ3ZCO2dCQUNELGVBQWUsSUFBSSxNQUFNLEdBQUcsV0FBVyxDQUFDO2dCQUN4QyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztZQUNuQyxDQUFDLENBQUMsQ0FBQztZQUNILGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsZUFBZSxHQUFHLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQyxDQUFDOztnQkF6RUosU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLG9EQUFvRCxFQUFFOzs7O2dCQVJ6RCxVQUFVO2dCQUdyQixjQUFjOzs7d0JBT2xCLEtBQUs7MkJBR0wsS0FBSzs0QkFHTCxLQUFLO3VCQUdMLEtBQUs7K0JBR0wsS0FBSzt3QkFHTCxNQUFNOztJQXlEWCxvQ0FBQztDQUFBLEFBMUVELENBQ21ELFdBQVcsR0F5RTdEO1NBekVZLDZCQUE2Qjs7O0lBQ3RDLDhDQUNXOztJQUVYLGlEQUNnQjs7SUFFaEIsa0RBQ2tCOztJQUVsQiw2Q0FDYTs7SUFFYixxREFDcUI7O0lBRXJCLDhDQUMyQjs7SUFFM0IscURBQWlCOztJQUVMLG1EQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi9tb2RlbHMvcG9pbnQnO1xuaW1wb3J0IHsgUmFwaGFlbEJhc2UgfSBmcm9tICcuL3JhcGhhZWwtYmFzZSc7XG5pbXBvcnQgeyBSYXBoYWVsU2VydmljZSB9IGZyb20gJy4vcmFwaGFlbC5zZXJ2aWNlJztcblxuLyoqXG4gKiBEaXJlY3RpdmUgc2VsZWN0b3JzIHdpdGhvdXQgYWRmLSBwcmVmaXggd2lsbCBiZSBkZXByZWNhdGVkIG9uIDMuMC4wXG4gKi9cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ2FkZi1yYXBoYWVsLW11bHRpbGluZS10ZXh0LCByYXBoYWVsLW11bHRpbGluZS10ZXh0JyB9KVxuZXhwb3J0IGNsYXNzIFJhcGhhZWxNdWx0aWxpbmVUZXh0RGlyZWN0aXZlIGV4dGVuZHMgUmFwaGFlbEJhc2UgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpXG4gICAgcGFwZXI6IGFueTtcblxuICAgIEBJbnB1dCgpXG4gICAgcG9zaXRpb246IFBvaW50O1xuXG4gICAgQElucHV0KClcbiAgICB0cmFuc2Zvcm06IHN0cmluZztcblxuICAgIEBJbnB1dCgpXG4gICAgdGV4dDogc3RyaW5nO1xuXG4gICAgQElucHV0KClcbiAgICBlbGVtZW50V2lkdGg6IG51bWJlcjtcblxuICAgIEBPdXRwdXQoKVxuICAgIGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gICAgVEVYVF9QQURESU5HID0gMztcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHJhcGhhZWxTZXJ2aWNlOiBSYXBoYWVsU2VydmljZSkge1xuICAgICAgICBzdXBlcihlbGVtZW50UmVmLCByYXBoYWVsU2VydmljZSk7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIGlmICh0aGlzLnRleHQgPT09IG51bGwgfHwgdGhpcy50ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZHJhdyh0aGlzLnBvc2l0aW9uLCB0aGlzLnRleHQpO1xuICAgIH1cblxuICAgIGRyYXcocG9zaXRpb246IFBvaW50LCB0ZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IHRleHRQYXBlciA9IHRoaXMucGFwZXIudGV4dChwb3NpdGlvbi54ICsgdGhpcy5URVhUX1BBRERJTkcsIHBvc2l0aW9uLnkgKyB0aGlzLlRFWFRfUEFERElORywgdGV4dCkuYXR0cih7XG4gICAgICAgICAgICAndGV4dC1hbmNob3InOiAnbWlkZGxlJyxcbiAgICAgICAgICAgICdmb250LWZhbWlseSc6ICdBcmlhbCcsXG4gICAgICAgICAgICAnZm9udC1zaXplJzogJzExJyxcbiAgICAgICAgICAgICdmaWxsJzogJyMzNzNlNDgnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBmb3JtYXR0ZWRUZXh0ID0gdGhpcy5mb3JtYXRUZXh0KHRleHRQYXBlciwgdGV4dCwgdGhpcy5lbGVtZW50V2lkdGgpO1xuICAgICAgICB0ZXh0UGFwZXIuYXR0cih7XG4gICAgICAgICAgICAndGV4dCc6IGZvcm1hdHRlZFRleHRcbiAgICAgICAgfSk7XG4gICAgICAgIHRleHRQYXBlci50cmFuc2Zvcm0odGhpcy50cmFuc2Zvcm0pO1xuICAgICAgICByZXR1cm4gdGV4dFBhcGVyO1xuICAgIH1cblxuICAgIHByaXZhdGUgZm9ybWF0VGV4dCh0ZXh0UGFwZXIsIHRleHQsIGVsZW1lbnRXaWR0aCkge1xuICAgICAgICBsZXQgcFRleHQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWic7XG4gICAgICAgIHRleHRQYXBlci5hdHRyKHtcbiAgICAgICAgICAgICd0ZXh0JzogcFRleHRcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBsZXR0ZXJXaWR0aCA9IHRleHRQYXBlci5nZXRCQm94KCkud2lkdGggLyB0ZXh0Lmxlbmd0aDtcbiAgICAgICAgbGV0IHJlbW92ZWRMaW5lQnJlYWtzID0gdGV4dC5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGxldCBhY3R1YWxSb3dMZW5ndGggPSAwLCBmb3JtYXR0ZWRUZXh0ID0gW107XG4gICAgICAgIHJlbW92ZWRMaW5lQnJlYWtzLmZvckVhY2goKHNlbnRlbmNlKSA9PiB7XG4gICAgICAgICAgICBsZXQgd29yZHMgPSBzZW50ZW5jZS5zcGxpdCgnICcpO1xuICAgICAgICAgICAgd29yZHMuZm9yRWFjaCgod29yZCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBsZW5ndGggPSB3b3JkLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpZiAoYWN0dWFsUm93TGVuZ3RoICsgKGxlbmd0aCAqIGxldHRlcldpZHRoKSA+IGVsZW1lbnRXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRUZXh0LnB1c2goJ1xcbicpO1xuICAgICAgICAgICAgICAgICAgICBhY3R1YWxSb3dMZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhY3R1YWxSb3dMZW5ndGggKz0gbGVuZ3RoICogbGV0dGVyV2lkdGg7XG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkVGV4dC5wdXNoKHdvcmQgKyAnICcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb3JtYXR0ZWRUZXh0LnB1c2goJ1xcbicpO1xuICAgICAgICAgICAgYWN0dWFsUm93TGVuZ3RoID0gMDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmb3JtYXR0ZWRUZXh0LmpvaW4oJycpO1xuICAgIH1cbn1cbiJdfQ==
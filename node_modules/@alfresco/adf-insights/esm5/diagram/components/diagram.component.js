/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { DiagramModel } from '../models/diagram/diagram.model';
import { DiagramColorService } from '../services/diagram-color.service';
import { DiagramsService } from '../services/diagrams.service';
import { RaphaelService } from './raphael/raphael.service';
var DiagramComponent = /** @class */ (function () {
    function DiagramComponent(diagramColorService, raphaelService, diagramsService) {
        this.diagramColorService = diagramColorService;
        this.raphaelService = raphaelService;
        this.diagramsService = diagramsService;
        this.metricType = '';
        this.width = 1000;
        this.height = 500;
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        this.PADDING_WIDTH = 60;
        this.PADDING_HEIGHT = 60;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DiagramComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.reset();
        this.diagramColorService.setTotalColors(this.metricColor);
        if (this.processDefinitionId) {
            this.getProcessDefinitionModel(this.processDefinitionId);
        }
        else {
            this.getRunningProcessDefinitionModel(this.processInstanceId);
        }
    };
    /**
     * @param {?} processInstanceId
     * @return {?}
     */
    DiagramComponent.prototype.getRunningProcessDefinitionModel = /**
     * @param {?} processInstanceId
     * @return {?}
     */
    function (processInstanceId) {
        var _this = this;
        this.diagramsService.getRunningProcessDefinitionModel(processInstanceId).subscribe(function (res) {
            _this.diagram = new DiagramModel(res);
            _this.raphaelService.setting(_this.diagram.diagramWidth + _this.PADDING_WIDTH, _this.diagram.diagramHeight + _this.PADDING_HEIGHT);
            _this.setMetricValueToDiagramElement(_this.diagram, _this.metricPercentages, _this.metricType);
            _this.success.emit(res);
        }, function (err) {
            _this.error.emit(err);
        });
    };
    /**
     * @param {?} processDefinitionId
     * @return {?}
     */
    DiagramComponent.prototype.getProcessDefinitionModel = /**
     * @param {?} processDefinitionId
     * @return {?}
     */
    function (processDefinitionId) {
        var _this = this;
        this.diagramsService.getProcessDefinitionModel(processDefinitionId).subscribe(function (res) {
            _this.diagram = new DiagramModel(res);
            _this.raphaelService.setting(_this.diagram.diagramWidth + _this.PADDING_WIDTH, _this.diagram.diagramHeight + _this.PADDING_HEIGHT);
            _this.setMetricValueToDiagramElement(_this.diagram, _this.metricPercentages, _this.metricType);
            _this.success.emit(res);
        }, function (err) {
            _this.error.emit(err);
        });
    };
    /**
     * @param {?} diagram
     * @param {?} metrics
     * @param {?} metricType
     * @return {?}
     */
    DiagramComponent.prototype.setMetricValueToDiagramElement = /**
     * @param {?} diagram
     * @param {?} metrics
     * @param {?} metricType
     * @return {?}
     */
    function (diagram, metrics, metricType) {
        var _loop_1 = function (key) {
            if (metrics.hasOwnProperty(key)) {
                /** @type {?} */
                var foundElement = diagram.elements.find(function (element) { return element.id === key; });
                if (foundElement) {
                    foundElement.value = metrics[key];
                    foundElement.dataType = metricType;
                }
            }
        };
        for (var key in metrics) {
            _loop_1(key);
        }
    };
    /**
     * @return {?}
     */
    DiagramComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.raphaelService.reset();
    };
    DiagramComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-diagram',
                    template: "<div *ngIf=\"diagram\" class=\"diagram\">\n    <div *ngFor=\"let element of diagram.elements\">\n        <div [ngSwitch]=\"element.type\">\n            <div *ngSwitchCase=\"'StartEvent'\">\n                <diagram-start-event [data]=\"element\"></diagram-start-event>\n            </div>\n            <div *ngSwitchCase=\"'ExclusiveGateway'\">\n                <diagram-exclusive-gateway [data]=\"element\"></diagram-exclusive-gateway>\n            </div>\n            <div *ngSwitchCase=\"'InclusiveGateway'\">\n                <diagram-inclusive-gateway [data]=\"element\"></diagram-inclusive-gateway>\n            </div>\n            <div *ngSwitchCase=\"'EventGateway'\">\n                <diagram-event-gateway [data]=\"element\"></diagram-event-gateway>\n            </div>\n            <div *ngSwitchCase=\"'ParallelGateway'\">\n                <diagram-parallel-gateway [data]=\"element\"></diagram-parallel-gateway>\n            </div>\n            <div *ngSwitchCase=\"'EndEvent'\">\n                <diagram-end-event [data]=\"element\"></diagram-end-event>\n            </div>\n            <div *ngSwitchCase=\"'UserTask'\">\n                <diagram-user-task [data]=\"element\"></diagram-user-task>\n            </div>\n            <div *ngSwitchCase=\"'ManualTask'\">\n                <diagram-manual-task [data]=\"element\"></diagram-manual-task>\n            </div>\n            <div *ngSwitchCase=\"'ServiceTask'\">\n                <diagram-container-service-task [data]=\"element\"></diagram-container-service-task>\n            </div>\n            <div *ngSwitchCase=\"'ReceiveTask'\">\n                <diagram-receive-task [data]=\"element\"></diagram-receive-task>\n            </div>\n            <div *ngSwitchCase=\"'ScriptTask'\">\n                <diagram-script-task [data]=\"element\"></diagram-script-task>\n            </div>\n            <div *ngSwitchCase=\"'BusinessRuleTask'\">\n                <diagram-business-rule-task [data]=\"element\"></diagram-business-rule-task>\n            </div>\n            <div *ngSwitchCase=\"'BoundaryEvent'\">\n                <diagram-boundary-event [data]=\"element\"></diagram-boundary-event>\n            </div>\n            <div *ngSwitchCase=\"'ThrowEvent'\">\n                <diagram-throw-event [data]=\"element\"></diagram-throw-event>\n            </div>\n            <div *ngSwitchCase=\"'IntermediateCatchEvent'\">\n                <diagram-intermediate-catching-event [data]=\"element\"></diagram-intermediate-catching-event>\n            </div>\n            <div *ngSwitchCase=\"'SubProcess'\">\n                <diagram-subprocess [data]=\"element\"></diagram-subprocess>\n            </div>\n            <div *ngSwitchCase=\"'EventSubProcess'\">\n                <diagram-event-subprocess [data]=\"element\"></diagram-event-subprocess>\n            </div>\n        </div>\n    </div>\n    <div *ngFor=\"let flow of diagram.flows\">\n        <div [ngSwitch]=\"flow.type\">\n            <div *ngSwitchCase=\"'sequenceFlow'\">\n                <adf-diagram-sequence-flow [flow]=\"flow\"></adf-diagram-sequence-flow>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"diagram.pools\">\n        <diagram-pools [pools]=\"diagram.pools\"></diagram-pools>\n    </div>\n</div>\n",
                    styles: [".diagram{border:1px solid #d3d3d3;overflow:auto}"]
                }] }
    ];
    /** @nocollapse */
    DiagramComponent.ctorParameters = function () { return [
        { type: DiagramColorService },
        { type: RaphaelService },
        { type: DiagramsService }
    ]; };
    DiagramComponent.propDecorators = {
        processDefinitionId: [{ type: Input }],
        processInstanceId: [{ type: Input }],
        metricPercentages: [{ type: Input }],
        metricColor: [{ type: Input }],
        metricType: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        success: [{ type: Output }],
        error: [{ type: Output }]
    };
    return DiagramComponent;
}());
export { DiagramComponent };
if (false) {
    /** @type {?} */
    DiagramComponent.prototype.processDefinitionId;
    /** @type {?} */
    DiagramComponent.prototype.processInstanceId;
    /** @type {?} */
    DiagramComponent.prototype.metricPercentages;
    /** @type {?} */
    DiagramComponent.prototype.metricColor;
    /** @type {?} */
    DiagramComponent.prototype.metricType;
    /** @type {?} */
    DiagramComponent.prototype.width;
    /** @type {?} */
    DiagramComponent.prototype.height;
    /** @type {?} */
    DiagramComponent.prototype.success;
    /** @type {?} */
    DiagramComponent.prototype.error;
    /** @type {?} */
    DiagramComponent.prototype.PADDING_WIDTH;
    /** @type {?} */
    DiagramComponent.prototype.PADDING_HEIGHT;
    /** @type {?} */
    DiagramComponent.prototype.diagram;
    /**
     * @type {?}
     * @private
     */
    DiagramComponent.prototype.diagramColorService;
    /**
     * @type {?}
     * @private
     */
    DiagramComponent.prototype.raphaelService;
    /**
     * @type {?}
     * @private
     */
    DiagramComponent.prototype.diagramsService;
}
//# sourceMappingURL=data:application/json;base64,
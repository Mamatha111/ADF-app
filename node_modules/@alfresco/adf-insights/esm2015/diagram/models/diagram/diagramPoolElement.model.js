/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DiagramLaneElementModel } from './diagramLaneElement.model';
export class DiagramPoolElementModel {
    /**
     * @param {?=} obj
     */
    constructor(obj) {
        this.lanes = [];
        if (obj) {
            this.height = obj.height;
            this.id = obj.id;
            this.name = obj.name;
            this.properties = obj.properties;
            this.width = obj.width;
            this.x = obj.x;
            this.y = obj.y;
            if (obj.lanes) {
                obj.lanes.forEach((lane) => {
                    this.lanes.push(new DiagramLaneElementModel(lane));
                });
            }
        }
    }
}
if (false) {
    /** @type {?} */
    DiagramPoolElementModel.prototype.height;
    /** @type {?} */
    DiagramPoolElementModel.prototype.id;
    /** @type {?} */
    DiagramPoolElementModel.prototype.name;
    /** @type {?} */
    DiagramPoolElementModel.prototype.properties;
    /** @type {?} */
    DiagramPoolElementModel.prototype.lanes;
    /** @type {?} */
    DiagramPoolElementModel.prototype.width;
    /** @type {?} */
    DiagramPoolElementModel.prototype.x;
    /** @type {?} */
    DiagramPoolElementModel.prototype.y;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbVBvb2xFbGVtZW50Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1pbnNpZ2h0cy8iLCJzb3VyY2VzIjpbImRpYWdyYW0vbW9kZWxzL2RpYWdyYW0vZGlhZ3JhbVBvb2xFbGVtZW50Lm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXJFLE1BQU0sT0FBTyx1QkFBdUI7Ozs7SUFVaEMsWUFBWSxHQUFTO1FBTHJCLFVBQUssR0FBOEIsRUFBRSxDQUFDO1FBTWxDLElBQUksR0FBRyxFQUFFO1lBQ0wsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztZQUN2QixJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDZixJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDZixJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUU7Z0JBQ1gsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUE2QixFQUFFLEVBQUU7b0JBQ2hELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDdkQsQ0FBQyxDQUFDLENBQUM7YUFDTjtTQUNKO0lBQ0wsQ0FBQztDQUNKOzs7SUF6QkcseUNBQWU7O0lBQ2YscUNBQVc7O0lBQ1gsdUNBQWE7O0lBQ2IsNkNBQWdCOztJQUNoQix3Q0FBc0M7O0lBQ3RDLHdDQUFjOztJQUNkLG9DQUFVOztJQUNWLG9DQUFVIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlhZ3JhbUxhbmVFbGVtZW50TW9kZWwgfSBmcm9tICcuL2RpYWdyYW1MYW5lRWxlbWVudC5tb2RlbCc7XG5cbmV4cG9ydCBjbGFzcyBEaWFncmFtUG9vbEVsZW1lbnRNb2RlbCB7XG4gICAgaGVpZ2h0OiBzdHJpbmc7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcHJvcGVydGllczogYW55O1xuICAgIGxhbmVzOiBEaWFncmFtTGFuZUVsZW1lbnRNb2RlbFtdID0gW107XG4gICAgd2lkdGg6IHN0cmluZztcbiAgICB4OiBudW1iZXI7XG4gICAgeTogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogYW55KSB7XG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gb2JqLmhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuaWQgPSBvYmouaWQ7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBvYmoubmFtZTtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcyA9IG9iai5wcm9wZXJ0aWVzO1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IG9iai53aWR0aDtcbiAgICAgICAgICAgIHRoaXMueCA9IG9iai54O1xuICAgICAgICAgICAgdGhpcy55ID0gb2JqLnk7XG4gICAgICAgICAgICBpZiAob2JqLmxhbmVzKSB7XG4gICAgICAgICAgICAgICAgb2JqLmxhbmVzLmZvckVhY2goKGxhbmU6IERpYWdyYW1MYW5lRWxlbWVudE1vZGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGFuZXMucHVzaChuZXcgRGlhZ3JhbUxhbmVFbGVtZW50TW9kZWwobGFuZSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl19
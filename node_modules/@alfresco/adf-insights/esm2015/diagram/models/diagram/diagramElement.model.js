/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DiagramElementPropertyModel } from './diagramElementProperty.model';
import { DiagramEventDefinitionModel } from './diagramEventDefinition.model';
export class DiagramElementModel {
    /**
     * @param {?=} obj
     */
    constructor(obj) {
        this.properties = [];
        this.dataType = '';
        this.taskType = '';
        if (obj) {
            this.completed = !!obj.completed;
            this.current = !!obj.current;
            this.height = obj.height || '';
            this.id = obj.id || '';
            this.name = obj.name || '';
            this.type = obj.type || '';
            this.width = obj.width || '';
            this.value = obj.value || '';
            this.x = obj.x || '';
            this.y = obj.y || '';
            this.taskType = obj.taskType || '';
            if (obj.properties) {
                obj.properties.forEach((property) => {
                    this.properties.push(new DiagramElementPropertyModel(property));
                });
            }
            this.dataType = obj.dataType || '';
            if (obj.eventDefinition) {
                this.eventDefinition = new DiagramEventDefinitionModel(obj.eventDefinition);
            }
        }
    }
}
if (false) {
    /** @type {?} */
    DiagramElementModel.prototype.completed;
    /** @type {?} */
    DiagramElementModel.prototype.current;
    /** @type {?} */
    DiagramElementModel.prototype.height;
    /** @type {?} */
    DiagramElementModel.prototype.id;
    /** @type {?} */
    DiagramElementModel.prototype.name;
    /** @type {?} */
    DiagramElementModel.prototype.type;
    /** @type {?} */
    DiagramElementModel.prototype.width;
    /** @type {?} */
    DiagramElementModel.prototype.value;
    /** @type {?} */
    DiagramElementModel.prototype.x;
    /** @type {?} */
    DiagramElementModel.prototype.y;
    /** @type {?} */
    DiagramElementModel.prototype.properties;
    /** @type {?} */
    DiagramElementModel.prototype.dataType;
    /** @type {?} */
    DiagramElementModel.prototype.eventDefinition;
    /** @type {?} */
    DiagramElementModel.prototype.taskType;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhZ3JhbUVsZW1lbnQubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9tb2RlbHMvZGlhZ3JhbS9kaWFncmFtRWxlbWVudC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM3RSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU3RSxNQUFNLE9BQU8sbUJBQW1COzs7O0lBZ0I1QixZQUFZLEdBQVM7UUFMckIsZUFBVSxHQUFrQyxFQUFFLENBQUM7UUFDL0MsYUFBUSxHQUFXLEVBQUUsQ0FBQztRQUV0QixhQUFRLEdBQVcsRUFBRSxDQUFDO1FBR2xCLElBQUksR0FBRyxFQUFFO1lBQ0wsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztZQUNqQyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO1lBQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7WUFDL0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7WUFDM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztZQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO1lBQzdCLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO1lBQ25DLElBQUksR0FBRyxDQUFDLFVBQVUsRUFBRTtnQkFDaEIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFxQyxFQUFFLEVBQUU7b0JBQzdELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksMkJBQTJCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDcEUsQ0FBQyxDQUFDLENBQUM7YUFDTjtZQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7WUFDbkMsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFO2dCQUNyQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksMkJBQTJCLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO2FBQy9FO1NBQ0o7SUFDTCxDQUFDO0NBQ0o7OztJQXZDRyx3Q0FBbUI7O0lBQ25CLHNDQUFpQjs7SUFDakIscUNBQWU7O0lBQ2YsaUNBQVc7O0lBQ1gsbUNBQWE7O0lBQ2IsbUNBQWE7O0lBQ2Isb0NBQWM7O0lBQ2Qsb0NBQWM7O0lBQ2QsZ0NBQVU7O0lBQ1YsZ0NBQVU7O0lBQ1YseUNBQStDOztJQUMvQyx1Q0FBc0I7O0lBQ3RCLDhDQUE2Qzs7SUFDN0MsdUNBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRGlhZ3JhbUVsZW1lbnRQcm9wZXJ0eU1vZGVsIH0gZnJvbSAnLi9kaWFncmFtRWxlbWVudFByb3BlcnR5Lm1vZGVsJztcbmltcG9ydCB7IERpYWdyYW1FdmVudERlZmluaXRpb25Nb2RlbCB9IGZyb20gJy4vZGlhZ3JhbUV2ZW50RGVmaW5pdGlvbi5tb2RlbCc7XG5cbmV4cG9ydCBjbGFzcyBEaWFncmFtRWxlbWVudE1vZGVsIHtcbiAgICBjb21wbGV0ZWQ6IGJvb2xlYW47XG4gICAgY3VycmVudDogYm9vbGVhbjtcbiAgICBoZWlnaHQ6IHN0cmluZztcbiAgICBpZDogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgd2lkdGg6IHN0cmluZztcbiAgICB2YWx1ZTogc3RyaW5nO1xuICAgIHg6IHN0cmluZztcbiAgICB5OiBzdHJpbmc7XG4gICAgcHJvcGVydGllczogRGlhZ3JhbUVsZW1lbnRQcm9wZXJ0eU1vZGVsW10gPSBbXTtcbiAgICBkYXRhVHlwZTogc3RyaW5nID0gJyc7XG4gICAgZXZlbnREZWZpbml0aW9uOiBEaWFncmFtRXZlbnREZWZpbml0aW9uTW9kZWw7XG4gICAgdGFza1R5cGU6IHN0cmluZyA9ICcnO1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogYW55KSB7XG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVkID0gISFvYmouY29tcGxldGVkO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gISFvYmouY3VycmVudDtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gb2JqLmhlaWdodCB8fCAnJztcbiAgICAgICAgICAgIHRoaXMuaWQgPSBvYmouaWQgfHwgJyc7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBvYmoubmFtZSB8fCAnJztcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IG9iai50eXBlIHx8ICcnO1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IG9iai53aWR0aCB8fCAnJztcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBvYmoudmFsdWUgfHwgJyc7XG4gICAgICAgICAgICB0aGlzLnggPSBvYmoueCB8fCAnJztcbiAgICAgICAgICAgIHRoaXMueSA9IG9iai55IHx8ICcnO1xuICAgICAgICAgICAgdGhpcy50YXNrVHlwZSA9IG9iai50YXNrVHlwZSB8fCAnJztcbiAgICAgICAgICAgIGlmIChvYmoucHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIG9iai5wcm9wZXJ0aWVzLmZvckVhY2goKHByb3BlcnR5OiBEaWFncmFtRWxlbWVudFByb3BlcnR5TW9kZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnB1c2gobmV3IERpYWdyYW1FbGVtZW50UHJvcGVydHlNb2RlbChwcm9wZXJ0eSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kYXRhVHlwZSA9IG9iai5kYXRhVHlwZSB8fCAnJztcbiAgICAgICAgICAgIGlmIChvYmouZXZlbnREZWZpbml0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudERlZmluaXRpb24gPSBuZXcgRGlhZ3JhbUV2ZW50RGVmaW5pdGlvbk1vZGVsKG9iai5ldmVudERlZmluaXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl19
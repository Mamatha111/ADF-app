/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Point } from './models/point';
import { RaphaelBase } from './raphael-base';
import { RaphaelService } from './raphael.service';
/**
 * Directive selectors without adf- prefix will be deprecated on 3.0.0
 */
export class RaphaelMultilineTextDirective extends RaphaelBase {
    /**
     * @param {?} elementRef
     * @param {?} raphaelService
     */
    constructor(elementRef, raphaelService) {
        super(elementRef, raphaelService);
        this.elementRef = elementRef;
        this.error = new EventEmitter();
        this.TEXT_PADDING = 3;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.text === null || this.text === undefined) {
            this.text = '';
        }
        this.draw(this.position, this.text);
    }
    /**
     * @param {?} position
     * @param {?} text
     * @return {?}
     */
    draw(position, text) {
        /** @type {?} */
        let textPaper = this.paper.text(position.x + this.TEXT_PADDING, position.y + this.TEXT_PADDING, text).attr({
            'text-anchor': 'middle',
            'font-family': 'Arial',
            'font-size': '11',
            'fill': '#373e48'
        });
        /** @type {?} */
        let formattedText = this.formatText(textPaper, text, this.elementWidth);
        textPaper.attr({
            'text': formattedText
        });
        textPaper.transform(this.transform);
        return textPaper;
    }
    /**
     * @private
     * @param {?} textPaper
     * @param {?} text
     * @param {?} elementWidth
     * @return {?}
     */
    formatText(textPaper, text, elementWidth) {
        /** @type {?} */
        let pText = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        textPaper.attr({
            'text': pText
        });
        /** @type {?} */
        let letterWidth = textPaper.getBBox().width / text.length;
        /** @type {?} */
        let removedLineBreaks = text.split('\n');
        /** @type {?} */
        let actualRowLength = 0;
        /** @type {?} */
        let formattedText = [];
        removedLineBreaks.forEach((sentence) => {
            /** @type {?} */
            let words = sentence.split(' ');
            words.forEach((word) => {
                /** @type {?} */
                let length = word.length;
                if (actualRowLength + (length * letterWidth) > elementWidth) {
                    formattedText.push('\n');
                    actualRowLength = 0;
                }
                actualRowLength += length * letterWidth;
                formattedText.push(word + ' ');
            });
            formattedText.push('\n');
            actualRowLength = 0;
        });
        return formattedText.join('');
    }
}
RaphaelMultilineTextDirective.decorators = [
    { type: Directive, args: [{ selector: 'adf-raphael-multiline-text, raphael-multiline-text' },] }
];
/** @nocollapse */
RaphaelMultilineTextDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: RaphaelService }
];
RaphaelMultilineTextDirective.propDecorators = {
    paper: [{ type: Input }],
    position: [{ type: Input }],
    transform: [{ type: Input }],
    text: [{ type: Input }],
    elementWidth: [{ type: Input }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.paper;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.position;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.transform;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.text;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.elementWidth;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.error;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.TEXT_PADDING;
    /** @type {?} */
    RaphaelMultilineTextDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFwaGFlbC1tdWx0aWxpbmUtdGV4dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWluc2lnaHRzLyIsInNvdXJjZXMiOlsiZGlhZ3JhbS9jb21wb25lbnRzL3JhcGhhZWwvcmFwaGFlbC1tdWx0aWxpbmUtdGV4dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7Ozs7QUFNbkQsTUFBTSxPQUFPLDZCQUE4QixTQUFRLFdBQVc7Ozs7O0lBcUIxRCxZQUFtQixVQUFzQixFQUM3QixjQUE4QjtRQUN0QyxLQUFLLENBQUMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBRm5CLGVBQVUsR0FBVixVQUFVLENBQVk7UUFKekMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFM0IsaUJBQVksR0FBRyxDQUFDLENBQUM7SUFLakIsQ0FBQzs7OztJQUVELFFBQVE7UUFDSixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQy9DLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1NBQ2xCO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7Ozs7SUFFRCxJQUFJLENBQUMsUUFBZSxFQUFFLElBQVk7O1lBQzFCLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN2RyxhQUFhLEVBQUUsUUFBUTtZQUN2QixhQUFhLEVBQUUsT0FBTztZQUN0QixXQUFXLEVBQUUsSUFBSTtZQUNqQixNQUFNLEVBQUUsU0FBUztTQUNwQixDQUFDOztZQUVFLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUN2RSxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQ1gsTUFBTSxFQUFFLGFBQWE7U0FDeEIsQ0FBQyxDQUFDO1FBQ0gsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEMsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQzs7Ozs7Ozs7SUFFTyxVQUFVLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxZQUFZOztZQUN4QyxLQUFLLEdBQUcsc0RBQXNEO1FBQ2xFLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDWCxNQUFNLEVBQUUsS0FBSztTQUNoQixDQUFDLENBQUM7O1lBQ0MsV0FBVyxHQUFHLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU07O1lBQ3JELGlCQUFpQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDOztZQUNwQyxlQUFlLEdBQUcsQ0FBQzs7WUFBRSxhQUFhLEdBQUcsRUFBRTtRQUMzQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTs7Z0JBQy9CLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUMvQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7O29CQUNmLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTTtnQkFDeEIsSUFBSSxlQUFlLEdBQUcsQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLEdBQUcsWUFBWSxFQUFFO29CQUN6RCxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUN6QixlQUFlLEdBQUcsQ0FBQyxDQUFDO2lCQUN2QjtnQkFDRCxlQUFlLElBQUksTUFBTSxHQUFHLFdBQVcsQ0FBQztnQkFDeEMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDbkMsQ0FBQyxDQUFDLENBQUM7WUFDSCxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pCLGVBQWUsR0FBRyxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7O1lBekVKLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxvREFBb0QsRUFBRTs7OztZQVJ6RCxVQUFVO1lBR3JCLGNBQWM7OztvQkFPbEIsS0FBSzt1QkFHTCxLQUFLO3dCQUdMLEtBQUs7bUJBR0wsS0FBSzsyQkFHTCxLQUFLO29CQUdMLE1BQU07Ozs7SUFmUCw4Q0FDVzs7SUFFWCxpREFDZ0I7O0lBRWhCLGtEQUNrQjs7SUFFbEIsNkNBQ2E7O0lBRWIscURBQ3FCOztJQUVyQiw4Q0FDMkI7O0lBRTNCLHFEQUFpQjs7SUFFTCxtREFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4vbW9kZWxzL3BvaW50JztcbmltcG9ydCB7IFJhcGhhZWxCYXNlIH0gZnJvbSAnLi9yYXBoYWVsLWJhc2UnO1xuaW1wb3J0IHsgUmFwaGFlbFNlcnZpY2UgfSBmcm9tICcuL3JhcGhhZWwuc2VydmljZSc7XG5cbi8qKlxuICogRGlyZWN0aXZlIHNlbGVjdG9ycyB3aXRob3V0IGFkZi0gcHJlZml4IHdpbGwgYmUgZGVwcmVjYXRlZCBvbiAzLjAuMFxuICovXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdhZGYtcmFwaGFlbC1tdWx0aWxpbmUtdGV4dCwgcmFwaGFlbC1tdWx0aWxpbmUtdGV4dCcgfSlcbmV4cG9ydCBjbGFzcyBSYXBoYWVsTXVsdGlsaW5lVGV4dERpcmVjdGl2ZSBleHRlbmRzIFJhcGhhZWxCYXNlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBASW5wdXQoKVxuICAgIHBhcGVyOiBhbnk7XG5cbiAgICBASW5wdXQoKVxuICAgIHBvc2l0aW9uOiBQb2ludDtcblxuICAgIEBJbnB1dCgpXG4gICAgdHJhbnNmb3JtOiBzdHJpbmc7XG5cbiAgICBASW5wdXQoKVxuICAgIHRleHQ6IHN0cmluZztcblxuICAgIEBJbnB1dCgpXG4gICAgZWxlbWVudFdpZHRoOiBudW1iZXI7XG5cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIFRFWFRfUEFERElORyA9IDM7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICAgICAgICAgICAgICByYXBoYWVsU2VydmljZTogUmFwaGFlbFNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudFJlZiwgcmFwaGFlbFNlcnZpY2UpO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICBpZiAodGhpcy50ZXh0ID09PSBudWxsIHx8IHRoaXMudGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnRleHQgPSAnJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRyYXcodGhpcy5wb3NpdGlvbiwgdGhpcy50ZXh0KTtcbiAgICB9XG5cbiAgICBkcmF3KHBvc2l0aW9uOiBQb2ludCwgdGV4dDogc3RyaW5nKSB7XG4gICAgICAgIGxldCB0ZXh0UGFwZXIgPSB0aGlzLnBhcGVyLnRleHQocG9zaXRpb24ueCArIHRoaXMuVEVYVF9QQURESU5HLCBwb3NpdGlvbi55ICsgdGhpcy5URVhUX1BBRERJTkcsIHRleHQpLmF0dHIoe1xuICAgICAgICAgICAgJ3RleHQtYW5jaG9yJzogJ21pZGRsZScsXG4gICAgICAgICAgICAnZm9udC1mYW1pbHknOiAnQXJpYWwnLFxuICAgICAgICAgICAgJ2ZvbnQtc2l6ZSc6ICcxMScsXG4gICAgICAgICAgICAnZmlsbCc6ICcjMzczZTQ4J1xuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgZm9ybWF0dGVkVGV4dCA9IHRoaXMuZm9ybWF0VGV4dCh0ZXh0UGFwZXIsIHRleHQsIHRoaXMuZWxlbWVudFdpZHRoKTtcbiAgICAgICAgdGV4dFBhcGVyLmF0dHIoe1xuICAgICAgICAgICAgJ3RleHQnOiBmb3JtYXR0ZWRUZXh0XG4gICAgICAgIH0pO1xuICAgICAgICB0ZXh0UGFwZXIudHJhbnNmb3JtKHRoaXMudHJhbnNmb3JtKTtcbiAgICAgICAgcmV0dXJuIHRleHRQYXBlcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZvcm1hdFRleHQodGV4dFBhcGVyLCB0ZXh0LCBlbGVtZW50V2lkdGgpIHtcbiAgICAgICAgbGV0IHBUZXh0ID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonO1xuICAgICAgICB0ZXh0UGFwZXIuYXR0cih7XG4gICAgICAgICAgICAndGV4dCc6IHBUZXh0XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgbGV0dGVyV2lkdGggPSB0ZXh0UGFwZXIuZ2V0QkJveCgpLndpZHRoIC8gdGV4dC5sZW5ndGg7XG4gICAgICAgIGxldCByZW1vdmVkTGluZUJyZWFrcyA9IHRleHQuc3BsaXQoJ1xcbicpO1xuICAgICAgICBsZXQgYWN0dWFsUm93TGVuZ3RoID0gMCwgZm9ybWF0dGVkVGV4dCA9IFtdO1xuICAgICAgICByZW1vdmVkTGluZUJyZWFrcy5mb3JFYWNoKChzZW50ZW5jZSkgPT4ge1xuICAgICAgICAgICAgbGV0IHdvcmRzID0gc2VudGVuY2Uuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgIHdvcmRzLmZvckVhY2goKHdvcmQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgbGVuZ3RoID0gd29yZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKGFjdHVhbFJvd0xlbmd0aCArIChsZW5ndGggKiBsZXR0ZXJXaWR0aCkgPiBlbGVtZW50V2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkVGV4dC5wdXNoKCdcXG4nKTtcbiAgICAgICAgICAgICAgICAgICAgYWN0dWFsUm93TGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWN0dWFsUm93TGVuZ3RoICs9IGxlbmd0aCAqIGxldHRlcldpZHRoO1xuICAgICAgICAgICAgICAgIGZvcm1hdHRlZFRleHQucHVzaCh3b3JkICsgJyAnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9ybWF0dGVkVGV4dC5wdXNoKCdcXG4nKTtcbiAgICAgICAgICAgIGFjdHVhbFJvd0xlbmd0aCA9IDA7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZm9ybWF0dGVkVGV4dC5qb2luKCcnKTtcbiAgICB9XG59XG4iXX0=
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
import { MOMENT_DATE_FORMATS, MomentDateAdapter, UserPreferencesService, UserPreferenceValues } from '@alfresco/adf-core';
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { DateAdapter, MAT_DATE_FORMATS } from '@angular/material';
import moment from 'moment-es6';
const ɵ0 = MOMENT_DATE_FORMATS;
export class DateRangeWidgetComponent {
    /**
     * @param {?} dateAdapter
     * @param {?} userPreferencesService
     */
    constructor(dateAdapter, userPreferencesService) {
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.FORMAT_DATE_ACTIVITI = 'YYYY-MM-DD';
        this.SHOW_FORMAT = 'DD/MM/YYYY';
        this.dateRangeChanged = new EventEmitter();
        this.startDatePicker = moment();
        this.endDatePicker = moment();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.userPreferencesService.select(UserPreferenceValues.Locale).subscribe((locale) => {
            this.dateAdapter.setLocale(locale);
        });
        /** @type {?} */
        let momentDateAdapter = (/** @type {?} */ (this.dateAdapter));
        momentDateAdapter.overrideDisplayFormat = this.SHOW_FORMAT;
        if (this.field) {
            if (this.field.value && this.field.value.startDate) {
                this.startDatePicker = moment(this.field.value.startDate, this.FORMAT_DATE_ACTIVITI);
            }
            if (this.field.value && this.field.value.endDate) {
                this.endDatePicker = moment(this.field.value.endDate, this.FORMAT_DATE_ACTIVITI);
            }
        }
        /** @type {?} */
        let startDateControl = new FormControl(this.startDatePicker);
        startDateControl.setValidators(Validators.required);
        this.dateRange.addControl('startDate', startDateControl);
        /** @type {?} */
        let endDateControl = new FormControl(this.endDatePicker);
        endDateControl.setValidators(Validators.required);
        this.dateRange.addControl('endDate', endDateControl);
        this.dateRange.setValidators(this.dateCheck);
        this.dateRange.valueChanges.subscribe(() => this.onGroupValueChanged());
    }
    /**
     * @return {?}
     */
    onGroupValueChanged() {
        if (this.dateRange.valid) {
            /** @type {?} */
            let dateStart = this.convertToMomentDateWithTime(this.dateRange.controls.startDate.value);
            /** @type {?} */
            let endStart = this.convertToMomentDateWithTime(this.dateRange.controls.endDate.value);
            this.dateRangeChanged.emit({ startDate: dateStart, endDate: endStart });
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    convertToMomentDateWithTime(date) {
        return moment(date, this.FORMAT_DATE_ACTIVITI, true).format(this.FORMAT_DATE_ACTIVITI) + 'T00:00:00.000Z';
    }
    /**
     * @param {?} formControl
     * @return {?}
     */
    dateCheck(formControl) {
        /** @type {?} */
        let startDate = moment(formControl.get('startDate').value);
        /** @type {?} */
        let endDate = moment(formControl.get('endDate').value);
        /** @type {?} */
        let isAfterCheck = startDate.isAfter(endDate);
        return isAfterCheck ? { 'greaterThan': true } : null;
    }
    /**
     * @return {?}
     */
    isStartDateGreaterThanEndDate() {
        return this.dateRange && this.dateRange.errors && this.dateRange.errors.greaterThan;
    }
    /**
     * @return {?}
     */
    isStartDateEmpty() {
        return this.dateRange && this.dateRange.controls.startDate && !this.dateRange.controls.startDate.valid;
    }
}
DateRangeWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-date-range-widget',
                template: "<label>{{field.nameKey | translate}}</label><br>\n<div [formGroup]=\"dateRange\">\n    <small *ngIf=\"isStartDateGreaterThanEndDate()\" class=\"adf-date-range-analytics-text-danger\">\n       {{'DATE-WIDGET.MESSAGES.START-LESS-THAN-END-DATE' | translate}}\n    </small>\n    <small *ngIf=\"isStartDateEmpty()\" class=\"adf-date-range-analytics-text-danger\">\n       {{'DATE-WIDGET.MESSAGES.START-DATE-REQUIRED' | translate}}\n    </small>\n\n            <mat-grid-list cols=\"2\" rowHeight=\"80px\">\n                <mat-grid-tile>\n                    <mat-form-field>\n                        <input\n                            matInput\n                            [min]=\"minDate\"\n                            [max]=\"maxDate\"\n                            formControlName=\"startDate\"\n                            [matDatepicker]=\"startDate\"\n                            [value]=\"startDatePicker\"\n                            (keydown)=\"true\"\n                            (dateChange)=\"onGroupValueChanged()\"\n                            placeholder=\"{{'DATE-WIDGET.START-DATE' | translate}}\"\n                            id=\"startDate_id\"\n                            required>\n                        <mat-datepicker-toggle matSuffix [for]=\"startDate\" ></mat-datepicker-toggle>\n                    </mat-form-field>\n                    <mat-datepicker\n                        #startDate\n                        [touchUi]=\"true\">\n                    </mat-datepicker>\n                </mat-grid-tile>\n                <mat-grid-tile>\n                    <mat-form-field>\n                        <input\n                            matInput\n                            [min]=\"minDate\"\n                            [max]=\"maxDate\"\n                            formControlName=\"endDate\"\n                            [matDatepicker]=\"endDate\"\n                            [value]=\"endDatePicker\"\n                            (keydown)=\"true\"\n                            (dateChange)=\"onGroupValueChanged()\"\n                            placeholder=\"{{'DATE-WIDGET.END-DATE' | translate}}\"\n                            id=\"endDate_id\"\n                            required>\n                        <mat-datepicker-toggle matSuffix [for]=\"endDate\" ></mat-datepicker-toggle>\n                    </mat-form-field>\n                    <mat-datepicker\n                        #endDate\n                        [touchUi]=\"true\">\n                    </mat-datepicker>\n                </mat-grid-tile>\n            </mat-grid-list>\n</div>\n",
                providers: [
                    { provide: DateAdapter, useClass: MomentDateAdapter },
                    { provide: MAT_DATE_FORMATS, useValue: ɵ0 }
                ],
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
DateRangeWidgetComponent.ctorParameters = () => [
    { type: DateAdapter },
    { type: UserPreferencesService }
];
DateRangeWidgetComponent.propDecorators = {
    dateRange: [{ type: Input, args: ['group',] }],
    field: [{ type: Input }],
    dateRangeChanged: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    DateRangeWidgetComponent.prototype.FORMAT_DATE_ACTIVITI;
    /** @type {?} */
    DateRangeWidgetComponent.prototype.SHOW_FORMAT;
    /** @type {?} */
    DateRangeWidgetComponent.prototype.dateRange;
    /** @type {?} */
    DateRangeWidgetComponent.prototype.field;
    /** @type {?} */
    DateRangeWidgetComponent.prototype.dateRangeChanged;
    /** @type {?} */
    DateRangeWidgetComponent.prototype.minDate;
    /** @type {?} */
    DateRangeWidgetComponent.prototype.maxDate;
    /** @type {?} */
    DateRangeWidgetComponent.prototype.startDatePicker;
    /** @type {?} */
    DateRangeWidgetComponent.prototype.endDatePicker;
    /**
     * @type {?}
     * @private
     */
    DateRangeWidgetComponent.prototype.dateAdapter;
    /**
     * @type {?}
     * @private
     */
    DateRangeWidgetComponent.prototype.userPreferencesService;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,